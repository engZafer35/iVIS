
evk_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013cf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f0  08013e80  08013e80  00023e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014770  08014770  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08014770  08014770  00024770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014778  08014778  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014778  08014778  00024778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801477c  0801477c  0002477c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08014780  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000b618  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b6b0  2000b6b0  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000a39b8  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a440  00000000  00000000  000d3a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f0  00000000  00000000  000ddec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020c8  00000000  00000000  000e02b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035980  00000000  00000000  000e2378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008b15c  00000000  00000000  00117cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e99d3  00000000  00000000  001a2e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0028c827  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009b64  00000000  00000000  0028c87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013e68 	.word	0x08013e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08013e68 	.word	0x08013e68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000b4 	.word	0x200000b4
 80005a8:	20000108 	.word	0x20000108

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b09a      	sub	sp, #104	; 0x68
 80005b0:	af00      	add	r7, sp, #0
    MacAddr macAddr;
    Ipv4Addr ipv4Addr;


	   //TCP/IP stack initialization
    error = netInit();
 80005b2:	f002 f899 	bl	80026e8 <netInit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    if(error)
 80005bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d005      	beq.n	80005d0 <MX_FREERTOS_Init+0x24>
    {
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ca:	4848      	ldr	r0, [pc, #288]	; (80006ec <MX_FREERTOS_Init+0x140>)
 80005cc:	f00e fbdc 	bl	800ed88 <HAL_GPIO_WritePin>
        //Debug message
//        TRACE_ERROR("Failed to initialize TCP/IP stack!\r\n");
    }

    interface = &netInterface[0];
 80005d0:	4b47      	ldr	r3, [pc, #284]	; (80006f0 <MX_FREERTOS_Init+0x144>)
 80005d2:	663b      	str	r3, [r7, #96]	; 0x60

    //Set interface name
    netSetInterfaceName(interface, APP_IF_NAME);
 80005d4:	4947      	ldr	r1, [pc, #284]	; (80006f4 <MX_FREERTOS_Init+0x148>)
 80005d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80005d8:	f002 f974 	bl	80028c4 <netSetInterfaceName>
    //Set host name
    netSetHostname(interface, APP_HOST_NAME);
 80005dc:	4946      	ldr	r1, [pc, #280]	; (80006f8 <MX_FREERTOS_Init+0x14c>)
 80005de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80005e0:	f002 f992 	bl	8002908 <netSetHostname>
    //Set host MAC address
    macStringToAddr(APP_MAC_ADDR, &macAddr);
 80005e4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e8:	4619      	mov	r1, r3
 80005ea:	4844      	ldr	r0, [pc, #272]	; (80006fc <MX_FREERTOS_Init+0x150>)
 80005ec:	f001 fc06 	bl	8001dfc <macStringToAddr>
    netSetMacAddr(interface, &macAddr);
 80005f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005f4:	4619      	mov	r1, r3
 80005f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80005f8:	f002 f93c 	bl	8002874 <netSetMacAddr>
    //Select the relevant network adapter

    netSetDriver(interface, &enc28j60Driver);
 80005fc:	4940      	ldr	r1, [pc, #256]	; (8000700 <MX_FREERTOS_Init+0x154>)
 80005fe:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000600:	f002 f9a4 	bl	800294c <netSetDriver>
    netSetSpiDriver(interface, &spiDriver);
 8000604:	493f      	ldr	r1, [pc, #252]	; (8000704 <MX_FREERTOS_Init+0x158>)
 8000606:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000608:	f002 f9be 	bl	8002988 <netSetSpiDriver>
    netSetExtIntDriver(interface, &extIntDriver);
 800060c:	493e      	ldr	r1, [pc, #248]	; (8000708 <MX_FREERTOS_Init+0x15c>)
 800060e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000610:	f002 f9d8 	bl	80029c4 <netSetExtIntDriver>

    //Initialize network interface
    error = netConfigInterface(interface);
 8000614:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000616:	f002 f9f3 	bl	8002a00 <netConfigInterface>
 800061a:	4603      	mov	r3, r0
 800061c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    //Any error to report?
    if(error)
 8000620:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000624:	2b00      	cmp	r3, #0
 8000626:	d005      	beq.n	8000634 <MX_FREERTOS_Init+0x88>
    {
       //Debug message
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	482f      	ldr	r0, [pc, #188]	; (80006ec <MX_FREERTOS_Init+0x140>)
 8000630:	f00e fbaa 	bl	800ed88 <HAL_GPIO_WritePin>
//       TRACE_ERROR("Failed to configure interface %s!\r\n", interface->name);
    }

   //Set IPv4 host address
   ipv4StringToAddr(APP_IPV4_HOST_ADDR, &ipv4Addr);
 8000634:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000638:	4619      	mov	r1, r3
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <MX_FREERTOS_Init+0x160>)
 800063c:	f00c fed0 	bl	800d3e0 <ipv4StringToAddr>
   ipv4SetHostAddr(interface, ipv4Addr);
 8000640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000642:	4619      	mov	r1, r3
 8000644:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000646:	f00c fa56 	bl	800caf6 <ipv4SetHostAddr>

   //Set subnet mask
   ipv4StringToAddr(APP_IPV4_SUBNET_MASK, &ipv4Addr);
 800064a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800064e:	4619      	mov	r1, r3
 8000650:	482f      	ldr	r0, [pc, #188]	; (8000710 <MX_FREERTOS_Init+0x164>)
 8000652:	f00c fec5 	bl	800d3e0 <ipv4StringToAddr>
   ipv4SetSubnetMask(interface, ipv4Addr);
 8000656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000658:	4619      	mov	r1, r3
 800065a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800065c:	f00c fa9a 	bl	800cb94 <ipv4SetSubnetMask>

   //Set default gateway
   ipv4StringToAddr(APP_IPV4_DEFAULT_GATEWAY, &ipv4Addr);
 8000660:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000664:	4619      	mov	r1, r3
 8000666:	482b      	ldr	r0, [pc, #172]	; (8000714 <MX_FREERTOS_Init+0x168>)
 8000668:	f00c feba 	bl	800d3e0 <ipv4StringToAddr>
   ipv4SetDefaultGateway(interface, ipv4Addr);
 800066c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800066e:	4619      	mov	r1, r3
 8000670:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000672:	f00c fac9 	bl	800cc08 <ipv4SetDefaultGateway>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <MX_FREERTOS_Init+0x16c>)
 8000678:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f00f fe1a 	bl	80102ca <osThreadCreate>
 8000696:	4603      	mov	r3, r0
 8000698:	4a20      	ldr	r2, [pc, #128]	; (800071c <MX_FREERTOS_Init+0x170>)
 800069a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(secondTask, secondTaskLoop, osPriorityNormal, 0, 512);
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_FREERTOS_Init+0x174>)
 800069e:	f107 041c 	add.w	r4, r7, #28
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(secondTask), NULL);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f00f fe07 	bl	80102ca <osThreadCreate>
 80006bc:	4603      	mov	r3, r0
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <MX_FREERTOS_Init+0x170>)
 80006c0:	6013      	str	r3, [r2, #0]

  osThreadDef(thirdTask, thirdTaskLoop, osPriorityNormal, 0, 512);
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_FREERTOS_Init+0x178>)
 80006c4:	463c      	mov	r4, r7
 80006c6:	461d      	mov	r5, r3
 80006c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(thirdTask), NULL);
 80006d4:	463b      	mov	r3, r7
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f00f fdf6 	bl	80102ca <osThreadCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a0e      	ldr	r2, [pc, #56]	; (800071c <MX_FREERTOS_Init+0x170>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

}
 80006e4:	bf00      	nop
 80006e6:	3768      	adds	r7, #104	; 0x68
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bdb0      	pop	{r4, r5, r7, pc}
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	20009258 	.word	0x20009258
 80006f4:	08013ea4 	.word	0x08013ea4
 80006f8:	08013eac 	.word	0x08013eac
 80006fc:	08013ec0 	.word	0x08013ec0
 8000700:	08014570 	.word	0x08014570
 8000704:	080145bc 	.word	0x080145bc
 8000708:	080145b0 	.word	0x080145b0
 800070c:	08013ed4 	.word	0x08013ed4
 8000710:	08013ee4 	.word	0x08013ee4
 8000714:	08013ef4 	.word	0x08013ef4
 8000718:	08013f04 	.word	0x08013f04
 800071c:	200087a8 	.word	0x200087a8
 8000720:	08013f20 	.word	0x08013f20
 8000724:	08013f3c 	.word	0x08013f3c

08000728 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b0ba      	sub	sp, #232	; 0xe8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */

    int socket_desc;
    struct sockaddr_in server_addr;
    char server_message[100] = "";
 8000730:	2300      	movs	r3, #0
 8000732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000734:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000738:	2260      	movs	r2, #96	; 0x60
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f012 f9e2 	bl	8012b06 <memset>
    char client_message[100] = "zafer";
 8000742:	4a39      	ldr	r2, [pc, #228]	; (8000828 <StartDefaultTask+0x100>)
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074c:	6018      	str	r0, [r3, #0]
 800074e:	3304      	adds	r3, #4
 8000750:	8019      	strh	r1, [r3, #0]
 8000752:	f107 030e 	add.w	r3, r7, #14
 8000756:	225e      	movs	r2, #94	; 0x5e
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f012 f9d3 	bl	8012b06 <memset>
    int i = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    osDelayTask(500);
 8000766:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076a:	f000 fdb0 	bl	80012ce <osDelayTask>

    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	2002      	movs	r0, #2
 8000774:	f000 ff2e 	bl	80015d4 <socket>
 8000778:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

    if(socket_desc < 0){
 800077c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000780:	2b00      	cmp	r3, #0
 8000782:	db4d      	blt.n	8000820 <StartDefaultTask+0xf8>
        return ;
    }

    // Set port and IP the same as server-side:
    server_addr.sin_family = AF_INET;
 8000784:	2302      	movs	r3, #2
 8000786:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
    server_addr.sin_port = htons(2005);
 800078a:	f240 70d5 	movw	r0, #2005	; 0x7d5
 800078e:	f000 fcd4 	bl	800113a <swapInt16>
 8000792:	4603      	mov	r3, r0
 8000794:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
    server_addr.sin_addr.s_addr = inet_addr("192.168.0.88");
 8000798:	4824      	ldr	r0, [pc, #144]	; (800082c <StartDefaultTask+0x104>)
 800079a:	f001 f8e9 	bl	8001970 <inet_addr>
 800079e:	4603      	mov	r3, r0
 80007a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    // Send connection request to server:
    if(connect(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)
 80007a4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80007a8:	2210      	movs	r2, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80007b0:	f000 ffa4 	bl	80016fc <connect>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da04      	bge.n	80007c4 <StartDefaultTask+0x9c>
    {
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	481c      	ldr	r0, [pc, #112]	; (8000830 <StartDefaultTask+0x108>)
 80007c0:	f00e fafb 	bl	800edba <HAL_GPIO_TogglePin>
    }
    printf("Connected with server successfully\n");
 80007c4:	481b      	ldr	r0, [pc, #108]	; (8000834 <StartDefaultTask+0x10c>)
 80007c6:	f012 fd19 	bl	80131fc <puts>

  for(;;)
  {
      sprintf(client_message, "--> Client STM Msg %d", i++);
 80007ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80007d4:	f107 0008 	add.w	r0, r7, #8
 80007d8:	461a      	mov	r2, r3
 80007da:	4917      	ldr	r1, [pc, #92]	; (8000838 <StartDefaultTask+0x110>)
 80007dc:	f012 fd16 	bl	801320c <siprintf>
      if(send(socket_desc, client_message, strlen(client_message), 0) < 0)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcf3 	bl	80001d0 <strlen>
 80007ea:	4602      	mov	r2, r0
 80007ec:	f107 0108 	add.w	r1, r7, #8
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80007f6:	f001 f871 	bl	80018dc <send>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da05      	bge.n	800080c <StartDefaultTask+0xe4>
      {
          HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000806:	480a      	ldr	r0, [pc, #40]	; (8000830 <StartDefaultTask+0x108>)
 8000808:	f00e fabe 	bl	800ed88 <HAL_GPIO_WritePin>
//      if(recv(socket_desc, server_message, sizeof(server_message), 0) < 0)
//      {
//          HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
//      }

	  HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 800080c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <StartDefaultTask+0x108>)
 8000812:	f00e fad2 	bl	800edba <HAL_GPIO_TogglePin>
	  osDelayTask(500);
 8000816:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081a:	f000 fd58 	bl	80012ce <osDelayTask>
      sprintf(client_message, "--> Client STM Msg %d", i++);
 800081e:	e7d4      	b.n	80007ca <StartDefaultTask+0xa2>
        return ;
 8000820:	bf00      	nop
  }

  /* USER CODE END StartDefaultTask */
}
 8000822:	37e8      	adds	r7, #232	; 0xe8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08013fa4 	.word	0x08013fa4
 800082c:	08013f58 	.word	0x08013f58
 8000830:	40020c00 	.word	0x40020c00
 8000834:	08013f68 	.word	0x08013f68
 8000838:	08013f8c 	.word	0x08013f8c

0800083c <secondTaskLoop>:
//  /* USER CODE END StartDefaultTask */
//}

/* ... Do other things. */
void secondTaskLoop(void const * argument)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b09f      	sub	sp, #124	; 0x7c
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    int socket_desc, client_sock, client_size;
    struct sockaddr_in server_addr, client_addr;
    char server_message[32] = "", client_message[32] = "1";
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
 8000848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]
 800085c:	2331      	movs	r3, #49	; 0x31
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]
    int i;

    osDelayTask(500);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f000 fd29 	bl	80012ce <osDelayTask>

    socket_desc = socket(AF_INET, SOCK_STREAM, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f000 fea7 	bl	80015d4 <socket>
 8000886:	6738      	str	r0, [r7, #112]	; 0x70

    if(socket_desc < 0)
 8000888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800088a:	2b00      	cmp	r3, #0
 800088c:	da02      	bge.n	8000894 <secondTaskLoop+0x58>
    {
        printf("Error while creating socket\n");
 800088e:	4835      	ldr	r0, [pc, #212]	; (8000964 <secondTaskLoop+0x128>)
 8000890:	f012 fcb4 	bl	80131fc <puts>
    }

    // Set port and IP:
    server_addr.sin_family = AF_INET;
 8000894:	2302      	movs	r3, #2
 8000896:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    server_addr.sin_port = htons(2000);
 800089a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800089e:	f000 fc4c 	bl	800113a <swapInt16>
 80008a2:	4603      	mov	r3, r0
 80008a4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    server_addr.sin_addr.s_addr = inet_addr("192.168.0.35");
 80008a8:	482f      	ldr	r0, [pc, #188]	; (8000968 <secondTaskLoop+0x12c>)
 80008aa:	f001 f861 	bl	8001970 <inet_addr>
 80008ae:	4603      	mov	r3, r0
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c

    // Bind to the set port and IP:
    if(bind(socket_desc, (struct sockaddr*)&server_addr, sizeof(server_addr))<0){
 80008b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008b6:	2210      	movs	r2, #16
 80008b8:	4619      	mov	r1, r3
 80008ba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80008bc:	f000 febc 	bl	8001638 <bind>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da02      	bge.n	80008cc <secondTaskLoop+0x90>
        printf("Couldn't bind to the port\n");
 80008c6:	4829      	ldr	r0, [pc, #164]	; (800096c <secondTaskLoop+0x130>)
 80008c8:	f012 fc98 	bl	80131fc <puts>
    }

    // Listen for clients:
    if(listen(socket_desc, 1) < 0){
 80008cc:	2101      	movs	r1, #1
 80008ce:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80008d0:	f000 ff76 	bl	80017c0 <listen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	da02      	bge.n	80008e0 <secondTaskLoop+0xa4>
        printf("Error while listening\n");
 80008da:	4825      	ldr	r0, [pc, #148]	; (8000970 <secondTaskLoop+0x134>)
 80008dc:	f012 fc8e 	bl	80131fc <puts>
    }

    // Accept an incoming connection:
    client_size = sizeof(client_addr);
 80008e0:	2310      	movs	r3, #16
 80008e2:	66bb      	str	r3, [r7, #104]	; 0x68
    client_sock = accept(socket_desc, (struct sockaddr*)&client_addr, &client_size);
 80008e4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80008e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ec:	4619      	mov	r1, r3
 80008ee:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80008f0:	f000 ff98 	bl	8001824 <accept>
 80008f4:	66f8      	str	r0, [r7, #108]	; 0x6c

    printf("Client connected at IP: %s and port: %i\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
 80008f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80008f8:	f001 f852 	bl	80019a0 <inet_ntoa>
 80008fc:	4604      	mov	r4, r0
 80008fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fc19 	bl	800113a <swapInt16>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	4621      	mov	r1, r4
 800090e:	4819      	ldr	r0, [pc, #100]	; (8000974 <secondTaskLoop+0x138>)
 8000910:	f012 fbee 	bl	80130f0 <iprintf>

    while(1)
    {
        sprintf(server_message, "--> Server STM Msg %d ", i++);
 8000914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	677a      	str	r2, [r7, #116]	; 0x74
 800091a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800091e:	461a      	mov	r2, r3
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <secondTaskLoop+0x13c>)
 8000922:	f012 fc73 	bl	801320c <siprintf>
        if (send(client_sock, server_message, strlen(server_message), 0) < 0)
 8000926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fc50 	bl	80001d0 <strlen>
 8000930:	4602      	mov	r2, r0
 8000932:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000936:	2300      	movs	r3, #0
 8000938:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800093a:	f000 ffcf 	bl	80018dc <send>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	da05      	bge.n	8000950 <secondTaskLoop+0x114>
        {
            HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <secondTaskLoop+0x140>)
 800094c:	f00e fa1c 	bl	800ed88 <HAL_GPIO_WritePin>
//        if (recv(client_sock, client_message, sizeof(client_message), 0) < 0)
//        {
//            HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, TRUE);
//        }

        HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000950:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <secondTaskLoop+0x140>)
 8000956:	f00e fa30 	bl	800edba <HAL_GPIO_TogglePin>

        osDelayTask(500);
 800095a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800095e:	f000 fcb6 	bl	80012ce <osDelayTask>
        sprintf(server_message, "--> Server STM Msg %d ", i++);
 8000962:	e7d7      	b.n	8000914 <secondTaskLoop+0xd8>
 8000964:	08014008 	.word	0x08014008
 8000968:	08013ed4 	.word	0x08013ed4
 800096c:	08014024 	.word	0x08014024
 8000970:	08014040 	.word	0x08014040
 8000974:	08014058 	.word	0x08014058
 8000978:	08014084 	.word	0x08014084
 800097c:	40020c00 	.word	0x40020c00

08000980 <thirdTaskLoop>:
    close(socket_desc);
}

#include "core/ping.h"
void thirdTaskLoop(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
 8000986:	6078      	str	r0, [r7, #4]
    error_t err = ERROR_FAILURE;
 8000988:	2301      	movs	r3, #1
 800098a:	82fb      	strh	r3, [r7, #22]
    IpAddr ip;

    osDelayTask(500);
 800098c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000990:	f000 fc9d 	bl	80012ce <osDelayTask>

    ip.length = sizeof(Ipv4Addr);
 8000994:	2304      	movs	r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
    ip.ipv4Addr  = IPV4_ADDR(192,168, 0, 88);
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <thirdTaskLoop+0x4c>)
 800099a:	613b      	str	r3, [r7, #16]

    while(1)
    {
        err = ping(&netInterface[0], &ip, 32, 0xFF, 500, NULL);
 800099c:	f107 010c 	add.w	r1, r7, #12
 80009a0:	2300      	movs	r3, #0
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	23ff      	movs	r3, #255	; 0xff
 80009ac:	2220      	movs	r2, #32
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <thirdTaskLoop+0x50>)
 80009b0:	f003 fac6 	bl	8003f40 <ping>
 80009b4:	4603      	mov	r3, r0
 80009b6:	82fb      	strh	r3, [r7, #22]

        HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80009b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <thirdTaskLoop+0x54>)
 80009be:	f00e f9fc 	bl	800edba <HAL_GPIO_TogglePin>
        osDelay(600);
 80009c2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80009c6:	f00f fccc 	bl	8010362 <osDelay>
        err = ping(&netInterface[0], &ip, 32, 0xFF, 500, NULL);
 80009ca:	e7e7      	b.n	800099c <thirdTaskLoop+0x1c>
 80009cc:	5800a8c0 	.word	0x5800a8c0
 80009d0:	20009258 	.word	0x20009258
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x108>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a3a      	ldr	r2, [pc, #232]	; (8000ae0 <MX_GPIO_Init+0x108>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a33      	ldr	r2, [pc, #204]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_GPIO_Init+0x108>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2110      	movs	r1, #16
 8000a62:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x10c>)
 8000a64:	f00e f990 	bl	800ed88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <MX_GPIO_Init+0x110>)
 8000a70:	f00e f98a 	bl	800ed88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CS_Pin;
 8000a74:	2310      	movs	r3, #16
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENC_CS_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <MX_GPIO_Init+0x10c>)
 8000a8c:	f00d ffe0 	bl	800ea50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_INT_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INT_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480f      	ldr	r0, [pc, #60]	; (8000ae4 <MX_GPIO_Init+0x10c>)
 8000aa6:	f00d ffd3 	bl	800ea50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8000aaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <MX_GPIO_Init+0x110>)
 8000ac4:	f00d ffc4 	bl	800ea50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2105      	movs	r1, #5
 8000acc:	2017      	movs	r0, #23
 8000ace:	f00d ff95 	bl	800e9fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad2:	2017      	movs	r0, #23
 8000ad4:	f00d ffae 	bl	800ea34 <HAL_NVIC_EnableIRQ>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af0:	f00d fe66 	bl	800e7c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af4:	f000 f82a 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af8:	f7ff ff6e 	bl	80009d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000afc:	f000 f8a8 	bl	8000c50 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b00:	f000 f8dc 	bl	8000cbc <MX_SPI2_Init>

   /* Notify user about the network interface config */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000b04:	f7ff fd52 	bl	80005ac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000b08:	f00f fbd8 	bl	80102bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000b0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <main+0x5c>)
 8000b12:	f00e f952 	bl	800edba <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); HAL_Delay(500);
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	480b      	ldr	r0, [pc, #44]	; (8000b48 <main+0x5c>)
 8000b1c:	f00e f94d 	bl	800edba <HAL_GPIO_TogglePin>
 8000b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b24:	f00d fe8e 	bl	800e844 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <main+0x5c>)
 8000b2e:	f00e f944 	bl	800edba <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); HAL_Delay(500);
 8000b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <main+0x5c>)
 8000b38:	f00e f93f 	bl	800edba <HAL_GPIO_TogglePin>
 8000b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b40:	f00d fe80 	bl	800e844 <HAL_Delay>

  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x58>
 8000b46:	bf00      	nop
 8000b48:	40020c00 	.word	0x40020c00

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	; 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	; 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f011 ffd3 	bl	8012b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc0:	23a8      	movs	r3, #168	; 0xa8
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00e f925 	bl	800ee20 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bdc:	f000 f832 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2105      	movs	r1, #5
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00e fb86 	bl	800f310 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c0a:	f000 f81b 	bl	8000c44 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	; 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d101      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c32:	f00d fde7 	bl	800e804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40010000 	.word	0x40010000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2210      	movs	r2, #16
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f00e fd4f 	bl	800f744 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f7ff ffca 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200090d8 	.word	0x200090d8
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <MX_SPI2_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000d08:	220a      	movs	r2, #10
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_SPI2_Init+0x64>)
 8000d0e:	f00e fd19 	bl	800f744 <HAL_SPI_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d18:	f7ff ff94 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20009080 	.word	0x20009080
 8000d24:	40003800 	.word	0x40003800

08000d28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a32      	ldr	r2, [pc, #200]	; (8000e10 <HAL_SPI_MspInit+0xe8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12c      	bne.n	8000da4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	4b31      	ldr	r3, [pc, #196]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a30      	ldr	r2, [pc, #192]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b2e      	ldr	r3, [pc, #184]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d70:	f043 0302 	orr.w	r3, r3, #2
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b27      	ldr	r3, [pc, #156]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d82:	2338      	movs	r3, #56	; 0x38
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d92:	2305      	movs	r3, #5
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481e      	ldr	r0, [pc, #120]	; (8000e18 <HAL_SPI_MspInit+0xf0>)
 8000d9e:	f00d fe57 	bl	800ea50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000da2:	e031      	b.n	8000e08 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_SPI_MspInit+0xf4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0xec>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000de6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0xf0>)
 8000e04:	f00d fe24 	bl	800ea50 <HAL_GPIO_Init>
}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	; 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40003800 	.word	0x40003800

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_MspInit+0x54>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <HAL_MspInit+0x54>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_MspInit+0x54>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_MspInit+0x54>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_MspInit+0x54>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_MspInit+0x54>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	210f      	movs	r1, #15
 8000e62:	f06f 0001 	mvn.w	r0, #1
 8000e66:	f00d fdc9 	bl	800e9fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2019      	movs	r0, #25
 8000e8e:	f00d fdb5 	bl	800e9fc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e92:	2019      	movs	r0, #25
 8000e94:	f00d fdce 	bl	800ea34 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <HAL_InitTick+0xa4>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_InitTick+0xa4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_InitTick+0xa4>)
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb4:	f107 0210 	add.w	r2, r7, #16
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00e fc0e 	bl	800f6e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ec4:	f00e fbf8 	bl	800f6b8 <HAL_RCC_GetPCLK2Freq>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <HAL_InitTick+0xa8>)
 8000ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed6:	0c9b      	lsrs	r3, r3, #18
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_InitTick+0xac>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <HAL_InitTick+0xb0>)
 8000ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_InitTick+0xac>)
 8000ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ee8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_InitTick+0xac>)
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <HAL_InitTick+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_InitTick+0xac>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_InitTick+0xac>)
 8000efe:	f00e ff17 	bl	800fd30 <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d104      	bne.n	8000f12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_InitTick+0xac>)
 8000f0a:	f00e ff6b 	bl	800fde4 <HAL_TIM_Base_Start_IT>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3730      	adds	r7, #48	; 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	20009130 	.word	0x20009130
 8000f28:	40010000 	.word	0x40010000

08000f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <NMI_Handler+0x4>

08000f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <HardFault_Handler+0x4>

08000f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <MemManage_Handler+0x4>

08000f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <BusFault_Handler+0x4>

08000f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler+0x4>

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f5c:	2020      	movs	r0, #32
 8000f5e:	f00d ff47 	bl	800edf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f6e:	f00e ffa9 	bl	800fec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20009130 	.word	0x20009130

08000f7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00a      	b.n	8000fa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f8e:	f3af 8000 	nop.w
 8000f92:	4601      	mov	r1, r0
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	b2ca      	uxtb	r2, r1
 8000f9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbf0      	blt.n	8000f8e <_read+0x12>
	}

return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e009      	b.n	8000fdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf1      	blt.n	8000fc8 <_write+0x12>
	}
	return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <_sbrk+0x5c>)
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <_sbrk+0x60>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <_sbrk+0x64>)
 8001076:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <_sbrk+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	429a      	cmp	r2, r3
 8001086:	d207      	bcs.n	8001098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001088:	f011 fc5a 	bl	8012940 <__errno>
 800108c:	4603      	mov	r3, r0
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001096:	e009      	b.n	80010ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <_sbrk+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <_sbrk+0x64>)
 80010a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20020000 	.word	0x20020000
 80010b8:	00000400 	.word	0x00000400
 80010bc:	20000308 	.word	0x20000308
 80010c0:	2000b6b0 	.word	0x2000b6b0

080010c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SystemInit+0x20>)
 80010ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <SystemInit+0x20>)
 80010d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ee:	490e      	ldr	r1, [pc, #56]	; (8001128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001104:	4c0b      	ldr	r4, [pc, #44]	; (8001134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001112:	f7ff ffd7 	bl	80010c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001116:	f011 fc99 	bl	8012a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fce7 	bl	8000aec <main>
  bx  lr    
 800111e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800112c:	08014780 	.word	0x08014780
  ldr r2, =_sbss
 8001130:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001134:	2000b6b0 	.word	0x2000b6b0

08001138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC_IRQHandler>

0800113a <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	ba5b      	rev16	r3, r3
 8001148:	b29b      	uxth	r3, r3
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	061a      	lsls	r2, r3, #24
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0e1b      	lsrs	r3, r3, #24
 800117a:	4313      	orrs	r3, r2
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <formatSystemTime>:
 * @param[out] str NULL-terminated string representing the specified time
 * @return Pointer to the formatted string
 **/

const char_t *formatSystemTime(systime_t time, char_t *str)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
   uint8_t seconds;
   uint16_t milliseconds;
   static char_t buffer[24];

   //Retrieve milliseconds
   milliseconds = time % 1000;
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <formatSystemTime+0xe8>)
 8001196:	fba3 1302 	umull	r1, r3, r3, r2
 800119a:	099b      	lsrs	r3, r3, #6
 800119c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	81fb      	strh	r3, [r7, #14]
   time /= 1000;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a31      	ldr	r2, [pc, #196]	; (8001270 <formatSystemTime+0xe8>)
 80011ac:	fba2 2303 	umull	r2, r3, r2, r3
 80011b0:	099b      	lsrs	r3, r3, #6
 80011b2:	607b      	str	r3, [r7, #4]
   //Retrieve seconds
   seconds = time % 60;
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <formatSystemTime+0xec>)
 80011b8:	fba3 2301 	umull	r2, r3, r3, r1
 80011bc:	095a      	lsrs	r2, r3, #5
 80011be:	4613      	mov	r3, r2
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	1aca      	subs	r2, r1, r3
 80011c8:	4613      	mov	r3, r2
 80011ca:	737b      	strb	r3, [r7, #13]
   time /= 60;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <formatSystemTime+0xec>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	607b      	str	r3, [r7, #4]
   //Retrieve minutes
   minutes = time % 60;
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <formatSystemTime+0xec>)
 80011dc:	fba3 2301 	umull	r2, r3, r3, r1
 80011e0:	095a      	lsrs	r2, r3, #5
 80011e2:	4613      	mov	r3, r2
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	1aca      	subs	r2, r1, r3
 80011ec:	4613      	mov	r3, r2
 80011ee:	733b      	strb	r3, [r7, #12]
   time /= 60;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <formatSystemTime+0xec>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	095b      	lsrs	r3, r3, #5
 80011fa:	607b      	str	r3, [r7, #4]
   //Retrieve hours
   hours = time;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	817b      	strh	r3, [r7, #10]

   //The str parameter is optional
   if(!str)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <formatSystemTime+0x82>
      str = buffer;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <formatSystemTime+0xf0>)
 8001208:	603b      	str	r3, [r7, #0]

   //Format system time
   if(hours > 0)
 800120a:	897b      	ldrh	r3, [r7, #10]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <formatSystemTime+0xa2>
   {
      osSprintf(str, "%" PRIu16 "h %02" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8001210:	8979      	ldrh	r1, [r7, #10]
 8001212:	7b38      	ldrb	r0, [r7, #12]
 8001214:	7b7b      	ldrb	r3, [r7, #13]
 8001216:	89fa      	ldrh	r2, [r7, #14]
 8001218:	9201      	str	r2, [sp, #4]
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	4603      	mov	r3, r0
 800121e:	460a      	mov	r2, r1
 8001220:	4916      	ldr	r1, [pc, #88]	; (800127c <formatSystemTime+0xf4>)
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f011 fff2 	bl	801320c <siprintf>
 8001228:	e01c      	b.n	8001264 <formatSystemTime+0xdc>
         hours, minutes, seconds, milliseconds);
   }
   else if(minutes > 0)
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d009      	beq.n	8001244 <formatSystemTime+0xbc>
   {
      osSprintf(str, "%" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8001230:	7b3a      	ldrb	r2, [r7, #12]
 8001232:	7b79      	ldrb	r1, [r7, #13]
 8001234:	89fb      	ldrh	r3, [r7, #14]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	460b      	mov	r3, r1
 800123a:	4911      	ldr	r1, [pc, #68]	; (8001280 <formatSystemTime+0xf8>)
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f011 ffe5 	bl	801320c <siprintf>
 8001242:	e00f      	b.n	8001264 <formatSystemTime+0xdc>
         minutes, seconds, milliseconds);
   }
   else if(seconds > 0)
 8001244:	7b7b      	ldrb	r3, [r7, #13]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <formatSystemTime+0xd0>
   {
      osSprintf(str, "%" PRIu8 "s %03" PRIu16 "ms", seconds, milliseconds);
 800124a:	7b7a      	ldrb	r2, [r7, #13]
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	490d      	ldr	r1, [pc, #52]	; (8001284 <formatSystemTime+0xfc>)
 8001250:	6838      	ldr	r0, [r7, #0]
 8001252:	f011 ffdb 	bl	801320c <siprintf>
 8001256:	e005      	b.n	8001264 <formatSystemTime+0xdc>
   }
   else
   {
      osSprintf(str, "%" PRIu16 "ms", milliseconds);
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	461a      	mov	r2, r3
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <formatSystemTime+0x100>)
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f011 ffd4 	bl	801320c <siprintf>
   }

   //Return a pointer to the formatted string
   return str;
 8001264:	683b      	ldr	r3, [r7, #0]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	10624dd3 	.word	0x10624dd3
 8001274:	88888889 	.word	0x88888889
 8001278:	2000030c 	.word	0x2000030c
 800127c:	0801409c 	.word	0x0801409c
 8001280:	080140bc 	.word	0x080140bc
 8001284:	080140d4 	.word	0x080140d4
 8001288:	080140e4 	.word	0x080140e4

0800128c <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
   portBASE_TYPE status;
   TaskHandle_t task = NULL;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]

   //Create a new task
   status = xTaskCreate((TaskFunction_t) taskCode, name, stackSize, param,
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b299      	uxth	r1, r3
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	9201      	str	r2, [sp, #4]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	460a      	mov	r2, r1
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f00f fe97 	bl	8010fe6 <xTaskCreate>
 80012b8:	6178      	str	r0, [r7, #20]
      priority, &task);

   //Check whether the task was successfully created
   if(status == pdPASS)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d101      	bne.n	80012c4 <osCreateTask+0x38>
      return task;
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	e000      	b.n	80012c6 <osCreateTask+0x3a>
   else
      return NULL;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f00f ffbc 	bl	8011254 <vTaskDelay>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e8:	f010 fbf6 	bl	8011ad8 <xTaskGetSchedulerState>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 80012f2:	f010 f843 	bl	801137c <vTaskSuspendAll>
   }
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}

080012fa <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012fe:	f010 fbeb 	bl	8011ad8 <xTaskGetSchedulerState>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d001      	beq.n	800130c <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 8001308:	f010 f846 	bl	8011398 <xTaskResumeAll>
   }
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af02      	add	r7, sp, #8
 8001316:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinaryStatic(&event->buffer);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3304      	adds	r3, #4
 800131c:	2203      	movs	r2, #3
 800131e:	9200      	str	r2, [sp, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2001      	movs	r0, #1
 8001326:	f00f f94d 	bl	80105c4 <xQueueGenericCreateStatic>
 800132a:	4602      	mov	r2, r0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinary();
#endif

   //Check whether the returned handle is valid
   if(event->handle != NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <osCreateEvent+0x2c>
      return TRUE;
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <osCreateEvent+0x2e>
   else
      return FALSE;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   //Make sure the handle is valid
   if(event->handle != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d004      	beq.n	8001360 <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      vSemaphoreDelete(event->handle);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f00f fc96 	bl	8010c8c <vQueueDelete>
   }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   xSemaphoreGive(event->handle);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	f00f f9ef 	bl	801075c <xQueueGenericSend>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <osResetEvent>:
 * @brief Set the specified event object to the nonsignaled state
 * @param[in] event Pointer to the event object
 **/

void osResetEvent(OsEvent *event)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   //Force the specified event to the nonsignaled state
   xSemaphoreTake(event->handle, 0);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00f fb6d 	bl	8010a74 <xQueueSemaphoreTake>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	6039      	str	r1, [r7, #0]
   portBASE_TYPE ret;

   //Wait until the specified event is in the signaled state
   if(timeout == INFINITE_DELAY)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b2:	d108      	bne.n	80013c6 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = xSemaphoreTake(event->handle, portMAX_DELAY);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013bc:	4618      	mov	r0, r3
 80013be:	f00f fb59 	bl	8010a74 <xQueueSemaphoreTake>
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	e006      	b.n	80013d4 <osWaitForEvent+0x32>
   }
   else
   {
      //Wait for the specified time interval
      ret = xSemaphoreTake(event->handle, OS_MS_TO_SYSTICKS(timeout));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6839      	ldr	r1, [r7, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00f fb51 	bl	8010a74 <xQueueSemaphoreTake>
 80013d2:	60f8      	str	r0, [r7, #12]
   }

   //The return value tells whether the event is set
   return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
   portBASE_TYPE flag = FALSE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]

   //Set the specified event to the signaled state
   xSemaphoreGiveFromISR(event->handle, &flag);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f107 020c 	add.w	r2, r7, #12
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00f faaf 	bl	8010958 <xQueueGiveFromISR>

   //A higher priority task has been woken?
   return flag;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutexStatic(&mutex->buffer);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3304      	adds	r3, #4
 8001410:	4619      	mov	r1, r3
 8001412:	2001      	movs	r0, #1
 8001414:	f00f f987 	bl	8010726 <xQueueCreateMutexStatic>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutex();
#endif

   //Check whether the returned handle is valid
   if(mutex->handle != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <osCreateMutex+0x26>
      return TRUE;
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <osCreateMutex+0x28>
   else
      return FALSE;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   xSemaphoreTake(mutex->handle, portMAX_DELAY);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001444:	4618      	mov	r0, r3
 8001446:	f00f fb15 	bl	8010a74 <xQueueSemaphoreTake>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   xSemaphoreGive(mutex->handle);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	2300      	movs	r3, #0
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	f00f f97a 	bl	801075c <xQueueGenericSend>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
   systime_t time;

   //Get current tick count
   time = xTaskGetTickCount();
 8001476:	f010 f82b 	bl	80114d0 <xTaskGetTickCount>
 800147a:	6078      	str	r0, [r7, #4]

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

void *osAllocMem(size_t size)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f010 ff92 	bl	80123b8 <pvPortMalloc>
 8001494:	60f8      	str	r0, [r7, #12]

   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n", size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void osFreeMem(void *p)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f011 f84e 	bl	8012550 <vPortFree>
   }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <strSafeCopy+0x1e>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <strSafeCopy+0x1e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 80014da:	2302      	movs	r3, #2
 80014dc:	e015      	b.n	800150a <strSafeCopy+0x4e>

   //Get the length of the source name
   n = osStrlen(src);
 80014de:	68b8      	ldr	r0, [r7, #8]
 80014e0:	f7fe fe76 	bl	80001d0 <strlen>
 80014e4:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bf28      	it	cs
 80014f0:	4613      	movcs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]

   //Copy the string
   osStrncpy(dest, src, n);
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f011 fec9 	bl	8013290 <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	4413      	add	r3, r2
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <socketTranslateErrorCode>:
 * @param[in] error Error code to be translated
 * @return BSD error code
 **/

int_t socketTranslateErrorCode(error_t error)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
   int_t ret;

   //Translate error code
   switch(error)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	2bdc      	cmp	r3, #220	; 0xdc
 8001522:	dc4d      	bgt.n	80015c0 <socketTranslateErrorCode+0xac>
 8001524:	2bc9      	cmp	r3, #201	; 0xc9
 8001526:	da04      	bge.n	8001532 <socketTranslateErrorCode+0x1e>
 8001528:	2b00      	cmp	r3, #0
 800152a:	d031      	beq.n	8001590 <socketTranslateErrorCode+0x7c>
 800152c:	2b02      	cmp	r3, #2
 800152e:	d035      	beq.n	800159c <socketTranslateErrorCode+0x88>
 8001530:	e046      	b.n	80015c0 <socketTranslateErrorCode+0xac>
 8001532:	3bc9      	subs	r3, #201	; 0xc9
 8001534:	2b13      	cmp	r3, #19
 8001536:	d843      	bhi.n	80015c0 <socketTranslateErrorCode+0xac>
 8001538:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <socketTranslateErrorCode+0x2c>)
 800153a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153e:	bf00      	nop
 8001540:	080015bb 	.word	0x080015bb
 8001544:	080015c1 	.word	0x080015c1
 8001548:	080015b5 	.word	0x080015b5
 800154c:	080015a3 	.word	0x080015a3
 8001550:	080015af 	.word	0x080015af
 8001554:	080015c1 	.word	0x080015c1
 8001558:	080015a9 	.word	0x080015a9
 800155c:	080015c1 	.word	0x080015c1
 8001560:	080015c1 	.word	0x080015c1
 8001564:	080015c1 	.word	0x080015c1
 8001568:	080015c1 	.word	0x080015c1
 800156c:	080015c1 	.word	0x080015c1
 8001570:	080015c1 	.word	0x080015c1
 8001574:	080015c1 	.word	0x080015c1
 8001578:	080015c1 	.word	0x080015c1
 800157c:	080015c1 	.word	0x080015c1
 8001580:	080015c1 	.word	0x080015c1
 8001584:	080015c1 	.word	0x080015c1
 8001588:	080015c1 	.word	0x080015c1
 800158c:	08001597 	.word	0x08001597
   {
   case NO_ERROR:
      ret = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
      break;
 8001594:	e017      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_TIMEOUT:
      ret = EWOULDBLOCK;
 8001596:	230b      	movs	r3, #11
 8001598:	60fb      	str	r3, [r7, #12]
      break;
 800159a:	e014      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_INVALID_PARAMETER:
      ret = EINVAL;
 800159c:	2316      	movs	r3, #22
 800159e:	60fb      	str	r3, [r7, #12]
      break;
 80015a0:	e011      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_CONNECTION_RESET:
      ret = ECONNRESET;
 80015a2:	2368      	movs	r3, #104	; 0x68
 80015a4:	60fb      	str	r3, [r7, #12]
      break;
 80015a6:	e00e      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_ALREADY_CONNECTED:
      ret = EISCONN;
 80015a8:	236a      	movs	r3, #106	; 0x6a
 80015aa:	60fb      	str	r3, [r7, #12]
      break;
 80015ac:	e00b      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_NOT_CONNECTED:
      ret = ENOTCONN;
 80015ae:	236b      	movs	r3, #107	; 0x6b
 80015b0:	60fb      	str	r3, [r7, #12]
      break;
 80015b2:	e008      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_CONNECTION_CLOSING:
      ret = ESHUTDOWN;
 80015b4:	236c      	movs	r3, #108	; 0x6c
 80015b6:	60fb      	str	r3, [r7, #12]
      break;
 80015b8:	e005      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   case ERROR_CONNECTION_FAILED:
      ret = ECONNREFUSED;
 80015ba:	236f      	movs	r3, #111	; 0x6f
 80015bc:	60fb      	str	r3, [r7, #12]
      break;
 80015be:	e002      	b.n	80015c6 <socketTranslateErrorCode+0xb2>
   default:
      ret = EFAULT;
 80015c0:	230e      	movs	r3, #14
 80015c2:	60fb      	str	r3, [r7, #12]
      break;
 80015c4:	bf00      	nop
   }

   //Return BSD status code
   return ret;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <socket>:
 * @return On success, a file descriptor for the new socket is returned.
 *   On failure, SOCKET_ERROR is returned
 **/

int_t socket(int_t family, int_t type, int_t protocol)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
   Socket *sock;

   //Check address family
   if(family == AF_INET || family == AF_INET6)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <socket+0x18>
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d107      	bne.n	80015fc <socket+0x28>
   {
      //Create a socket
      sock = socketOpen(type, protocol);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fbcc 	bl	8004d90 <socketOpen>
 80015f8:	6178      	str	r0, [r7, #20]
 80015fa:	e011      	b.n	8001620 <socket+0x4c>
   }
   else if(family == AF_PACKET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b11      	cmp	r3, #17
 8001600:	d10b      	bne.n	800161a <socket+0x46>
   {
      //Create a socket
      sock = socketOpen(SOCKET_TYPE_RAW_ETH, ntohs(protocol));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fd97 	bl	800113a <swapInt16>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	2004      	movs	r0, #4
 8001612:	f003 fbbd 	bl	8004d90 <socketOpen>
 8001616:	6178      	str	r0, [r7, #20]
 8001618:	e002      	b.n	8001620 <socket+0x4c>
   }
   else
   {
      //The address family is not valid
      return SOCKET_ERROR;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800161e:	e007      	b.n	8001630 <socket+0x5c>
   }

   //Failed to create a new socket?
   if(sock == NULL)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <socket+0x58>
   {
      //Report an error
      return SOCKET_ERROR;
 8001626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162a:	e001      	b.n	8001630 <socket+0x5c>
   }

   //Return the socket descriptor
   return sock->descriptor;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <bind>:
 * @return If no error occurs, bind returns SOCKET_SUCCESS.
 *   Otherwise, it returns SOCKET_ERROR
 **/

int_t bind(int_t s, const sockaddr *addr, socklen_t addrlen)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
   uint16_t port;
   IpAddr ipAddr;
   Socket *sock;

   //Make sure the socket descriptor is valid
   if(s < 0 || s >= SOCKET_MAX_COUNT)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db02      	blt.n	8001650 <bind+0x18>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b09      	cmp	r3, #9
 800164e:	dd02      	ble.n	8001656 <bind+0x1e>
   {
      return SOCKET_ERROR;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001654:	e04c      	b.n	80016f0 <bind+0xb8>
   }

   //Point to the socket structure
   sock = &socketTable[s];
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800165c:	fb02 f303 	mul.w	r3, r2, r3
 8001660:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <bind+0xc0>)
 8001662:	4413      	add	r3, r2
 8001664:	627b      	str	r3, [r7, #36]	; 0x24

   //Check the length of the address
   if(addrlen < (socklen_t) sizeof(sockaddr))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	dc05      	bgt.n	8001678 <bind+0x40>
   {
      //Report an error
      sock->errnoCode = EINVAL;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2216      	movs	r2, #22
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001676:	e03b      	b.n	80016f0 <bind+0xb8>
   }

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(addr->sa_family == AF_INET && addrlen >= (socklen_t) sizeof(sockaddr_in))
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d11a      	bne.n	80016b6 <bind+0x7e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	dd17      	ble.n	80016b6 <bind+0x7e>
   {
      //Point to the IPv4 address information
      sockaddr_in *sa = (sockaddr_in *) addr;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	623b      	str	r3, [r7, #32]
      //Get port number
      port = ntohs(sa->sin_port);
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	885b      	ldrh	r3, [r3, #2]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd53 	bl	800113a <swapInt16>
 8001694:	4603      	mov	r3, r0
 8001696:	83fb      	strh	r3, [r7, #30]

      //Copy IPv4 address
      if(sa->sin_addr.s_addr == INADDR_ANY)
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d104      	bne.n	80016aa <bind+0x72>
      {
         ipAddr.length = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
         ipAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
   {
 80016a8:	e00b      	b.n	80016c2 <bind+0x8a>
      }
      else
      {
         ipAddr.length = sizeof(Ipv4Addr);
 80016aa:	2304      	movs	r3, #4
 80016ac:	617b      	str	r3, [r7, #20]
         ipAddr.ipv4Addr = sa->sin_addr.s_addr;
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
   {
 80016b4:	e005      	b.n	80016c2 <bind+0x8a>
   else
#endif
   //Invalid address?
   {
      //Report an error
      sock->errnoCode = EINVAL;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	2216      	movs	r2, #22
 80016ba:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c0:	e016      	b.n	80016f0 <bind+0xb8>
   }

   //Associate the local address with the socket
   error = socketBind(sock, &ipAddr, port);
 80016c2:	8bfa      	ldrh	r2, [r7, #30]
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016cc:	f003 fba6 	bl	8004e1c <socketBind>
 80016d0:	4603      	mov	r3, r0
 80016d2:	83bb      	strh	r3, [r7, #28]

   //Any error to report?
   if(error)
 80016d4:	8bbb      	ldrh	r3, [r7, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <bind+0xb6>
   {
      sock->errnoCode = socketTranslateErrorCode(error);
 80016da:	8bbb      	ldrh	r3, [r7, #28]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff19 	bl	8001514 <socketTranslateErrorCode>
 80016e2:	4602      	mov	r2, r0
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ec:	e000      	b.n	80016f0 <bind+0xb8>
   }

   //Successful processing
   return SOCKET_SUCCESS;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3728      	adds	r7, #40	; 0x28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20009990 	.word	0x20009990

080016fc <connect>:
 * @return If no error occurs, connect returns SOCKET_SUCCESS.
 *   Otherwise, it returns SOCKET_ERROR
 **/

int_t connect(int_t s, const sockaddr *addr, socklen_t addrlen)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
   uint16_t port;
   IpAddr ipAddr;
   Socket *sock;

   //Make sure the socket descriptor is valid
   if(s < 0 || s >= SOCKET_MAX_COUNT)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db02      	blt.n	8001714 <connect+0x18>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b09      	cmp	r3, #9
 8001712:	dd02      	ble.n	800171a <connect+0x1e>
   {
      return SOCKET_ERROR;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001718:	e04c      	b.n	80017b4 <connect+0xb8>
   }

   //Point to the socket structure
   sock = &socketTable[s];
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a25      	ldr	r2, [pc, #148]	; (80017bc <connect+0xc0>)
 8001726:	4413      	add	r3, r2
 8001728:	627b      	str	r3, [r7, #36]	; 0x24

   //Check the length of the address
   if(addrlen < (socklen_t) sizeof(sockaddr))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	dc05      	bgt.n	800173c <connect+0x40>
   {
      sock->errnoCode = EINVAL;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	2216      	movs	r2, #22
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173a:	e03b      	b.n	80017b4 <connect+0xb8>
   }

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(addr->sa_family == AF_INET && addrlen >= (socklen_t) sizeof(sockaddr_in))
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d11a      	bne.n	800177a <connect+0x7e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	dd17      	ble.n	800177a <connect+0x7e>
   {
      //Point to the IPv4 address information
      sockaddr_in *sa = (sockaddr_in *) addr;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	623b      	str	r3, [r7, #32]
      //Get port number
      port = ntohs(sa->sin_port);
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	885b      	ldrh	r3, [r3, #2]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fcf1 	bl	800113a <swapInt16>
 8001758:	4603      	mov	r3, r0
 800175a:	83fb      	strh	r3, [r7, #30]

      //Copy IPv4 address
      if(sa->sin_addr.s_addr == INADDR_ANY)
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d104      	bne.n	800176e <connect+0x72>
      {
         ipAddr.length = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
         ipAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
   {
 800176c:	e00b      	b.n	8001786 <connect+0x8a>
      }
      else
      {
         ipAddr.length = sizeof(Ipv4Addr);
 800176e:	2304      	movs	r3, #4
 8001770:	617b      	str	r3, [r7, #20]
         ipAddr.ipv4Addr = sa->sin_addr.s_addr;
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
   {
 8001778:	e005      	b.n	8001786 <connect+0x8a>
   else
#endif
   //Invalid address?
   {
      //Report an error
      sock->errnoCode = EINVAL;
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2216      	movs	r2, #22
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 8001780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001784:	e016      	b.n	80017b4 <connect+0xb8>
   }

   //Establish connection
   error = socketConnect(sock, &ipAddr, port);
 8001786:	8bfa      	ldrh	r2, [r7, #30]
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001790:	f003 fb6e 	bl	8004e70 <socketConnect>
 8001794:	4603      	mov	r3, r0
 8001796:	83bb      	strh	r3, [r7, #28]

   //Any error to report?
   if(error)
 8001798:	8bbb      	ldrh	r3, [r7, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <connect+0xb6>
   {
      sock->errnoCode = socketTranslateErrorCode(error);
 800179e:	8bbb      	ldrh	r3, [r7, #28]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff feb7 	bl	8001514 <socketTranslateErrorCode>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b0:	e000      	b.n	80017b4 <connect+0xb8>
   }

   //Successful processing
   return SOCKET_SUCCESS;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3728      	adds	r7, #40	; 0x28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20009990 	.word	0x20009990

080017c0 <listen>:
 * @return If no error occurs, listen returns SOCKET_SUCCESS.
 *   Otherwise, it returns SOCKET_ERROR
 **/

int_t listen(int_t s, int_t backlog)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
   error_t error;
   Socket *sock;

   //Make sure the socket descriptor is valid
   if(s < 0 || s >= SOCKET_MAX_COUNT)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db02      	blt.n	80017d6 <listen+0x16>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b09      	cmp	r3, #9
 80017d4:	dd02      	ble.n	80017dc <listen+0x1c>
   {
      return SOCKET_ERROR;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	e01c      	b.n	8001816 <listen+0x56>
   }

   //Point to the socket structure
   sock = &socketTable[s];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f44f 721f 	mov.w	r2, #636	; 0x27c
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <listen+0x60>)
 80017e8:	4413      	add	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

   //Place the socket in the listening state
   error = socketListen(sock, backlog);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4619      	mov	r1, r3
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f003 fb87 	bl	8004f04 <socketListen>
 80017f6:	4603      	mov	r3, r0
 80017f8:	817b      	strh	r3, [r7, #10]

   //Any error to report?
   if(error)
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d009      	beq.n	8001814 <listen+0x54>
   {
      sock->errnoCode = socketTranslateErrorCode(error);
 8001800:	897b      	ldrh	r3, [r7, #10]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fe86 	bl	8001514 <socketTranslateErrorCode>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001812:	e000      	b.n	8001816 <listen+0x56>
   }

   //Successful processing
   return SOCKET_SUCCESS;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20009990 	.word	0x20009990

08001824 <accept>:
 * @return If no error occurs, accept returns a descriptor for the new socket.
 *   Otherwise, it returns SOCKET_ERROR
 **/

int_t accept(int_t s, sockaddr *addr, socklen_t *addrlen)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
   IpAddr ipAddr;
   Socket *sock;
   Socket *newSock;

   //Make sure the socket descriptor is valid
   if(s < 0 || s >= SOCKET_MAX_COUNT)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db02      	blt.n	800183c <accept+0x18>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b09      	cmp	r3, #9
 800183a:	dd02      	ble.n	8001842 <accept+0x1e>
   {
      return SOCKET_ERROR;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001840:	e045      	b.n	80018ce <accept+0xaa>
   }

   //Point to the socket structure
   sock = &socketTable[s];
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <accept+0xb4>)
 800184e:	4413      	add	r3, r2
 8001850:	627b      	str	r3, [r7, #36]	; 0x24

   //Permit an incoming connection attempt on a socket
   newSock = socketAccept(sock, &ipAddr, &port);
 8001852:	f107 021a 	add.w	r2, r7, #26
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800185e:	f003 fb75 	bl	8004f4c <socketAccept>
 8001862:	6238      	str	r0, [r7, #32]

   //No connection request is pending in the SYN queue?
   if(newSock == NULL)
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d105      	bne.n	8001876 <accept+0x52>
   {
      //Report an error
      sock->errnoCode = EWOULDBLOCK;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	220b      	movs	r2, #11
 800186e:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 8001870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001874:	e02b      	b.n	80018ce <accept+0xaa>
   }

   //The address is optional
   if(addr != NULL && addrlen != NULL)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d026      	beq.n	80018ca <accept+0xa6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d023      	beq.n	80018ca <accept+0xa6>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 address?
      if(ipAddr.length == sizeof(Ipv4Addr) && *addrlen >= (socklen_t) sizeof(sockaddr_in))
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d117      	bne.n	80018b8 <accept+0x94>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	dd13      	ble.n	80018b8 <accept+0x94>
      {
         //Point to the IPv4 address information
         sockaddr_in *sa = (sockaddr_in *) addr;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	61fb      	str	r3, [r7, #28]

         //Set address family and port number
         sa->sin_family = AF_INET;
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2202      	movs	r2, #2
 8001898:	801a      	strh	r2, [r3, #0]
         sa->sin_port = htons(port);
 800189a:	8b7b      	ldrh	r3, [r7, #26]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fc4c 	bl	800113a <swapInt16>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	805a      	strh	r2, [r3, #2]
         //Copy IPv4 address
         sa->sin_addr.s_addr = ipAddr.ipv4Addr;
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	605a      	str	r2, [r3, #4]

         //Return the actual length of the address
         *addrlen = sizeof(sockaddr_in);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2210      	movs	r2, #16
 80018b4:	601a      	str	r2, [r3, #0]
      {
 80018b6:	e008      	b.n	80018ca <accept+0xa6>
      else
#endif
      //Invalid address?
      {
         //Close socket
         socketClose(newSock);
 80018b8:	6a38      	ldr	r0, [r7, #32]
 80018ba:	f003 fcab 	bl	8005214 <socketClose>
         //Report an error
         sock->errnoCode = EINVAL;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	2216      	movs	r2, #22
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
         return SOCKET_ERROR;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c8:	e001      	b.n	80018ce <accept+0xaa>
      }
   }

   //Return the descriptor to the new socket
   return newSock->descriptor;
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	681b      	ldr	r3, [r3, #0]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20009990 	.word	0x20009990

080018dc <send>:
 *   which can be less than the number requested to be sent in the
 *   length parameter. Otherwise, a value of SOCKET_ERROR is returned
 **/

int_t send(int_t s, const void *data, size_t length, int_t flags)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af02      	add	r7, sp, #8
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
   error_t error;
   size_t written;
   Socket *sock;

   //Make sure the socket descriptor is valid
   if(s < 0 || s >= SOCKET_MAX_COUNT)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db02      	blt.n	80018f6 <send+0x1a>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	dd02      	ble.n	80018fc <send+0x20>
   {
      return SOCKET_ERROR;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fa:	e032      	b.n	8001962 <send+0x86>
   }

   //Point to the socket structure
   sock = &socketTable[s];
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	4a19      	ldr	r2, [pc, #100]	; (800196c <send+0x90>)
 8001908:	4413      	add	r3, r2
 800190a:	61fb      	str	r3, [r7, #28]

   //Send data
   error = socketSend(sock, data, length, &written, flags << 8);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	461a      	mov	r2, r3
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68b9      	ldr	r1, [r7, #8]
 800191c:	69f8      	ldr	r0, [r7, #28]
 800191e:	f003 fb31 	bl	8004f84 <socketSend>
 8001922:	4603      	mov	r3, r0
 8001924:	837b      	strh	r3, [r7, #26]

   //Any error to report?
   if(error == ERROR_TIMEOUT)
 8001926:	8b7b      	ldrh	r3, [r7, #26]
 8001928:	2bdc      	cmp	r3, #220	; 0xdc
 800192a:	d10c      	bne.n	8001946 <send+0x6a>
   {
      //Check whether some data has been written
      if(written > 0)
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <send+0x84>
         //count of bytes transferred so far is returned...
      }
      else
      {
         //If no data has been written, a value of SOCKET_ERROR is returned
         sock->errnoCode = socketTranslateErrorCode(error);
 8001932:	8b7b      	ldrh	r3, [r7, #26]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fded 	bl	8001514 <socketTranslateErrorCode>
 800193a:	4602      	mov	r2, r0
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
         return SOCKET_ERROR;
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001944:	e00d      	b.n	8001962 <send+0x86>
      }
   }
   else if(error != NO_ERROR)
 8001946:	8b7b      	ldrh	r3, [r7, #26]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <send+0x84>
   {
      //Otherwise, a value of SOCKET_ERROR is returned
      sock->errnoCode = socketTranslateErrorCode(error);
 800194c:	8b7b      	ldrh	r3, [r7, #26]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fde0 	bl	8001514 <socketTranslateErrorCode>
 8001954:	4602      	mov	r2, r0
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
      return SOCKET_ERROR;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195e:	e000      	b.n	8001962 <send+0x86>
   }

   //Return the number of bytes transferred so far
   return written;
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20009990 	.word	0x20009990

08001970 <inet_addr>:
 * @param[in] cp NULL-terminated string representing the IPv4 address
 * @return Binary data in network byte order
 **/

in_addr_t inet_addr(const char_t *cp)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
#if (IPV4_SUPPORT == ENABLED)
   error_t error;
   Ipv4Addr ipv4Addr;

   //Convert a dot-decimal string to a binary IPv4 address
   error = ipv4StringToAddr(cp, &ipv4Addr);
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4619      	mov	r1, r3
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f00b fd2e 	bl	800d3e0 <ipv4StringToAddr>
 8001984:	4603      	mov	r3, r0
 8001986:	81fb      	strh	r3, [r7, #14]

   //Check status code
   if(error)
 8001988:	89fb      	ldrh	r3, [r7, #14]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <inet_addr+0x24>
   {
      //The input is invalid
      return INADDR_NONE;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001992:	e000      	b.n	8001996 <inet_addr+0x26>
   }
   else
   {
      //Return the binary representation
      return ipv4Addr;
 8001994:	68bb      	ldr	r3, [r7, #8]
   }
#else
   //IPv4 is not implemented
   return INADDR_NONE;
#endif
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <inet_ntoa>:
 * @param[in] in Binary representation of the IPv4 address
 * @return Pointer to the formatted string
 **/

const char_t *inet_ntoa(in_addr in)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
   static char_t buf[16];

   //The string returned by the function resides in static memory area
   return inet_ntoa_r(in, buf, sizeof(buf));
 80019a8:	2210      	movs	r2, #16
 80019aa:	4904      	ldr	r1, [pc, #16]	; (80019bc <inet_ntoa+0x1c>)
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f807 	bl	80019c0 <inet_ntoa_r>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000324 	.word	0x20000324

080019c0 <inet_ntoa_r>:
 * @param[in] buflen Number of bytes available in the buffer
 * @return Pointer to the formatted string
 **/

const char_t *inet_ntoa_r(in_addr in, char_t *buf, socklen_t buflen)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
   //Properly terminate the string
   buf[0] = '\0';
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]

#if (IPV4_SUPPORT == ENABLED)
   //Check the length of the buffer
   if(buflen >= 16)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	dd04      	ble.n	80019e2 <inet_ntoa_r+0x22>
   {
      //Convert the binary IPv4 address to dot-decimal notation
      ipv4AddrToString(in.s_addr, buf);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	4618      	mov	r0, r3
 80019de:	f00b fd69 	bl	800d4b4 <ipv4AddrToString>
   }
#endif

   //Return a pointer to the formatted string
   return buf;
 80019e2:	68bb      	ldr	r3, [r7, #8]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <ethInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ethInit(NetInterface *interface)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
   //Clear the MAC filter table contents
   osMemset(interface->macAddrFilter, 0,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	33d4      	adds	r3, #212	; 0xd4
 80019f8:	22f0      	movs	r2, #240	; 0xf0
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f011 f882 	bl	8012b06 <memset>
      sizeof(interface->macAddrFilter));

   //Successful initialization
   return NO_ERROR;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <ethProcessFrame>:
 *   the packet
 **/

void ethProcessFrame(NetInterface *interface, uint8_t *frame, size_t length,
   NetRxAncillary *ancillary)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
#if (ETH_VMAN_SUPPORT == ENABLED)
   uint16_t vmanId = 0;
#endif

   //Initialize status code
   error = NO_ERROR;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Initialize variables
   type = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	83fb      	strh	r3, [r7, #30]
   data = NULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
   header = NULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]

   //Start of exception handling block
   do
   {
      //Check whether the CRC is included in the received frame
      if(!interface->nicDriver->autoCrcStrip)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10c      	bne.n	8001a4e <ethProcessFrame+0x42>
      {
         //Perform CRC verification
         error = ethCheckCrc(interface, frame, length);
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fc47 	bl	80022cc <ethCheckCrc>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	84fb      	strh	r3, [r7, #38]	; 0x26
         //CRC error?
         if(error)
 8001a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11c      	bne.n	8001a82 <ethProcessFrame+0x76>
            break;

         //Strip CRC field from Ethernet frame
         length -= ETH_CRC_SIZE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	607b      	str	r3, [r7, #4]
            break;
      }
#endif

      //Point to the beginning of the frame
      header = (EthHeader *) frame;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	617b      	str	r3, [r7, #20]
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInOctets, length);

      //Malformed Ethernet frame?
      if(length < sizeof(EthHeader))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0d      	cmp	r3, #13
 8001a56:	d802      	bhi.n	8001a5e <ethProcessFrame+0x52>
      {
         //Drop the received frame
         error = ERROR_INVALID_LENGTH;
 8001a58:	23ec      	movs	r3, #236	; 0xec
 8001a5a:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8001a5c:	e012      	b.n	8001a84 <ethProcessFrame+0x78>
      }

      //Debug message
      TRACE_DEBUG("Ethernet frame received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump Ethernet header contents for debugging purpose
      ethDumpHeader(header);
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f000 fa8a 	bl	8001f78 <ethDumpHeader>
#if defined(ETH_FRAME_FORWARD_HOOK)
      ETH_FRAME_FORWARD_HOOK(interface, header, length);
#endif

      //Retrieve the value of the EtherType field
      type = ntohs(header->type);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	899b      	ldrh	r3, [r3, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fb65 	bl	800113a <swapInt16>
 8001a70:	4603      	mov	r3, r0
 8001a72:	83fb      	strh	r3, [r7, #30]

      //Point to the data payload
      data = header->data;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	330e      	adds	r3, #14
 8001a78:	61bb      	str	r3, [r7, #24]
      //Calculate the length of the data payload
      length -= sizeof(EthHeader);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3b0e      	subs	r3, #14
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	e000      	b.n	8001a84 <ethProcessFrame+0x78>
            break;
 8001a82:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Invalid frame received?
   if(error)
 8001a84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <ethProcessFrame+0x8a>
   {
      //Update Ethernet statistics
      ethUpdateErrorStats(interface, error);
 8001a8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 fb1e 	bl	80020d0 <ethUpdateErrorStats>
      //Drop the received frame
      return;
 8001a94:	e061      	b.n	8001b5a <ethProcessFrame+0x14e>
   }
#endif

   //802.1Q allows a single physical interface to be bound to multiple
   //virtual interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
 8001a9a:	e05b      	b.n	8001b54 <ethProcessFrame+0x148>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f240 628c 	movw	r2, #1676	; 0x68c
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	33e0      	adds	r3, #224	; 0xe0
 8001aa8:	4a2d      	ldr	r2, [pc, #180]	; (8001b60 <ethProcessFrame+0x154>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]

      //Check whether the current virtual interface is attached to the
      //physical interface where the packet was received
      if(nicGetPhysicalInterface(virtualInterface) != interface)
 8001aae:	6938      	ldr	r0, [r7, #16]
 8001ab0:	f002 f8ee 	bl	8003c90 <nicGetPhysicalInterface>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d147      	bne.n	8001b4c <ethProcessFrame+0x140>
#endif
      {
         //The host must silently discards an incoming frame whose destination
         //address does not correspond to the physical interface through which
         //it was received
         error = ethCheckDestAddr(virtualInterface, &header->destAddr);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6938      	ldr	r0, [r7, #16]
 8001ac2:	f000 fa8b 	bl	8001fdc <ethCheckDestAddr>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      //Valid destination address?
      if(!error)
 8001aca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d133      	bne.n	8001b38 <ethProcessFrame+0x12c>
      {
         //Save source and destination MAC addresses
         ancillary->srcMacAddr = header->srcAddr;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	3206      	adds	r2, #6
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	6019      	str	r1, [r3, #0]
 8001adc:	8892      	ldrh	r2, [r2, #4]
 8001ade:	809a      	strh	r2, [r3, #4]
         ancillary->destMacAddr = header->destAddr;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	6811      	ldr	r1, [r2, #0]
 8001ae8:	6019      	str	r1, [r3, #0]
 8001aea:	8892      	ldrh	r2, [r2, #4]
 8001aec:	809a      	strh	r2, [r3, #4]

         //Update Ethernet statistics
         ethUpdateInStats(virtualInterface, &header->destAddr);
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6938      	ldr	r0, [r7, #16]
 8001af4:	f000 fac6 	bl	8002084 <ethUpdateInStats>
         }
#endif

#if (RAW_SOCKET_SUPPORT == ENABLED)
         //Allow raw sockets to process Ethernet packets
         rawSocketProcessEthPacket(virtualInterface, header, data, length,
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	6979      	ldr	r1, [r7, #20]
 8001b02:	6938      	ldr	r0, [r7, #16]
 8001b04:	f002 fd72 	bl	80045ec <rawSocketProcessEthPacket>
            ancillary);
#endif
         //Check Ethernet type field
         switch(type)
 8001b08:	8bfb      	ldrh	r3, [r7, #30]
 8001b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b0e:	d009      	beq.n	8001b24 <ethProcessFrame+0x118>
 8001b10:	f640 0206 	movw	r2, #2054	; 0x806
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d10c      	bne.n	8001b32 <ethProcessFrame+0x126>
         {
#if (IPV4_SUPPORT == ENABLED)
         //ARP packet received?
         case ETH_TYPE_ARP:
            //Process incoming ARP packet
            arpProcessPacket(virtualInterface, (ArpPacket *) data, length);
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	6938      	ldr	r0, [r7, #16]
 8001b1e:	f00a fa37 	bl	800bf90 <arpProcessPacket>
            //Continue processing
            break;
 8001b22:	e00a      	b.n	8001b3a <ethProcessFrame+0x12e>

         //IPv4 packet received?
         case ETH_TYPE_IPV4:
            //Process incoming IPv4 packet
            ipv4ProcessPacket(virtualInterface, (Ipv4Header *) data, length,
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	69b9      	ldr	r1, [r7, #24]
 8001b2a:	6938      	ldr	r0, [r7, #16]
 8001b2c:	f00b f8cd 	bl	800ccca <ipv4ProcessPacket>
               ancillary);
            //Continue processing
            break;
 8001b30:	e003      	b.n	8001b3a <ethProcessFrame+0x12e>
            break;
#endif
         //Unknown packet received?
         default:
            //Drop the received frame
            error = ERROR_INVALID_PROTOCOL;
 8001b32:	23e2      	movs	r3, #226	; 0xe2
 8001b34:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 8001b36:	e000      	b.n	8001b3a <ethProcessFrame+0x12e>
         }
      }
 8001b38:	bf00      	nop

      //Invalid frame received?
      if(error)
 8001b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <ethProcessFrame+0x142>
      {
         //Update Ethernet statistics
         ethUpdateErrorStats(virtualInterface, error);
 8001b40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b42:	4619      	mov	r1, r3
 8001b44:	6938      	ldr	r0, [r7, #16]
 8001b46:	f000 fac3 	bl	80020d0 <ethUpdateErrorStats>
 8001b4a:	e000      	b.n	8001b4e <ethProcessFrame+0x142>
         continue;
 8001b4c:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	3301      	adds	r3, #1
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0a0      	beq.n	8001a9c <ethProcessFrame+0x90>
      }
   }
}
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20009178 	.word	0x20009178

08001b64 <ethSendFrame>:
 * @return Error code
 **/

error_t ethSendFrame(NetInterface *interface, const MacAddr *destAddr,
   uint16_t type, NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	4613      	mov	r3, r2
 8001b72:	80fb      	strh	r3, [r7, #6]
   }
#endif

   //If the source address is not specified, then use the MAC address of the
   //interface as source address
   if(macCompAddr(&ancillary->srcMacAddr, &MAC_UNSPECIFIED_ADDR))
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	330c      	adds	r3, #12
 8001b78:	2206      	movs	r2, #6
 8001b7a:	4947      	ldr	r1, [pc, #284]	; (8001c98 <ethSendFrame+0x134>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 ff8c 	bl	8012a9a <memcmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <ethSendFrame+0x3e>
   {
      NetInterface *logicalInterface;

      //Point to the logical interface
      logicalInterface = nicGetLogicalInterface(interface);
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f002 f876 	bl	8003c7a <nicGetLogicalInterface>
 8001b8e:	6278      	str	r0, [r7, #36]	; 0x24
      //Get the MAC address of the interface
      ancillary->srcMacAddr = logicalInterface->macAddr;
 8001b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	330c      	adds	r3, #12
 8001b96:	32cc      	adds	r2, #204	; 0xcc
 8001b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	8019      	strh	r1, [r3, #0]
   }

   //Sanity check
   if(offset < sizeof(EthHeader))
 8001ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba4:	2b0d      	cmp	r3, #13
 8001ba6:	d801      	bhi.n	8001bac <ethSendFrame+0x48>
      return ERROR_INVALID_PARAMETER;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e070      	b.n	8001c8e <ethSendFrame+0x12a>

   //Make room for the Ethernet header
   offset -= sizeof(EthHeader);
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	3b0e      	subs	r3, #14
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
   //Calculate the length of the frame
   length = netBufferGetLength(buffer) - offset;
 8001bb2:	6838      	ldr	r0, [r7, #0]
 8001bb4:	f001 f8e2 	bl	8002d7c <netBufferGetLength>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	613b      	str	r3, [r7, #16]

   //Point to the beginning of the frame
   header = netBufferAt(buffer, offset);
 8001bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bc2:	6838      	ldr	r0, [r7, #0]
 8001bc4:	f001 f9a2 	bl	8002f0c <netBufferAt>
 8001bc8:	6238      	str	r0, [r7, #32]

   //Format Ethernet header
   header->destAddr = *destAddr;
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	6811      	ldr	r1, [r2, #0]
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	8892      	ldrh	r2, [r2, #4]
 8001bd4:	809a      	strh	r2, [r3, #4]
   header->srcAddr = ancillary->srcMacAddr;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bda:	3306      	adds	r3, #6
 8001bdc:	320c      	adds	r2, #12
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	6018      	str	r0, [r3, #0]
 8001be2:	8892      	ldrh	r2, [r2, #4]
 8001be4:	809a      	strh	r2, [r3, #4]
   header->type = htons(type);
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff faa6 	bl	800113a <swapInt16>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	819a      	strh	r2, [r3, #12]

   //Update Ethernet statistics
   ethUpdateOutStats(interface, &header->destAddr, length);
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 fa53 	bl	80020a8 <ethUpdateOutStats>

   //Debug message
   TRACE_DEBUG("Sending Ethernet frame (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump Ethernet header contents for debugging purpose
   ethDumpHeader(header);
 8001c02:	6a38      	ldr	r0, [r7, #32]
 8001c04:	f000 f9b8 	bl	8001f78 <ethDumpHeader>
      TRACE_DEBUG("  Switch Port = %" PRIu8 "\r\n", ancillary->port);
   }
#endif

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f002 f841 	bl	8003c90 <nicGetPhysicalInterface>
 8001c0e:	61f8      	str	r0, [r7, #28]
      length = netBufferGetLength(buffer) - offset;
   }
#endif

   //Valid NIC driver?
   if(physicalInterface->nicDriver != NULL)
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d031      	beq.n	8001c7c <ethSendFrame+0x118>
   {
      //Automatic padding not supported by hardware?
      if(!physicalInterface->nicDriver->autoPadding)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10c      	bne.n	8001c3c <ethSendFrame+0xd8>
      {
         //The host controller should manually add padding to the packet before
         //transmitting it
         error = ethPadFrame(buffer, &length);
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4619      	mov	r1, r3
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f000 f9af 	bl	8001f8c <ethPadFrame>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <ethSendFrame+0xd8>
            return error;
 8001c38:	8b7b      	ldrh	r3, [r7, #26]
 8001c3a:	e028      	b.n	8001c8e <ethSendFrame+0x12a>
      }

      //CRC calculation not supported by hardware?
      if(!physicalInterface->nicDriver->autoCrcCalc)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d11a      	bne.n	8001c7c <ethSendFrame+0x118>
      {
         //Compute CRC over the header and payload
         crc = ethCalcCrcEx(buffer, offset, length);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f000 fac3 	bl	80021d8 <ethCalcCrcEx>
 8001c52:	4603      	mov	r3, r0
 8001c54:	617b      	str	r3, [r7, #20]
         //Convert from host byte order to little-endian byte order
         crc = htole32(crc);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	617b      	str	r3, [r7, #20]

         //Append the calculated CRC value
         error = netBufferAppend(buffer, &crc, sizeof(crc));
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	2204      	movs	r2, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	6838      	ldr	r0, [r7, #0]
 8001c64:	f001 faea 	bl	800323c <netBufferAppend>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 8001c6c:	8b7b      	ldrh	r3, [r7, #26]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <ethSendFrame+0x112>
            return error;
 8001c72:	8b7b      	ldrh	r3, [r7, #26]
 8001c74:	e00b      	b.n	8001c8e <ethSendFrame+0x12a>

         //Adjust the length of the frame
         length += sizeof(crc);
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	613b      	str	r3, [r7, #16]
      }
   }

   //Forward the frame to the physical interface
   error = nicSendPacket(physicalInterface, buffer, offset, ancillary);
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	69f8      	ldr	r0, [r7, #28]
 8001c84:	f002 f84c 	bl	8003d20 <nicSendPacket>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	837b      	strh	r3, [r7, #26]

   //Return status code
   return error;
 8001c8c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	080144e8 	.word	0x080144e8

08001c9c <ethAcceptMacAddr>:
 * @param[in] macAddr MAC address to accept
 * @return Error code
 **/

error_t ethAcceptMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   MacFilterEntry *firstFreeEntry;

   //Keep track of the first free entry
   firstFreeEntry = NULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e025      	b.n	8001cfc <ethAcceptMacAddr+0x60>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	33d0      	adds	r3, #208	; 0xd0
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	60fb      	str	r3, [r7, #12]

      //Valid entry?
      if(entry->refCount > 0)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00f      	beq.n	8001cec <ethAcceptMacAddr+0x50>
      {
         //Check whether the table already contains the specified MAC address
         if(macCompAddr(&entry->addr, macAddr))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2206      	movs	r2, #6
 8001cd0:	6839      	ldr	r1, [r7, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f010 fee1 	bl	8012a9a <memcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10b      	bne.n	8001cf6 <ethAcceptMacAddr+0x5a>
         {
            //Increment the reference count
            entry->refCount++;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]
            //No error to report
            return NO_ERROR;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e025      	b.n	8001d38 <ethAcceptMacAddr+0x9c>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <ethAcceptMacAddr+0x5a>
            firstFreeEntry = entry;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	613b      	str	r3, [r7, #16]
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b0b      	cmp	r3, #11
 8001d00:	d9d6      	bls.n	8001cb0 <ethAcceptMacAddr+0x14>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <ethAcceptMacAddr+0x70>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e015      	b.n	8001d38 <ethAcceptMacAddr+0x9c>
   }

   //Add a new entry to the table
   firstFreeEntry->addr = *macAddr;
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6810      	ldr	r0, [r2, #0]
 8001d12:	6018      	str	r0, [r3, #0]
 8001d14:	8892      	ldrh	r2, [r2, #4]
 8001d16:	809a      	strh	r2, [r3, #4]
   //Initialize the reference count
   firstFreeEntry->refCount = 1;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	609a      	str	r2, [r3, #8]

   //Force the network interface controller to add the current
   //entry to its MAC filter table
   firstFreeEntry->addFlag = TRUE;
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2201      	movs	r2, #1
 8001d22:	60da      	str	r2, [r3, #12]
   firstFreeEntry->deleteFlag = FALSE;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]

   //Update the MAC filter table
   nicUpdateMacAddrFilter(interface);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f002 f84e 	bl	8003dcc <nicUpdateMacAddrFilter>

   //Clear the flag
   firstFreeEntry->addFlag = FALSE;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <ethDropMacAddr>:
 * @param[in] macAddr MAC address to drop
 * @return Error code
 **/

error_t ethDropMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	e031      	b.n	8001db4 <ethDropMacAddr+0x74>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	33d0      	adds	r3, #208	; 0xd0
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->refCount > 0)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <ethDropMacAddr+0x6e>
      {
         //Specified MAC address found?
         if(macCompAddr(&entry->addr, macAddr))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2206      	movs	r2, #6
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f010 fe91 	bl	8012a9a <memcmp>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d117      	bne.n	8001dae <ethDropMacAddr+0x6e>
         {
            //Decrement the reference count
            entry->refCount--;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	1e5a      	subs	r2, r3, #1
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	609a      	str	r2, [r3, #8]

            //Remove the entry if the reference count drops to zero
            if(entry->refCount == 0)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10c      	bne.n	8001daa <ethDropMacAddr+0x6a>
            {
               //Force the network interface controller to remove the current
               //entry from its MAC filter table
               entry->deleteFlag = TRUE;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2201      	movs	r2, #1
 8001d94:	611a      	str	r2, [r3, #16]

               //Update the MAC filter table
               nicUpdateMacAddrFilter(interface);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f002 f818 	bl	8003dcc <nicUpdateMacAddrFilter>

               //Clear the flag
               entry->deleteFlag = FALSE;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
               //Remove the multicast address from the list
               entry->addr = MAC_UNSPECIFIED_ADDR;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	809a      	strh	r2, [r3, #4]
            }

            //No error to report
            return NO_ERROR;
 8001daa:	2300      	movs	r3, #0
 8001dac:	e007      	b.n	8001dbe <ethDropMacAddr+0x7e>
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b0b      	cmp	r3, #11
 8001db8:	d9ca      	bls.n	8001d50 <ethDropMacAddr+0x10>
         }
      }
   }

   //The specified MAC address does not exist
   return ERROR_ADDRESS_NOT_FOUND;
 8001dba:	f44f 730a 	mov.w	r3, #552	; 0x228
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <ethAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ethAllocBuffer(size_t length, size_t *offset)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
   size_t n;
   NetBuffer *buffer;

   //Ethernet frame overhead
   n = sizeof(EthHeader);
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	60fb      	str	r3, [r7, #12]
   //Switch port tagging overhead
   n += ETH_PORT_TAG_SIZE;
#endif

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + n);
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 ff89 	bl	8002cf2 <netBufferAlloc>
 8001de0:	60b8      	str	r0, [r7, #8]
   //Failed to allocate buffer?
   if(buffer == NULL)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <ethAllocBuffer+0x26>
      return NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e003      	b.n	8001df4 <ethAllocBuffer+0x2e>

   //Offset to the first byte of the payload
   *offset = n;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8001df2:	68bb      	ldr	r3, [r7, #8]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <macStringToAddr>:
 * @param[out] macAddr Binary representation of the MAC address
 * @return Error code
 **/

error_t macStringToAddr(const char_t *str, MacAddr *macAddr)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e0e:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Hexadecimal digit found?
      if(isxdigit((uint8_t) *str))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a3f      	ldr	r2, [pc, #252]	; (8001f14 <macStringToAddr+0x118>)
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d035      	beq.n	8001e90 <macStringToAddr+0x94>
      {
         //First digit to be decoded?
         if(value < 0)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da01      	bge.n	8001e2e <macStringToAddr+0x32>
            value = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         if(osIsdigit(*str))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <macStringToAddr+0x118>)
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <macStringToAddr+0x56>
         {
            value = (value * 16) + (*str - '0');
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	011a      	lsls	r2, r3, #4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	3b30      	subs	r3, #48	; 0x30
 8001e4c:	4413      	add	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e018      	b.n	8001e84 <macStringToAddr+0x88>
         }
         else if(osIsupper(*str))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <macStringToAddr+0x118>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <macStringToAddr+0x7a>
         {
            value = (value * 16) + (*str - 'A' + 10);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	011a      	lsls	r2, r3, #4
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	3b37      	subs	r3, #55	; 0x37
 8001e70:	4413      	add	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e006      	b.n	8001e84 <macStringToAddr+0x88>
         }
         else
         {
            value = (value * 16) + (*str - 'a' + 10);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	011a      	lsls	r2, r3, #4
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b57      	subs	r3, #87	; 0x57
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
         }

         //Check resulting value
         if(value > 0xFF)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	dd38      	ble.n	8001efc <macStringToAddr+0x100>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8001e8a:	2369      	movs	r3, #105	; 0x69
 8001e8c:	82fb      	strh	r3, [r7, #22]
            break;
 8001e8e:	e039      	b.n	8001f04 <macStringToAddr+0x108>
         }
      }
      //Dash or colon separator found?
      else if((*str == '-' || *str == ':') && i < 6)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b2d      	cmp	r3, #45	; 0x2d
 8001e96:	d003      	beq.n	8001ea0 <macStringToAddr+0xa4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b3a      	cmp	r3, #58	; 0x3a
 8001e9e:	d113      	bne.n	8001ec8 <macStringToAddr+0xcc>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	dc10      	bgt.n	8001ec8 <macStringToAddr+0xcc>
      {
         //Each separator must be preceded by a valid number
         if(value < 0)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da02      	bge.n	8001eb2 <macStringToAddr+0xb6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8001eac:	2369      	movs	r3, #105	; 0x69
 8001eae:	82fb      	strh	r3, [r7, #22]
            break;
 8001eb0:	e028      	b.n	8001f04 <macStringToAddr+0x108>
         }

         //Save the current byte
         macAddr->b[i++] = value;
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	613a      	str	r2, [r7, #16]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d1      	uxtb	r1, r2
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	54d1      	strb	r1, [r2, r3]
         //Prepare to decode the next byte
         value = -1;
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e019      	b.n	8001efc <macStringToAddr+0x100>
      }
      //End of string detected?
      else if(*str == '\0' && i == 5)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d112      	bne.n	8001ef6 <macStringToAddr+0xfa>
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d10f      	bne.n	8001ef6 <macStringToAddr+0xfa>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da02      	bge.n	8001ee2 <macStringToAddr+0xe6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8001edc:	2369      	movs	r3, #105	; 0x69
 8001ede:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 8001ee0:	e010      	b.n	8001f04 <macStringToAddr+0x108>
            macAddr->b[i] = value;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b2d9      	uxtb	r1, r3
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	460a      	mov	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	82fb      	strh	r3, [r7, #22]
         break;
 8001ef4:	e006      	b.n	8001f04 <macStringToAddr+0x108>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 8001ef6:	2369      	movs	r3, #105	; 0x69
 8001ef8:	82fb      	strh	r3, [r7, #22]
         break;
 8001efa:	e003      	b.n	8001f04 <macStringToAddr+0x108>
      }

      //Point to the next character
      str++;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3301      	adds	r3, #1
 8001f00:	607b      	str	r3, [r7, #4]
      if(isxdigit((uint8_t) *str))
 8001f02:	e785      	b.n	8001e10 <macStringToAddr+0x14>
   }

   //Return status code
   return error;
 8001f04:	8afb      	ldrh	r3, [r7, #22]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	080145d4 	.word	0x080145d4

08001f18 <macAddrToEui64>:
 * @param[in] macAddr Host MAC address
 * @param[out] interfaceId IPv6 modified EUI-64 identifier
 **/

void macAddrToEui64(const MacAddr *macAddr, Eui64 *interfaceId)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
   //Copy the Organization Unique Identifier (OUI)
   interfaceId->b[0] = macAddr->b[0];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	701a      	strb	r2, [r3, #0]
   interfaceId->b[1] = macAddr->b[1];
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	785a      	ldrb	r2, [r3, #1]
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	705a      	strb	r2, [r3, #1]
   interfaceId->b[2] = macAddr->b[2];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	789a      	ldrb	r2, [r3, #2]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	709a      	strb	r2, [r3, #2]

   //The middle 16 bits are given the value 0xFFFE
   interfaceId->b[3] = 0xFF;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	70da      	strb	r2, [r3, #3]
   interfaceId->b[4] = 0xFE;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	22fe      	movs	r2, #254	; 0xfe
 8001f44:	711a      	strb	r2, [r3, #4]

   //Copy the right-most 24 bits of the MAC address
   interfaceId->b[5] = macAddr->b[3];
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	78da      	ldrb	r2, [r3, #3]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	715a      	strb	r2, [r3, #5]
   interfaceId->b[6] = macAddr->b[4];
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	791a      	ldrb	r2, [r3, #4]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	719a      	strb	r2, [r3, #6]
   interfaceId->b[7] = macAddr->b[5];
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	795a      	ldrb	r2, [r3, #5]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	71da      	strb	r2, [r3, #7]

   //Modified EUI-64 format interface identifiers are
   //formed by inverting the Universal/Local bit
   interfaceId->b[0] ^= MAC_ADDR_FLAG_LOCAL;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f083 0302 	eor.w	r3, r3, #2
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	701a      	strb	r2, [r3, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <ethDumpHeader>:
 * @brief Dump Ethernet header for debugging purpose
 * @param[in] ethHeader Pointer to the Ethernet header
 **/

void ethDumpHeader(const EthHeader *ethHeader)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
   //Dump Ethernet header contents
   TRACE_DEBUG("  Dest Addr = %s\r\n", macAddrToString(&ethHeader->destAddr, NULL));
   TRACE_DEBUG("  Src Addr = %s\r\n", macAddrToString(&ethHeader->srcAddr, NULL));
   TRACE_DEBUG("  Type = 0x%04" PRIX16 "\r\n", ntohs(ethHeader->type));
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <ethPadFrame>:
 * @param[in,out] length Length of the Ethernet frame, in bytes
 * @return Error code
 **/

error_t ethPadFrame(NetBuffer *buffer, size_t *length)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
   error_t error;
   size_t n;

   //Ethernet frames have a minimum length of 64 byte
   if(*length < (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b3b      	cmp	r3, #59	; 0x3b
 8001f9c:	d815      	bhi.n	8001fca <ethPadFrame+0x3e>
   {
      //Add padding as necessary
      n = (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE) - *length;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001fa6:	60bb      	str	r3, [r7, #8]

      //Append padding bytes
      error = netBufferAppend(buffer, ethPadding, n);
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	490b      	ldr	r1, [pc, #44]	; (8001fd8 <ethPadFrame+0x4c>)
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f001 f945 	bl	800323c <netBufferAppend>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	81fb      	strh	r3, [r7, #14]

      //Check status code
      if(!error)
 8001fb6:	89fb      	ldrh	r3, [r7, #14]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d108      	bne.n	8001fce <ethPadFrame+0x42>
      {
         //Adjust frame length
         *length += n;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	441a      	add	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e001      	b.n	8001fce <ethPadFrame+0x42>
      }
   }
   else
   {
      //No padding needed
      error = NO_ERROR;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8001fce:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	080144f8 	.word	0x080144f8

08001fdc <ethCheckDestAddr>:
 * @param[in] macAddr Destination MAC address to be checked
 * @return Error code
 **/

error_t ethCheckDestAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   NetInterface *logicalInterface;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 8001fe6:	23e4      	movs	r3, #228	; 0xe4
 8001fe8:	82fb      	strh	r3, [r7, #22]

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f001 fe45 	bl	8003c7a <nicGetLogicalInterface>
 8001ff0:	60f8      	str	r0, [r7, #12]

   //Interface MAC address?
   if(macCompAddr(macAddr, &logicalInterface->macAddr))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	33cc      	adds	r3, #204	; 0xcc
 8001ff6:	2206      	movs	r2, #6
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f010 fd4d 	bl	8012a9a <memcmp>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <ethCheckDestAddr+0x30>
   {
      error = NO_ERROR;
 8002006:	2300      	movs	r3, #0
 8002008:	82fb      	strh	r3, [r7, #22]
 800200a:	e033      	b.n	8002074 <ethCheckDestAddr+0x98>
   }
   //Broadcast address?
   else if(macCompAddr(macAddr, &MAC_BROADCAST_ADDR))
 800200c:	2206      	movs	r2, #6
 800200e:	491c      	ldr	r1, [pc, #112]	; (8002080 <ethCheckDestAddr+0xa4>)
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f010 fd42 	bl	8012a9a <memcmp>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <ethCheckDestAddr+0x46>
   {
      error = NO_ERROR;
 800201c:	2300      	movs	r3, #0
 800201e:	82fb      	strh	r3, [r7, #22]
 8002020:	e028      	b.n	8002074 <ethCheckDestAddr+0x98>
   }
   //Multicast address?
   else if(macIsMulticastAddr(macAddr))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d022      	beq.n	8002074 <ethCheckDestAddr+0x98>
      }
      else
#endif
      {
         //Go through the MAC filter table
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e01c      	b.n	800206e <ethCheckDestAddr+0x92>
         {
            //Point to the current entry
            entry = &interface->macAddrFilter[i];
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4613      	mov	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	33d0      	adds	r3, #208	; 0xd0
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	60bb      	str	r3, [r7, #8]

            //Valid entry?
            if(entry->refCount > 0)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <ethCheckDestAddr+0x8c>
            {
               //Check whether the destination MAC address matches
               //a relevant multicast address
               if(macCompAddr(&entry->addr, macAddr))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2206      	movs	r2, #6
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f010 fd1f 	bl	8012a9a <memcmp>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <ethCheckDestAddr+0x8c>
               {
                  //The MAC address is acceptable
                  error = NO_ERROR;
 8002062:	2300      	movs	r3, #0
 8002064:	82fb      	strh	r3, [r7, #22]
                  //Stop immediately
                  break;
 8002066:	e005      	b.n	8002074 <ethCheckDestAddr+0x98>
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	3301      	adds	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b0b      	cmp	r3, #11
 8002072:	d9df      	bls.n	8002034 <ethCheckDestAddr+0x58>
         }
      }
   }

   //Return status code
   return error;
 8002074:	8afb      	ldrh	r3, [r7, #22]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	080144f0 	.word	0x080144f0

08002084 <ethUpdateInStats>:
 * @param[in] interface Underlying network interface
 * @param[in] destMacAddr Destination MAC address
 **/

void ethUpdateInStats(NetInterface *interface, const MacAddr *destMacAddr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 800208e:	2206      	movs	r2, #6
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <ethUpdateInStats+0x20>)
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f010 fd01 	bl	8012a9a <memcmp>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
      //Number of unicast packets delivered to a higher-layer protocol
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInUcastPkts, 1);
   }
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	080144f0 	.word	0x080144f0

080020a8 <ethUpdateOutStats>:
 * @param[in] length Length of the Ethernet frame, in bytes
 **/

void ethUpdateOutStats(NetInterface *interface, const MacAddr *destMacAddr,
   size_t length)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutOctets, length);

   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 80020b4:	2206      	movs	r2, #6
 80020b6:	4905      	ldr	r1, [pc, #20]	; (80020cc <ethUpdateOutStats+0x24>)
 80020b8:	68b8      	ldr	r0, [r7, #8]
 80020ba:	f010 fcee 	bl	8012a9a <memcmp>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
      //Number of unicast packets that higher-level protocols requested be transmitted
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutUcastPkts, 1);
   }
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	080144f0 	.word	0x080144f0

080020d0 <ethUpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ethUpdateErrorStats(NetInterface *interface, error_t error)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	3bd5      	subs	r3, #213	; 0xd5
 80020e0:	2b17      	cmp	r3, #23
 80020e2:	d833      	bhi.n	800214c <ethUpdateErrorStats+0x7c>
 80020e4:	a201      	add	r2, pc, #4	; (adr r2, 80020ec <ethUpdateErrorStats+0x1c>)
 80020e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ea:	bf00      	nop
 80020ec:	0800214d 	.word	0x0800214d
 80020f0:	0800214d 	.word	0x0800214d
 80020f4:	0800214d 	.word	0x0800214d
 80020f8:	0800214d 	.word	0x0800214d
 80020fc:	0800214d 	.word	0x0800214d
 8002100:	0800214d 	.word	0x0800214d
 8002104:	0800214d 	.word	0x0800214d
 8002108:	0800214d 	.word	0x0800214d
 800210c:	0800214d 	.word	0x0800214d
 8002110:	0800214d 	.word	0x0800214d
 8002114:	0800214d 	.word	0x0800214d
 8002118:	0800214d 	.word	0x0800214d
 800211c:	0800214d 	.word	0x0800214d
 8002120:	0800214d 	.word	0x0800214d
 8002124:	0800214d 	.word	0x0800214d
 8002128:	0800214d 	.word	0x0800214d
 800212c:	0800214d 	.word	0x0800214d
 8002130:	0800214d 	.word	0x0800214d
 8002134:	0800214d 	.word	0x0800214d
 8002138:	0800214d 	.word	0x0800214d
 800213c:	0800214d 	.word	0x0800214d
 8002140:	0800214d 	.word	0x0800214d
 8002144:	0800214d 	.word	0x0800214d
 8002148:	0800214d 	.word	0x0800214d
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUnknownProtos, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUnknownProtos, 1);
      break;
   default:
      //Just for sanity
      break;
 800214c:	bf00      	nop
   }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop

0800215c <ethCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrc(const void *data, size_t length)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
#else
   uint_t i;
   uint_t j;

   //Point to the data over which to calculate the CRC
   const uint8_t *p = (uint8_t *) data;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   uint32_t crc = 0xFFFFFFFF;
 800216a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800216e:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e021      	b.n	80021ba <ethCalcCrc+0x5e>
   {
      //Update CRC value
      crc ^= p[i];
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4053      	eors	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e010      	b.n	80021ae <ethCalcCrc+0x52>
      {
         if(crc & 0x00000001)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <ethCalcCrc+0x46>
            crc = (crc >> 1) ^ 0xEDB88320;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	085a      	lsrs	r2, r3, #1
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <ethCalcCrc+0x78>)
 800219c:	4053      	eors	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	e002      	b.n	80021a8 <ethCalcCrc+0x4c>
         else
            crc = crc >> 1;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	3301      	adds	r3, #1
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2b07      	cmp	r3, #7
 80021b2:	d9eb      	bls.n	800218c <ethCalcCrc+0x30>
   for(i = 0; i < length; i++)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3301      	adds	r3, #1
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3d9      	bcc.n	8002176 <ethCalcCrc+0x1a>
      }
   }

   //Return 1's complement value
   return ~crc;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
#endif
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	edb88320 	.word	0xedb88320

080021d8 <ethCalcCrcEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrcEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 80021d8:	b480      	push	{r7}
 80021da:	b08b      	sub	sp, #44	; 0x2c
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
#if (ETH_FAST_CRC_SUPPORT == DISABLED)
   uint_t k;
#endif

   //CRC preset value
   crc = 0xFFFFFFFF;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021e8:	61fb      	str	r3, [r7, #28]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e05a      	b.n	80022a6 <ethCalcCrcEx+0xce>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	3301      	adds	r3, #1
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4293      	cmp	r3, r2
 8002202:	d243      	bcs.n	800228c <ethCalcCrcEx+0xb4>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	3201      	adds	r2, #1
 800220a:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4413      	add	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	3301      	adds	r3, #1
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4293      	cmp	r3, r2
 800222a:	bf28      	it	cs
 800222c:	4613      	movcs	r3, r2
 800222e:	623b      	str	r3, [r7, #32]
         //Adjust byte counter
         length -= n;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 8002238:	e022      	b.n	8002280 <ethCalcCrcEx+0xa8>
#if (ETH_FAST_CRC_SUPPORT == ENABLED)
            //The message is processed byte by byte
            crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ *p];
#else
            //Update CRC value
            crc ^= *p;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4053      	eors	r3, r2
 8002244:	61fb      	str	r3, [r7, #28]

            //The message is processed bit by bit
            for(k = 0; k < 8; k++)
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e010      	b.n	800226e <ethCalcCrcEx+0x96>
            {
               if(crc & 0x00000001)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <ethCalcCrcEx+0x8a>
                  crc = (crc >> 1) ^ 0xEDB88320;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	085a      	lsrs	r2, r3, #1
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <ethCalcCrcEx+0xf0>)
 800225c:	4053      	eors	r3, r2
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	e002      	b.n	8002268 <ethCalcCrcEx+0x90>
               else
                  crc = crc >> 1;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
            for(k = 0; k < 8; k++)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3301      	adds	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b07      	cmp	r3, #7
 8002272:	d9eb      	bls.n	800224c <ethCalcCrcEx+0x74>
            }
#endif
            //Next byte
            p++;
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	3301      	adds	r3, #1
 8002278:	61bb      	str	r3, [r7, #24]
            n--;
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	3b01      	subs	r3, #1
 800227e:	623b      	str	r3, [r7, #32]
         while(n > 0)
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1d9      	bne.n	800223a <ethCalcCrcEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	e009      	b.n	80022a0 <ethCalcCrcEx+0xc8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	889b      	ldrh	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	3301      	adds	r3, #1
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d202      	bcs.n	80022b6 <ethCalcCrcEx+0xde>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d19c      	bne.n	80021f0 <ethCalcCrcEx+0x18>
      }
   }

   //Return 1's complement value
   return ~crc;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	43db      	mvns	r3, r3
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	372c      	adds	r7, #44	; 0x2c
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	edb88320 	.word	0xedb88320

080022cc <ethCheckCrc>:
 * @return Error code
 **/

error_t ethCheckCrc(NetInterface *interface, const uint8_t *frame,
   size_t length)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
   uint32_t crc;

   //Malformed Ethernet frame?
   if(length < (sizeof(EthHeader) + ETH_CRC_SIZE))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d801      	bhi.n	80022e2 <ethCheckCrc+0x16>
   {
      //Drop the received frame
      return ERROR_INVALID_LENGTH;
 80022de:	23ec      	movs	r3, #236	; 0xec
 80022e0:	e035      	b.n	800234e <ethCheckCrc+0x82>
   }

   //CRC verification not supported by hardware?
   if(!interface->nicDriver->autoCrcVerif)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <ethCheckCrc+0x34>
   {
      //The value of the residue is 0x2144DF1C when no CRC errors
      //are detected
      if(ethCalcCrc(frame, length) != 0x2144DF1C)
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	68b8      	ldr	r0, [r7, #8]
 80022f0:	f7ff ff34 	bl	800215c <ethCalcCrc>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <ethCheckCrc+0x8c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d001      	beq.n	8002300 <ethCheckCrc+0x34>
      {
         //Drop the received frame
         return ERROR_WRONG_CHECKSUM;
 80022fc:	23d5      	movs	r3, #213	; 0xd5
 80022fe:	e026      	b.n	800234e <ethCheckCrc+0x82>
      }
   }

   //Retrieve CRC value
   crc = LOAD32BE(frame + length - ETH_CRC_SIZE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b04      	subs	r3, #4
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4413      	add	r3, r2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	061a      	lsls	r2, r3, #24
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b04      	subs	r3, #4
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	440b      	add	r3, r1
 8002314:	3301      	adds	r3, #1
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b04      	subs	r3, #4
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	440b      	add	r3, r1
 8002324:	3302      	adds	r3, #2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	4313      	orrs	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	3a04      	subs	r2, #4
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	440a      	add	r2, r1
 8002334:	3203      	adds	r2, #3
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

   //Gather entropy
   netContext.entropy += crc;
 800233c:	4b07      	ldr	r3, [pc, #28]	; (800235c <ethCheckCrc+0x90>)
 800233e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <ethCheckCrc+0x90>)
 8002348:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Successful CRC verification
   return NO_ERROR;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2144df1c 	.word	0x2144df1c
 800235c:	20009178 	.word	0x20009178

08002360 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d10b      	bne.n	800238e <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data, buffer,
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1d19      	adds	r1, r3, #4
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f00a fe01 	bl	800cf8a <ipv4SendDatagram>
 8002388:	4603      	mov	r3, r0
 800238a:	82fb      	strh	r3, [r7, #22]
 800238c:	e001      	b.n	8002392 <ipSendDatagram+0x32>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 800238e:	23e4      	movs	r3, #228	; 0xe4
 8002390:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8002392:	8afb      	ldrh	r3, [r7, #22]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <ipSelectSourceAddr>:
 * @return Error code
 **/

error_t ipSelectSourceAddr(NetInterface **interface,
   const IpAddr *destAddr, IpAddr *srcAddr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //The destination address is an IPv4 address?
   if(destAddr->length == sizeof(Ipv4Addr))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d10d      	bne.n	80023cc <ipSelectSourceAddr+0x30>
   {
      //An IPv4 address is expected
      srcAddr->length = sizeof(Ipv4Addr);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2204      	movs	r2, #4
 80023b4:	601a      	str	r2, [r3, #0]

      //Get the most appropriate source address to use
      error = ipv4SelectSourceAddr(interface, destAddr->ipv4Addr,
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	461a      	mov	r2, r3
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f00b fccf 	bl	800dd64 <ipv4SelectSourceAddr>
 80023c6:	4603      	mov	r3, r0
 80023c8:	82fb      	strh	r3, [r7, #22]
 80023ca:	e001      	b.n	80023d0 <ipSelectSourceAddr+0x34>
   else
#endif
   //The destination address is not valid?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80023cc:	23e4      	movs	r3, #228	; 0xe4
 80023ce:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 80023d0:	8afb      	ldrh	r3, [r7, #22]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <ipIsUnspecifiedAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is unspecified, else FALSE
 **/

bool_t ipIsUnspecifiedAddr(const IpAddr *ipAddr)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d109      	bne.n	80023fe <ipIsUnspecifiedAddr+0x24>
   {
      //Compare IPv4 address
      if(ipAddr->ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <ipIsUnspecifiedAddr+0x1e>
      {
         result = TRUE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e004      	b.n	8002402 <ipIsUnspecifiedAddr+0x28>
      }
      else
      {
         result = FALSE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e001      	b.n	8002402 <ipIsUnspecifiedAddr+0x28>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is unspecified, else FALSE
   return result;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <ipIsMulticastAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is a multicast address, else FALSE
 **/

bool_t ipIsMulticastAddr(const IpAddr *ipAddr)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d10a      	bne.n	8002436 <ipIsMulticastAddr+0x26>
   {
      //Check whether the IPv4 address is a multicast address
      result = ipv4IsMulticastAddr(ipAddr->ipv4Addr);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	2be0      	cmp	r3, #224	; 0xe0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e001      	b.n	800243a <ipIsMulticastAddr+0x2a>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
   }

   //Return TRUE if the IP address is a multicast address, else FALSE
   return result;
 800243a:	68fb      	ldr	r3, [r7, #12]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uintptr_t) p & 1) != 0)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4413      	add	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3301      	adds	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	3b01      	subs	r3, #1
 8002480:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uintptr_t) p & 2) != 0)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d024      	beq.n	80024d6 <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d921      	bls.n	80024d6 <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4413      	add	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	3302      	adds	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3b02      	subs	r3, #2
 80024a8:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 80024aa:	e014      	b.n	80024d6 <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d203      	bcs.n	80024c6 <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e001      	b.n	80024ca <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	3304      	adds	r3, #4
 80024ce:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	3b04      	subs	r3, #4
 80024d4:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d8e7      	bhi.n	80024ac <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	4413      	add	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d90b      	bls.n	8002506 <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	461a      	mov	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	3302      	adds	r3, #2
 80024fe:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	3b02      	subs	r3, #2
 8002504:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	b29a      	uxth	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	b29a      	uxth	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	0c1b      	lsrs	r3, r3, #16
 800252c:	4413      	add	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uintptr_t) data & 1) != 0)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d006      	beq.n	8002548 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	0a1a      	lsrs	r2, r3, #8
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	4313      	orrs	r3, r2
 8002544:	b29b      	uxth	r3, r3
 8002546:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	b29b      	uxth	r3, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	b29b      	uxth	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
 8002574:	e060      	b.n	8002638 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	3301      	adds	r3, #1
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	889b      	ldrh	r3, [r3, #4]
 8002582:	461a      	mov	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4293      	cmp	r3, r2
 8002588:	d249      	bcs.n	800261e <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	3201      	adds	r2, #1
 8002590:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4413      	add	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3301      	adds	r3, #1
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4413      	add	r3, r2
 80025a4:	889b      	ldrh	r3, [r3, #4]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a3b      	ldr	r3, [r7, #32]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4293      	cmp	r3, r2
 80025b8:	bf28      	it	cs
 80025ba:	4613      	movcs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d006      	beq.n	80025d6 <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	0a1a      	lsrs	r2, r3, #8
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	69b8      	ldr	r0, [r7, #24]
 80025da:	f7ff ff35 	bl	8002448 <ipCalcChecksum>
 80025de:	4603      	mov	r3, r0
 80025e0:	43db      	mvns	r3, r3
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	0c1b      	lsrs	r3, r3, #16
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	0a1a      	lsrs	r2, r3, #8
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	4313      	orrs	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4413      	add	r3, r2
 8002616:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	e009      	b.n	8002632 <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	3301      	adds	r3, #1
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	889b      	ldrh	r3, [r3, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3301      	adds	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263e:	429a      	cmp	r2, r3
 8002640:	d203      	bcs.n	800264a <ipCalcChecksumEx+0xee>
 8002642:	6a3a      	ldr	r2, [r7, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d395      	bcc.n	8002576 <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	b29b      	uxth	r3, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	b29b      	uxth	r3, r3
}
 8002652:	4618      	mov	r0, r3
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff feec 	bl	8002448 <ipCalcChecksum>
 8002670:	4603      	mov	r3, r0
 8002672:	43db      	mvns	r3, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff6d 	bl	800255c <ipCalcChecksumEx>
 8002682:	4603      	mov	r3, r0
 8002684:	43db      	mvns	r3, r3
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	b29a      	uxth	r2, r3
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	4413      	add	r3, r2
 800269a:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	b29b      	uxth	r3, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
#else
   //Maximum overhead when using IPv4
   headerLen = sizeof(Ipv4Header) + sizeof(uint32_t);
 80026b6:	2318      	movs	r3, #24
 80026b8:	60fb      	str	r3, [r7, #12]
#endif

#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fb7f 	bl	8001dc6 <ethAllocBuffer>
 80026c8:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	441a      	add	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 80026dc:	68bb      	ldr	r3, [r7, #8]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //Clear TCP/IP stack context
   osMemset(&netContext, 0, sizeof(NetContext));
 80026ee:	f640 0214 	movw	r2, #2068	; 0x814
 80026f2:	2100      	movs	r1, #0
 80026f4:	484e      	ldr	r0, [pc, #312]	; (8002830 <netInit+0x148>)
 80026f6:	f010 fa06 	bl	8012b06 <memset>

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <netInit+0x148>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   //Get current time
   netTimestamp = osGetSystemTime();
 8002702:	f7fe feb5 	bl	8001470 <osGetSystemTime>
 8002706:	4603      	mov	r3, r0
 8002708:	4a49      	ldr	r2, [pc, #292]	; (8002830 <netInit+0x148>)
 800270a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 800270e:	4848      	ldr	r0, [pc, #288]	; (8002830 <netInit+0x148>)
 8002710:	f7fe fe78 	bl	8001404 <osCreateMutex>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <netInit+0x36>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 800271a:	2365      	movs	r3, #101	; 0x65
 800271c:	e084      	b.n	8002828 <netInit+0x140>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 800271e:	4845      	ldr	r0, [pc, #276]	; (8002834 <netInit+0x14c>)
 8002720:	f7fe fdf6 	bl	8001310 <osCreateEvent>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <netInit+0x46>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 800272a:	2365      	movs	r3, #101	; 0x65
 800272c:	e07c      	b.n	8002828 <netInit+0x140>
   }

   //Memory pool initialization
   error = memPoolInit();
 800272e:	f000 faab 	bl	8002c88 <memPoolInit>
 8002732:	4603      	mov	r3, r0
 8002734:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <netInit+0x58>
      return error;
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	e073      	b.n	8002828 <netInit+0x140>

   //Clear configuration data for each interface
   osMemset(netInterface, 0, sizeof(netInterface));
 8002740:	f240 628c 	movw	r2, #1676	; 0x68c
 8002744:	2100      	movs	r1, #0
 8002746:	483c      	ldr	r0, [pc, #240]	; (8002838 <netInit+0x150>)
 8002748:	f010 f9dd 	bl	8012b06 <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e01c      	b.n	800278c <netInit+0xa4>
   {
      //Point to the current interface
      interface = &netInterface[i];
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f240 628c 	movw	r2, #1676	; 0x68c
 8002758:	fb02 f303 	mul.w	r3, r2, r3
 800275c:	33e0      	adds	r3, #224	; 0xe0
 800275e:	4a34      	ldr	r2, [pc, #208]	; (8002830 <netInit+0x148>)
 8002760:	4413      	add	r3, r2
 8002762:	607b      	str	r3, [r7, #4]

      //Default interface name
      osSprintf(interface->name, "eth%u", i);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3310      	adds	r3, #16
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4934      	ldr	r1, [pc, #208]	; (800283c <netInit+0x154>)
 800276c:	4618      	mov	r0, r3
 800276e:	f010 fd4d 	bl	801320c <siprintf>

      //Zero-based index
      interface->index = i;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]

#if (ETH_SUPPORT == ENABLED)
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	3301      	adds	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0df      	beq.n	8002752 <netInit+0x6a>
#endif
   }

   //Socket related initialization
   error = socketInit();
 8002792:	f002 fab3 	bl	8004cfc <socketInit>
 8002796:	4603      	mov	r3, r0
 8002798:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 800279a:	897b      	ldrh	r3, [r7, #10]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <netInit+0xbc>
      return error;
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	e041      	b.n	8002828 <netInit+0x140>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 80027a4:	f006 fa6c 	bl	8008c80 <udpInit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <netInit+0xce>
      return error;
 80027b2:	897b      	ldrh	r3, [r7, #10]
 80027b4:	e038      	b.n	8002828 <netInit+0x140>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 80027b6:	f002 fe03 	bl	80053c0 <tcpInit>
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80027be:	897b      	ldrh	r3, [r7, #10]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <netInit+0xe0>
      return error;
 80027c4:	897b      	ldrh	r3, [r7, #10]
 80027c6:	e02f      	b.n	8002828 <netInit+0x140>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 80027c8:	f007 ffa4 	bl	800a714 <dnsInit>
 80027cc:	4603      	mov	r3, r0
 80027ce:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 80027d0:	897b      	ldrh	r3, [r7, #10]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <netInit+0xf2>
      return error;
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	e026      	b.n	8002828 <netInit+0x140>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 80027da:	4b19      	ldr	r3, [pc, #100]	; (8002840 <netInit+0x158>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <netInit+0x15c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 80027e6:	4b18      	ldr	r3, [pc, #96]	; (8002848 <netInit+0x160>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && AUTO_IP_SUPPORT == ENABLED)
   autoIpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   dhcpClientTickCounter = 0;
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <netInit+0x164>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <netInit+0x168>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <netInit+0x16c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 80027fe:	2302      	movs	r3, #2
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	f240 238a 	movw	r3, #650	; 0x28a
 8002806:	2200      	movs	r2, #0
 8002808:	4913      	ldr	r1, [pc, #76]	; (8002858 <netInit+0x170>)
 800280a:	4814      	ldr	r0, [pc, #80]	; (800285c <netInit+0x174>)
 800280c:	f7fe fd3e 	bl	800128c <osCreateTask>
 8002810:	4603      	mov	r3, r0
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <netInit+0x148>)
 8002814:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <netInit+0x148>)
 800281a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <netInit+0x13e>
      return ERROR_OUT_OF_RESOURCES;
 8002822:	2365      	movs	r3, #101	; 0x65
 8002824:	e000      	b.n	8002828 <netInit+0x140>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20009178 	.word	0x20009178
 8002834:	200091c4 	.word	0x200091c4
 8002838:	20009258 	.word	0x20009258
 800283c:	08014138 	.word	0x08014138
 8002840:	2000998c 	.word	0x2000998c
 8002844:	2000b654 	.word	0x2000b654
 8002848:	2000b658 	.word	0x2000b658
 800284c:	2000b30c 	.word	0x2000b30c
 8002850:	2000b268 	.word	0x2000b268
 8002854:	2000b310 	.word	0x2000b310
 8002858:	08002af9 	.word	0x08002af9
 800285c:	08014140 	.word	0x08014140

08002860 <netGetDefaultInterface>:
 * @brief Get default network interface
 * @return Pointer to the default network interface to be used
 **/

NetInterface *netGetDefaultInterface(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
   //Default network interface
   return &netInterface[0];
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <netGetDefaultInterface+0x10>)
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20009258 	.word	0x20009258

08002874 <netSetMacAddr>:
 * @param[in] macAddr MAC address
 * @return Error code
 **/

error_t netSetMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
#if (ETH_SUPPORT == ENABLED)
   //Check parameters
   if(interface == NULL || macAddr == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <netSetMacAddr+0x16>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <netSetMacAddr+0x1a>
      return ERROR_INVALID_PARAMETER;
 800288a:	2302      	movs	r3, #2
 800288c:	e013      	b.n	80028b6 <netSetMacAddr+0x42>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800288e:	480c      	ldr	r0, [pc, #48]	; (80028c0 <netSetMacAddr+0x4c>)
 8002890:	f7fe fdd0 	bl	8001434 <osAcquireMutex>

   //Set MAC address
   interface->macAddr = *macAddr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	33cc      	adds	r3, #204	; 0xcc
 800289a:	6810      	ldr	r0, [r2, #0]
 800289c:	6018      	str	r0, [r3, #0]
 800289e:	8892      	ldrh	r2, [r2, #4]
 80028a0:	809a      	strh	r2, [r3, #4]

   //Generate the 64-bit interface identifier
   macAddrToEui64(macAddr, &interface->eui64);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3308      	adds	r3, #8
 80028a6:	4619      	mov	r1, r3
 80028a8:	6838      	ldr	r0, [r7, #0]
 80028aa:	f7ff fb35 	bl	8001f18 <macAddrToEui64>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80028ae:	4804      	ldr	r0, [pc, #16]	; (80028c0 <netSetMacAddr+0x4c>)
 80028b0:	f7fe fdcf 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80028b4:	2300      	movs	r3, #0
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20009178 	.word	0x20009178

080028c4 <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <netSetInterfaceName+0x16>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 80028da:	2302      	movs	r3, #2
 80028dc:	e00d      	b.n	80028fa <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80028de:	4809      	ldr	r0, [pc, #36]	; (8002904 <netSetInterfaceName+0x40>)
 80028e0:	f7fe fda8 	bl	8001434 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3310      	adds	r3, #16
 80028e8:	2208      	movs	r2, #8
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe fde5 	bl	80014bc <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80028f2:	4804      	ldr	r0, [pc, #16]	; (8002904 <netSetInterfaceName+0x40>)
 80028f4:	f7fe fdad 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20009178 	.word	0x20009178

08002908 <netSetHostname>:
 * @param[in] name NULL-terminated string that contains the host name
 * @return Error code
 **/

error_t netSetHostname(NetInterface *interface, const char_t *name)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <netSetHostname+0x16>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <netSetHostname+0x1a>
      return ERROR_INVALID_PARAMETER;
 800291e:	2302      	movs	r3, #2
 8002920:	e00d      	b.n	800293e <netSetHostname+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002922:	4809      	ldr	r0, [pc, #36]	; (8002948 <netSetHostname+0x40>)
 8002924:	f7fe fd86 	bl	8001434 <osAcquireMutex>

   //Set host name
   strSafeCopy(interface->hostname, name, NET_MAX_HOSTNAME_LEN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3319      	adds	r3, #25
 800292c:	2218      	movs	r2, #24
 800292e:	6839      	ldr	r1, [r7, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fdc3 	bl	80014bc <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002936:	4804      	ldr	r0, [pc, #16]	; (8002948 <netSetHostname+0x40>)
 8002938:	f7fe fd8b 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20009178 	.word	0x20009178

0800294c <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <netSetDriver+0x16>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8002962:	2302      	movs	r3, #2
 8002964:	e009      	b.n	800297a <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002966:	4807      	ldr	r0, [pc, #28]	; (8002984 <netSetDriver+0x38>)
 8002968:	f7fe fd64 	bl	8001434 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <netSetDriver+0x38>)
 8002974:	f7fe fd6d 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20009178 	.word	0x20009178

08002988 <netSetSpiDriver>:
 * @param[in] driver Underlying SPI driver
 * @return Error code
 **/

error_t netSetSpiDriver(NetInterface *interface, const SpiDriver *driver)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <netSetSpiDriver+0x16>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <netSetSpiDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 800299e:	2302      	movs	r3, #2
 80029a0:	e009      	b.n	80029b6 <netSetSpiDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80029a2:	4807      	ldr	r0, [pc, #28]	; (80029c0 <netSetSpiDriver+0x38>)
 80029a4:	f7fe fd46 	bl	8001434 <osAcquireMutex>
   //Set SPI driver
   interface->spiDriver = driver;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <netSetSpiDriver+0x38>)
 80029b0:	f7fe fd4f 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20009178 	.word	0x20009178

080029c4 <netSetExtIntDriver>:
 * @param[in] driver Underlying SPI driver
 * @return Error code
 **/

error_t netSetExtIntDriver(NetInterface *interface, const ExtIntDriver *driver)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <netSetExtIntDriver+0x16>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <netSetExtIntDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 80029da:	2302      	movs	r3, #2
 80029dc:	e009      	b.n	80029f2 <netSetExtIntDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <netSetExtIntDriver+0x38>)
 80029e0:	f7fe fd28 	bl	8001434 <osAcquireMutex>
   //Set external interrupt line driver
   interface->extIntDriver = driver;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80029ea:	4804      	ldr	r0, [pc, #16]	; (80029fc <netSetExtIntDriver+0x38>)
 80029ec:	f7fe fd31 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20009178 	.word	0x20009178

08002a00 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e06c      	b.n	8002aec <netConfigInterface+0xec>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002a12:	4838      	ldr	r0, [pc, #224]	; (8002af4 <netConfigInterface+0xf4>)
 8002a14:	f7fe fd0e 	bl	8001434 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3354      	adds	r3, #84	; 0x54
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fc6e 	bl	8001310 <osCreateEvent>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 8002a3a:	2365      	movs	r3, #101	; 0x65
 8002a3c:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 8002a3e:	e034      	b.n	8002aaa <netConfigInterface+0xaa>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	4798      	blx	r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11f      	bne.n	8002a9c <netConfigInterface+0x9c>
#endif
      }

#if (ETH_SUPPORT == ENABLED)
      //Ethernet related initialization
      error = ethInit(interface);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe ffc5 	bl	80019ec <ethInit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8002a66:	89fb      	ldrh	r3, [r7, #14]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d119      	bne.n	8002aa0 <netConfigInterface+0xa0>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f00a f807 	bl	800ca80 <ipv4Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d113      	bne.n	8002aa4 <netConfigInterface+0xa4>
         break;

#if (ETH_SUPPORT == ENABLED)
      //ARP cache initialization
      error = arpInit(interface);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f008 ffcf 	bl	800ba20 <arpInit>
 8002a82:	4603      	mov	r3, r0
 8002a84:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8002a86:	89fb      	ldrh	r3, [r7, #14]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10d      	bne.n	8002aa8 <netConfigInterface+0xa8>
         break;
#endif

#if (LLMNR_RESPONDER_SUPPORT == ENABLED)
      //LLMNR responder initialization
      error = llmnrResponderInit(interface);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f00b fc83 	bl	800e398 <llmnrResponderInit>
 8002a92:	4603      	mov	r3, r0
 8002a94:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	e006      	b.n	8002aaa <netConfigInterface+0xaa>
            break;
 8002a9c:	bf00      	nop
 8002a9e:	e004      	b.n	8002aaa <netConfigInterface+0xaa>
         break;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <netConfigInterface+0xaa>
         break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <netConfigInterface+0xaa>
         break;
 8002aa8:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d114      	bne.n	8002ada <netConfigInterface+0xda>
   {
      //Initialize pseudo-random generator
      netInitRand();
 8002ab0:	f000 ff06 	bl	80038c0 <netInitRand>

      //The network interface is now fully configured
      interface->configured = TRUE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <netConfigInterface+0xf4>)
 8002abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <netConfigInterface+0xe4>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <netConfigInterface+0xe4>
            interface->nicDriver->enableIrq(interface);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e004      	b.n	8002ae4 <netConfigInterface+0xe4>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3354      	adds	r3, #84	; 0x54
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fc31 	bl	8001346 <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <netConfigInterface+0xf4>)
 8002ae6:	f7fe fcb4 	bl	8001452 <osReleaseMutex>

   //Return status code
   return error;
 8002aea:	89fb      	ldrh	r3, [r7, #14]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20009178 	.word	0x20009178

08002af8 <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002afe:	4860      	ldr	r0, [pc, #384]	; (8002c80 <netTask+0x188>)
 8002b00:	f7fe fc98 	bl	8001434 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 8002b04:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <netTask+0x188>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	e019      	b.n	8002b46 <netTask+0x4e>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f240 628c 	movw	r2, #1676	; 0x68c
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	33e0      	adds	r3, #224	; 0xe0
 8002b1e:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <netTask+0x188>)
 8002b20:	4413      	add	r3, r2
 8002b22:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <netTask+0x48>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <netTask+0x48>
         {
            interface->nicDriver->enableIrq(interface);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3301      	adds	r3, #1
 8002b44:	617b      	str	r3, [r7, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0e2      	beq.n	8002b12 <netTask+0x1a>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002b4c:	484c      	ldr	r0, [pc, #304]	; (8002c80 <netTask+0x188>)
 8002b4e:	f7fe fc80 	bl	8001452 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 8002b52:	f7fe fc8d 	bl	8001470 <osGetSystemTime>
 8002b56:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 8002b58:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <netTask+0x188>)
 8002b5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da06      	bge.n	8002b74 <netTask+0x7c>
         timeout = netTimestamp - time;
 8002b66:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <netTask+0x188>)
 8002b68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	e001      	b.n	8002b78 <netTask+0x80>
      else
         timeout = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	4842      	ldr	r0, [pc, #264]	; (8002c84 <netTask+0x18c>)
 8002b7c:	f7fe fc11 	bl	80013a2 <osWaitForEvent>
 8002b80:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d061      	beq.n	8002c4c <netTask+0x154>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8002b88:	483d      	ldr	r0, [pc, #244]	; (8002c80 <netTask+0x188>)
 8002b8a:	f7fe fc53 	bl	8001434 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e055      	b.n	8002c40 <netTask+0x148>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f240 628c 	movw	r2, #1676	; 0x68c
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	33e0      	adds	r3, #224	; 0xe0
 8002ba0:	4a37      	ldr	r2, [pc, #220]	; (8002c80 <netTask+0x188>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <netTask+0xe6>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <netTask+0xe6>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	4798      	blx	r3
               }
            }

#if (ETH_SUPPORT == ENABLED)
            //Check whether a PHY event is pending
            if(interface->phyEvent)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d028      	beq.n	8002c3a <netTask+0x142>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d020      	beq.n	8002c3a <netTask+0x142>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3

                  //Valid Ethernet PHY or switch driver?
                  if(interface->phyDriver != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <netTask+0x122>
                  {
                     //Handle events
                     interface->phyDriver->eventHandler(interface);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	4798      	blx	r3
 8002c18:	e00a      	b.n	8002c30 <netTask+0x138>
                  }
                  else if(interface->switchDriver != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <netTask+0x138>
                  {
                     //Handle events
                     interface->switchDriver->eventHandler(interface);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
                  {
                     //The interface is not properly configured
                  }

                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0a6      	beq.n	8002b94 <netTask+0x9c>
            }
#endif
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8002c46:	480e      	ldr	r0, [pc, #56]	; (8002c80 <netTask+0x188>)
 8002c48:	f7fe fc03 	bl	8001452 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 8002c4c:	f7fe fc10 	bl	8001470 <osGetSystemTime>
 8002c50:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <netTask+0x188>)
 8002c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f6ff af78 	blt.w	8002b52 <netTask+0x5a>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8002c62:	4807      	ldr	r0, [pc, #28]	; (8002c80 <netTask+0x188>)
 8002c64:	f7fe fbe6 	bl	8001434 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 8002c68:	f000 fcdc 	bl	8003624 <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <netTask+0x188>)
 8002c6e:	f7fe fbf0 	bl	8001452 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3364      	adds	r3, #100	; 0x64
 8002c76:	4a02      	ldr	r2, [pc, #8]	; (8002c80 <netTask+0x188>)
 8002c78:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
      time = osGetSystemTime();
 8002c7c:	e769      	b.n	8002b52 <netTask+0x5a>
 8002c7e:	bf00      	nop
 8002c80:	20009178 	.word	0x20009178
 8002c84:	200091c4 	.word	0x200091c4

08002c88 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
   memPoolCurrentUsage = 0;
   memPoolMaxUsage = 0;
#endif

   //Successful initialization
   return NO_ERROR;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Allocate a memory block
   p = osAllocMem(size);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7fe fbee 	bl	8001486 <osAllocMem>
 8002caa:	60f8      	str	r0, [r7, #12]
#endif

   //Failed to allocate memory?
   if(!p)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10b      	bne.n	8002cca <memPoolAlloc+0x32>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 8002cb2:	f7fe fb17 	bl	80012e4 <osSuspendAllTasks>
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <memPoolAlloc+0x3c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	221b      	movs	r2, #27
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4805      	ldr	r0, [pc, #20]	; (8002cd8 <memPoolAlloc+0x40>)
 8002cc2:	f00f feb5 	bl	8012a30 <fwrite>
 8002cc6:	f7fe fb18 	bl	80012fa <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 8002cca:	68fb      	ldr	r3, [r7, #12]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000034 	.word	0x20000034
 8002cd8:	08014150 	.word	0x08014150

08002cdc <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Release memory block
   osFreeMem(p);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe fbdb 	bl	80014a0 <osFreeMem>
#endif
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8002cfa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002cfe:	f7ff ffcb 	bl	8002c98 <memPoolAlloc>
 8002d02:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <netBufferAlloc+0x1c>
      return NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e020      	b.n	8002d50 <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2209      	movs	r2, #9
 8002d18:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8002d2a:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f843 	bl	8002dc0 <netBufferSetLength>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002d3e:	897b      	ldrh	r3, [r7, #10]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f807 	bl	8002d58 <netBufferFree>
      //Report an failure
      return NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/
#include "main.h"
void netBufferFree(NetBuffer *buffer)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 8002d60:	2100      	movs	r1, #0
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f82c 	bl	8002dc0 <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffb7 	bl	8002cdc <memPoolFree>
//   {volatile uint32_t n = 500 * 4; while(n > 0) n--;}
   HAL_Delay(10);
 8002d6e:	200a      	movs	r0, #10
 8002d70:	f00b fd68 	bl	800e844 <HAL_Delay>
//   usleep(500);
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e00c      	b.n	8002da8 <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3301      	adds	r3, #1
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	4413      	add	r3, r2
 8002d98:	889b      	ldrh	r3, [r3, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4413      	add	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3ed      	bcc.n	8002d8e <netBufferGetLength+0x12>

   //Return total length
   return length;
 8002db2:	68bb      	ldr	r3, [r7, #8]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e02c      	b.n	8002e30 <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	461a      	mov	r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d804      	bhi.n	8002df8 <netBufferSetLength+0x38>
      {
         chunk->length = length;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	809a      	strh	r2, [r3, #4]
 8002df6:	e012      	b.n	8002e1e <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88db      	ldrh	r3, [r3, #6]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00e      	beq.n	8002e1e <netBufferSetLength+0x5e>
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d109      	bne.n	8002e1e <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88db      	ldrh	r3, [r3, #6]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	bf28      	it	cs
 8002e16:	4613      	movcs	r3, r2
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	889b      	ldrh	r3, [r3, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d202      	bcs.n	8002e3e <netBufferSetLength+0x7e>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1cb      	bne.n	8002dd6 <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d151      	bne.n	8002ee8 <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 8002e4a:	e01a      	b.n	8002e82 <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	88db      	ldrh	r3, [r3, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d004      	beq.n	8002e6a <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff39 	bl	8002cdc <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3e0      	bcc.n	8002e4c <netBufferSetLength+0x8c>
 8002e8a:	e035      	b.n	8002ef8 <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8002e98:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002e9c:	f7ff fefc 	bl	8002c98 <memPoolAlloc>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 8002eae:	2364      	movs	r3, #100	; 0x64
 8002eb0:	e028      	b.n	8002f04 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002eb8:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ec0:	bf28      	it	cs
 8002ec2:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	889b      	ldrh	r3, [r3, #4]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	601a      	str	r2, [r3, #0]
         i++;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d202      	bcs.n	8002ef8 <netBufferSetLength+0x138>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1c9      	bne.n	8002e8c <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <netBufferSetLength+0x142>
 8002efe:	2365      	movs	r3, #101	; 0x65
 8002f00:	e000      	b.n	8002f04 <netBufferSetLength+0x144>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e01e      	b.n	8002f5a <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d207      	bcs.n	8002f40 <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	3201      	adds	r2, #1
 8002f36:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	e012      	b.n	8002f66 <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	3301      	adds	r3, #1
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3301      	adds	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3db      	bcc.n	8002f1c <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	e016      	b.n	8002fb4 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	889b      	ldrh	r3, [r3, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d312      	bcc.n	8002fc0 <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	889b      	ldrh	r3, [r3, #4]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3e3      	bcc.n	8002f86 <netBufferConcat+0x14>
 8002fbe:	e000      	b.n	8002fc2 <netBufferConcat+0x50>
         break;
 8002fc0:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d301      	bcc.n	8002fd0 <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e065      	b.n	800309c <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8002fd6:	e04d      	b.n	8003074 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	3201      	adds	r2, #1
 8002fde:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	18d1      	adds	r1, r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	3201      	adds	r2, #1
 8002fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	889a      	ldrh	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	b299      	uxth	r1, r3
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	460a      	mov	r2, r1
 8003010:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4413      	add	r3, r2
 800301c:	2200      	movs	r2, #0
 800301e:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	889b      	ldrh	r3, [r3, #4]
 800302c:	461a      	mov	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	4293      	cmp	r3, r2
 8003032:	d208      	bcs.n	8003046 <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	b299      	uxth	r1, r3
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4413      	add	r3, r2
 8003042:	460a      	mov	r2, r1
 8003044:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	889b      	ldrh	r3, [r3, #4]
 8003052:	461a      	mov	r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]
      i++;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
      j++;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3301      	adds	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <netBufferConcat+0x11c>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	d204      	bcs.n	800308e <netBufferConcat+0x11c>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	429a      	cmp	r2, r3
 800308c:	d3a4      	bcc.n	8002fd8 <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	b29b      	uxth	r3, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	e016      	b.n	80030ea <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	3301      	adds	r3, #1
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d312      	bcc.n	80030f6 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	3301      	adds	r3, #1
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	889b      	ldrh	r3, [r3, #4]
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	3301      	adds	r3, #1
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3e3      	bcc.n	80030bc <netBufferCopy+0x14>
 80030f4:	e000      	b.n	80030f8 <netBufferCopy+0x50>
         break;
 80030f6:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	429a      	cmp	r2, r3
 8003100:	d301      	bcc.n	8003106 <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 8003102:	2302      	movs	r3, #2
 8003104:	e096      	b.n	8003234 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
 800310a:	e016      	b.n	800313a <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	3301      	adds	r3, #1
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	889b      	ldrh	r3, [r3, #4]
 8003118:	461a      	mov	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4293      	cmp	r3, r2
 800311e:	d312      	bcc.n	8003146 <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	3301      	adds	r3, #1
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	889b      	ldrh	r3, [r3, #4]
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	3301      	adds	r3, #1
 8003138:	623b      	str	r3, [r7, #32]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a3a      	ldr	r2, [r7, #32]
 8003140:	429a      	cmp	r2, r3
 8003142:	d3e3      	bcc.n	800310c <netBufferCopy+0x64>
 8003144:	e000      	b.n	8003148 <netBufferCopy+0xa0>
         break;
 8003146:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a3a      	ldr	r2, [r7, #32]
 800314e:	429a      	cmp	r2, r3
 8003150:	d35c      	bcc.n	800320c <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 8003152:	2302      	movs	r3, #2
 8003154:	e06e      	b.n	8003234 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	3201      	adds	r2, #1
 800315c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	3201      	adds	r2, #1
 800316c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	3301      	adds	r3, #1
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	889b      	ldrh	r3, [r3, #4]
 8003182:	461a      	mov	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	4293      	cmp	r3, r2
 800318c:	bf28      	it	cs
 800318e:	4613      	movcs	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	3301      	adds	r3, #1
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	889b      	ldrh	r3, [r3, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	bf28      	it	cs
 80031aa:	4613      	movcs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

      //Copy data
      osMemcpy(p, q, n);
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	69b9      	ldr	r1, [r7, #24]
 80031b2:	69f8      	ldr	r0, [r7, #28]
 80031b4:	f00f fc7f 	bl	8012ab6 <memcpy>

      destOffset += n;
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4413      	add	r3, r2
 80031c6:	603b      	str	r3, [r7, #0]
      length -= n;
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	889b      	ldrh	r3, [r3, #4]
 80031dc:	461a      	mov	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d304      	bcc.n	80031ee <netBufferCopy+0x146>
      {
         destOffset = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60bb      	str	r3, [r7, #8]
         i++;
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	3301      	adds	r3, #1
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	3301      	adds	r3, #1
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	4293      	cmp	r3, r2
 8003200:	d304      	bcc.n	800320c <netBufferCopy+0x164>
      {
         srcOffset = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	603b      	str	r3, [r7, #0]
         j++;
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	3301      	adds	r3, #1
 800320a:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 800320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <netBufferCopy+0x17e>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	429a      	cmp	r2, r3
 800321a:	d204      	bcs.n	8003226 <netBufferCopy+0x17e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	429a      	cmp	r2, r3
 8003224:	d397      	bcc.n	8003156 <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	b29b      	uxth	r3, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	3728      	adds	r7, #40	; 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	d301      	bcc.n	8003258 <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 8003254:	2301      	movs	r3, #1
 8003256:	e01e      	b.n	8003296 <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	3201      	adds	r2, #1
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	b299      	uxth	r1, r3
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	3301      	adds	r3, #1
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	460a      	mov	r2, r1
 800327a:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	2200      	movs	r2, #0
 8003288:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e03e      	b.n	8003338 <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	889b      	ldrh	r3, [r3, #4]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d227      	bcs.n	800331e <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	3201      	adds	r2, #1
 80032d4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	889b      	ldrh	r3, [r3, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	1ad2      	subs	r2, r2, r3
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	1acb      	subs	r3, r1, r3
 80032f6:	4293      	cmp	r3, r2
 80032f8:	bf28      	it	cs
 80032fa:	4613      	movcs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]

         //Copy data
         osMemcpy(p, src, n);
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f00f fbd7 	bl	8012ab6 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	e009      	b.n	8003332 <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3301      	adds	r3, #1
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	889b      	ldrh	r3, [r3, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3301      	adds	r3, #1
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d203      	bcs.n	800334a <netBufferWrite+0xa8>
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d3b7      	bcc.n	80032ba <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 800334a:	69bb      	ldr	r3, [r7, #24]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <netBufferRead>:
 * @return Actual number of bytes copied
 **/

size_t netBufferRead(void *dest, const NetBuffer *src,
   size_t srcOffset, size_t length)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes copied
   totalLength = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
 800336a:	e03e      	b.n	80033ea <netBufferRead+0x96>
   {
      //Is there any data to copy from the current chunk?
      if(srcOffset < src->chunk[i].length)
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3301      	adds	r3, #1
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	4413      	add	r3, r2
 8003376:	889b      	ldrh	r3, [r3, #4]
 8003378:	461a      	mov	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4293      	cmp	r3, r2
 800337e:	d227      	bcs.n	80033d0 <netBufferRead+0x7c>
      {
         //Point to the first byte to be read
         p = (uint8_t *) src->chunk[i].address + srcOffset;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	3201      	adds	r2, #1
 8003386:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, src->chunk[i].length - srcOffset);
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	889b      	ldrh	r3, [r3, #4]
 800339c:	461a      	mov	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	1ad2      	subs	r2, r2, r3
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	1acb      	subs	r3, r1, r3
 80033a8:	4293      	cmp	r3, r2
 80033aa:	bf28      	it	cs
 80033ac:	4613      	movcs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

         //Copy data
         osMemcpy(dest, p, n);
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f00f fb7e 	bl	8012ab6 <memcpy>

         //Advance write pointer
         dest = (uint8_t *) dest + n;
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
         //Total number of bytes copied
         totalLength += n;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         srcOffset = 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
 80033ce:	e009      	b.n	80033e4 <netBufferRead+0x90>
      }
      else
      {
         //Skip the current chunk
         srcOffset -= src->chunk[i].length;
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	889b      	ldrh	r3, [r3, #4]
 80033dc:	461a      	mov	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	607b      	str	r3, [r7, #4]
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d203      	bcs.n	80033fc <netBufferRead+0xa8>
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3b7      	bcc.n	800336c <netBufferRead+0x18>
      }
   }

   //Return the actual number of bytes copied
   return totalLength;
 80033fc:	69bb      	ldr	r3, [r7, #24]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3720      	adds	r7, #32
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07c      	beq.n	8003514 <netProcessLinkChange+0x10c>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 800341a:	f7fd ff63 	bl	80012e4 <osSuspendAllTasks>
 800341e:	4b73      	ldr	r3, [pc, #460]	; (80035ec <netProcessLinkChange+0x1e4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68d8      	ldr	r0, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3310      	adds	r3, #16
 8003428:	461a      	mov	r2, r3
 800342a:	4971      	ldr	r1, [pc, #452]	; (80035f0 <netProcessLinkChange+0x1e8>)
 800342c:	f00f fa8e 	bl	801294c <fiprintf>
 8003430:	f7fd ff63 	bl	80012fa <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800343a:	4a6e      	ldr	r2, [pc, #440]	; (80035f4 <netProcessLinkChange+0x1ec>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10c      	bne.n	800345a <netProcessLinkChange+0x52>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 8003440:	f7fd ff50 	bl	80012e4 <osSuspendAllTasks>
 8003444:	4b69      	ldr	r3, [pc, #420]	; (80035ec <netProcessLinkChange+0x1e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	221a      	movs	r2, #26
 800344c:	2101      	movs	r1, #1
 800344e:	486a      	ldr	r0, [pc, #424]	; (80035f8 <netProcessLinkChange+0x1f0>)
 8003450:	f00f faee 	bl	8012a30 <fwrite>
 8003454:	f7fd ff51 	bl	80012fa <osResumeAllTasks>
 8003458:	e038      	b.n	80034cc <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003460:	4a66      	ldr	r2, [pc, #408]	; (80035fc <netProcessLinkChange+0x1f4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d10c      	bne.n	8003480 <netProcessLinkChange+0x78>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8003466:	f7fd ff3d 	bl	80012e4 <osSuspendAllTasks>
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <netProcessLinkChange+0x1e4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2219      	movs	r2, #25
 8003472:	2101      	movs	r1, #1
 8003474:	4862      	ldr	r0, [pc, #392]	; (8003600 <netProcessLinkChange+0x1f8>)
 8003476:	f00f fadb 	bl	8012a30 <fwrite>
 800347a:	f7fd ff3e 	bl	80012fa <osResumeAllTasks>
 800347e:	e025      	b.n	80034cc <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003486:	4a5f      	ldr	r2, [pc, #380]	; (8003604 <netProcessLinkChange+0x1fc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10c      	bne.n	80034a6 <netProcessLinkChange+0x9e>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 800348c:	f7fd ff2a 	bl	80012e4 <osSuspendAllTasks>
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <netProcessLinkChange+0x1e4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	2218      	movs	r2, #24
 8003498:	2101      	movs	r1, #1
 800349a:	485b      	ldr	r0, [pc, #364]	; (8003608 <netProcessLinkChange+0x200>)
 800349c:	f00f fac8 	bl	8012a30 <fwrite>
 80034a0:	f7fd ff2b 	bl	80012fa <osResumeAllTasks>
 80034a4:	e012      	b.n	80034cc <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00d      	beq.n	80034cc <netProcessLinkChange+0xc4>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 80034b0:	f7fd ff18 	bl	80012e4 <osSuspendAllTasks>
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <netProcessLinkChange+0x1e4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68d8      	ldr	r0, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034c0:	461a      	mov	r2, r3
 80034c2:	4952      	ldr	r1, [pc, #328]	; (800360c <netProcessLinkChange+0x204>)
 80034c4:	f00f fa42 	bl	801294c <fiprintf>
 80034c8:	f7fd ff17 	bl	80012fa <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d10c      	bne.n	80034f0 <netProcessLinkChange+0xe8>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 80034d6:	f7fd ff05 	bl	80012e4 <osSuspendAllTasks>
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <netProcessLinkChange+0x1e4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	221d      	movs	r2, #29
 80034e2:	2101      	movs	r1, #1
 80034e4:	484a      	ldr	r0, [pc, #296]	; (8003610 <netProcessLinkChange+0x208>)
 80034e6:	f00f faa3 	bl	8012a30 <fwrite>
 80034ea:	f7fd ff06 	bl	80012fa <osResumeAllTasks>
 80034ee:	e01e      	b.n	800352e <netProcessLinkChange+0x126>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d119      	bne.n	800352e <netProcessLinkChange+0x126>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 80034fa:	f7fd fef3 	bl	80012e4 <osSuspendAllTasks>
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <netProcessLinkChange+0x1e4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	221d      	movs	r2, #29
 8003506:	2101      	movs	r1, #1
 8003508:	4842      	ldr	r0, [pc, #264]	; (8003614 <netProcessLinkChange+0x20c>)
 800350a:	f00f fa91 	bl	8012a30 <fwrite>
 800350e:	f7fd fef4 	bl	80012fa <osResumeAllTasks>
 8003512:	e00c      	b.n	800352e <netProcessLinkChange+0x126>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8003514:	f7fd fee6 	bl	80012e4 <osSuspendAllTasks>
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <netProcessLinkChange+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d8      	ldr	r0, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3310      	adds	r3, #16
 8003522:	461a      	mov	r2, r3
 8003524:	493c      	ldr	r1, [pc, #240]	; (8003618 <netProcessLinkChange+0x210>)
 8003526:	f00f fa11 	bl	801294c <fiprintf>
 800352a:	f7fd fee6 	bl	80012fa <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f009 fbaa 	bl	800cc88 <ipv4LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f007 f8fb 	bl	800a730 <dnsFlushCache>
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif

   //Loop through the link change callback table
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e023      	b.n	8003588 <netProcessLinkChange+0x180>
   {
      NetLinkChangeCallbackEntry *entry;

      //Point to the current entry
      entry = &netContext.linkChangeCallbacks[i];
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 800354e:	4a33      	ldr	r2, [pc, #204]	; (800361c <netProcessLinkChange+0x214>)
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]

      //Any registered callback?
      if(entry->callback != NULL)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <netProcessLinkChange+0x17a>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d004      	beq.n	8003570 <netProcessLinkChange+0x168>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d108      	bne.n	8003582 <netProcessLinkChange+0x17a>
         {
            //Invoke user callback function
            entry->callback(interface, interface->linkState, entry->param);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	6892      	ldr	r2, [r2, #8]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	4798      	blx	r3
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d9d8      	bls.n	8003540 <netProcessLinkChange+0x138>
         }
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e023      	b.n	80035dc <netProcessLinkChange+0x1d4>
   {
      //Point to the current socket
      socket = socketTable + i;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	4a20      	ldr	r2, [pc, #128]	; (8003620 <netProcessLinkChange+0x218>)
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d102      	bne.n	80035b2 <netProcessLinkChange+0x1aa>
      {
         tcpUpdateEvents(socket);
 80035ac:	6938      	ldr	r0, [r7, #16]
 80035ae:	f004 fe83 	bl	80082b8 <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d102      	bne.n	80035c0 <netProcessLinkChange+0x1b8>
      {
         udpUpdateEvents(socket);
 80035ba:	6938      	ldr	r0, [r7, #16]
 80035bc:	f005 fecc 	bl	8009358 <udpUpdateEvents>
      }
#endif

#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Raw socket?
      if(socket->type == SOCKET_TYPE_RAW_IP ||
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d003      	beq.n	80035d0 <netProcessLinkChange+0x1c8>
         socket->type == SOCKET_TYPE_RAW_ETH)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	685b      	ldr	r3, [r3, #4]
      if(socket->type == SOCKET_TYPE_RAW_IP ||
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d102      	bne.n	80035d6 <netProcessLinkChange+0x1ce>
      {
         rawSocketUpdateEvents(socket);
 80035d0:	6938      	ldr	r0, [r7, #16]
 80035d2:	f001 fb3f 	bl	8004c54 <rawSocketUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3301      	adds	r3, #1
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b09      	cmp	r3, #9
 80035e0:	d9d8      	bls.n	8003594 <netProcessLinkChange+0x18c>
      }
#endif
   }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000034 	.word	0x20000034
 80035f0:	0801416c 	.word	0x0801416c
 80035f4:	3b9aca00 	.word	0x3b9aca00
 80035f8:	08014184 	.word	0x08014184
 80035fc:	05f5e100 	.word	0x05f5e100
 8003600:	080141a0 	.word	0x080141a0
 8003604:	00989680 	.word	0x00989680
 8003608:	080141bc 	.word	0x080141bc
 800360c:	080141d8 	.word	0x080141d8
 8003610:	080141f4 	.word	0x080141f4
 8003614:	08014214 	.word	0x08014214
 8003618:	08014234 	.word	0x08014234
 800361c:	20009178 	.word	0x20009178
 8003620:	20009990 	.word	0x20009990

08003624 <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
   uint_t i;
   NetTimerCallbackEntry *entry;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 800362a:	4b79      	ldr	r3, [pc, #484]	; (8003810 <netTick+0x1ec>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3364      	adds	r3, #100	; 0x64
 8003630:	4a77      	ldr	r2, [pc, #476]	; (8003810 <netTick+0x1ec>)
 8003632:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 8003634:	4b76      	ldr	r3, [pc, #472]	; (8003810 <netTick+0x1ec>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800363c:	d322      	bcc.n	8003684 <netTick+0x60>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	e019      	b.n	8003678 <netTick+0x54>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8003644:	4a73      	ldr	r2, [pc, #460]	; (8003814 <netTick+0x1f0>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f240 618c 	movw	r1, #1676	; 0x68c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <netTick+0x4e>
            nicTick(&netInterface[i]);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f240 628c 	movw	r2, #1676	; 0x68c
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	33e0      	adds	r3, #224	; 0xe0
 8003668:	4a6a      	ldr	r2, [pc, #424]	; (8003814 <netTick+0x1f0>)
 800366a:	4413      	add	r3, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fb37 	bl	8003ce0 <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3301      	adds	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0e2      	beq.n	8003644 <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 800367e:	4b64      	ldr	r3, [pc, #400]	; (8003810 <netTick+0x1ec>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   //Increment tick counter
   arpTickCounter += NET_TICK_INTERVAL;
 8003684:	4b64      	ldr	r3, [pc, #400]	; (8003818 <netTick+0x1f4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3364      	adds	r3, #100	; 0x64
 800368a:	4a63      	ldr	r2, [pc, #396]	; (8003818 <netTick+0x1f4>)
 800368c:	6013      	str	r3, [r2, #0]

   //Manage ARP cache
   if(arpTickCounter >= ARP_TICK_INTERVAL)
 800368e:	4b62      	ldr	r3, [pc, #392]	; (8003818 <netTick+0x1f4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2bc7      	cmp	r3, #199	; 0xc7
 8003694:	d922      	bls.n	80036dc <netTick+0xb8>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	e019      	b.n	80036d0 <netTick+0xac>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 800369c:	4a5d      	ldr	r2, [pc, #372]	; (8003814 <netTick+0x1f0>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f240 618c 	movw	r1, #1676	; 0x68c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <netTick+0xa6>
            arpTick(&netInterface[i]);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f240 628c 	movw	r2, #1676	; 0x68c
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	33e0      	adds	r3, #224	; 0xe0
 80036c0:	4a54      	ldr	r2, [pc, #336]	; (8003814 <netTick+0x1f0>)
 80036c2:	4413      	add	r3, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f008 fbb5 	bl	800be34 <arpTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3301      	adds	r3, #1
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0e2      	beq.n	800369c <netTick+0x78>
      }

      //Reset tick counter
      arpTickCounter = 0;
 80036d6:	4b50      	ldr	r3, [pc, #320]	; (8003818 <netTick+0x1f4>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 80036dc:	4b4f      	ldr	r3, [pc, #316]	; (800381c <netTick+0x1f8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3364      	adds	r3, #100	; 0x64
 80036e2:	4a4e      	ldr	r2, [pc, #312]	; (800381c <netTick+0x1f8>)
 80036e4:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 80036e6:	4b4d      	ldr	r3, [pc, #308]	; (800381c <netTick+0x1f8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ee:	d322      	bcc.n	8003736 <netTick+0x112>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	e019      	b.n	800372a <netTick+0x106>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 80036f6:	4a47      	ldr	r2, [pc, #284]	; (8003814 <netTick+0x1f0>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f240 618c 	movw	r1, #1676	; 0x68c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <netTick+0x100>
            ipv4FragTick(&netInterface[i]);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f240 628c 	movw	r2, #1676	; 0x68c
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	33e0      	adds	r3, #224	; 0xe0
 800371a:	4a3e      	ldr	r2, [pc, #248]	; (8003814 <netTick+0x1f0>)
 800371c:	4413      	add	r3, r2
 800371e:	4618      	mov	r0, r3
 8003720:	f00a f923 	bl	800d96a <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3301      	adds	r3, #1
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0e2      	beq.n	80036f6 <netTick+0xd2>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 8003730:	4b3a      	ldr	r3, [pc, #232]	; (800381c <netTick+0x1f8>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dhcpClientTickCounter += NET_TICK_INTERVAL;
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <netTick+0x1fc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3364      	adds	r3, #100	; 0x64
 800373c:	4a38      	ldr	r2, [pc, #224]	; (8003820 <netTick+0x1fc>)
 800373e:	6013      	str	r3, [r2, #0]

   //Handle DHCP client related timers
   if(dhcpClientTickCounter >= DHCP_CLIENT_TICK_INTERVAL)
 8003740:	4b37      	ldr	r3, [pc, #220]	; (8003820 <netTick+0x1fc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2bc7      	cmp	r3, #199	; 0xc7
 8003746:	d918      	bls.n	800377a <netTick+0x156>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003748:	2300      	movs	r3, #0
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	e00f      	b.n	800376e <netTick+0x14a>
         dhcpClientTick(netInterface[i].dhcpClientContext);
 800374e:	4a31      	ldr	r2, [pc, #196]	; (8003814 <netTick+0x1f0>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f240 618c 	movw	r1, #1676	; 0x68c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f006 f9ca 	bl	8009afc <dhcpClientTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3301      	adds	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ec      	beq.n	800374e <netTick+0x12a>

      //Reset tick counter
      dhcpClientTickCounter = 0;
 8003774:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <netTick+0x1fc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 800377a:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <netTick+0x200>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3364      	adds	r3, #100	; 0x64
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <netTick+0x200>)
 8003782:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <netTick+0x200>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b63      	cmp	r3, #99	; 0x63
 800378a:	d904      	bls.n	8003796 <netTick+0x172>
   {
      //TCP timer handler
      tcpTick();
 800378c:	f005 f87c 	bl	8008888 <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <netTick+0x200>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 8003796:	4b24      	ldr	r3, [pc, #144]	; (8003828 <netTick+0x204>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3364      	adds	r3, #100	; 0x64
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <netTick+0x204>)
 800379e:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <netTick+0x204>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2bc7      	cmp	r3, #199	; 0xc7
 80037a6:	d904      	bls.n	80037b2 <netTick+0x18e>
   {
      //DNS timer handler
      dnsTick();
 80037a8:	f007 f808 	bl	800a7bc <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <netTick+0x204>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
      dnsSdTickCounter = 0;
   }
#endif

   //Loop through the timer callback table
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	e022      	b.n	80037fe <netTick+0x1da>
   {
      //Point to the current entry
      entry = &netContext.timerCallbacks[i];
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	337b      	adds	r3, #123	; 0x7b
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4a15      	ldr	r2, [pc, #84]	; (8003814 <netTick+0x1f0>)
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	603b      	str	r3, [r7, #0]

      //Any registered callback?
      if(entry->callback != NULL)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <netTick+0x1d4>
      {
         //Increment timer value
         entry->timerValue += NET_TICK_INTERVAL;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]

         //Timer period elapsed?
         if(entry->timerValue >= entry->timerPeriod)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d308      	bcc.n	80037f8 <netTick+0x1d4>
         {
            //Invoke user callback function
            entry->callback(entry->param);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	68d2      	ldr	r2, [r2, #12]
 80037ee:	4610      	mov	r0, r2
 80037f0:	4798      	blx	r3
            //Reload timer
            entry->timerValue = 0;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3301      	adds	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b05      	cmp	r3, #5
 8003802:	d9d9      	bls.n	80037b8 <netTick+0x194>
         }
      }
   }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	2000998c 	.word	0x2000998c
 8003814:	20009178 	.word	0x20009178
 8003818:	2000b654 	.word	0x2000b654
 800381c:	2000b658 	.word	0x2000b658
 8003820:	2000b30c 	.word	0x2000b30c
 8003824:	2000b268 	.word	0x2000b268
 8003828:	2000b310 	.word	0x2000b310

0800382c <netStartTimer>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] interval Time interval
 **/

void netStartTimer(NetTimer *timer, systime_t interval)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 8003836:	f7fd fe1b 	bl	8001470 <osGetSystemTime>
 800383a:	4602      	mov	r2, r0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
   timer->interval = interval;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	609a      	str	r2, [r3, #8]
   timer->running = TRUE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	601a      	str	r2, [r3, #0]
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <netStopTimer>:
 * @brief Stop timer
 * @param[in] timer Pointer to the timer structure
 **/

void netStopTimer(NetTimer *timer)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <netTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer is running, else FALSE
 **/

bool_t netTimerRunning(NetTimer *timer)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
   //Return TRUE if the timer is running
   return timer->running;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <netTimerExpired>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer has expired, else FALSE
 **/

bool_t netTimerExpired(NetTimer *timer)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   bool_t expired;
   systime_t time;

   //Initialize flag
   expired = FALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
   //Get current time
   time = osGetSystemTime();
 8003892:	f7fd fded 	bl	8001470 <osGetSystemTime>
 8003896:	60b8      	str	r0, [r7, #8]

   //Check whether the timer is running
   if(timer->running)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <netTimerExpired+0x30>
   {
      //Check whether the specified time interval has elapsed
      if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	db01      	blt.n	80038b6 <netTimerExpired+0x30>
      {
         expired = TRUE;
 80038b2:	2301      	movs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return TRUE if the timer has expired
   return expired;
 80038b6:	68fb      	ldr	r3, [r7, #12]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <netInitRand>:
/**
 * @brief PRNG initialization
 **/

void netInitRand(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
   uint_t i;
   NetRandState *state;
   uint8_t iv[10];

   //Point to the PRNG state
   state = &netContext.randState;
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <netInitRand+0x130>)
 80038c8:	613b      	str	r3, [r7, #16]

   //Increment invocation counter
   state->counter++;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	801a      	strh	r2, [r3, #0]

   //Copy the EUI-64 identifier of the default interface
   eui64CopyAddr(iv, &netInterface[0].eui64);
 80038d6:	4a47      	ldr	r2, [pc, #284]	; (80039f4 <netInitRand+0x134>)
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	32e8      	adds	r2, #232	; 0xe8
 80038dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038e0:	e883 0003 	stmia.w	r3, {r0, r1}
   //Append the invocation counter
   STORE16BE(state->counter, iv + sizeof(Eui64));
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	733b      	strb	r3, [r7, #12]
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	737b      	strb	r3, [r7, #13]

   //Clear the 288-bit internal state
   osMemset(state->s, 0, 36);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	3302      	adds	r3, #2
 80038fc:	2224      	movs	r2, #36	; 0x24
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f00f f900 	bl	8012b06 <memset>

   //Let (s1, s2, ..., s93) = (K1, ..., K80, 0, ..., 0)
   for(i = 0; i < 10; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e00d      	b.n	8003928 <netInitRand+0x68>
   {
      state->s[i] = netContext.randSeed[i];
 800390c:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <netInitRand+0x134>)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	33a8      	adds	r3, #168	; 0xa8
 8003914:	7819      	ldrb	r1, [r3, #0]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	4413      	add	r3, r2
 800391c:	3302      	adds	r3, #2
 800391e:	460a      	mov	r2, r1
 8003920:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < 10; i++)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	3301      	adds	r3, #1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d9ee      	bls.n	800390c <netInitRand+0x4c>
   }

   //Load the 80-bit initialization vector
   for(i = 0; i < 10; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e00c      	b.n	800394e <netInitRand+0x8e>
   {
      state->s[12 + i] = iv[i];
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	330c      	adds	r3, #12
 8003938:	1d39      	adds	r1, r7, #4
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	440a      	add	r2, r1
 800393e:	7811      	ldrb	r1, [r2, #0]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	460a      	mov	r2, r1
 8003946:	709a      	strb	r2, [r3, #2]
   for(i = 0; i < 10; i++)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b09      	cmp	r3, #9
 8003952:	d9ef      	bls.n	8003934 <netInitRand+0x74>
   }

   //Let (s94, s95, ..., s177) = (IV1, ..., IV80, 0, ..., 0)
   for(i = 11; i < 22; i++)
 8003954:	230b      	movs	r3, #11
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e01a      	b.n	8003990 <netInitRand+0xd0>
   {
      state->s[i] = (state->s[i + 1] << 5) | (state->s[i] >> 3);
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3301      	adds	r3, #1
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4413      	add	r3, r2
 8003962:	789b      	ldrb	r3, [r3, #2]
 8003964:	015b      	lsls	r3, r3, #5
 8003966:	b25a      	sxtb	r2, r3
 8003968:	6939      	ldr	r1, [r7, #16]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	440b      	add	r3, r1
 800396e:	3302      	adds	r3, #2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	b2db      	uxtb	r3, r3
 8003976:	b25b      	sxtb	r3, r3
 8003978:	4313      	orrs	r3, r2
 800397a:	b25b      	sxtb	r3, r3
 800397c:	b2d9      	uxtb	r1, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	4413      	add	r3, r2
 8003984:	3302      	adds	r3, #2
 8003986:	460a      	mov	r2, r1
 8003988:	701a      	strb	r2, [r3, #0]
   for(i = 11; i < 22; i++)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b15      	cmp	r3, #21
 8003994:	d9e1      	bls.n	800395a <netInitRand+0x9a>
   }

   //Let (s178, s279, ..., s288) = (0, ..., 0, 1, 1, 1)
   NET_RAND_STATE_SET_BIT(state->s, 286, 1);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800399c:	f043 0320 	orr.w	r3, r3, #32
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 287, 1);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 288, 1);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

   //The state is rotated over 4 full cycles, without generating key stream bit
   for(i = 0; i < (4 * 288); i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e005      	b.n	80039de <netInitRand+0x11e>
   {
      netGetRandBit(state);
 80039d2:	6938      	ldr	r0, [r7, #16]
 80039d4:	f000 f856 	bl	8003a84 <netGetRandBit>
   for(i = 0; i < (4 * 288); i++)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80039e4:	d3f5      	bcc.n	80039d2 <netInitRand+0x112>
   }
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20009230 	.word	0x20009230
 80039f4:	20009178 	.word	0x20009178

080039f8 <netGetRand>:
 * @brief Generate a random 32-bit value
 * @return Random value
 **/

uint32_t netGetRand(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
   uint_t i;
   uint32_t value;

   //Initialize value
   value = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	603b      	str	r3, [r7, #0]

   //Generate a random 32-bit value
   for(i = 0; i < 32; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	e00c      	b.n	8003a22 <netGetRand+0x2a>
   {
      value |= netGetRandBit(&netContext.randState) << i;
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <netGetRand+0x44>)
 8003a0a:	f000 f83b 	bl	8003a84 <netGetRandBit>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	603b      	str	r3, [r7, #0]
   for(i = 0; i < 32; i++)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b1f      	cmp	r3, #31
 8003a26:	d9ef      	bls.n	8003a08 <netGetRand+0x10>
   }

   //Return the value
   return value + netContext.entropy;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <netGetRand+0x48>)
 8003a2a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	4413      	add	r3, r2
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20009230 	.word	0x20009230
 8003a40:	20009178 	.word	0x20009178

08003a44 <netGetRandRange>:
 * @param[in] max Upper bound
 * @return Random value in the specified range
 **/

int32_t netGetRandRange(int32_t min, int32_t max)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
   int32_t value;

   //Valid parameters?
   if(max > min)
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	dd0f      	ble.n	8003a76 <netGetRandRange+0x32>
   {
      //Pick up a random value in the given range
      value = min + (netGetRand() % (max - min + 1));
 8003a56:	f7ff ffcf 	bl	80039f8 <netGetRand>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6839      	ldr	r1, [r7, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	1a8a      	subs	r2, r1, r2
 8003a62:	3201      	adds	r2, #1
 8003a64:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a68:	fb02 f201 	mul.w	r2, r2, r1
 8003a6c:	1a9a      	subs	r2, r3, r2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e001      	b.n	8003a7a <netGetRandRange+0x36>
   }
   else
   {
      //Use default value
      value = min;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
   }

   //Return the random value
   return value;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <netGetRandBit>:
 * @param[in] state Pointer to the PRNG state
 * @return Key stream bit
 **/

uint32_t netGetRandBit(NetRandState *state)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
   uint8_t t2;
   uint8_t t3;
   uint8_t z;

   //Let t1 = s66 + s93
   t1 = NET_RAND_GET_BIT(state->s, 66);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	7a9b      	ldrb	r3, [r3, #10]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 93);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	7b5b      	ldrb	r3, [r3, #13]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	b25a      	sxtb	r2, r3
 8003aaa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003aae:	4053      	eors	r3, r2
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	72fb      	strb	r3, [r7, #11]

   //Let t2 = s162 + s177
   t2 = NET_RAND_GET_BIT(state->s, 162);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7d9b      	ldrb	r3, [r3, #22]
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 177);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	7e1b      	ldrb	r3, [r3, #24]
 8003ac6:	b25b      	sxtb	r3, r3
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	b25a      	sxtb	r2, r3
 8003ace:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003ad2:	4053      	eors	r3, r2
 8003ad4:	b25b      	sxtb	r3, r3
 8003ad6:	72bb      	strb	r3, [r7, #10]

   //Let t3 = s243 + s288
   t3 = NET_RAND_GET_BIT(state->s, 243);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ade:	089b      	lsrs	r3, r3, #2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 288);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003aee:	09db      	lsrs	r3, r3, #7
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	b25a      	sxtb	r2, r3
 8003af4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003af8:	4053      	eors	r3, r2
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	727b      	strb	r3, [r7, #9]

   //Generate a key stream bit z
   z = t1 ^ t2 ^ t3;
 8003afe:	7afa      	ldrb	r2, [r7, #11]
 8003b00:	7abb      	ldrb	r3, [r7, #10]
 8003b02:	4053      	eors	r3, r2
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	7a7b      	ldrb	r3, [r7, #9]
 8003b08:	4053      	eors	r3, r2
 8003b0a:	723b      	strb	r3, [r7, #8]

   //Let t1 = t1 + s91.s92 + s171
   t1 ^= NET_RAND_GET_BIT(state->s, 91) & NET_RAND_GET_BIT(state->s, 92);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7b5b      	ldrb	r3, [r3, #13]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7b5b      	ldrb	r3, [r3, #13]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b25a      	sxtb	r2, r3
 8003b28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b2c:	4053      	eors	r3, r2
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 171);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	7ddb      	ldrb	r3, [r3, #23]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b46:	4053      	eors	r3, r2
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	72fb      	strb	r3, [r7, #11]

   //Let t2 = t2 + s175.s176 + s264
   t2 ^= NET_RAND_GET_BIT(state->s, 175) & NET_RAND_GET_BIT(state->s, 176);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7ddb      	ldrb	r3, [r3, #23]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7ddb      	ldrb	r3, [r3, #23]
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	b25a      	sxtb	r2, r3
 8003b68:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003b6c:	4053      	eors	r3, r2
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 264);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b78:	09db      	lsrs	r3, r3, #7
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	b25a      	sxtb	r2, r3
 8003b7e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8003b82:	4053      	eors	r3, r2
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	72bb      	strb	r3, [r7, #10]

   //Let t3 = t3 + s286.s287 + s69
   t3 ^= NET_RAND_GET_BIT(state->s, 286) & NET_RAND_GET_BIT(state->s, 287);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	b25b      	sxtb	r3, r3
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	b25a      	sxtb	r2, r3
 8003ba8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003bac:	4053      	eors	r3, r2
 8003bae:	b25b      	sxtb	r3, r3
 8003bb0:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 69);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7a9b      	ldrb	r3, [r3, #10]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	b25a      	sxtb	r2, r3
 8003bc2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003bc6:	4053      	eors	r3, r2
 8003bc8:	b25b      	sxtb	r3, r3
 8003bca:	727b      	strb	r3, [r7, #9]

   //Rotate the internal state
   for(i = 35; i > 0; i--)
 8003bcc:	2323      	movs	r3, #35	; 0x23
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e01a      	b.n	8003c08 <netGetRandBit+0x184>
   {
      state->s[i] = (state->s[i] << 1) | (state->s[i - 1] >> 7);
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	b25a      	sxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3b01      	subs	r3, #1
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	440b      	add	r3, r1
 8003be8:	789b      	ldrb	r3, [r3, #2]
 8003bea:	09db      	lsrs	r3, r3, #7
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	b25b      	sxtb	r3, r3
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	b25b      	sxtb	r3, r3
 8003bf4:	b2d9      	uxtb	r1, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	460a      	mov	r2, r1
 8003c00:	701a      	strb	r2, [r3, #0]
   for(i = 35; i > 0; i--)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e1      	bne.n	8003bd2 <netGetRandBit+0x14e>
   }

   state->s[0] = state->s[0] << 1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	789b      	ldrb	r3, [r3, #2]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	709a      	strb	r2, [r3, #2]

   //Let s1 = t3
   NET_RAND_STATE_SET_BIT(state->s, 1, t3);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	789b      	ldrb	r3, [r3, #2]
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f023 0301 	bic.w	r3, r3, #1
 8003c24:	b25a      	sxtb	r2, r3
 8003c26:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	b25b      	sxtb	r3, r3
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	709a      	strb	r2, [r3, #2]
   //Let s94 = t1
   NET_RAND_STATE_SET_BIT(state->s, 94, t1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	7b5b      	ldrb	r3, [r3, #13]
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	b25a      	sxtb	r2, r3
 8003c40:	7afb      	ldrb	r3, [r7, #11]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	735a      	strb	r2, [r3, #13]
   //Let s178 = t2
   NET_RAND_STATE_SET_BIT(state->s, 178, t2);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	f023 0302 	bic.w	r3, r3, #2
 8003c5a:	b25a      	sxtb	r2, r3
 8003c5c:	7abb      	ldrb	r3, [r7, #10]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	761a      	strb	r2, [r3, #24]

   //Return one bit of key stream
   return z;
 8003c6c:	7a3b      	ldrb	r3, [r7, #8]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <nicGetLogicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetLogicalInterface(NetInterface *interface)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the logical interface
   return interface;
 8003c82:	687b      	ldr	r3, [r7, #4]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 8003c98:	687b      	ldr	r3, [r7, #4]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 8003cae:	2300      	movs	r3, #0
#endif
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
#endif
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <nicTick+0x38>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <nicTick+0x38>
      {
         interface->nicDriver->enableIrq(interface);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
      }
   }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset, NetTxAncillary *ancillary)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8003d2e:	f7fd fb9f 	bl	8001470 <osGetSystemTime>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <nicSendPacket+0xa8>)
 8003d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <nicSendPacket+0xa8>)
 8003d3e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d033      	beq.n	8003db4 <nicSendPacket+0x94>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d02f      	beq.n	8003db4 <nicSendPacket+0x94>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d102      	bne.n	8003d64 <nicSendPacket+0x44>
      {
         //The loopback interface is always available
         status = TRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	e007      	b.n	8003d74 <nicSendPacket+0x54>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3354      	adds	r3, #84	; 0x54
 8003d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fb18 	bl	80013a2 <osWaitForEvent>
 8003d72:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <nicSendPacket+0x8e>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	4798      	blx	r3

         //Send the packet
         error = interface->nicDriver->sendPacket(interface, buffer, offset,
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d88:	69dc      	ldr	r4, [r3, #28]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68b9      	ldr	r1, [r7, #8]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	47a0      	blx	r4
 8003d94:	4603      	mov	r3, r0
 8003d96:	82fb      	strh	r3, [r7, #22]
            ancillary);

         //Re-enable interrupts if necessary
         if(interface->configured)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <nicSendPacket+0x9a>
         {
            interface->nicDriver->enableIrq(interface);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	4798      	blx	r3
      if(status)
 8003dac:	e005      	b.n	8003dba <nicSendPacket+0x9a>
         }
      }
      else
      {
         //If the transmitter is busy, then drop the packet
         error = NO_ERROR;
 8003dae:	2300      	movs	r3, #0
 8003db0:	82fb      	strh	r3, [r7, #22]
      if(status)
 8003db2:	e002      	b.n	8003dba <nicSendPacket+0x9a>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8003db4:	2307      	movs	r3, #7
 8003db6:	82fb      	strh	r3, [r7, #22]
 8003db8:	e000      	b.n	8003dbc <nicSendPacket+0x9c>
      if(status)
 8003dba:	bf00      	nop
   }

   //Return status code
   return error;
 8003dbc:	8afb      	ldrh	r3, [r7, #22]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd90      	pop	{r4, r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20009178 	.word	0x20009178

08003dcc <nicUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t nicUpdateMacAddrFilter(NetInterface *interface)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
   error_t error;

   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <nicUpdateMacAddrFilter+0x3e>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3

      //Update MAC filter table
      error = interface->nicDriver->updateMacAddrFilter(interface);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
 8003df0:	4603      	mov	r3, r0
 8003df2:	81fb      	strh	r3, [r7, #14]

      //Re-enable interrupts if necessary
      if(interface->configured)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <nicUpdateMacAddrFilter+0x42>
      {
         interface->nicDriver->enableIrq(interface);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
 8003e08:	e001      	b.n	8003e0e <nicUpdateMacAddrFilter+0x42>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8003e0e:	89fb      	ldrh	r3, [r7, #14]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <nicProcessPacket>:
 *   the packet
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length,
   NetRxAncillary *ancillary)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
   NicType type;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8003e26:	f7fd fb23 	bl	8001470 <osGetSystemTime>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <nicProcessPacket+0x64>)
 8003e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e32:	4413      	add	r3, r2
 8003e34:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <nicProcessPacket+0x64>)
 8003e36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Check whether the interface is enabled for operation
   if(interface->configured)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d016      	beq.n	8003e72 <nicProcessPacket+0x5a>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	75fb      	strb	r3, [r7, #23]

#if (ETH_SUPPORT == ENABLED)
      //Ethernet interface?
      if(type == NIC_TYPE_ETHERNET)
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d105      	bne.n	8003e68 <nicProcessPacket+0x50>
      {
         //Process incoming Ethernet frame
         ethProcessFrame(interface, packet, length, ancillary);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f7fd fdd2 	bl	8001a0c <ethProcessFrame>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	4798      	blx	r3
   }
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20009178 	.word	0x20009178

08003e80 <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8003e88:	f7fd faf2 	bl	8001470 <osGetSystemTime>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	4b2b      	ldr	r3, [pc, #172]	; (8003f3c <nicNotifyLinkChange+0xbc>)
 8003e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e94:	4413      	add	r3, r2
 8003e96:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <nicNotifyLinkChange+0xbc>)
 8003e98:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fef7 	bl	8003c90 <nicGetPhysicalInterface>
 8003ea2:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <nicNotifyLinkChange+0x38>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	6938      	ldr	r0, [r7, #16]
 8003eb6:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e032      	b.n	8003f24 <nicNotifyLinkChange+0xa4>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f240 628c 	movw	r2, #1676	; 0x68c
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	33e0      	adds	r3, #224	; 0xe0
 8003eca:	4a1c      	ldr	r2, [pc, #112]	; (8003f3c <nicNotifyLinkChange+0xbc>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fef2 	bl	8003cbc <nicIsParentInterface>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01f      	beq.n	8003f1e <nicNotifyLinkChange+0x9e>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff fee1 	bl	8003ca6 <nicGetSwitchPort>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461c      	mov	r4, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fedc 	bl	8003ca6 <nicGetSwitchPort>
 8003eee:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d114      	bne.n	8003f1e <nicNotifyLinkChange+0x9e>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
         virtualInterface->duplexMode = interface->duplexMode;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

         //Update link state
         virtualInterface->linkState = interface->linkState;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f7ff fa75 	bl	8003408 <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	3301      	adds	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0c9      	beq.n	8003ebe <nicNotifyLinkChange+0x3e>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	6938      	ldr	r0, [r7, #16]
 8003f32:	4798      	blx	r3
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}
 8003f3c:	20009178 	.word	0x20009178

08003f40 <ping>:
 * @return Error code
 **/

error_t ping(NetInterface *interface, const IpAddr *targetIpAddr,
   size_t size, uint8_t ttl, systime_t timeout, systime_t *rtt)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b096      	sub	sp, #88	; 0x58
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	70fb      	strb	r3, [r7, #3]
   error_t error;
   PingContext context;

   //Check parameters
   if(targetIpAddr == NULL)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <ping+0x18>
      return ERROR_INVALID_PARAMETER;
 8003f54:	2302      	movs	r3, #2
 8003f56:	e046      	b.n	8003fe6 <ping+0xa6>

   //Initialize context
   pingInit(&context);
 8003f58:	f107 0310 	add.w	r3, r7, #16
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f846 	bl	8003fee <pingInit>

   //Start of exception handling block
   do
   {
      //Select the specified network interface
      error = pingBindToInterface(&context, interface);
 8003f62:	f107 0310 	add.w	r3, r7, #16
 8003f66:	68f9      	ldr	r1, [r7, #12]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f868 	bl	800403e <pingBindToInterface>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 8003f74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d128      	bne.n	8003fce <ping+0x8e>
         break;

      //Set timeout value
      error = pingSetTimeout(&context, timeout);
 8003f7c:	f107 0310 	add.w	r3, r7, #16
 8003f80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f847 	bl	8004016 <pingSetTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 8003f8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11d      	bne.n	8003fd2 <ping+0x92>
         break;

      //Send an ICMP Echo Request message
      error = pingSendRequest(&context, targetIpAddr, size, ttl);
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f107 0010 	add.w	r0, r7, #16
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	f000 f862 	bl	8004068 <pingSendRequest>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 8003faa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d111      	bne.n	8003fd6 <ping+0x96>
         break;

      //Wait for a matching Echo Reply message
      error = pingWaitForReply(&context, NULL, rtt);
 8003fb2:	f107 0310 	add.w	r3, r7, #16
 8003fb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f97f 	bl	80042be <pingWaitForReply>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
      //Any error to report?
      if(error)
 8003fc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	e004      	b.n	8003fd8 <ping+0x98>
         break;
 8003fce:	bf00      	nop
 8003fd0:	e002      	b.n	8003fd8 <ping+0x98>
         break;
 8003fd2:	bf00      	nop
 8003fd4:	e000      	b.n	8003fd8 <ping+0x98>
         break;
 8003fd6:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Release resources
   pingRelease(&context);
 8003fd8:	f107 0310 	add.w	r3, r7, #16
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f9f7 	bl	80043d0 <pingRelease>

   //Return status code
   return error;
 8003fe2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3758      	adds	r7, #88	; 0x58
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <pingInit>:
 * @brief Initialize ping context
 * @param[in] context Pointer to the ping context
 **/

void pingInit(PingContext *context)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
   //Make sure the context is valid
   if(context != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <pingInit+0x20>
   {
      //Initialize context
      osMemset(context, 0, sizeof(PingContext));
 8003ffc:	2244      	movs	r2, #68	; 0x44
 8003ffe:	2100      	movs	r1, #0
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f00e fd80 	bl	8012b06 <memset>

      //Set the default timeout to be used
      context->timeout = PING_DEFAULT_TIMEOUT;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800400c:	615a      	str	r2, [r3, #20]
   }
}
 800400e:	bf00      	nop
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <pingSetTimeout>:
 * @param[in] timeout Maximum time to wait
 * @return Error code
 **/

error_t pingSetTimeout(PingContext *context, systime_t timeout)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
   //Invalid context?
   if(context == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <pingSetTimeout+0x14>
      return ERROR_INVALID_PARAMETER;
 8004026:	2302      	movs	r3, #2
 8004028:	e003      	b.n	8004032 <pingSetTimeout+0x1c>

   //Save timeout value
   context->timeout = timeout;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	615a      	str	r2, [r3, #20]

   //Successful processing
   return NO_ERROR;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <pingBindToInterface>:
 * @param[in] interface Network interface to be used
 * @return Error code
 **/

error_t pingBindToInterface(PingContext *context, NetInterface *interface)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
   //Invalid context?
   if(context == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <pingBindToInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 800404e:	2302      	movs	r3, #2
 8004050:	e003      	b.n	800405a <pingBindToInterface+0x1c>

   //Select the specified network interface
   context->interface = interface;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
	...

08004068 <pingSendRequest>:
 * @return Error code
 **/

error_t pingSendRequest(PingContext *context,
   const IpAddr *targetIpAddr, size_t size, uint8_t ttl)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08e      	sub	sp, #56	; 0x38
 800406c:	af04      	add	r7, sp, #16
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	70fb      	strb	r3, [r7, #3]
   size_t length;
   NetInterface *interface;
   IcmpEchoMessage *message;

   //Invalid context?
   if(context == NULL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <pingSendRequest+0x18>
      return ERROR_INVALID_PARAMETER;
 800407c:	2302      	movs	r3, #2
 800407e:	e0bd      	b.n	80041fc <pingSendRequest+0x194>

   //Limit the size of the data payload
   context->dataPayloadSize = MIN (size, PING_MAX_DATA_SIZE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b20      	cmp	r3, #32
 8004084:	bf28      	it	cs
 8004086:	2320      	movcs	r3, #32
 8004088:	461a      	mov	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	609a      	str	r2, [r3, #8]

   //Close existing socket, if necessary
   if(context->socket != NULL)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <pingSendRequest+0x3e>
   {
      socketClose(context->socket);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	f001 f8ba 	bl	8005214 <socketClose>
      context->socket = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	605a      	str	r2, [r3, #4]
   }

   //Identifier field is used to help matching requests and replies
   context->identifier = netGetRand();
 80040a6:	f7ff fca7 	bl	80039f8 <netGetRand>
 80040aa:	4603      	mov	r3, r0
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	819a      	strh	r2, [r3, #12]

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80040b2:	4854      	ldr	r0, [pc, #336]	; (8004204 <pingSendRequest+0x19c>)
 80040b4:	f7fd f9be 	bl	8001434 <osAcquireMutex>
   //Sequence Number field is increment each time an Echo Request is sent
   context->sequenceNumber = pingSequenceNumber++;
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <pingSendRequest+0x1a0>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	b291      	uxth	r1, r2
 80040c0:	4a51      	ldr	r2, [pc, #324]	; (8004208 <pingSendRequest+0x1a0>)
 80040c2:	8011      	strh	r1, [r2, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	81d3      	strh	r3, [r2, #14]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80040c8:	484e      	ldr	r0, [pc, #312]	; (8004204 <pingSendRequest+0x19c>)
 80040ca:	f7fd f9c2 	bl	8001452 <osReleaseMutex>

   //Point to the buffer where to format the ICMP message
   message = (IcmpEchoMessage *) context->buffer;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	331c      	adds	r3, #28
 80040d2:	61fb      	str	r3, [r7, #28]

   //Format ICMP Echo Request message
   message->type = ICMP_TYPE_ECHO_REQUEST;
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2208      	movs	r2, #8
 80040d8:	701a      	strb	r2, [r3, #0]
   message->code = 0;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]
   message->checksum = 0;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	2200      	movs	r2, #0
 80040e4:	709a      	strb	r2, [r3, #2]
 80040e6:	2200      	movs	r2, #0
 80040e8:	70da      	strb	r2, [r3, #3]
   message->identifier = context->identifier;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	899a      	ldrh	r2, [r3, #12]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	809a      	strh	r2, [r3, #4]
   message->sequenceNumber = context->sequenceNumber;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	89da      	ldrh	r2, [r3, #14]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	80da      	strh	r2, [r3, #6]

   //Initialize data payload
   for(i = 0; i < context->dataPayloadSize; i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	e00a      	b.n	8004116 <pingSendRequest+0xae>
      message->data[i] = i & 0xFF;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	b2d9      	uxtb	r1, r3
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4413      	add	r3, r2
 800410a:	3308      	adds	r3, #8
 800410c:	460a      	mov	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < context->dataPayloadSize; i++)
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	3301      	adds	r3, #1
 8004114:	623b      	str	r3, [r7, #32]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	6a3a      	ldr	r2, [r7, #32]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3ef      	bcc.n	8004100 <pingSendRequest+0x98>

   //Length of the complete ICMP message including header and data
   length = sizeof(IcmpEchoMessage) + context->dataPayloadSize;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	3308      	adds	r3, #8
 8004126:	61bb      	str	r3, [r7, #24]

   //Select the relevant network interface
   interface = context->interface;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	617b      	str	r3, [r7, #20]

#if (IPV4_SUPPORT == ENABLED)
   //Is target address an IPv4 address?
   if(targetIpAddr->length == sizeof(Ipv4Addr))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d126      	bne.n	8004184 <pingSendRequest+0x11c>
   {
      Ipv4Addr srcIpAddr;

      //Select the source IPv4 address and the relevant network
      //interface to use when pinging the specified host
      error = ipv4SelectSourceAddr(&interface, targetIpAddr->ipv4Addr,
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6859      	ldr	r1, [r3, #4]
 800413a:	f107 0210 	add.w	r2, r7, #16
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	4618      	mov	r0, r3
 8004144:	f009 fe0e 	bl	800dd64 <ipv4SelectSourceAddr>
 8004148:	4603      	mov	r3, r0
 800414a:	84fb      	strh	r3, [r7, #38]	; 0x26
         &srcIpAddr);
      //Any error to report?
      if(error)
 800414c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <pingSendRequest+0xee>
         return error;
 8004152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004154:	e052      	b.n	80041fc <pingSendRequest+0x194>

      //ICMP Echo Request message
      message->type = ICMP_TYPE_ECHO_REQUEST;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2208      	movs	r2, #8
 800415a:	701a      	strb	r2, [r3, #0]
      //Message checksum calculation
      message->checksum = ipCalcChecksum(message, length);
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69f8      	ldr	r0, [r7, #28]
 8004160:	f7fe f972 	bl	8002448 <ipCalcChecksum>
 8004164:	4603      	mov	r3, r0
 8004166:	461a      	mov	r2, r3
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	805a      	strh	r2, [r3, #2]

      //Open a raw socket
      context->socket = socketOpen(SOCKET_TYPE_RAW_IP, SOCKET_IP_PROTO_ICMP);
 800416c:	2101      	movs	r1, #1
 800416e:	2003      	movs	r0, #3
 8004170:	f000 fe0e 	bl	8004d90 <socketOpen>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	605a      	str	r2, [r3, #4]
      //Report an error
      return ERROR_INVALID_ADDRESS;
   }

   //Failed to open socket?
   if(context->socket == NULL)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d104      	bne.n	800418c <pingSendRequest+0x124>
 8004182:	e001      	b.n	8004188 <pingSendRequest+0x120>
      return ERROR_INVALID_ADDRESS;
 8004184:	23e4      	movs	r3, #228	; 0xe4
 8004186:	e039      	b.n	80041fc <pingSendRequest+0x194>
      return ERROR_OPEN_FAILED;
 8004188:	23c8      	movs	r3, #200	; 0xc8
 800418a:	e037      	b.n	80041fc <pingSendRequest+0x194>

   //Set the TTL value to be used
   context->socket->ttl = ttl;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   //Start of exception handling block
   do
   {
      //Associate the newly created socket with the relevant interface
      error = socketBindToInterface(context->socket, interface);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fe28 	bl	8004df4 <socketSetInterface>
 80041a4:	4603      	mov	r3, r0
 80041a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Unable to bind the socket to the desired interface?
      if(error)
 80041a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d117      	bne.n	80041de <pingSendRequest+0x176>
      //Debug message
      TRACE_INFO("Sending ICMP echo request to %s (%" PRIuSIZE " bytes)...\r\n",
         ipAddrToString(targetIpAddr, NULL), length);

      //Send Echo Request message
      error = socketSendTo(context->socket, targetIpAddr, 0,
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6858      	ldr	r0, [r3, #4]
 80041b2:	2300      	movs	r3, #0
 80041b4:	9302      	str	r3, [sp, #8]
 80041b6:	2300      	movs	r3, #0
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	2200      	movs	r2, #0
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	f000 fefa 	bl	8004fbc <socketSendTo>
 80041c8:	4603      	mov	r3, r0
 80041ca:	84fb      	strh	r3, [r7, #38]	; 0x26
         message, length, NULL, 0);
      //Failed to send message ?
      if(error)
 80041cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <pingSendRequest+0x17a>
         break;

      //Save the time at which the request was sent
      context->timestamp = osGetSystemTime();
 80041d2:	f7fd f94d 	bl	8001470 <osGetSystemTime>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	611a      	str	r2, [r3, #16]
 80041dc:	e002      	b.n	80041e4 <pingSendRequest+0x17c>
         break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <pingSendRequest+0x17c>
         break;
 80041e2:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Any error to report?
   if(error)
 80041e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <pingSendRequest+0x192>
   {
      //Clean up side effects
      socketClose(context->socket);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f810 	bl	8005214 <socketClose>
      context->socket = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	605a      	str	r2, [r3, #4]
   }

   //Return status code
   return error;
 80041fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3728      	adds	r7, #40	; 0x28
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20009178 	.word	0x20009178
 8004208:	20000334 	.word	0x20000334

0800420c <pingCheckReply>:
 * @return Error code
 **/

error_t pingCheckReply(PingContext *context, const IpAddr *srcIpAddr,
   const IpAddr *destIpAddr, const IcmpEchoMessage *message, size_t length)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
   size_t i;

   //Check message length
   if(length != (sizeof(IcmpEchoMessage) + context->dataPayloadSize))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	3308      	adds	r3, #8
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	429a      	cmp	r2, r3
 8004224:	d001      	beq.n	800422a <pingCheckReply+0x1e>
      return ERROR_INVALID_MESSAGE;
 8004226:	23e6      	movs	r3, #230	; 0xe6
 8004228:	e045      	b.n	80042b6 <pingCheckReply+0xaa>

#if (IPV4_SUPPORT == ENABLED)
   //Is target address an IPv4 address?
   if(context->socket->protocol == SOCKET_IP_PROTO_ICMP)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d114      	bne.n	800425e <pingCheckReply+0x52>
   {
      //Check address type
      if(destIpAddr->length != sizeof(Ipv4Addr))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b04      	cmp	r3, #4
 800423a:	d001      	beq.n	8004240 <pingCheckReply+0x34>
         return ERROR_INVALID_MESSAGE;
 800423c:	23e6      	movs	r3, #230	; 0xe6
 800423e:	e03a      	b.n	80042b6 <pingCheckReply+0xaa>

      //Check message type
      if(message->type != ICMP_TYPE_ECHO_REPLY)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <pingCheckReply+0x40>
         return ERROR_INVALID_MESSAGE;
 8004248:	23e6      	movs	r3, #230	; 0xe6
 800424a:	e034      	b.n	80042b6 <pingCheckReply+0xaa>

      //Verify checksum value
      if(ipCalcChecksum(message, length) != 0x0000)
 800424c:	6a39      	ldr	r1, [r7, #32]
 800424e:	6838      	ldr	r0, [r7, #0]
 8004250:	f7fe f8fa 	bl	8002448 <ipCalcChecksum>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <pingCheckReply+0x56>
         return ERROR_INVALID_MESSAGE;
 800425a:	23e6      	movs	r3, #230	; 0xe6
 800425c:	e02b      	b.n	80042b6 <pingCheckReply+0xaa>
   else
#endif
   //Invalid target address?
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 800425e:	23e4      	movs	r3, #228	; 0xe4
 8004260:	e029      	b.n	80042b6 <pingCheckReply+0xaa>
   }

   //Make sure the response identifier matches the request identifier
   if(message->identifier != context->identifier)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	889b      	ldrh	r3, [r3, #4]
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	899b      	ldrh	r3, [r3, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <pingCheckReply+0x68>
      return ERROR_INVALID_MESSAGE;
 8004270:	23e6      	movs	r3, #230	; 0xe6
 8004272:	e020      	b.n	80042b6 <pingCheckReply+0xaa>
   //Make sure the sequence number is correct
   if(message->sequenceNumber != context->sequenceNumber)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	88db      	ldrh	r3, [r3, #6]
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	89db      	ldrh	r3, [r3, #14]
 800427e:	429a      	cmp	r2, r3
 8004280:	d001      	beq.n	8004286 <pingCheckReply+0x7a>
      return ERROR_INVALID_MESSAGE;
 8004282:	23e6      	movs	r3, #230	; 0xe6
 8004284:	e017      	b.n	80042b6 <pingCheckReply+0xaa>

   //Verify data payload
   for(i = 0; i < context->dataPayloadSize; i++)
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e00e      	b.n	80042aa <pingCheckReply+0x9e>
   {
      //Compare received data against expected data pattern
      if(message->data[i] != (i & 0xFF))
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4413      	add	r3, r2
 8004292:	3308      	adds	r3, #8
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <pingCheckReply+0x98>
         return ERROR_INVALID_MESSAGE;
 80042a0:	23e6      	movs	r3, #230	; 0xe6
 80042a2:	e008      	b.n	80042b6 <pingCheckReply+0xaa>
   for(i = 0; i < context->dataPayloadSize; i++)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	3301      	adds	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3eb      	bcc.n	800428c <pingCheckReply+0x80>
   }

   //The ICMP Echo Reply message is acceptable
   return NO_ERROR;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <pingWaitForReply>:
 * @return Error code
 **/

error_t pingWaitForReply(PingContext *context,
   IpAddr *targetIpAddr, systime_t *rtt)
{
 80042be:	b590      	push	{r4, r7, lr}
 80042c0:	b091      	sub	sp, #68	; 0x44
 80042c2:	af04      	add	r7, sp, #16
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
   systime_t timeout;
   IpAddr srcIpAddr;
   IpAddr destIpAddr;

   //Invalid context?
   if(context == NULL)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <pingWaitForReply+0x16>
      return ERROR_INVALID_PARAMETER;
 80042d0:	2302      	movs	r3, #2
 80042d2:	e079      	b.n	80043c8 <pingWaitForReply+0x10a>

   //Wait for an ICMP Echo Reply message
   do
   {
      //Get current time
      time = osGetSystemTime();
 80042d4:	f7fd f8cc 	bl	8001470 <osGetSystemTime>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24

      //Compute the timeout to be used
      if(timeCompare(time, context->timestamp + context->timeout) < 0)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691a      	ldr	r2, [r3, #16]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4413      	add	r3, r2
 80042e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da08      	bge.n	80042fe <pingWaitForReply+0x40>
         timeout = context->timestamp + context->timeout - time;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	441a      	add	r2, r3
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fc:	e001      	b.n	8004302 <pingWaitForReply+0x44>
      else
         timeout = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28

      //Adjust receive timeout
      error = socketSetTimeout(context->socket, timeout);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fd59 	bl	8004dc0 <socketSetTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Any error to report?
      if(error)
 8004312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004314:	2b00      	cmp	r3, #0
 8004316:	d155      	bne.n	80043c4 <pingWaitForReply+0x106>
         break;

      //Wait for an incoming ICMP message
      error = socketReceiveEx(context->socket, &srcIpAddr, NULL,
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6858      	ldr	r0, [r3, #4]
         &destIpAddr, context->buffer, PING_BUFFER_SIZE, &length, 0);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	331c      	adds	r3, #28
      error = socketReceiveEx(context->socket, &srcIpAddr, NULL,
 8004320:	f107 0410 	add.w	r4, r7, #16
 8004324:	f107 0118 	add.w	r1, r7, #24
 8004328:	2200      	movs	r2, #0
 800432a:	9203      	str	r2, [sp, #12]
 800432c:	f107 0220 	add.w	r2, r7, #32
 8004330:	9202      	str	r2, [sp, #8]
 8004332:	2228      	movs	r2, #40	; 0x28
 8004334:	9201      	str	r2, [sp, #4]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4623      	mov	r3, r4
 800433a:	2200      	movs	r2, #0
 800433c:	f000 fec0 	bl	80050c0 <socketReceiveEx>
 8004340:	4603      	mov	r3, r0
 8004342:	85fb      	strh	r3, [r7, #46]	; 0x2e
      if(error == ERROR_TIMEOUT)
         error = ERROR_WOULD_BLOCK;
#endif

      //Get current time
      time = osGetSystemTime();
 8004344:	f7fd f894 	bl	8001470 <osGetSystemTime>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24

      //Check status code
      if(!error)
 800434a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10e      	bne.n	800436e <pingWaitForReply+0xb0>
      {
         //Check whether the incoming ICMP message is acceptable
         error = pingCheckReply(context, &srcIpAddr, &destIpAddr,
            (IcmpEchoMessage *) context->buffer, length);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f103 001c 	add.w	r0, r3, #28
         error = pingCheckReply(context, &srcIpAddr, &destIpAddr,
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	f107 0210 	add.w	r2, r7, #16
 800435c:	f107 0118 	add.w	r1, r7, #24
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	4603      	mov	r3, r0
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ff51 	bl	800420c <pingCheckReply>
 800436a:	4603      	mov	r3, r0
 800436c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Check status code
      if(!error)
 800436e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004370:	2b00      	cmp	r3, #0
 8004372:	d118      	bne.n	80043a6 <pingWaitForReply+0xe8>
      {
         //Calculate round-trip time
         context->rtt = time - context->timestamp;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437a:	1ad2      	subs	r2, r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	619a      	str	r2, [r3, #24]
         //Debug message
         TRACE_INFO("ICMP echo reply received from %s (%" PRIu32 " ms)...\r\n",
            ipAddrToString(&srcIpAddr, NULL), context->rtt);

         //Return the IP address of the host
         if(targetIpAddr != NULL)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <pingWaitForReply+0xd8>
            *targetIpAddr = srcIpAddr;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	461a      	mov	r2, r3
 800438a:	f107 0318 	add.w	r3, r7, #24
 800438e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004392:	e882 0003 	stmia.w	r2, {r0, r1}

         //Return the round-trip time
         if(rtt != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00f      	beq.n	80043bc <pingWaitForReply+0xfe>
            *rtt = context->rtt;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e00a      	b.n	80043bc <pingWaitForReply+0xfe>
      }
      else
      {
         //Timeout value exceeded?
         if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4413      	add	r3, r2
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	db01      	blt.n	80043bc <pingWaitForReply+0xfe>
         {
            //Report an error
            error = ERROR_TIMEOUT;
 80043b8:	23dc      	movs	r3, #220	; 0xdc
 80043ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
         }
      }

      //Wait for the next incoming ICMP message
   } while(error == ERROR_INVALID_MESSAGE);
 80043bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043be:	2be6      	cmp	r3, #230	; 0xe6
 80043c0:	d088      	beq.n	80042d4 <pingWaitForReply+0x16>
 80043c2:	e000      	b.n	80043c6 <pingWaitForReply+0x108>
         break;
 80043c4:	bf00      	nop

   //Return status code
   return error;
 80043c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3734      	adds	r7, #52	; 0x34
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <pingRelease>:
 * @brief Release ping context
 * @param[in] context Pointer to the ping context
 **/

void pingRelease(PingContext *context)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
   //Make sure the context is valid
   if(context != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <pingRelease+0x26>
   {
      //Close underlying socket
      if(context->socket != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <pingRelease+0x26>
      {
         socketClose(context->socket);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff12 	bl	8005214 <socketClose>
         context->socket = NULL;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
      }
   }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <rawSocketProcessIpPacket>:
 **/

error_t rawSocketProcessIpPacket(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, const NetBuffer *buffer, size_t offset,
   NetRxAncillary *ancillary)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b08d      	sub	sp, #52	; 0x34
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the raw IP packet
   length = netBufferGetLength(buffer) - offset;
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fe fcb4 	bl	8002d7c <netBufferGetLength>
 8004414:	4602      	mov	r2, r0
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	61bb      	str	r3, [r7, #24]

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e04b      	b.n	80044ba <rawSocketProcessIpPacket+0xba>
   {
      //Point to the current socket
      socket = socketTable + i;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	4a6e      	ldr	r2, [pc, #440]	; (80045e8 <rawSocketProcessIpPacket+0x1e8>)
 800442e:	4413      	add	r3, r2
 8004430:	623b      	str	r3, [r7, #32]

      //Raw socket found?
      if(socket->type != SOCKET_TYPE_RAW_IP)
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d12f      	bne.n	800449a <rawSocketProcessIpPacket+0x9a>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <rawSocketProcessIpPacket+0x4c>
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	429a      	cmp	r2, r3
 800444a:	d128      	bne.n	800449e <rawSocketProcessIpPacket+0x9e>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b0c      	cmp	r3, #12
 8004452:	d126      	bne.n	80044a2 <rawSocketProcessIpPacket+0xa2>
      {
         //Check protocol field
         if(socket->protocol != pseudoHeader->ipv4Data.protocol)
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	7b52      	ldrb	r2, [r2, #13]
 800445c:	4293      	cmp	r3, r2
 800445e:	d122      	bne.n	80044a6 <rawSocketProcessIpPacket+0xa6>
            continue;

         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d009      	beq.n	800447c <rawSocketProcessIpPacket+0x7c>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d11c      	bne.n	80044aa <rawSocketProcessIpPacket+0xaa>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d118      	bne.n	80044ae <rawSocketProcessIpPacket+0xae>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01e      	beq.n	80044c2 <rawSocketProcessIpPacket+0xc2>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d112      	bne.n	80044b2 <rawSocketProcessIpPacket+0xb2>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d014      	beq.n	80044c2 <rawSocketProcessIpPacket+0xc2>
               continue;
 8004498:	e00c      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
         continue;
 800449a:	bf00      	nop
 800449c:	e00a      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
         continue;
 800449e:	bf00      	nop
 80044a0:	e008      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 80044a2:	bf00      	nop
 80044a4:	e006      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
            continue;
 80044a6:	bf00      	nop
 80044a8:	e004      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
               continue;
 80044aa:	bf00      	nop
 80044ac:	e002      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
               continue;
 80044ae:	bf00      	nop
 80044b0:	e000      	b.n	80044b4 <rawSocketProcessIpPacket+0xb4>
               continue;
 80044b2:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	3301      	adds	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d9b0      	bls.n	8004422 <rawSocketProcessIpPacket+0x22>
 80044c0:	e000      	b.n	80044c4 <rawSocketProcessIpPacket+0xc4>
      }

      //The current socket meets all the criteria
      break;
 80044c2:	bf00      	nop
   }

   //Drop incoming packet if no matching socket was found
   if(i >= SOCKET_MAX_COUNT)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	2b09      	cmp	r3, #9
 80044c8:	d901      	bls.n	80044ce <rawSocketProcessIpPacket+0xce>
      return ERROR_PROTOCOL_UNREACHABLE;
 80044ca:	23d1      	movs	r3, #209	; 0xd1
 80044cc:	e087      	b.n	80045de <rawSocketProcessIpPacket+0x1de>

   //Empty receive queue?
   if(socket->receiveQueue == NULL)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <rawSocketProcessIpPacket+0x10a>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	3334      	adds	r3, #52	; 0x34
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fc08 	bl	8002cf2 <netBufferAlloc>
 80044e2:	6178      	str	r0, [r7, #20]

      //Successful memory allocation?
      if(p != NULL)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <rawSocketProcessIpPacket+0x104>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 80044ea:	2100      	movs	r1, #0
 80044ec:	6978      	ldr	r0, [r7, #20]
 80044ee:	f7fe fd0d 	bl	8002f0c <netBufferAt>
 80044f2:	61f8      	str	r0, [r7, #28]
         queueItem->buffer = p;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	61da      	str	r2, [r3, #28]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 8004502:	e031      	b.n	8004568 <rawSocketProcessIpPacket+0x168>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e02e      	b.n	8004568 <rawSocketProcessIpPacket+0x168>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004510:	61fb      	str	r3, [r7, #28]

      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 8004512:	2301      	movs	r3, #1
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
 8004516:	e005      	b.n	8004524 <rawSocketProcessIpPacket+0x124>
      {
         queueItem = queueItem->next;
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	61fb      	str	r3, [r7, #28]
      for(i = 1; queueItem->next; i++)
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	3301      	adds	r3, #1
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f5      	bne.n	8004518 <rawSocketProcessIpPacket+0x118>
      }

      //Check whether the receive queue is full
      if(i >= RAW_SOCKET_RX_QUEUE_SIZE)
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	2b03      	cmp	r3, #3
 8004530:	d901      	bls.n	8004536 <rawSocketProcessIpPacket+0x136>
         //though no errors had been detected
         MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
         IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

         //Report an error
         return ERROR_RECEIVE_QUEUE_FULL;
 8004532:	23db      	movs	r3, #219	; 0xdb
 8004534:	e053      	b.n	80045de <rawSocketProcessIpPacket+0x1de>
      }

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3334      	adds	r3, #52	; 0x34
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fbd9 	bl	8002cf2 <netBufferAlloc>
 8004540:	6178      	str	r0, [r7, #20]

      //Successful memory allocation?
      if(p != NULL)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <rawSocketProcessIpPacket+0x164>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8004548:	2100      	movs	r1, #0
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7fe fcde 	bl	8002f0c <netBufferAt>
 8004550:	4602      	mov	r2, r0
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61fb      	str	r3, [r7, #28]
         queueItem->buffer = p;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	61da      	str	r2, [r3, #28]
 8004562:	e001      	b.n	8004568 <rawSocketProcessIpPacket+0x168>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61fb      	str	r3, [r7, #28]
      }
   }

   //Not enough resources to properly handle the packet?
   if(queueItem == NULL)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <rawSocketProcessIpPacket+0x172>
      //though no errors had been detected
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

      //Report an error
      return ERROR_OUT_OF_MEMORY;
 800456e:	2364      	movs	r3, #100	; 0x64
 8004570:	e035      	b.n	80045de <rawSocketProcessIpPacket+0x1de>
   }

   //Initialize next field
   queueItem->next = NULL;
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
   //Network interface where the packet was received
   queueItem->interface = interface;
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	605a      	str	r2, [r3, #4]
   //Port number is unused
   queueItem->srcPort = 0;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	2200      	movs	r2, #0
 8004582:	821a      	strh	r2, [r3, #16]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d10d      	bne.n	80045a8 <rawSocketProcessIpPacket+0x1a8>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2204      	movs	r2, #4
 8004590:	609a      	str	r2, [r3, #8]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	60da      	str	r2, [r3, #12]

      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2204      	movs	r2, #4
 800459e:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	619a      	str	r2, [r3, #24]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the raw IP packet
   queueItem->offset = sizeof(SocketQueueItem);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	2234      	movs	r2, #52	; 0x34
 80045ac:	621a      	str	r2, [r3, #32]
   //Copy the raw data
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	69d8      	ldr	r0, [r3, #28]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	6a19      	ldr	r1, [r3, #32]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	f7fe fd73 	bl	80030a8 <netBufferCopy>

   //Additional options can be passed to the stack along with the packet
   queueItem->ancillary = *ancillary;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045c6:	3324      	adds	r3, #36	; 0x24
 80045c8:	4614      	mov	r4, r2
 80045ca:	6820      	ldr	r0, [r4, #0]
 80045cc:	6861      	ldr	r1, [r4, #4]
 80045ce:	68a2      	ldr	r2, [r4, #8]
 80045d0:	c307      	stmia	r3!, {r0, r1, r2}
 80045d2:	7b22      	ldrb	r2, [r4, #12]
 80045d4:	701a      	strb	r2, [r3, #0]

   //Notify user that data is available
   rawSocketUpdateEvents(socket);
 80045d6:	6a38      	ldr	r0, [r7, #32]
 80045d8:	f000 fb3c 	bl	8004c54 <rawSocketUpdateEvents>

   //Successful processing
   return NO_ERROR;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	372c      	adds	r7, #44	; 0x2c
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd90      	pop	{r4, r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20009990 	.word	0x20009990

080045ec <rawSocketProcessEthPacket>:
 *   the packet
 **/

void rawSocketProcessEthPacket(NetInterface *interface, EthHeader *header,
   const uint8_t *data, size_t length, NetRxAncillary *ancillary)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
 80045fe:	e03e      	b.n	800467e <rawSocketProcessEthPacket+0x92>
   {
      //Point to the current socket
      socket = socketTable + i;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	4a69      	ldr	r2, [pc, #420]	; (80047b0 <rawSocketProcessEthPacket+0x1c4>)
 800460c:	4413      	add	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]

      //Raw socket found?
      if(socket->type != SOCKET_TYPE_RAW_ETH)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b04      	cmp	r3, #4
 8004616:	d12c      	bne.n	8004672 <rawSocketProcessEthPacket+0x86>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <rawSocketProcessEthPacket+0x3e>
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d125      	bne.n	8004676 <rawSocketProcessEthPacket+0x8a>
         continue;

      //Check protocol field
      if(socket->protocol == SOCKET_ETH_PROTO_ALL)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d029      	beq.n	8004686 <rawSocketProcessEthPacket+0x9a>
      {
         //Accept all EtherType values
      }
      else if(socket->protocol == SOCKET_ETH_PROTO_LLC)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800463a:	4293      	cmp	r3, r2
 800463c:	d10c      	bne.n	8004658 <rawSocketProcessEthPacket+0x6c>
      {
         //Only accept LLC frames
         if(ntohs(header->type) > ETH_MTU)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	899b      	ldrh	r3, [r3, #12]
 8004642:	b29b      	uxth	r3, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7fc fd78 	bl	800113a <swapInt16>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004652:	429a      	cmp	r2, r3
 8004654:	d917      	bls.n	8004686 <rawSocketProcessEthPacket+0x9a>
            continue;
 8004656:	e00f      	b.n	8004678 <rawSocketProcessEthPacket+0x8c>
      }
      else
      {
         //Only accept frames with the correct EtherType value
         if(ntohs(header->type) != socket->protocol)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	899b      	ldrh	r3, [r3, #12]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fd6b 	bl	800113a <swapInt16>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d00a      	beq.n	8004686 <rawSocketProcessEthPacket+0x9a>
            continue;
 8004670:	e002      	b.n	8004678 <rawSocketProcessEthPacket+0x8c>
         continue;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <rawSocketProcessEthPacket+0x8c>
         continue;
 8004676:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	2b09      	cmp	r3, #9
 8004682:	d9bd      	bls.n	8004600 <rawSocketProcessEthPacket+0x14>
 8004684:	e000      	b.n	8004688 <rawSocketProcessEthPacket+0x9c>
      }

      //The current socket meets all the criteria
      break;
 8004686:	bf00      	nop
   }

   //Drop incoming packet if no matching socket was found
   if(i >= SOCKET_MAX_COUNT)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b09      	cmp	r3, #9
 800468c:	f200 8088 	bhi.w	80047a0 <rawSocketProcessEthPacket+0x1b4>
      return;

   //Empty receive queue?
   if(socket->receiveQueue == NULL)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <rawSocketProcessEthPacket+0xe0>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + sizeof(EthHeader) + length);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	3342      	adds	r3, #66	; 0x42
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe fb27 	bl	8002cf2 <netBufferAlloc>
 80046a4:	6138      	str	r0, [r7, #16]

      //Successful memory allocation?
      if(p != NULL)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00c      	beq.n	80046c6 <rawSocketProcessEthPacket+0xda>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 80046ac:	2100      	movs	r1, #0
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f7fe fc2c 	bl	8002f0c <netBufferAt>
 80046b4:	6178      	str	r0, [r7, #20]
         queueItem->buffer = p;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	61da      	str	r2, [r3, #28]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 80046c4:	e02f      	b.n	8004726 <rawSocketProcessEthPacket+0x13a>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e02c      	b.n	8004726 <rawSocketProcessEthPacket+0x13a>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80046d2:	617b      	str	r3, [r7, #20]

      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 80046d4:	2301      	movs	r3, #1
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e005      	b.n	80046e6 <rawSocketProcessEthPacket+0xfa>
      {
         queueItem = queueItem->next;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	617b      	str	r3, [r7, #20]
      for(i = 1; queueItem->next; i++)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	3301      	adds	r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f5      	bne.n	80046da <rawSocketProcessEthPacket+0xee>
      }

      //Check whether the receive queue is full
      if(i >= RAW_SOCKET_RX_QUEUE_SIZE)
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d857      	bhi.n	80047a4 <rawSocketProcessEthPacket+0x1b8>
         //Exit immediately
         return;
      }

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + sizeof(EthHeader) + length);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	3342      	adds	r3, #66	; 0x42
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fafa 	bl	8002cf2 <netBufferAlloc>
 80046fe:	6138      	str	r0, [r7, #16]

      //Successful memory allocation?
      if(p != NULL)
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00d      	beq.n	8004722 <rawSocketProcessEthPacket+0x136>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8004706:	2100      	movs	r1, #0
 8004708:	6938      	ldr	r0, [r7, #16]
 800470a:	f7fe fbff 	bl	8002f0c <netBufferAt>
 800470e:	4602      	mov	r2, r0
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]
         queueItem->buffer = p;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	61da      	str	r2, [r3, #28]
 8004720:	e001      	b.n	8004726 <rawSocketProcessEthPacket+0x13a>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
      }
   }

   //Not enough resources to properly handle the packet?
   if(queueItem == NULL)
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03d      	beq.n	80047a8 <rawSocketProcessEthPacket+0x1bc>
      //Exit immediately
      return;
   }

   //Initialize next field
   queueItem->next = NULL;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
   //Network interface where the packet was received
   queueItem->interface = interface;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]

   //Other fields are meaningless
   queueItem->srcPort = 0;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2200      	movs	r2, #0
 800473c:	821a      	strh	r2, [r3, #16]
   queueItem->srcIpAddr = IP_ADDR_ANY;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <rawSocketProcessEthPacket+0x1c8>)
 8004742:	3308      	adds	r3, #8
 8004744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004748:	e883 0003 	stmia.w	r3, {r0, r1}
   queueItem->destIpAddr = IP_ADDR_ANY;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <rawSocketProcessEthPacket+0x1c8>)
 8004750:	3314      	adds	r3, #20
 8004752:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004756:	e883 0003 	stmia.w	r3, {r0, r1}

   //Offset to the raw datagram
   queueItem->offset = sizeof(SocketQueueItem);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2234      	movs	r2, #52	; 0x34
 800475e:	621a      	str	r2, [r3, #32]

   //Copy the Ethernet header
   netBufferWrite(queueItem->buffer, queueItem->offset, header,
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	69d8      	ldr	r0, [r3, #28]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	6a19      	ldr	r1, [r3, #32]
 8004768:	230e      	movs	r3, #14
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	f7fe fd99 	bl	80032a2 <netBufferWrite>
      sizeof(EthHeader));

   //Copy the payload
   netBufferWrite(queueItem->buffer, queueItem->offset + sizeof(EthHeader),
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	69d8      	ldr	r0, [r3, #28]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f103 010e 	add.w	r1, r3, #14
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	f7fe fd8f 	bl	80032a2 <netBufferWrite>
      data, length);

   //Additional options can be passed to the stack along with the packet
   queueItem->ancillary = *ancillary;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004788:	3324      	adds	r3, #36	; 0x24
 800478a:	4614      	mov	r4, r2
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	6861      	ldr	r1, [r4, #4]
 8004790:	68a2      	ldr	r2, [r4, #8]
 8004792:	c307      	stmia	r3!, {r0, r1, r2}
 8004794:	7b22      	ldrb	r2, [r4, #12]
 8004796:	701a      	strb	r2, [r3, #0]

   //Notify user that data is available
   rawSocketUpdateEvents(socket);
 8004798:	69b8      	ldr	r0, [r7, #24]
 800479a:	f000 fa5b 	bl	8004c54 <rawSocketUpdateEvents>
 800479e:	e004      	b.n	80047aa <rawSocketProcessEthPacket+0x1be>
      return;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <rawSocketProcessEthPacket+0x1be>
         return;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <rawSocketProcessEthPacket+0x1be>
      return;
 80047a8:	bf00      	nop
}
 80047aa:	3724      	adds	r7, #36	; 0x24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}
 80047b0:	20009990 	.word	0x20009990
 80047b4:	08014538 	.word	0x08014538

080047b8 <rawSocketSendIpPacket>:
 * @return Error code
 **/

error_t rawSocketSendIpPacket(Socket *socket, const SocketMsg *message,
   uint_t flags)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b096      	sub	sp, #88	; 0x58
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
   NetInterface *interface;
   IpPseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Select the relevant network interface
   if(message->interface != NULL)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <rawSocketSendIpPacket+0x1c>
   {
      interface = message->interface;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	643b      	str	r3, [r7, #64]	; 0x40
 80047d2:	e002      	b.n	80047da <rawSocketSendIpPacket+0x22>
   }
   else
   {
      interface = socket->interface;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	643b      	str	r3, [r7, #64]	; 0x40
   }

   //Allocate a buffer memory to hold the raw IP datagram
   buffer = ipAllocBuffer(0, &offset);
 80047da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047de:	4619      	mov	r1, r3
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7fd ff63 	bl	80026ac <ipAllocBuffer>
 80047e6:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(buffer == NULL)
 80047e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <rawSocketSendIpPacket+0x3a>
      return ERROR_OUT_OF_MEMORY;
 80047ee:	2364      	movs	r3, #100	; 0x64
 80047f0:	e092      	b.n	8004918 <rawSocketSendIpPacket+0x160>

   //Start of exception handling block
   do
   {
      //Copy the raw data
      error = netBufferAppend(buffer, message->data, message->length);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6819      	ldr	r1, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80047fe:	f7fe fd1d 	bl	800323c <netBufferAppend>
 8004802:	4603      	mov	r3, r0
 8004804:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      //Any error to report?
      if(error)
 8004808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800480c:	2b00      	cmp	r3, #0
 800480e:	d17b      	bne.n	8004908 <rawSocketSendIpPacket+0x150>
         break;

#if (IPV4_SUPPORT == ENABLED)
      //Destination address is an IPv4 address?
      if(message->destIpAddr.length == sizeof(Ipv4Addr))
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d135      	bne.n	8004884 <rawSocketSendIpPacket+0xcc>
      {
         Ipv4Addr srcIpAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, message->destIpAddr.ipv4Addr,
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800481c:	f107 0214 	add.w	r2, r7, #20
 8004820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004824:	4618      	mov	r0, r3
 8004826:	f009 fa9d 	bl	800dd64 <ipv4SelectSourceAddr>
 800482a:	4603      	mov	r3, r0
 800482c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            &srcIpAddr);
         //Any error to report?
         if(error)
 8004830:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004834:	2b00      	cmp	r3, #0
 8004836:	d169      	bne.n	800490c <rawSocketSendIpPacket+0x154>
            break;

         //Format IPv4 pseudo header
         pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8004838:	230c      	movs	r3, #12
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	637b      	str	r3, [r7, #52]	; 0x34
         pseudoHeader.ipv4Data.destAddr = message->destIpAddr.ipv4Addr;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
         pseudoHeader.ipv4Data.reserved = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
         pseudoHeader.ipv4Data.protocol = socket->protocol;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	b2db      	uxtb	r3, r3
 8004852:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
         pseudoHeader.ipv4Data.length = htons(message->length);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	b29b      	uxth	r3, r3
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc fc6c 	bl	800113a <swapInt16>
 8004862:	4603      	mov	r3, r0
 8004864:	87fb      	strh	r3, [r7, #62]	; 0x3e
         //Exit immediately
         break;
      }

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004866:	4b2e      	ldr	r3, [pc, #184]	; (8004920 <rawSocketSendIpPacket+0x168>)
 8004868:	f107 0418 	add.w	r4, r7, #24
 800486c:	461d      	mov	r5, r3
 800486e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004872:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004876:	e884 0003 	stmia.w	r4, {r0, r1}

      //Set the TTL value to be used
      if(message->ttl != 0)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	7b1b      	ldrb	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <rawSocketSendIpPacket+0xdc>
 8004882:	e003      	b.n	800488c <rawSocketSendIpPacket+0xd4>
         error = ERROR_FAILURE;
 8004884:	2301      	movs	r3, #1
 8004886:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         break;
 800488a:	e040      	b.n	800490e <rawSocketSendIpPacket+0x156>
      {
         ancillary.ttl = message->ttl;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	7b1b      	ldrb	r3, [r3, #12]
 8004890:	763b      	strb	r3, [r7, #24]
 8004892:	e010      	b.n	80048b6 <rawSocketSendIpPacket+0xfe>
      }
      else if(ipIsMulticastAddr(&message->destIpAddr))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3320      	adds	r3, #32
 8004898:	4618      	mov	r0, r3
 800489a:	f7fd fdb9 	bl	8002410 <ipIsMulticastAddr>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <rawSocketSendIpPacket+0xf6>
      {
         ancillary.ttl = socket->multicastTtl;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048aa:	763b      	strb	r3, [r7, #24]
 80048ac:	e003      	b.n	80048b6 <rawSocketSendIpPacket+0xfe>
      }
      else
      {
         ancillary.ttl = socket->ttl;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048b4:	763b      	strb	r3, [r7, #24]
      }

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      if((flags & SOCKET_FLAG_DONT_ROUTE) != 0)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <rawSocketSendIpPacket+0x10c>
      {
         ancillary.dontRoute = TRUE;
 80048c0:	2301      	movs	r3, #1
 80048c2:	61fb      	str	r3, [r7, #28]
      ancillary.dscp = socket->dscp;
#endif

#if (ETH_SUPPORT == ENABLED)
      //Set source and destination MAC addresses
      ancillary.srcMacAddr = message->srcMacAddr;
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ca:	322a      	adds	r2, #42	; 0x2a
 80048cc:	6810      	ldr	r0, [r2, #0]
 80048ce:	6018      	str	r0, [r3, #0]
 80048d0:	8892      	ldrh	r2, [r2, #4]
 80048d2:	809a      	strh	r2, [r3, #4]
      ancillary.destMacAddr = message->destMacAddr;
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80048da:	3230      	adds	r2, #48	; 0x30
 80048dc:	6810      	ldr	r0, [r2, #0]
 80048de:	6018      	str	r0, [r3, #0]
 80048e0:	8892      	ldrh	r2, [r2, #4]
 80048e2:	809a      	strh	r2, [r3, #4]
      //Unique identifier for hardware time stamping
      ancillary.timestampId = message->timestampId;
#endif

      //Send raw IP datagram
      error = ipSendDatagram(interface, &pseudoHeader, buffer, offset,
 80048e4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048e8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80048ec:	f107 0318 	add.w	r3, r7, #24
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f6:	f7fd fd33 	bl	8002360 <ipSendDatagram>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         &ancillary);
      //Failed to send data?
      if(error)
 8004900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004904:	2b00      	cmp	r3, #0
 8004906:	e002      	b.n	800490e <rawSocketSendIpPacket+0x156>
         break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <rawSocketSendIpPacket+0x156>
            break;
 800490c:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Free previously allocated memory block
   netBufferFree(buffer);
 800490e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004910:	f7fe fa22 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 8004914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 8004918:	4618      	mov	r0, r3
 800491a:	3750      	adds	r7, #80	; 0x50
 800491c:	46bd      	mov	sp, r7
 800491e:	bdb0      	pop	{r4, r5, r7, pc}
 8004920:	08014540 	.word	0x08014540

08004924 <rawSocketSendEthPacket>:
 * @return Error code
 **/

error_t rawSocketSendEthPacket(Socket *socket, const SocketMsg *message,
   uint_t flags)
{
 8004924:	b5b0      	push	{r4, r5, r7, lr}
 8004926:	b090      	sub	sp, #64	; 0x40
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
   size_t length;
   NetBuffer *buffer;
   NetInterface *interface;

   //Select the relevant network interface
   if(message->interface != NULL)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <rawSocketSendEthPacket+0x1c>
   {
      interface = message->interface;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	637b      	str	r3, [r7, #52]	; 0x34
 800493e:	e00a      	b.n	8004956 <rawSocketSendEthPacket+0x32>
   }
   else if(socket->interface != NULL)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <rawSocketSendEthPacket+0x2c>
   {
      interface = socket->interface;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
 800494e:	e002      	b.n	8004956 <rawSocketSendEthPacket+0x32>
   }
   else
   {
      interface = netGetDefaultInterface();
 8004950:	f7fd ff86 	bl	8002860 <netGetDefaultInterface>
 8004954:	6378      	str	r0, [r7, #52]	; 0x34
   }

   //Forward the frame to the physical interface
   interface = nicGetPhysicalInterface(interface);
 8004956:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004958:	f7ff f99a 	bl	8003c90 <nicGetPhysicalInterface>
 800495c:	6378      	str	r0, [r7, #52]	; 0x34

   //Ethernet interface?
   if(interface->nicDriver != NULL &&
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	2b00      	cmp	r3, #0
 8004964:	d06a      	beq.n	8004a3c <rawSocketSendEthPacket+0x118>
      interface->nicDriver->type == NIC_TYPE_ETHERNET)
 8004966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	781b      	ldrb	r3, [r3, #0]
   if(interface->nicDriver != NULL &&
 800496c:	2b01      	cmp	r3, #1
 800496e:	d165      	bne.n	8004a3c <rawSocketSendEthPacket+0x118>
   {
      //Allocate a buffer memory to hold the raw Ethernet packet
      buffer = netBufferAlloc(0);
 8004970:	2000      	movs	r0, #0
 8004972:	f7fe f9be 	bl	8002cf2 <netBufferAlloc>
 8004976:	6338      	str	r0, [r7, #48]	; 0x30
      //Failed to allocate buffer?
      if(buffer == NULL)
 8004978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <rawSocketSendEthPacket+0x5e>
         return ERROR_OUT_OF_MEMORY;
 800497e:	2364      	movs	r3, #100	; 0x64
 8004980:	e05f      	b.n	8004a42 <rawSocketSendEthPacket+0x11e>

      //Get the length of the raw data
      length = message->length;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38

      //Copy the raw data
      error = netBufferAppend(buffer, message->data, length);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	4619      	mov	r1, r3
 8004990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004992:	f7fe fc53 	bl	800323c <netBufferAppend>
 8004996:	4603      	mov	r3, r0
 8004998:	87fb      	strh	r3, [r7, #62]	; 0x3e

      //Check status code
      if(!error)
 800499a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800499c:	2b00      	cmp	r3, #0
 800499e:	d116      	bne.n	80049ce <rawSocketSendEthPacket+0xaa>
      {
         //Automatic padding not supported by hardware?
         if(!interface->nicDriver->autoPadding)
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d111      	bne.n	80049ce <rawSocketSendEthPacket+0xaa>
         {
            //The host controller should manually add padding
            //to the packet before transmitting it
            if(length < (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE))
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b3b      	cmp	r3, #59	; 0x3b
 80049ae:	d80e      	bhi.n	80049ce <rawSocketSendEthPacket+0xaa>
            {
               size_t n;

               //Add padding as necessary
               n = (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE) - length;
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80049b6:	62fb      	str	r3, [r7, #44]	; 0x2c

               //Append padding bytes
               error = netBufferAppend(buffer, ethPadding, n);
 80049b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ba:	4924      	ldr	r1, [pc, #144]	; (8004a4c <rawSocketSendEthPacket+0x128>)
 80049bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049be:	f7fe fc3d 	bl	800323c <netBufferAppend>
 80049c2:	4603      	mov	r3, r0
 80049c4:	87fb      	strh	r3, [r7, #62]	; 0x3e

               //Adjust frame length
               length += n;
 80049c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	4413      	add	r3, r2
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
            }
         }
      }

      //Check status code
      if(!error)
 80049ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d119      	bne.n	8004a08 <rawSocketSendEthPacket+0xe4>
      {
         //CRC calculation not supported by hardware?
         if(!interface->nicDriver->autoCrcCalc)
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d114      	bne.n	8004a08 <rawSocketSendEthPacket+0xe4>
         {
            uint32_t crc;

            //Compute CRC over the header and payload
            crc = ethCalcCrcEx(buffer, 0, length);
 80049de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e0:	2100      	movs	r1, #0
 80049e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e4:	f7fd fbf8 	bl	80021d8 <ethCalcCrcEx>
 80049e8:	4603      	mov	r3, r0
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
            //Convert from host byte order to little-endian byte order
            crc = htole32(crc);
 80049ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ee:	62bb      	str	r3, [r7, #40]	; 0x28

            //Append the calculated CRC value
            error = netBufferAppend(buffer, &crc, sizeof(crc));
 80049f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049f4:	2204      	movs	r2, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049fa:	f7fe fc1f 	bl	800323c <netBufferAppend>
 80049fe:	4603      	mov	r3, r0
 8004a00:	87fb      	strh	r3, [r7, #62]	; 0x3e

            //Adjust frame length
            length += sizeof(crc);
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	3304      	adds	r3, #4
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
         }
      }

      //Check status code
      if(!error)
 8004a08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d112      	bne.n	8004a34 <rawSocketSendEthPacket+0x110>
      {
         NetTxAncillary ancillary;

         //Additional options can be passed to the stack along with the packet
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <rawSocketSendEthPacket+0x12c>)
 8004a10:	f107 0410 	add.w	r4, r7, #16
 8004a14:	461d      	mov	r5, r3
 8004a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a1e:	e884 0003 	stmia.w	r4, {r0, r1}
#endif
         //Debug message
         TRACE_DEBUG("Sending raw Ethernet frame (%" PRIuSIZE " bytes)...\r\n", length);

         //Send the resulting packet over the specified link
         error = nicSendPacket(interface, buffer, 0, &ancillary);
 8004a22:	f107 0310 	add.w	r3, r7, #16
 8004a26:	2200      	movs	r2, #0
 8004a28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a2c:	f7ff f978 	bl	8003d20 <nicSendPacket>
 8004a30:	4603      	mov	r3, r0
 8004a32:	87fb      	strh	r3, [r7, #62]	; 0x3e
      }

      //Free previously allocated memory block
      netBufferFree(buffer);
 8004a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a36:	f7fe f98f 	bl	8002d58 <netBufferFree>
 8004a3a:	e001      	b.n	8004a40 <rawSocketSendEthPacket+0x11c>
   else
#endif
   //Unknown interface type?
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8004a3c:	2307      	movs	r3, #7
 8004a3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
   }

   //Return status code
   return error;
 8004a40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3740      	adds	r7, #64	; 0x40
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bdb0      	pop	{r4, r5, r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	080144f8 	.word	0x080144f8
 8004a50:	08014540 	.word	0x08014540

08004a54 <rawSocketReceiveIpPacket>:
 * @return Error code
 **/

error_t rawSocketReceiveIpPacket(Socket *socket, SocketMsg *message,
   uint_t flags)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
   error_t error;
   SocketQueueItem *queueItem;

   //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
   if((flags & SOCKET_FLAG_DONT_WAIT) == 0)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d11c      	bne.n	8004aa4 <rawSocketReceiveIpPacket+0x50>
   {
      //Check whether the receive queue is empty
      if(socket->receiveQueue == NULL)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d117      	bne.n	8004aa4 <rawSocketReceiveIpPacket+0x50>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2280      	movs	r2, #128	; 0x80
 8004a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

         //Reset the event object
         osResetEvent(&socket->event);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3334      	adds	r3, #52	; 0x34
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc fc80 	bl	8001386 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8004a86:	4838      	ldr	r0, [pc, #224]	; (8004b68 <rawSocketReceiveIpPacket+0x114>)
 8004a88:	f7fc fce3 	bl	8001452 <osReleaseMutex>
         //Wait until an event is triggered
         osWaitForEvent(&socket->event, socket->timeout);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fc fc82 	bl	80013a2 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8004a9e:	4832      	ldr	r0, [pc, #200]	; (8004b68 <rawSocketReceiveIpPacket+0x114>)
 8004aa0:	f7fc fcc8 	bl	8001434 <osAcquireMutex>
      }
   }

   //Any packet received?
   if(socket->receiveQueue != NULL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d052      	beq.n	8004b54 <rawSocketReceiveIpPacket+0x100>
   {
      //Point to the first item in the receive queue
      queueItem = socket->receiveQueue;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004ab4:	613b      	str	r3, [r7, #16]

      //Copy data to user buffer
      message->length = netBufferRead(message->data, queueItem->buffer,
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	69d9      	ldr	r1, [r3, #28]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f7fe fc45 	bl	8003354 <netBufferRead>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]
         queueItem->offset, message->size);

      //Network interface where the packet was received
      message->interface = queueItem->interface;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	611a      	str	r2, [r3, #16]
      //Save the source IP address
      message->srcIpAddr = queueItem->srcIpAddr;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	3314      	adds	r3, #20
 8004ade:	3208      	adds	r2, #8
 8004ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae4:	e883 0003 	stmia.w	r3, {r0, r1}
      //Save the source port number
      message->srcPort = queueItem->srcPort;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	8a1a      	ldrh	r2, [r3, #16]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	839a      	strh	r2, [r3, #28]
      //Save the destination IP address
      message->destIpAddr = queueItem->destIpAddr;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	3320      	adds	r3, #32
 8004af6:	3214      	adds	r2, #20
 8004af8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004afc:	e883 0003 	stmia.w	r3, {r0, r1}

      //Save TTL value
      message->ttl = queueItem->ancillary.ttl;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	731a      	strb	r2, [r3, #12]

#if (ETH_SUPPORT == ENABLED)
      //Save source and destination MAC addresses
      message->srcMacAddr = queueItem->ancillary.srcMacAddr;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	332a      	adds	r3, #42	; 0x2a
 8004b10:	3225      	adds	r2, #37	; 0x25
 8004b12:	6811      	ldr	r1, [r2, #0]
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	8892      	ldrh	r2, [r2, #4]
 8004b18:	809a      	strh	r2, [r3, #4]
      message->destMacAddr = queueItem->ancillary.destMacAddr;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	3330      	adds	r3, #48	; 0x30
 8004b20:	322b      	adds	r2, #43	; 0x2b
 8004b22:	6810      	ldr	r0, [r2, #0]
 8004b24:	6018      	str	r0, [r3, #0]
 8004b26:	8892      	ldrh	r2, [r2, #4]
 8004b28:	809a      	strh	r2, [r3, #4]
      message->timestamp = queueItem->ancillary.timestamp;
#endif

      //If the SOCKET_FLAG_PEEK flag is set, the data is copied into the
      //buffer but is not removed from the input queue
      if((flags & SOCKET_FLAG_PEEK) == 0)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <rawSocketReceiveIpPacket+0xf4>
      {
         //Remove the item from the receive queue
         socket->receiveQueue = queueItem->next;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

         //Deallocate memory buffer
         netBufferFree(queueItem->buffer);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f908 	bl	8002d58 <netBufferFree>
      }

      //Update the state of events
      rawSocketUpdateEvents(socket);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f883 	bl	8004c54 <rawSocketUpdateEvents>

      //Successful read operation
      error = NO_ERROR;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	82fb      	strh	r3, [r7, #22]
 8004b52:	e004      	b.n	8004b5e <rawSocketReceiveIpPacket+0x10a>
   }
   else
   {
      //Total number of data that have been received
      message->length = 0;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	609a      	str	r2, [r3, #8]

      //Report a timeout error
      error = ERROR_TIMEOUT;
 8004b5a:	23dc      	movs	r3, #220	; 0xdc
 8004b5c:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8004b5e:	8afb      	ldrh	r3, [r7, #22]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20009178 	.word	0x20009178

08004b6c <rawSocketReceiveEthPacket>:
 * @return Error code
 **/

error_t rawSocketReceiveEthPacket(Socket *socket, SocketMsg *message,
   uint_t flags)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
   error_t error;
   SocketQueueItem *queueItem;

   //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
   if((flags & SOCKET_FLAG_DONT_WAIT) == 0)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11c      	bne.n	8004bbc <rawSocketReceiveEthPacket+0x50>
   {
      //Check whether the receive queue is empty
      if(socket->receiveQueue == NULL)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d117      	bne.n	8004bbc <rawSocketReceiveEthPacket+0x50>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

         //Reset the event object
         osResetEvent(&socket->event);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3334      	adds	r3, #52	; 0x34
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fc fbf4 	bl	8001386 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 8004b9e:	482c      	ldr	r0, [pc, #176]	; (8004c50 <rawSocketReceiveEthPacket+0xe4>)
 8004ba0:	f7fc fc57 	bl	8001452 <osReleaseMutex>
         //Wait until an event is triggered
         osWaitForEvent(&socket->event, socket->timeout);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fc fbf6 	bl	80013a2 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8004bb6:	4826      	ldr	r0, [pc, #152]	; (8004c50 <rawSocketReceiveEthPacket+0xe4>)
 8004bb8:	f7fc fc3c 	bl	8001434 <osAcquireMutex>
      }
   }

   //Any packet received?
   if(socket->receiveQueue != NULL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d039      	beq.n	8004c3a <rawSocketReceiveEthPacket+0xce>
   {
      //Point to the first item in the receive queue
      queueItem = socket->receiveQueue;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004bcc:	613b      	str	r3, [r7, #16]

      //Copy data to user buffer
      message->length = netBufferRead(message->data, queueItem->buffer,
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	69d9      	ldr	r1, [r3, #28]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	6a1a      	ldr	r2, [r3, #32]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f7fe fbb9 	bl	8003354 <netBufferRead>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	609a      	str	r2, [r3, #8]
         queueItem->offset, message->size);

      //Network interface where the packet was received
      message->interface = queueItem->interface;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	611a      	str	r2, [r3, #16]

#if (ETH_SUPPORT == ENABLED)
      //Save source and destination MAC addresses
      message->srcMacAddr = queueItem->ancillary.srcMacAddr;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	332a      	adds	r3, #42	; 0x2a
 8004bf6:	3225      	adds	r2, #37	; 0x25
 8004bf8:	6811      	ldr	r1, [r2, #0]
 8004bfa:	6019      	str	r1, [r3, #0]
 8004bfc:	8892      	ldrh	r2, [r2, #4]
 8004bfe:	809a      	strh	r2, [r3, #4]
      message->destMacAddr = queueItem->ancillary.destMacAddr;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	3330      	adds	r3, #48	; 0x30
 8004c06:	322b      	adds	r2, #43	; 0x2b
 8004c08:	6810      	ldr	r0, [r2, #0]
 8004c0a:	6018      	str	r0, [r3, #0]
 8004c0c:	8892      	ldrh	r2, [r2, #4]
 8004c0e:	809a      	strh	r2, [r3, #4]
      message->timestamp = queueItem->ancillary.timestamp;
#endif

      //If the SOCKET_FLAG_PEEK flag is set, the data is copied into the
      //buffer but is not removed from the input queue
      if((flags & SOCKET_FLAG_PEEK) == 0)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <rawSocketReceiveEthPacket+0xc2>
      {
         //Remove the item from the receive queue
         socket->receiveQueue = queueItem->next;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

         //Deallocate memory buffer
         netBufferFree(queueItem->buffer);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe f895 	bl	8002d58 <netBufferFree>
      }

      //Update the state of events
      rawSocketUpdateEvents(socket);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f810 	bl	8004c54 <rawSocketUpdateEvents>

      //Successful read operation
      error = NO_ERROR;
 8004c34:	2300      	movs	r3, #0
 8004c36:	82fb      	strh	r3, [r7, #22]
 8004c38:	e004      	b.n	8004c44 <rawSocketReceiveEthPacket+0xd8>
   }
   else
   {
      //Total number of data that have been received
      message->length = 0;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	609a      	str	r2, [r3, #8]

      //Report a timeout error
      error = ERROR_TIMEOUT;
 8004c40:	23dc      	movs	r3, #220	; 0xdc
 8004c42:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8004c44:	8afb      	ldrh	r3, [r7, #22]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20009178 	.word	0x20009178

08004c54 <rawSocketUpdateEvents>:
 * @brief Update event state for raw sockets
 * @param[in] socket Handle referencing the socket
 **/

void rawSocketUpdateEvents(Socket *socket)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d007      	beq.n	8004c7e <rawSocketUpdateEvents+0x2a>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d016      	beq.n	8004cb4 <rawSocketUpdateEvents+0x60>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <rawSocketUpdateEvents+0x50>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004ca2:	e007      	b.n	8004cb4 <rawSocketUpdateEvents+0x60>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc0:	401a      	ands	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Any event to signal?
   if(socket->eventFlags)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00f      	beq.n	8004cf2 <rawSocketUpdateEvents+0x9e>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3334      	adds	r3, #52	; 0x34
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc fb46 	bl	8001368 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <rawSocketUpdateEvents+0x9e>
      {
         osSetEvent(socket->userEvent);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fc fb3b 	bl	8001368 <osSetEvent>
      }
   }
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   osMemset(socketTable, 0, sizeof(socketTable));
 8004d02:	f641 02d8 	movw	r2, #6360	; 0x18d8
 8004d06:	2100      	movs	r1, #0
 8004d08:	4820      	ldr	r0, [pc, #128]	; (8004d8c <socketInit+0x90>)
 8004d0a:	f00d fefc 	bl	8012b06 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e032      	b.n	8004d7a <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 8004d14:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <socketInit+0x90>)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	4413      	add	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8004d2c:	fb02 f303 	mul.w	r3, r2, r3
 8004d30:	3330      	adds	r3, #48	; 0x30
 8004d32:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <socketInit+0x90>)
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fc fae9 	bl	8001310 <osCreateEvent>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d117      	bne.n	8004d74 <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 8004d44:	2300      	movs	r3, #0
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	e00e      	b.n	8004d68 <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8004d50:	fb02 f303 	mul.w	r3, r2, r3
 8004d54:	3330      	adds	r3, #48	; 0x30
 8004d56:	4a0d      	ldr	r2, [pc, #52]	; (8004d8c <socketInit+0x90>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fc faf2 	bl	8001346 <osDeleteEvent>
         for(j = 0; j < i; j++)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3ec      	bcc.n	8004d4a <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8004d70:	2365      	movs	r3, #101	; 0x65
 8004d72:	e006      	b.n	8004d82 <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3301      	adds	r3, #1
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	d9c9      	bls.n	8004d14 <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20009990 	.word	0x20009990

08004d90 <socketOpen>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketOpen(uint_t type, uint_t protocol)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
   Socket *socket;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8004d9a:	4808      	ldr	r0, [pc, #32]	; (8004dbc <socketOpen+0x2c>)
 8004d9c:	f7fc fb4a 	bl	8001434 <osAcquireMutex>
   //Allocate a new socket
   socket = socketAllocate(type, protocol);
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa72 	bl	800528c <socketAllocate>
 8004da8:	60f8      	str	r0, [r7, #12]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8004daa:	4804      	ldr	r0, [pc, #16]	; (8004dbc <socketOpen+0x2c>)
 8004dac:	f7fc fb51 	bl	8001452 <osReleaseMutex>

   //Return a handle to the freshly created socket
   return socket;
 8004db0:	68fb      	ldr	r3, [r7, #12]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20009178 	.word	0x20009178

08004dc0 <socketSetTimeout>:
 * @param[in] timeout Maximum time to wait
 * @return Error code
 **/

error_t socketSetTimeout(Socket *socket, systime_t timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <socketSetTimeout+0x14>
      return ERROR_INVALID_PARAMETER;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e009      	b.n	8004de8 <socketSetTimeout+0x28>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8004dd4:	4806      	ldr	r0, [pc, #24]	; (8004df0 <socketSetTimeout+0x30>)
 8004dd6:	f7fc fb2d 	bl	8001434 <osAcquireMutex>
   //Record timeout value
   socket->timeout = timeout;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8004de0:	4803      	ldr	r0, [pc, #12]	; (8004df0 <socketSetTimeout+0x30>)
 8004de2:	f7fc fb36 	bl	8001452 <osReleaseMutex>

   //No error to report
   return NO_ERROR;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20009178 	.word	0x20009178

08004df4 <socketSetInterface>:
 * @param[in] interface Network interface to be used
 * @return Error code
 **/

error_t socketSetInterface(Socket *socket, NetInterface *interface)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
   //Make sure the socket handle is valid
   if(socket == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <socketSetInterface+0x14>
      return ERROR_INVALID_PARAMETER;
 8004e04:	2302      	movs	r3, #2
 8004e06:	e003      	b.n	8004e10 <socketSetInterface+0x1c>

   //Explicitly associate the socket with the specified interface
   socket->interface = interface;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <socketBind>:
 * @param[in] localPort Local port number to assign to the bound socket
 * @return Error code
 **/

error_t socketBind(Socket *socket, const IpAddr *localIpAddr, uint16_t localPort)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
   //Check input parameters
   if(socket == NULL || localIpAddr == NULL)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <socketBind+0x1a>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <socketBind+0x1e>
      return ERROR_INVALID_PARAMETER;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e014      	b.n	8004e64 <socketBind+0x48>

   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM && socket->type != SOCKET_TYPE_DGRAM)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d005      	beq.n	8004e4e <socketBind+0x32>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d001      	beq.n	8004e4e <socketBind+0x32>
      return ERROR_INVALID_SOCKET;
 8004e4a:	23d0      	movs	r3, #208	; 0xd0
 8004e4c:	e00a      	b.n	8004e64 <socketBind+0x48>

   //Associate the specified IP address and port number
   socket->localIpAddr = *localIpAddr;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	3310      	adds	r3, #16
 8004e54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e58:	e883 0003 	stmia.w	r3, {r0, r1}
   socket->localPort = localPort;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	88fa      	ldrh	r2, [r7, #6]
 8004e60:	831a      	strh	r2, [r3, #24]

   //No error to report
   return NO_ERROR;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <socketConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t socketConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //Check input parameters
   if(socket == NULL || remoteIpAddr == NULL)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <socketConnect+0x1a>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <socketConnect+0x1e>
      return ERROR_INVALID_PARAMETER;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e034      	b.n	8004ef8 <socketConnect+0x88>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10e      	bne.n	8004eb4 <socketConnect+0x44>
   {
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8004e96:	481a      	ldr	r0, [pc, #104]	; (8004f00 <socketConnect+0x90>)
 8004e98:	f7fc facc 	bl	8001434 <osAcquireMutex>

      //Establish TCP connection
      error = tcpConnect(socket, remoteIpAddr, remotePort);
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fac8 	bl	8005438 <tcpConnect>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	82fb      	strh	r3, [r7, #22]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8004eac:	4814      	ldr	r0, [pc, #80]	; (8004f00 <socketConnect+0x90>)
 8004eae:	f7fc fad0 	bl	8001452 <osReleaseMutex>
 8004eb2:	e020      	b.n	8004ef6 <socketConnect+0x86>
   }
   else
#endif
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d10c      	bne.n	8004ed6 <socketConnect+0x66>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	331c      	adds	r3, #28
 8004ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ec6:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	849a      	strh	r2, [r3, #36]	; 0x24
      //No error to report
      error = NO_ERROR;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	82fb      	strh	r3, [r7, #22]
 8004ed4:	e00f      	b.n	8004ef6 <socketConnect+0x86>
   }
   //Raw socket?
   else if(socket->type == SOCKET_TYPE_RAW_IP)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d109      	bne.n	8004ef2 <socketConnect+0x82>
   {
      //Save the IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	331c      	adds	r3, #28
 8004ee4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ee8:	e883 0003 	stmia.w	r3, {r0, r1}
      //No error to report
      error = NO_ERROR;
 8004eec:	2300      	movs	r3, #0
 8004eee:	82fb      	strh	r3, [r7, #22]
 8004ef0:	e001      	b.n	8004ef6 <socketConnect+0x86>
   }
   //Invalid socket type?
   else
   {
      //Report an error
      error = ERROR_INVALID_SOCKET;
 8004ef2:	23d0      	movs	r3, #208	; 0xd0
 8004ef4:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8004ef6:	8afb      	ldrh	r3, [r7, #22]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3718      	adds	r7, #24
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20009178 	.word	0x20009178

08004f04 <socketListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t socketListen(Socket *socket, uint_t backlog)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <socketListen+0x14>
      return ERROR_INVALID_PARAMETER;
 8004f14:	2302      	movs	r3, #2
 8004f16:	e012      	b.n	8004f3e <socketListen+0x3a>
   //This function shall be used with connection-oriented socket types
   if(socket->type != SOCKET_TYPE_STREAM)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <socketListen+0x20>
      return ERROR_INVALID_SOCKET;
 8004f20:	23d0      	movs	r3, #208	; 0xd0
 8004f22:	e00c      	b.n	8004f3e <socketListen+0x3a>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8004f24:	4808      	ldr	r0, [pc, #32]	; (8004f48 <socketListen+0x44>)
 8004f26:	f7fc fa85 	bl	8001434 <osAcquireMutex>

   //Start listening for an incoming connection
   error = tcpListen(socket, backlog);
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fb72 	bl	8005616 <tcpListen>
 8004f32:	4603      	mov	r3, r0
 8004f34:	81fb      	strh	r3, [r7, #14]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8004f36:	4804      	ldr	r0, [pc, #16]	; (8004f48 <socketListen+0x44>)
 8004f38:	f7fc fa8b 	bl	8001452 <osReleaseMutex>

   //Return status code
   return error;
 8004f3c:	89fb      	ldrh	r3, [r7, #14]
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20009178 	.word	0x20009178

08004f4c <socketAccept>:
 * @param[out] clientPort Port number used by the client
 * @return Handle to the socket in which the actual connection is made
 **/

Socket *socketAccept(Socket *socket, IpAddr *clientIpAddr, uint16_t *clientPort)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
#if (TCP_SUPPORT == ENABLED)
   Socket *newSocket;

   //Make sure the socket handle is valid
   if(socket == NULL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <socketAccept+0x16>
      return NULL;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e00c      	b.n	8004f7c <socketAccept+0x30>
   //This function shall be used with connection-oriented socket types
   if(socket->type != SOCKET_TYPE_STREAM)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d001      	beq.n	8004f6e <socketAccept+0x22>
      return NULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e006      	b.n	8004f7c <socketAccept+0x30>

   //Accept an incoming connection attempt
   newSocket = tcpAccept(socket, clientIpAddr, clientPort);
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 fb78 	bl	8005668 <tcpAccept>
 8004f78:	6178      	str	r0, [r7, #20]

   //Return a handle to the newly created socket
   return newSocket;
 8004f7a:	697b      	ldr	r3, [r7, #20]
#else
   return NULL;
#endif
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <socketSend>:
 * @return Error code
 **/

error_t socketSend(Socket *socket, const void *data, size_t length,
   size_t *written, uint_t flags)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
   //Use default remote IP address for connectionless or raw sockets
   return socketSendTo(socket, &socket->remoteIpAddr, socket->remotePort,
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f103 011c 	add.w	r1, r3, #28
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	9302      	str	r3, [sp, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f806 	bl	8004fbc <socketSendTo>
 8004fb0:	4603      	mov	r3, r0
      data, length, written, flags);
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <socketSendTo>:
 * @return Error code
 **/

error_t socketSendTo(Socket *socket, const IpAddr *destIpAddr, uint16_t destPort,
   const void *data, size_t length, size_t *written, uint_t flags)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b096      	sub	sp, #88	; 0x58
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	80fb      	strh	r3, [r7, #6]
   error_t error;

   //No data has been transmitted yet
   if(written != NULL)
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <socketSendTo+0x1c>
      *written = 0;
 8004fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

   //Make sure the socket handle is valid
   if(socket == NULL)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <socketSendTo+0x26>
      return ERROR_INVALID_PARAMETER;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e068      	b.n	80050b4 <socketSendTo+0xf8>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8004fe2:	4836      	ldr	r0, [pc, #216]	; (80050bc <socketSendTo+0x100>)
 8004fe4:	f7fc fa26 	bl	8001434 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d10b      	bne.n	8005008 <socketSendTo+0x4c>
   {
      //For connection-oriented sockets, target address is ignored
      error = tcpSend(socket, data, length, written, flags);
 8004ff0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fc7e 	bl	80058fc <tcpSend>
 8005000:	4603      	mov	r3, r0
 8005002:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005006:	e050      	b.n	80050aa <socketSendTo+0xee>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2238      	movs	r2, #56	; 0x38
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f00d fd78 	bl	8012b06 <memset>

      //Copy data payload
      message.data = (void *) data;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	617b      	str	r3, [r7, #20]
      message.length = length;
 800501a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800501c:	61fb      	str	r3, [r7, #28]

      //Set destination IP address
      if(destIpAddr != NULL)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d006      	beq.n	8005032 <socketSendTo+0x76>
         message.destIpAddr = *destIpAddr;
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800502a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800502e:	e883 0003 	stmia.w	r3, {r0, r1}

      //Set destination port
      message.destPort = destPort;
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	87bb      	strh	r3, [r7, #60]	; 0x3c

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d10a      	bne.n	8005054 <socketSendTo+0x98>
      {
         //Send UDP datagram
         error = udpSendDatagram(socket, &message, flags);
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005044:	4619      	mov	r1, r3
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f003 ffac 	bl	8008fa4 <udpSendDatagram>
 800504c:	4603      	mov	r3, r0
 800504e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005052:	e020      	b.n	8005096 <socketSendTo+0xda>
      }
      else
#endif
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Raw socket?
      if(socket->type == SOCKET_TYPE_RAW_IP)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d10a      	bne.n	8005072 <socketSendTo+0xb6>
      {
         //Send a raw IP packet
         error = rawSocketSendIpPacket(socket, &message, flags);
 800505c:	f107 0314 	add.w	r3, r7, #20
 8005060:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005062:	4619      	mov	r1, r3
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f7ff fba7 	bl	80047b8 <rawSocketSendIpPacket>
 800506a:	4603      	mov	r3, r0
 800506c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005070:	e011      	b.n	8005096 <socketSendTo+0xda>
      }
      else if(socket->type == SOCKET_TYPE_RAW_ETH)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d10a      	bne.n	8005090 <socketSendTo+0xd4>
      {
         //Send a raw Ethernet packet
         error = rawSocketSendEthPacket(socket, &message, flags);
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005080:	4619      	mov	r1, r3
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fc4e 	bl	8004924 <rawSocketSendEthPacket>
 8005088:	4603      	mov	r3, r0
 800508a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800508e:	e002      	b.n	8005096 <socketSendTo+0xda>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 8005090:	23d0      	movs	r3, #208	; 0xd0
 8005092:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }

      //Check status code
      if(!error)
 8005096:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <socketSendTo+0xee>
      {
         //Total number of data bytes successfully transmitted
         if(written != NULL)
 800509e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <socketSendTo+0xee>
            *written = message.length;
 80050a4:	69fa      	ldr	r2, [r7, #28]
 80050a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a8:	601a      	str	r2, [r3, #0]
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80050aa:	4804      	ldr	r0, [pc, #16]	; (80050bc <socketSendTo+0x100>)
 80050ac:	f7fc f9d1 	bl	8001452 <osReleaseMutex>

   //Return status code
   return error;
 80050b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3750      	adds	r7, #80	; 0x50
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20009178 	.word	0x20009178

080050c0 <socketReceiveEx>:
 * @return Error code
 **/

error_t socketReceiveEx(Socket *socket, IpAddr *srcIpAddr, uint16_t *srcPort,
   IpAddr *destIpAddr, void *data, size_t size, size_t *received, uint_t flags)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b096      	sub	sp, #88	; 0x58
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
   error_t error;

   //No data has been received yet
   if(received != NULL)
 80050ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <socketReceiveEx+0x1a>
      *received = 0;
 80050d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

   //Make sure the socket handle is valid
   if(socket == NULL)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <socketReceiveEx+0x24>
      return ERROR_INVALID_PARAMETER;
 80050e0:	2302      	movs	r3, #2
 80050e2:	e090      	b.n	8005206 <socketReceiveEx+0x146>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80050e4:	484a      	ldr	r0, [pc, #296]	; (8005210 <socketReceiveEx+0x150>)
 80050e6:	f7fc f9a5 	bl	8001434 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d126      	bne.n	8005140 <socketReceiveEx+0x80>
   {
      //Receive data
      error = tcpReceive(socket, data, size, received, flags);
 80050f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fcb9 	bl	8005a74 <tcpReceive>
 8005102:	4603      	mov	r3, r0
 8005104:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      //Save the source IP address
      if(srcIpAddr != NULL)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <socketReceiveEx+0x5c>
         *srcIpAddr = socket->remoteIpAddr;
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	331c      	adds	r3, #28
 8005114:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005118:	e882 0003 	stmia.w	r2, {r0, r1}

      //Save the source port number
      if(srcPort != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <socketReceiveEx+0x6a>
         *srcPort = socket->remotePort;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	801a      	strh	r2, [r3, #0]

      //Save the destination IP address
      if(destIpAddr != NULL)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d065      	beq.n	80051fc <socketReceiveEx+0x13c>
         *destIpAddr = socket->localIpAddr;
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3310      	adds	r3, #16
 8005136:	e893 0003 	ldmia.w	r3, {r0, r1}
 800513a:	e882 0003 	stmia.w	r2, {r0, r1}
 800513e:	e05d      	b.n	80051fc <socketReceiveEx+0x13c>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 8005140:	f107 0314 	add.w	r3, r7, #20
 8005144:	2238      	movs	r2, #56	; 0x38
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f00d fcdc 	bl	8012b06 <memset>

      //Set data buffer
      message.data = (void *) data;
 800514e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005150:	617b      	str	r3, [r7, #20]
      message.size = size;
 8005152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005154:	61bb      	str	r3, [r7, #24]

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d10a      	bne.n	8005174 <socketReceiveEx+0xb4>
      {
         //Receive UDP datagram
         error = udpReceiveDatagram(socket, &message, flags);
 800515e:	f107 0314 	add.w	r3, r7, #20
 8005162:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005164:	4619      	mov	r1, r3
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f004 f84e 	bl	8009208 <udpReceiveDatagram>
 800516c:	4603      	mov	r3, r0
 800516e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005172:	e020      	b.n	80051b6 <socketReceiveEx+0xf6>
      }
      else
#endif
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Raw socket?
      if(socket->type == SOCKET_TYPE_RAW_IP)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d10a      	bne.n	8005192 <socketReceiveEx+0xd2>
      {
         //Receive a raw IP packet
         error = rawSocketReceiveIpPacket(socket, &message, flags);
 800517c:	f107 0314 	add.w	r3, r7, #20
 8005180:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005182:	4619      	mov	r1, r3
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff fc65 	bl	8004a54 <rawSocketReceiveIpPacket>
 800518a:	4603      	mov	r3, r0
 800518c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005190:	e011      	b.n	80051b6 <socketReceiveEx+0xf6>
      }
      else if(socket->type == SOCKET_TYPE_RAW_ETH)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d10a      	bne.n	80051b0 <socketReceiveEx+0xf0>
      {
         //Receive a raw Ethernet packet
         error = rawSocketReceiveEthPacket(socket, &message, flags);
 800519a:	f107 0314 	add.w	r3, r7, #20
 800519e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051a0:	4619      	mov	r1, r3
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fce2 	bl	8004b6c <rawSocketReceiveEthPacket>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80051ae:	e002      	b.n	80051b6 <socketReceiveEx+0xf6>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 80051b0:	23d0      	movs	r3, #208	; 0xd0
 80051b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }

      //Check status code
      if(!error)
 80051b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d11e      	bne.n	80051fc <socketReceiveEx+0x13c>
      {
         //Save the source IP address
         if(srcIpAddr != NULL)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <socketReceiveEx+0x114>
            *srcIpAddr = message.srcIpAddr;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051d0:	e882 0003 	stmia.w	r2, {r0, r1}

         //Save the source port number
         if(srcPort != NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <socketReceiveEx+0x120>
            *srcPort = message.srcPort;
 80051da:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	801a      	strh	r2, [r3, #0]

         //Save the destination IP address
         if(destIpAddr != NULL)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <socketReceiveEx+0x136>
            *destIpAddr = message.destIpAddr;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051f2:	e882 0003 	stmia.w	r2, {r0, r1}

         //Total number of data that have been received
         *received = message.length;
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051fa:	601a      	str	r2, [r3, #0]
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80051fc:	4804      	ldr	r0, [pc, #16]	; (8005210 <socketReceiveEx+0x150>)
 80051fe:	f7fc f928 	bl	8001452 <osReleaseMutex>

   //Return status code
   return error;
 8005202:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
}
 8005206:	4618      	mov	r0, r3
 8005208:	3750      	adds	r7, #80	; 0x50
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	20009178 	.word	0x20009178

08005214 <socketClose>:
 * @brief Close an existing socket
 * @param[in] socket Handle identifying the socket to close
 **/

void socketClose(Socket *socket)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
   //Make sure the socket handle is valid
   if(socket == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d02e      	beq.n	8005280 <socketClose+0x6c>
      return;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8005222:	4819      	ldr	r0, [pc, #100]	; (8005288 <socketClose+0x74>)
 8005224:	f7fc f906 	bl	8001434 <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d102      	bne.n	8005236 <socketClose+0x22>
   {
      //Abort the current TCP connection
      tcpAbort(socket);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fd15 	bl	8005c60 <tcpAbort>
   }
#endif
#if (UDP_SUPPORT == ENABLED || RAW_SOCKET_SUPPORT == ENABLED)
   //Connectionless socket or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d007      	beq.n	800524e <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_IP ||
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
   if(socket->type == SOCKET_TYPE_DGRAM ||
 8005242:	2b03      	cmp	r3, #3
 8005244:	d003      	beq.n	800524e <socketClose+0x3a>
      socket->type == SOCKET_TYPE_RAW_ETH)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
      socket->type == SOCKET_TYPE_RAW_IP ||
 800524a:	2b04      	cmp	r3, #4
 800524c:	d114      	bne.n	8005278 <socketClose+0x64>
   {
      //Point to the first item in the receive queue
      SocketQueueItem *queueItem = socket->receiveQueue;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8005254:	60fb      	str	r3, [r7, #12]

      //Purge the receive queue
      while(queueItem)
 8005256:	e009      	b.n	800526c <socketClose+0x58>
      {
         //Keep track of the next item in the queue
         SocketQueueItem *nextQueueItem = queueItem->next;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60bb      	str	r3, [r7, #8]
         //Free previously allocated memory
         netBufferFree(queueItem->buffer);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fd78 	bl	8002d58 <netBufferFree>
         //Point to the next item
         queueItem = nextQueueItem;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	60fb      	str	r3, [r7, #12]
      while(queueItem)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f2      	bne.n	8005258 <socketClose+0x44>
      }

      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	605a      	str	r2, [r3, #4]
   }
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8005278:	4803      	ldr	r0, [pc, #12]	; (8005288 <socketClose+0x74>)
 800527a:	f7fc f8ea 	bl	8001452 <osReleaseMutex>
 800527e:	e000      	b.n	8005282 <socketClose+0x6e>
      return;
 8005280:	bf00      	nop
}
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20009178 	.word	0x20009178

0800528c <socketAllocate>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketAllocate(uint_t type, uint_t protocol)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b09a      	sub	sp, #104	; 0x68
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
   uint16_t port;
   Socket *socket;
   OsEvent event;

   //Initialize socket handle
   socket = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	65bb      	str	r3, [r7, #88]	; 0x58

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(type == SOCKET_TYPE_STREAM)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d10a      	bne.n	80052b6 <socketAllocate+0x2a>
   {
      //Always use TCP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_TCP;
 80052a0:	2306      	movs	r3, #6
 80052a2:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = tcpGetDynamicPort();
 80052a4:	f000 f89a 	bl	80053dc <tcpGetDynamicPort>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      //Continue processing
      error = NO_ERROR;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052b4:	e01d      	b.n	80052f2 <socketAllocate+0x66>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(type == SOCKET_TYPE_DGRAM)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d10a      	bne.n	80052d2 <socketAllocate+0x46>
   {
      //Always use UDP as underlying transport protocol
      protocol = SOCKET_IP_PROTO_UDP;
 80052bc:	2311      	movs	r3, #17
 80052be:	603b      	str	r3, [r7, #0]
      //Get an ephemeral port number
      port = udpGetDynamicPort();
 80052c0:	f003 fcf0 	bl	8008ca4 <udpGetDynamicPort>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      //Continue processing
      error = NO_ERROR;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052d0:	e00f      	b.n	80052f2 <socketAllocate+0x66>
   }
   else
#endif
#if (RAW_SOCKET_SUPPORT == ENABLED)
   //Raw socket?
   if(type == SOCKET_TYPE_RAW_IP || type == SOCKET_TYPE_RAW_ETH)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d002      	beq.n	80052de <socketAllocate+0x52>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d106      	bne.n	80052ec <socketAllocate+0x60>
   {
      //Port numbers are not relevant for raw sockets
      port = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      //Continue processing
      error = NO_ERROR;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052ea:	e002      	b.n	80052f2 <socketAllocate+0x66>
   }
   else
#endif
   {
      //The socket type is not supported
      error = ERROR_INVALID_PARAMETER;
 80052ec:	2302      	movs	r3, #2
 80052ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
   }

   //Check status code
   if(!error)
 80052f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d15a      	bne.n	80053b0 <socketAllocate+0x124>
   {
      //Loop through socket descriptors
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	663b      	str	r3, [r7, #96]	; 0x60
 80052fe:	e016      	b.n	800532e <socketAllocate+0xa2>
      {
         //Unused socket found?
         if(socketTable[i].type == SOCKET_TYPE_UNUSED)
 8005300:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <socketAllocate+0x130>)
 8005302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005304:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	4413      	add	r3, r2
 800530e:	3304      	adds	r3, #4
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d108      	bne.n	8005328 <socketAllocate+0x9c>
         {
            //Save socket handle
            socket = &socketTable[i];
 8005316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005318:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800531c:	fb02 f303 	mul.w	r3, r2, r3
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <socketAllocate+0x130>)
 8005322:	4413      	add	r3, r2
 8005324:	65bb      	str	r3, [r7, #88]	; 0x58
            //We are done
            break;
 8005326:	e005      	b.n	8005334 <socketAllocate+0xa8>
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800532a:	3301      	adds	r3, #1
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
 800532e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005330:	2b09      	cmp	r3, #9
 8005332:	d9e5      	bls.n	8005300 <socketAllocate+0x74>
         }
      }

#if (TCP_SUPPORT == ENABLED)
      //No more sockets available?
      if(socket == NULL)
 8005334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <socketAllocate+0xb4>
      {
         //Kill the oldest connection in the TIME-WAIT state whenever the
         //socket table runs out of space
         socket = tcpKillOldestConnection();
 800533a:	f000 fce5 	bl	8005d08 <tcpKillOldestConnection>
 800533e:	65b8      	str	r0, [r7, #88]	; 0x58
      }
#endif

      //Check whether the current entry is free
      if(socket != NULL)
 8005340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005342:	2b00      	cmp	r3, #0
 8005344:	d034      	beq.n	80053b0 <socketAllocate+0x124>
      {
         //Save socket descriptor
         i = socket->descriptor;
 8005346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	663b      	str	r3, [r7, #96]	; 0x60

         //Save event object instance
         osMemcpy(&event, &socket->event, sizeof(OsEvent));
 800534c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800534e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005352:	f107 030c 	add.w	r3, r7, #12
 8005356:	224c      	movs	r2, #76	; 0x4c
 8005358:	4618      	mov	r0, r3
 800535a:	f00d fbac 	bl	8012ab6 <memcpy>
         //Clear associated structure
         osMemset(socket, 0, sizeof(Socket));
 800535e:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8005362:	2100      	movs	r1, #0
 8005364:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005366:	f00d fbce 	bl	8012b06 <memset>
         //Reuse event objects and avoid recreating them whenever possible
         osMemcpy(&socket->event, &event, sizeof(OsEvent));
 800536a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800536c:	3334      	adds	r3, #52	; 0x34
 800536e:	f107 010c 	add.w	r1, r7, #12
 8005372:	224c      	movs	r2, #76	; 0x4c
 8005374:	4618      	mov	r0, r3
 8005376:	f00d fb9e 	bl	8012ab6 <memcpy>

         //Save socket characteristics
         socket->descriptor = i;
 800537a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800537c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800537e:	601a      	str	r2, [r3, #0]
         socket->type = type;
 8005380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	605a      	str	r2, [r3, #4]
         socket->protocol = protocol;
 8005386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	609a      	str	r2, [r3, #8]
         socket->localPort = port;
 800538c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800538e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8005392:	831a      	strh	r2, [r3, #24]
         socket->timeout = INFINITE_DELAY;
 8005394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800539a:	629a      	str	r2, [r3, #40]	; 0x28
         socket->keepAliveMaxProbes = TCP_DEFAULT_KEEP_ALIVE_PROBES;
#endif

#if (TCP_SUPPORT == ENABLED)
         //Default TX and RX buffer size
         socket->txBufferSize = MIN(TCP_DEFAULT_TX_BUFFER_SIZE, TCP_MAX_TX_BUFFER_SIZE);
 800539c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800539e:	f640 322c 	movw	r2, #2860	; 0xb2c
 80053a2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
         socket->rxBufferSize = MIN(TCP_DEFAULT_RX_BUFFER_SIZE, TCP_MAX_RX_BUFFER_SIZE);
 80053a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a8:	f640 322c 	movw	r2, #2860	; 0xb2c
 80053ac:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
#endif
      }
   }

   //Return a handle to the freshly created socket
   return socket;
 80053b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3768      	adds	r7, #104	; 0x68
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20009990 	.word	0x20009990

080053c0 <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <tcpInit+0x18>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000336 	.word	0x20000336

080053dc <tcpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t tcpGetDynamicPort(void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = tcpDynamicPort;
 80053e2:	4b14      	ldr	r3, [pc, #80]	; (8005434 <tcpGetDynamicPort+0x58>)
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053ee:	d303      	bcc.n	80053f8 <tcpGetDynamicPort+0x1c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f6:	d307      	bcc.n	8005408 <tcpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 80053f8:	f7fe fafe 	bl	80039f8 <netGetRand>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005402:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8005406:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800540e:	4293      	cmp	r3, r2
 8005410:	d806      	bhi.n	8005420 <tcpGetDynamicPort+0x44>
   {
      //Increment port number
      tcpDynamicPort = port + 1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	b29b      	uxth	r3, r3
 8005416:	3301      	adds	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	4b06      	ldr	r3, [pc, #24]	; (8005434 <tcpGetDynamicPort+0x58>)
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e003      	b.n	8005428 <tcpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8005420:	4b04      	ldr	r3, [pc, #16]	; (8005434 <tcpGetDynamicPort+0x58>)
 8005422:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005426:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	b29b      	uxth	r3, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20000336 	.word	0x20000336

08005438 <tcpConnect>:
 * @param[in] remotePort Remote port number that will be used to establish the connection
 * @return Error code
 **/

error_t tcpConnect(Socket *socket, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b088      	sub	sp, #32
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
   error_t error;
   uint_t event;

   //Check current TCP state
   if(socket->state == TCP_STATE_CLOSED)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 80cb 	bne.w	80055e8 <tcpConnect+0x1b0>
   {
      //Save port number and IP address of the remote host
      socket->remoteIpAddr = *remoteIpAddr;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	331c      	adds	r3, #28
 8005458:	e892 0003 	ldmia.w	r2, {r0, r1}
 800545c:	e883 0003 	stmia.w	r3, {r0, r1}
      socket->remotePort = remotePort;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	849a      	strh	r2, [r3, #36]	; 0x24

      //Select the source address and the relevant network interface
      //to use when establishing the connection
      error = ipSelectSourceAddr(&socket->interface,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f103 000c 	add.w	r0, r3, #12
         &socket->remoteIpAddr, &socket->localIpAddr);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f103 011c 	add.w	r1, r3, #28
      error = ipSelectSourceAddr(&socket->interface,
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3310      	adds	r3, #16
 8005476:	461a      	mov	r2, r3
 8005478:	f7fc ff90 	bl	800239c <ipSelectSourceAddr>
 800547c:	4603      	mov	r3, r0
 800547e:	82fb      	strh	r3, [r7, #22]
      //Any error to report?
      if(error)
 8005480:	8afb      	ldrh	r3, [r7, #22]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <tcpConnect+0x52>
         return error;
 8005486:	8afb      	ldrh	r3, [r7, #22]
 8005488:	e0c1      	b.n	800560e <tcpConnect+0x1d6>

      //Make sure the source address is valid
      if(ipIsUnspecifiedAddr(&socket->localIpAddr))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3310      	adds	r3, #16
 800548e:	4618      	mov	r0, r3
 8005490:	f7fc ffa3 	bl	80023da <ipIsUnspecifiedAddr>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <tcpConnect+0x68>
         return ERROR_NOT_CONFIGURED;
 800549a:	f240 2306 	movw	r3, #518	; 0x206
 800549e:	e0b6      	b.n	800560e <tcpConnect+0x1d6>

      //The user owns the socket
      socket->ownedFlag = TRUE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      //Number of chunks that comprise the TX and the RX buffers
      socket->txBuffer.maxChunkCount = arraysize(socket->txBuffer.chunk);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	220f      	movs	r2, #15
 80054ac:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
      socket->rxBuffer.maxChunkCount = arraysize(socket->rxBuffer.chunk);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	220f      	movs	r2, #15
 80054b4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

      //Allocate transmit buffer
      error = netBufferSetLength((NetBuffer *) &socket->txBuffer,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80054c4:	4619      	mov	r1, r3
 80054c6:	4610      	mov	r0, r2
 80054c8:	f7fd fc7a 	bl	8002dc0 <netBufferSetLength>
 80054cc:	4603      	mov	r3, r0
 80054ce:	82fb      	strh	r3, [r7, #22]
         socket->txBufferSize);

      //Allocate receive buffer
      if(!error)
 80054d0:	8afb      	ldrh	r3, [r7, #22]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10b      	bne.n	80054ee <tcpConnect+0xb6>
      {
         error = netBufferSetLength((NetBuffer *) &socket->rxBuffer,
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fd fc6b 	bl	8002dc0 <netBufferSetLength>
 80054ea:	4603      	mov	r3, r0
 80054ec:	82fb      	strh	r3, [r7, #22]
            socket->rxBufferSize);
      }

      //Failed to allocate memory?
      if(error)
 80054ee:	8afb      	ldrh	r3, [r7, #22]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <tcpConnect+0xc6>
      {
         //Free any previously allocated memory
         tcpDeleteControlBlock(socket);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f002 fa48 	bl	800798a <tcpDeleteControlBlock>
         //Report an error to the caller
         return error;
 80054fa:	8afb      	ldrh	r3, [r7, #22]
 80054fc:	e087      	b.n	800560e <tcpConnect+0x1d6>
      }

      //The SMSS is the size of the largest segment that the sender can
      //transmit
      socket->smss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f44f 7206 	mov.w	r2, #536	; 0x218
 8005504:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

      //The RMSS is the size of the largest segment the receiver is willing
      //to accept
      socket->rmss = MIN(socket->rxBufferSize, TCP_MAX_MSS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800550e:	f240 5296 	movw	r2, #1430	; 0x596
 8005512:	4293      	cmp	r3, r2
 8005514:	bf28      	it	cs
 8005516:	4613      	movcs	r3, r2
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

      //Generate the initial sequence number
      socket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f103 0010 	add.w	r0, r3, #16
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8b19      	ldrh	r1, [r3, #24]
         socket->localPort, &socket->remoteIpAddr, socket->remotePort);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f103 021c 	add.w	r2, r3, #28
      socket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005534:	f001 fe64 	bl	8007200 <tcpGenerateInitialSeqNum>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

      //Initialize TCP control block
      socket->sndUna = socket->iss;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      socket->sndNxt = socket->iss + 1;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      socket->rcvUser = 0;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      socket->rcvWnd = socket->rxBufferSize;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

      //Default retransmission timeout
      socket->rto = TCP_INITIAL_RTO;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005576:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Default congestion state
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800558e:	4619      	mov	r1, r3
 8005590:	460b      	mov	r3, r1
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	440b      	add	r3, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	bf28      	it	cs
 800559a:	4613      	movcs	r3, r2
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      //Slow start threshold should be set arbitrarily high
      socket->ssthresh = UINT16_MAX;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055aa:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
      //Recover is set to the initial send sequence number
      socket->recover = socket->iss;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
#endif

      //Send a SYN segment
      error = tcpSendSegment(socket, TCP_FLAG_SYN, socket->iss, 0, 0, TRUE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80055c0:	2301      	movs	r3, #1
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	2300      	movs	r3, #0
 80055ca:	2102      	movs	r1, #2
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f001 fab3 	bl	8006b38 <tcpSendSegment>
 80055d2:	4603      	mov	r3, r0
 80055d4:	82fb      	strh	r3, [r7, #22]
      //Failed to send TCP segment?
      if(error)
 80055d6:	8afb      	ldrh	r3, [r7, #22]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <tcpConnect+0x1a8>
         return error;
 80055dc:	8afb      	ldrh	r3, [r7, #22]
 80055de:	e016      	b.n	800560e <tcpConnect+0x1d6>

      //Switch to the SYN-SENT state
      tcpChangeState(socket, TCP_STATE_SYN_SENT);
 80055e0:	2102      	movs	r1, #2
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f002 fe41 	bl	800826a <tcpChangeState>
      MIB2_INC_COUNTER32(tcpGroup.tcpActiveOpens, 1);
      TCP_MIB_INC_COUNTER32(tcpActiveOpens, 1);
   }

   //Wait for the connection to be established
   event = tcpWaitForEvents(socket, SOCKET_EVENT_CONNECTED |
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	461a      	mov	r2, r3
 80055ee:	2106      	movs	r1, #6
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f002 ffd1 	bl	8008598 <tcpWaitForEvents>
 80055f6:	6138      	str	r0, [r7, #16]
      SOCKET_EVENT_CLOSED, socket->timeout);

   //Connection successfully established?
   if(event == SOCKET_EVENT_CONNECTED)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d101      	bne.n	8005602 <tcpConnect+0x1ca>
      return NO_ERROR;
 80055fe:	2300      	movs	r3, #0
 8005600:	e005      	b.n	800560e <tcpConnect+0x1d6>
   //Failed to establish connection?
   else if(event == SOCKET_EVENT_CLOSED)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b04      	cmp	r3, #4
 8005606:	d101      	bne.n	800560c <tcpConnect+0x1d4>
      return ERROR_CONNECTION_FAILED;
 8005608:	23c9      	movs	r3, #201	; 0xc9
 800560a:	e000      	b.n	800560e <tcpConnect+0x1d6>
   //Timeout exception?
   else
      return ERROR_TIMEOUT;
 800560c:	23dc      	movs	r3, #220	; 0xdc
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <tcpListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t tcpListen(Socket *socket, uint_t backlog)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
   //Socket already connected?
   if(socket->state != TCP_STATE_CLOSED)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <tcpListen+0x18>
      return ERROR_ALREADY_CONNECTED;
 800562a:	23cf      	movs	r3, #207	; 0xcf
 800562c:	e017      	b.n	800565e <tcpListen+0x48>

   //Set the size of the SYN queue
   socket->synQueueSize = (backlog > 0) ? backlog : TCP_DEFAULT_SYN_QUEUE_SIZE;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <tcpListen+0x22>
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	e000      	b.n	800563a <tcpListen+0x24>
 8005638:	2304      	movs	r3, #4
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
   //Limit the number of pending connections
   socket->synQueueSize = MIN(socket->synQueueSize, TCP_MAX_SYN_QUEUE_SIZE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005646:	2b10      	cmp	r3, #16
 8005648:	bf28      	it	cs
 800564a:	2310      	movcs	r3, #16
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

   //Place the socket in the listening state
   tcpChangeState(socket, TCP_STATE_LISTEN);
 8005654:	2101      	movs	r1, #1
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f002 fe07 	bl	800826a <tcpChangeState>

   //Successful processing
   return NO_ERROR;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <tcpAccept>:
 * @param[out] clientPort Port number used by the client
 * @return Handle to the socket in which the actual connection is made
 **/

Socket *tcpAccept(Socket *socket, IpAddr *clientIpAddr, uint16_t *clientPort)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	; 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
   error_t error;
   Socket *newSocket;
   TcpSynQueueItem *queueItem;

   //Ensure the socket was previously placed in the listening state
   if(tcpGetState(socket) != TCP_STATE_LISTEN)
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fb31 	bl	8005cdc <tcpGetState>
 800567a:	4603      	mov	r3, r0
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <tcpAccept+0x1c>
      return NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	e135      	b.n	80058f0 <tcpAccept+0x288>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8005684:	489c      	ldr	r0, [pc, #624]	; (80058f8 <tcpAccept+0x290>)
 8005686:	f7fb fed5 	bl	8001434 <osAcquireMutex>

   //Wait for an connection attempt
   while(1)
   {
      //The SYN queue is empty?
      if(socket->synQueue == NULL)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005690:	2b00      	cmp	r3, #0
 8005692:	d117      	bne.n	80056c4 <tcpAccept+0x5c>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2280      	movs	r2, #128	; 0x80
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
         //Reset the event object
         osResetEvent(&socket->event);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3334      	adds	r3, #52	; 0x34
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fb fe70 	bl	8001386 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 80056a6:	4894      	ldr	r0, [pc, #592]	; (80058f8 <tcpAccept+0x290>)
 80056a8:	f7fb fed3 	bl	8001452 <osReleaseMutex>
         //Wait until a SYN message is received from a client
         osWaitForEvent(&socket->event, socket->timeout);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f7fb fe72 	bl	80013a2 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 80056be:	488e      	ldr	r0, [pc, #568]	; (80058f8 <tcpAccept+0x290>)
 80056c0:	f7fb feb8 	bl	8001434 <osAcquireMutex>
      }

      //Check whether the queue is still empty
      if(socket->synQueue == NULL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <tcpAccept+0x6c>
      {
         //Timeout error
         newSocket = NULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
         //Exit immediately
         break;
 80056d2:	e109      	b.n	80058e8 <tcpAccept+0x280>
      }

      //Point to the first item in the SYN queue
      queueItem = socket->synQueue;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80056da:	617b      	str	r3, [r7, #20]

      //The function optionally returns the IP address of the client
      if(clientIpAddr != NULL)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <tcpAccept+0x88>
      {
         *clientIpAddr = queueItem->srcAddr;
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	3308      	adds	r3, #8
 80056e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80056ec:	e882 0003 	stmia.w	r2, {r0, r1}
      }

      //The function optionally returns the port number used by the client
      if(clientPort != NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <tcpAccept+0x96>
      {
         *clientPort = queueItem->srcPort;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	8a1a      	ldrh	r2, [r3, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	801a      	strh	r2, [r3, #0]
      }

      //Create a new socket to handle the incoming connection request
      newSocket = socketAllocate(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 80056fe:	2106      	movs	r1, #6
 8005700:	2001      	movs	r0, #1
 8005702:	f7ff fdc3 	bl	800528c <socketAllocate>
 8005706:	61b8      	str	r0, [r7, #24]

      //Socket successfully created?
      if(newSocket != NULL)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80e3 	beq.w	80058d6 <tcpAccept+0x26e>
      {
         //The user owns the socket
         newSocket->ownedFlag = TRUE;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	2201      	movs	r2, #1
 8005714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

         //Inherit parameters from the listening socket
         newSocket->txBufferSize = socket->txBufferSize;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
         newSocket->rxBufferSize = socket->rxBufferSize;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
         newSocket->keepAliveIdle = socket->keepAliveIdle;
         newSocket->keepAliveInterval = socket->keepAliveInterval;
         newSocket->keepAliveMaxProbes = socket->keepAliveMaxProbes;
#endif
         //Number of chunks that comprise the TX and the RX buffers
         newSocket->txBuffer.maxChunkCount = arraysize(newSocket->txBuffer.chunk);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	220f      	movs	r2, #15
 8005734:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
         newSocket->rxBuffer.maxChunkCount = arraysize(newSocket->rxBuffer.chunk);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	220f      	movs	r2, #15
 800573c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

         //Allocate transmit buffer
         error = netBufferSetLength((NetBuffer *) &newSocket->txBuffer,
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	f103 02f4 	add.w	r2, r3, #244	; 0xf4
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800574c:	4619      	mov	r1, r3
 800574e:	4610      	mov	r0, r2
 8005750:	f7fd fb36 	bl	8002dc0 <netBufferSetLength>
 8005754:	4603      	mov	r3, r0
 8005756:	83fb      	strh	r3, [r7, #30]
            newSocket->txBufferSize);

         //Check status code
         if(!error)
 8005758:	8bfb      	ldrh	r3, [r7, #30]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <tcpAccept+0x10e>
         {
            //Allocate receive buffer
            error = netBufferSetLength((NetBuffer *) &newSocket->rxBuffer,
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800576a:	4619      	mov	r1, r3
 800576c:	4610      	mov	r0, r2
 800576e:	f7fd fb27 	bl	8002dc0 <netBufferSetLength>
 8005772:	4603      	mov	r3, r0
 8005774:	83fb      	strh	r3, [r7, #30]
               newSocket->rxBufferSize);
         }

         //Transmit and receive buffers successfully allocated?
         if(!error)
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	2b00      	cmp	r3, #0
 800577a:	f040 80a9 	bne.w	80058d0 <tcpAccept+0x268>
         {
            //Bind the newly created socket to the appropriate interface
            newSocket->interface = queueItem->interface;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	60da      	str	r2, [r3, #12]

            //Bind the socket to the specified address
            newSocket->localIpAddr = queueItem->destAddr;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	3310      	adds	r3, #16
 800578c:	3214      	adds	r2, #20
 800578e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005792:	e883 0003 	stmia.w	r3, {r0, r1}
            newSocket->localPort = socket->localPort;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8b1a      	ldrh	r2, [r3, #24]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	831a      	strh	r2, [r3, #24]

            //Save the port number and the IP address of the remote host
            newSocket->remoteIpAddr = queueItem->srcAddr;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	331c      	adds	r3, #28
 80057a4:	3208      	adds	r2, #8
 80057a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80057aa:	e883 0003 	stmia.w	r3, {r0, r1}
            newSocket->remotePort = queueItem->srcPort;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	8a1a      	ldrh	r2, [r3, #16]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	849a      	strh	r2, [r3, #36]	; 0x24

            //The SMSS is the size of the largest segment that the sender can
            //transmit
            newSocket->smss = queueItem->mss;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	8c1a      	ldrh	r2, [r3, #32]
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

            //The RMSS is the size of the largest segment the receiver is
            //willing to accept
            newSocket->rmss = MIN(newSocket->rxBufferSize, TCP_MAX_MSS);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80057c6:	f240 5296 	movw	r2, #1430	; 0x596
 80057ca:	4293      	cmp	r3, r2
 80057cc:	bf28      	it	cs
 80057ce:	4613      	movcs	r3, r2
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

            //Generate the initial sequence number
            newSocket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f103 0010 	add.w	r0, r3, #16
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8b19      	ldrh	r1, [r3, #24]
               socket->localPort, &socket->remoteIpAddr, socket->remotePort);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f103 021c 	add.w	r2, r3, #28
            newSocket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80057ec:	f001 fd08 	bl	8007200 <tcpGenerateInitialSeqNum>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

            //Initialize TCP control block
            newSocket->irs = queueItem->isn;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            newSocket->sndUna = newSocket->iss;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
            newSocket->sndNxt = newSocket->iss + 1;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            newSocket->rcvNxt = newSocket->irs + 1;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
            newSocket->rcvUser = 0;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
            newSocket->rcvWnd = newSocket->rxBufferSize;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8005838:	b29a      	uxth	r2, r3
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6

            //Default retransmission timeout
            newSocket->rto = TCP_INITIAL_RTO;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005846:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //Default congestion state
            newSocket->congestState = TCP_CONGEST_STATE_IDLE;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            //Initial congestion window
            newSocket->cwnd = MIN(TCP_INITIAL_WINDOW * newSocket->smss, newSocket->txBufferSize);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800585e:	4619      	mov	r1, r3
 8005860:	460b      	mov	r3, r1
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	440b      	add	r3, r1
 8005866:	4293      	cmp	r3, r2
 8005868:	bf28      	it	cs
 800586a:	4613      	movcs	r3, r2
 800586c:	b29a      	uxth	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
            //Slow start threshold should be set arbitrarily high
            newSocket->ssthresh = UINT16_MAX;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587a:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
            //Recover is set to the initial send sequence number
            newSocket->recover = newSocket->iss;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
#endif
            //The connection state should be changed to SYN-RECEIVED
            tcpChangeState(newSocket, TCP_STATE_SYN_RECEIVED);
 800588a:	2103      	movs	r1, #3
 800588c:	69b8      	ldr	r0, [r7, #24]
 800588e:	f002 fcec 	bl	800826a <tcpChangeState>
            //the SYN-RECEIVED state from the LISTEN state
            MIB2_INC_COUNTER32(tcpGroup.tcpPassiveOpens, 1);
            TCP_MIB_INC_COUNTER32(tcpPassiveOpens, 1);

            //Send a SYN ACK control segment
            error = tcpSendSegment(newSocket, TCP_FLAG_SYN | TCP_FLAG_ACK,
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800589e:	2101      	movs	r1, #1
 80058a0:	9101      	str	r1, [sp, #4]
 80058a2:	2100      	movs	r1, #0
 80058a4:	9100      	str	r1, [sp, #0]
 80058a6:	2112      	movs	r1, #18
 80058a8:	69b8      	ldr	r0, [r7, #24]
 80058aa:	f001 f945 	bl	8006b38 <tcpSendSegment>
 80058ae:	4603      	mov	r3, r0
 80058b0:	83fb      	strh	r3, [r7, #30]
               newSocket->iss, newSocket->rcvNxt, 0, TRUE);

            //TCP segment successfully sent?
            if(!error)
 80058b2:	8bfb      	ldrh	r3, [r7, #30]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <tcpAccept+0x268>
            {
               //Remove the item from the SYN queue
               socket->synQueue = queueItem->next;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
               //Deallocate memory buffer
               memPoolFree(queueItem);
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7fd fa0a 	bl	8002cdc <memPoolFree>
               //Update the state of events
               tcpUpdateEvents(socket);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f002 fcf5 	bl	80082b8 <tcpUpdateEvents>

               //We are done
               break;
 80058ce:	e00b      	b.n	80058e8 <tcpAccept+0x280>
            }
         }

         //Dispose the socket
         tcpAbort(newSocket);
 80058d0:	69b8      	ldr	r0, [r7, #24]
 80058d2:	f000 f9c5 	bl	8005c60 <tcpAbort>

      //Debug message
      TRACE_WARNING("Cannot accept TCP connection!\r\n");

      //Remove the item from the SYN queue
      socket->synQueue = queueItem->next;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
      //Deallocate memory buffer
      memPoolFree(queueItem);
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f7fd f9fb 	bl	8002cdc <memPoolFree>
      if(socket->synQueue == NULL)
 80058e6:	e6d0      	b.n	800568a <tcpAccept+0x22>

      //Wait for the next connection attempt
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 80058e8:	4803      	ldr	r0, [pc, #12]	; (80058f8 <tcpAccept+0x290>)
 80058ea:	f7fb fdb2 	bl	8001452 <osReleaseMutex>

   //Return a handle to the newly created socket
   return newSocket;
 80058ee:	69bb      	ldr	r3, [r7, #24]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20009178 	.word	0x20009178

080058fc <tcpSend>:
 * @return Error code
 **/

error_t tcpSend(Socket *socket, const uint8_t *data,
   size_t length, size_t *written, uint_t flags)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint_t totalLength;
   uint_t event;

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <tcpSend+0x1c>
      return ERROR_NOT_CONNECTED;
 8005914:	23cd      	movs	r3, #205	; 0xcd
 8005916:	e0a9      	b.n	8005a6c <tcpSend+0x170>

   //Actual number of bytes written
   totalLength = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]

   //Send as much data as possible
   do
   {
      //Wait until there is more room in the send buffer
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_READY, socket->timeout);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005920:	461a      	mov	r2, r3
 8005922:	2108      	movs	r1, #8
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f002 fe37 	bl	8008598 <tcpWaitForEvents>
 800592a:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_READY)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b08      	cmp	r3, #8
 8005930:	d001      	beq.n	8005936 <tcpSend+0x3a>
         return ERROR_TIMEOUT;
 8005932:	23dc      	movs	r3, #220	; 0xdc
 8005934:	e09a      	b.n	8005a6c <tcpSend+0x170>

      //Check current TCP state
      switch(socket->state)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800593c:	2b05      	cmp	r3, #5
 800593e:	dc02      	bgt.n	8005946 <tcpSend+0x4a>
 8005940:	2b04      	cmp	r3, #4
 8005942:	da0e      	bge.n	8005962 <tcpSend+0x66>
 8005944:	e004      	b.n	8005950 <tcpSend+0x54>
 8005946:	3b06      	subs	r3, #6
 8005948:	2b04      	cmp	r3, #4
 800594a:	d801      	bhi.n	8005950 <tcpSend+0x54>
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The connection is being closed
         return ERROR_CONNECTION_CLOSING;
 800594c:	23cb      	movs	r3, #203	; 0xcb
 800594e:	e08d      	b.n	8005a6c <tcpSend+0x170>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <tcpSend+0x62>
 800595a:	23cc      	movs	r3, #204	; 0xcc
 800595c:	e086      	b.n	8005a6c <tcpSend+0x170>
 800595e:	23cd      	movs	r3, #205	; 0xcd
 8005960:	e084      	b.n	8005a6c <tcpSend+0x170>
         break;
 8005962:	bf00      	nop
      }

      //Determine the actual number of bytes in the send buffer
      n = socket->sndUser + socket->sndNxt - socket->sndUna;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800596a:	461a      	mov	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005972:	441a      	add	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	617b      	str	r3, [r7, #20]
      //Exit immediately if the transmission buffer is full (sanity check)
      if(n >= socket->txBufferSize)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	429a      	cmp	r2, r3
 8005988:	d301      	bcc.n	800598e <tcpSend+0x92>
         return ERROR_FAILURE;
 800598a:	2301      	movs	r3, #1
 800598c:	e06e      	b.n	8005a6c <tcpSend+0x170>

      //Number of bytes available for writing
      n = socket->txBufferSize - n;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]
      //Calculate the number of bytes to copy at a time
      n = MIN(n, length - totalLength);
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bf28      	it	cs
 80059a6:	4613      	movcs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

      //Any data to copy?
      if(n > 0)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d035      	beq.n	8005a1c <tcpSend+0x120>
      {
         //Copy user data to send buffer
         tcpWriteTxBuffer(socket, socket->sndNxt + socket->sndUser, data, n);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	f8b2 20b0 	ldrh.w	r2, [r2, #176]	; 0xb0
 80059bc:	1899      	adds	r1, r3, r2
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f002 fe1a 	bl	80085fc <tcpWriteTxBuffer>

         //Update the number of data buffered but not yet sent
         socket->sndUser += n;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	4413      	add	r3, r2
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
         //Advance data pointer
         data += n;
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
         //Update byte counter
         totalLength += n;
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	61fb      	str	r3, [r7, #28]

         //Total number of data that have been written
         if(written != NULL)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <tcpSend+0xfc>
            *written = totalLength;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	601a      	str	r2, [r3, #0]

         //Update TX events
         tcpUpdateEvents(socket);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f002 fc5d 	bl	80082b8 <tcpUpdateEvents>

         //To avoid a deadlock, it is necessary to have a timeout to force
         //transmission of data, overriding the SWS avoidance algorithm. In
         //practice, this timeout should seldom occur (refer to RFC 1122,
         //section 4.2.3.4)
         if(socket->sndUser == n)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005a04:	461a      	mov	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d107      	bne.n	8005a1c <tcpSend+0x120>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8005a12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd ff08 	bl	800382c <netStartTimer>
         }
      }

      //The Nagle algorithm should be implemented to coalesce short segments
      //(refer to RFC 1122 4.2.3.4)
      tcpNagleAlgo(socket, flags);
 8005a1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f002 fb08 	bl	8008034 <tcpNagleAlgo>

      //Send as much data as possible
   } while(totalLength < length);
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	f4ff af77 	bcc.w	800591c <tcpSend+0x20>

   //The SOCKET_FLAG_WAIT_ACK flag causes the function to wait for
   //acknowledgment from the remote side
   if((flags & SOCKET_FLAG_WAIT_ACK) != 0)
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d018      	beq.n	8005a6a <tcpSend+0x16e>
   {
      //Wait for the data to be acknowledged
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_ACKED, socket->timeout);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2120      	movs	r1, #32
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f002 fda9 	bl	8008598 <tcpWaitForEvents>
 8005a46:	61b8      	str	r0, [r7, #24]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_ACKED)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d001      	beq.n	8005a52 <tcpSend+0x156>
         return ERROR_TIMEOUT;
 8005a4e:	23dc      	movs	r3, #220	; 0xdc
 8005a50:	e00c      	b.n	8005a6c <tcpSend+0x170>

      //The connection closed before an acknowledgment was received?
      if(socket->state != TCP_STATE_ESTABLISHED && socket->state != TCP_STATE_CLOSE_WAIT)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d006      	beq.n	8005a6a <tcpSend+0x16e>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d001      	beq.n	8005a6a <tcpSend+0x16e>
         return ERROR_NOT_CONNECTED;
 8005a66:	23cd      	movs	r3, #205	; 0xcd
 8005a68:	e000      	b.n	8005a6c <tcpSend+0x170>
   }

   //Successful write operation
   return NO_ERROR;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <tcpReceive>:
 * @return Error code
 **/

error_t tcpReceive(Socket *socket, uint8_t *data,
   size_t size, size_t *received, uint_t flags)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
   uint_t event;
   uint32_t seqNum;
   systime_t timeout;

   //Retrieve the break character code
   char_t c = LSB(flags);
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	76fb      	strb	r3, [r7, #27]
   //No data has been read yet
   *received = 0;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	f040 80d7 	bne.w	8005c46 <tcpReceive+0x1d2>
      return ERROR_NOT_CONNECTED;
 8005a98:	23cd      	movs	r3, #205	; 0xcd
 8005a9a:	e0dd      	b.n	8005c58 <tcpReceive+0x1e4>

   //Read as much data as possible
   while(*received < size)
   {
      //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
      timeout = (flags & SOCKET_FLAG_DONT_WAIT) ? 0 : socket->timeout;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <tcpReceive+0x38>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	e000      	b.n	8005aae <tcpReceive+0x3a>
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
      //Wait for data to be available for reading
      event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_READY, timeout);
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	2180      	movs	r1, #128	; 0x80
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f002 fd6f 	bl	8008598 <tcpWaitForEvents>
 8005aba:	6138      	str	r0, [r7, #16]

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_RX_READY)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d001      	beq.n	8005ac6 <tcpReceive+0x52>
         return ERROR_TIMEOUT;
 8005ac2:	23dc      	movs	r3, #220	; 0xdc
 8005ac4:	e0c8      	b.n	8005c58 <tcpReceive+0x1e4>

      //Check current TCP state
      switch(socket->state)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005acc:	3b04      	subs	r3, #4
 8005ace:	2b06      	cmp	r3, #6
 8005ad0:	d831      	bhi.n	8005b36 <tcpReceive+0xc2>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <tcpReceive+0x64>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005af5 	.word	0x08005af5
 8005adc:	08005b07 	.word	0x08005b07
 8005ae0:	08005b07 	.word	0x08005b07
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005af5 	.word	0x08005af5
 8005aec:	08005b07 	.word	0x08005b07
 8005af0:	08005b07 	.word	0x08005b07
      //ESTABLISHED, FIN-WAIT-1 or FIN-WAIT-2 state?
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Sequence number of the first byte to read
         seqNum = socket->rcvNxt - socket->rcvUser;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8005b04:	e03d      	b.n	8005b82 <tcpReceive+0x10e>
      case TCP_STATE_CLOSE_WAIT:
      case TCP_STATE_LAST_ACK:
      case TCP_STATE_CLOSING:
      case TCP_STATE_TIME_WAIT:
         //The user must be satisfied with data already on hand
         if(socket->rcvUser == 0)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d108      	bne.n	8005b22 <tcpReceive+0xae>
         {
            if(*received > 0)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <tcpReceive+0xa8>
               return NO_ERROR;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e09d      	b.n	8005c58 <tcpReceive+0x1e4>
            else
               return ERROR_END_OF_STREAM;
 8005b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b20:	e09a      	b.n	8005c58 <tcpReceive+0x1e4>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	3b01      	subs	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8005b34:	e025      	b.n	8005b82 <tcpReceive+0x10e>

      //CLOSED state?
      default:
         //The connection was reset by remote side?
         if(socket->resetFlag)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <tcpReceive+0xd0>
            return ERROR_CONNECTION_RESET;
 8005b40:	23cc      	movs	r3, #204	; 0xcc
 8005b42:	e089      	b.n	8005c58 <tcpReceive+0x1e4>
         //The connection has not yet been established?
         if(!socket->closedFlag)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <tcpReceive+0xde>
            return ERROR_NOT_CONNECTED;
 8005b4e:	23cd      	movs	r3, #205	; 0xcd
 8005b50:	e082      	b.n	8005c58 <tcpReceive+0x1e4>

         //The user must be satisfied with data already on hand
         if(socket->rcvUser == 0)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <tcpReceive+0xfa>
         {
            if(*received > 0)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <tcpReceive+0xf4>
               return NO_ERROR;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e077      	b.n	8005c58 <tcpReceive+0x1e4>
            else
               return ERROR_END_OF_STREAM;
 8005b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b6c:	e074      	b.n	8005c58 <tcpReceive+0x1e4>
         }

         //Sequence number of the first byte to read
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
         //Data is available in the receive buffer
         break;
 8005b80:	bf00      	nop
      }

      //Sanity check
      if(socket->rcvUser == 0)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <tcpReceive+0x11c>
         return ERROR_FAILURE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e063      	b.n	8005c58 <tcpReceive+0x1e4>

      //Calculate the number of bytes to read at a time
      n = MIN(socket->rcvUser, size - *received);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	f8b2 20c4 	ldrh.w	r2, [r2, #196]	; 0xc4
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bf28      	it	cs
 8005ba2:	4613      	movcs	r3, r2
 8005ba4:	623b      	str	r3, [r7, #32]
      //Copy data from circular buffer
      tcpReadRxBuffer(socket, seqNum, data, n);
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	69f9      	ldr	r1, [r7, #28]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f002 fe12 	bl	80087d6 <tcpReadRxBuffer>

      //Read data until a break character is encountered?
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d017      	beq.n	8005bec <tcpReceive+0x178>
      {
         //Search for the specified break character
         for(i = 0; i < n && data[i] != c; i++);
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	e002      	b.n	8005bc8 <tcpReceive+0x154>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d206      	bcs.n	8005bde <tcpReceive+0x16a>
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	4413      	add	r3, r2
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	7efa      	ldrb	r2, [r7, #27]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1f1      	bne.n	8005bc2 <tcpReceive+0x14e>
         //Adjust the number of data to read
         n = MIN(n, i + 1);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	3301      	adds	r3, #1
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	4293      	cmp	r3, r2
 8005be6:	bf28      	it	cs
 8005be8:	4613      	movcs	r3, r2
 8005bea:	623b      	str	r3, [r7, #32]
      }

      //Total number of data that have been read
      *received += n;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	441a      	add	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	601a      	str	r2, [r3, #0]
      //Remaining data still available in the receive buffer
      socket->rcvUser -= n;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4

      //Update the receive window
      tcpUpdateReceiveWindow(socket);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f002 f8a2 	bl	8007d56 <tcpUpdateReceiveWindow>
      //Update RX event state
      tcpUpdateEvents(socket);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f002 fb50 	bl	80082b8 <tcpUpdateEvents>

      //The SOCKET_FLAG_BREAK_CHAR flag causes the function to stop reading
      //data as soon as the specified break character is encountered
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d008      	beq.n	8005c34 <tcpReceive+0x1c0>
      {
         //Check whether a break character has been found
         if(data[n - 1] == c)
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4413      	add	r3, r2
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	7efa      	ldrb	r2, [r7, #27]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d105      	bne.n	8005c3e <tcpReceive+0x1ca>
            break;
 8005c32:	e010      	b.n	8005c56 <tcpReceive+0x1e2>
      }
      //The SOCKET_FLAG_WAIT_ALL flag causes the function to return
      //only when the requested number of bytes have been read
      else if((flags & SOCKET_FLAG_WAIT_ALL) == 0)
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <tcpReceive+0x1e0>
      {
         break;
      }

      //Advance data pointer
      data += n;
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	4413      	add	r3, r2
 8005c44:	60bb      	str	r3, [r7, #8]
   while(*received < size)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	f63f af25 	bhi.w	8005a9c <tcpReceive+0x28>
 8005c52:	e000      	b.n	8005c56 <tcpReceive+0x1e2>
         break;
 8005c54:	bf00      	nop
   }

   //Successful read operation
   return NO_ERROR;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3728      	adds	r7, #40	; 0x28
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <tcpAbort>:
 * @param[in] socket Handle identifying the socket to close
 * @return Error code
 **/

error_t tcpAbort(Socket *socket)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
   error_t error;

   //Check current state
   switch(socket->state)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005c6e:	2b0a      	cmp	r3, #10
 8005c70:	d01e      	beq.n	8005cb0 <tcpAbort+0x50>
 8005c72:	2b0a      	cmp	r3, #10
 8005c74:	dc22      	bgt.n	8005cbc <tcpAbort+0x5c>
 8005c76:	2b05      	cmp	r3, #5
 8005c78:	dc02      	bgt.n	8005c80 <tcpAbort+0x20>
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	da03      	bge.n	8005c86 <tcpAbort+0x26>
 8005c7e:	e01d      	b.n	8005cbc <tcpAbort+0x5c>
 8005c80:	3b07      	subs	r3, #7
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d81a      	bhi.n	8005cbc <tcpAbort+0x5c>
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
   case TCP_STATE_FIN_WAIT_2:
   case TCP_STATE_CLOSE_WAIT:
      //Send a reset segment
      error = tcpSendResetSegment(socket, socket->sndNxt);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 f8de 	bl	8006e50 <tcpSendResetSegment>
 8005c94:	4603      	mov	r3, r0
 8005c96:	81fb      	strh	r3, [r7, #14]
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8005c98:	2100      	movs	r1, #0
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f002 fae5 	bl	800826a <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f001 fe72 	bl	800798a <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	605a      	str	r2, [r3, #4]
      //Return status code
      return error;
 8005cac:	89fb      	ldrh	r3, [r7, #14]
 8005cae:	e010      	b.n	8005cd2 <tcpAbort+0x72>

   //TIME-WAIT state?
   case TCP_STATE_TIME_WAIT:
#if (TCP_2MSL_TIMER > 0)
      //The user doe not own the socket anymore...
      socket->ownedFlag = FALSE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      //TCB will be deleted and socket will be closed
      //when the 2MSL timer will elapse
      return NO_ERROR;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e00a      	b.n	8005cd2 <tcpAbort+0x72>
#endif

   //Any other state?
   default:
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f002 fad3 	bl	800826a <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(socket);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fe60 	bl	800798a <tcpDeleteControlBlock>
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
      //No error to report
      return NO_ERROR;
 8005cd0:	2300      	movs	r3, #0
   }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <tcpGetState>:
 * @param[in] socket Handle identifying the socket
 * @return TCP FSM state
 **/

TcpState tcpGetState(Socket *socket)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
   TcpState state;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8005ce4:	4807      	ldr	r0, [pc, #28]	; (8005d04 <tcpGetState+0x28>)
 8005ce6:	f7fb fba5 	bl	8001434 <osAcquireMutex>

   //Get TCP FSM current state
   state = socket->state;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005cf0:	73fb      	strb	r3, [r7, #15]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8005cf2:	4804      	ldr	r0, [pc, #16]	; (8005d04 <tcpGetState+0x28>)
 8005cf4:	f7fb fbad 	bl	8001452 <osReleaseMutex>

   //Return current state
   return state;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20009178 	.word	0x20009178

08005d08 <tcpKillOldestConnection>:
 * @return Handle identifying the oldest TCP connection in the TIME-WAIT state.
 *   NULL is returned if no socket is currently in the TIME-WAIT state
 **/

Socket *tcpKillOldestConnection(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
   systime_t time;
   Socket *socket;
   Socket *oldestSocket;

   //Get current time
   time = osGetSystemTime();
 8005d0e:	f7fb fbaf 	bl	8001470 <osGetSystemTime>
 8005d12:	6078      	str	r0, [r7, #4]

   //Keep track of the oldest socket in the TIME-WAIT state
   oldestSocket = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	e026      	b.n	8005d6c <tcpKillOldestConnection+0x64>
   {
      //Point to the current socket descriptor
      socket = &socketTable[i];
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8005d24:	fb02 f303 	mul.w	r3, r2, r3
 8005d28:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <tcpKillOldestConnection+0x90>)
 8005d2a:	4413      	add	r3, r2
 8005d2c:	603b      	str	r3, [r7, #0]

      //TCP connection found?
      if(socket->type == SOCKET_TYPE_STREAM)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d117      	bne.n	8005d66 <tcpKillOldestConnection+0x5e>
      {
         //Check current state
         if(socket->state == TCP_STATE_TIME_WAIT)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005d3c:	2b0a      	cmp	r3, #10
 8005d3e:	d112      	bne.n	8005d66 <tcpKillOldestConnection+0x5e>
         {
            //Keep track of the oldest socket in the TIME-WAIT state
            if(oldestSocket == NULL)
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <tcpKillOldestConnection+0x42>
            {
               //Save socket handle
               oldestSocket = socket;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	60bb      	str	r3, [r7, #8]
            }
            if((time - socket->timeWaitTimer.startTime) >
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	1ad2      	subs	r2, r2, r3
               (time - oldestSocket->timeWaitTimer.startTime))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8005d5a:	6879      	ldr	r1, [r7, #4]
 8005d5c:	1acb      	subs	r3, r1, r3
            if((time - socket->timeWaitTimer.startTime) >
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d901      	bls.n	8005d66 <tcpKillOldestConnection+0x5e>
            {
               //Save socket handle
               oldestSocket = socket;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d9d5      	bls.n	8005d1e <tcpKillOldestConnection+0x16>
         }
      }
   }

   //Any connection in the TIME-WAIT state?
   if(oldestSocket != NULL)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <tcpKillOldestConnection+0x84>
   {
      //Enter CLOSED state
      tcpChangeState(oldestSocket, TCP_STATE_CLOSED);
 8005d78:	2100      	movs	r1, #0
 8005d7a:	68b8      	ldr	r0, [r7, #8]
 8005d7c:	f002 fa75 	bl	800826a <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(oldestSocket);
 8005d80:	68b8      	ldr	r0, [r7, #8]
 8005d82:	f001 fe02 	bl	800798a <tcpDeleteControlBlock>
      //Mark the socket as closed
      oldestSocket->type = SOCKET_TYPE_UNUSED;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	605a      	str	r2, [r3, #4]
   }

   //The oldest connection in the TIME-WAIT state can be reused
   //when the socket table runs out of space
   return oldestSocket;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	20009990 	.word	0x20009990

08005d9c <tcpProcessSegment>:
 *   the packet
 **/

void tcpProcessSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b08d      	sub	sp, #52	; 0x34
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that is
   //addressed to a broadcast or multicast address (refer to RFC 1122, section
   //4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	f040 81ab 	bne.w	800610a <tcpProcessSegment+0x36e>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	4619      	mov	r1, r3
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f008 f942 	bl	800e044 <ipv4IsBroadcastAddr>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 81a3 	bne.w	800610e <tcpProcessSegment+0x372>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd0:	2be0      	cmp	r3, #224	; 0xe0
 8005dd2:	f000 819e 	beq.w	8006112 <tcpProcessSegment+0x376>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fc ffd0 	bl	8002d7c <netBufferGetLength>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fd f890 	bl	8002f0c <netBufferAt>
 8005dec:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 8190 	beq.w	8006116 <tcpProcessSegment+0x37a>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	2b13      	cmp	r3, #19
 8005dfa:	f240 818e 	bls.w	800611a <tcpProcessSegment+0x37e>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	7b1b      	ldrb	r3, [r3, #12]
 8005e02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	f240 8188 	bls.w	800611e <tcpProcessSegment+0x382>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	7b1b      	ldrb	r3, [r3, #12]
 8005e12:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	f0c0 817e 	bcc.w	800611e <tcpProcessSegment+0x382>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1d18      	adds	r0, r3, #4
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6819      	ldr	r1, [r3, #0]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	f7fc fc12 	bl	800265a <ipCalcUpperLayerChecksumEx>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f040 8172 	bne.w	8006122 <tcpProcessSegment+0x386>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	e06b      	b.n	8005f20 <tcpProcessSegment+0x184>
   {
      //Point to the current socket
      socket = socketTable + i;
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	4aa4      	ldr	r2, [pc, #656]	; (80060e4 <tcpProcessSegment+0x348>)
 8005e54:	4413      	add	r3, r2
 8005e56:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d14d      	bne.n	8005efc <tcpProcessSegment+0x160>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8005e60:	6a3b      	ldr	r3, [r7, #32]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <tcpProcessSegment+0xd6>
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d146      	bne.n	8005f00 <tcpProcessSegment+0x164>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(segment->destPort))
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	8b1b      	ldrh	r3, [r3, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d044      	beq.n	8005f04 <tcpProcessSegment+0x168>
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	8b1c      	ldrh	r4, [r3, #24]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	885b      	ldrh	r3, [r3, #2]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fb f958 	bl	800113a <swapInt16>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d139      	bne.n	8005f04 <tcpProcessSegment+0x168>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	d137      	bne.n	8005f08 <tcpProcessSegment+0x16c>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <tcpProcessSegment+0x118>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d131      	bne.n	8005f0c <tcpProcessSegment+0x170>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	695a      	ldr	r2, [r3, #20]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d12d      	bne.n	8005f10 <tcpProcessSegment+0x174>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <tcpProcessSegment+0x134>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d127      	bne.n	8005f14 <tcpProcessSegment+0x178>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	6a1a      	ldr	r2, [r3, #32]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d123      	bne.n	8005f18 <tcpProcessSegment+0x17c>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d104      	bne.n	8005ee4 <tcpProcessSegment+0x148>
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <tcpProcessSegment+0x148>
         passiveSocket = socket;
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fb f923 	bl	800113a <swapInt16>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d016      	beq.n	8005f28 <tcpProcessSegment+0x18c>
         continue;
 8005efa:	e00e      	b.n	8005f1a <tcpProcessSegment+0x17e>
         continue;
 8005efc:	bf00      	nop
 8005efe:	e00c      	b.n	8005f1a <tcpProcessSegment+0x17e>
         continue;
 8005f00:	bf00      	nop
 8005f02:	e00a      	b.n	8005f1a <tcpProcessSegment+0x17e>
         continue;
 8005f04:	bf00      	nop
 8005f06:	e008      	b.n	8005f1a <tcpProcessSegment+0x17e>
         continue;
 8005f08:	bf00      	nop
 8005f0a:	e006      	b.n	8005f1a <tcpProcessSegment+0x17e>
               continue;
 8005f0c:	bf00      	nop
 8005f0e:	e004      	b.n	8005f1a <tcpProcessSegment+0x17e>
               continue;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <tcpProcessSegment+0x17e>
               continue;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <tcpProcessSegment+0x17e>
               continue;
 8005f18:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f22:	2b09      	cmp	r3, #9
 8005f24:	d990      	bls.n	8005e48 <tcpProcessSegment+0xac>
 8005f26:	e000      	b.n	8005f2a <tcpProcessSegment+0x18e>

      //A matching socket has been found
      break;
 8005f28:	bf00      	nop
   }

   //If no matching socket has been found then try to use the first matching
   //socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	2b09      	cmp	r3, #9
 8005f2e:	d901      	bls.n	8005f34 <tcpProcessSegment+0x198>
      socket = passiveSocket;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	7b1b      	ldrb	r3, [r3, #12]
 8005f38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	461a      	mov	r2, r3
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	7b1b      	ldrb	r3, [r3, #12]
 8005f4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	461a      	mov	r2, r3
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <tcpProcessSegment+0x1d4>
   {
      tcpDumpHeader(segment, length, 0, 0);
 8005f62:	2300      	movs	r3, #0
 8005f64:	2200      	movs	r2, #0
 8005f66:	69b9      	ldr	r1, [r7, #24]
 8005f68:	6978      	ldr	r0, [r7, #20]
 8005f6a:	f002 fc7f 	bl	800886c <tcpDumpHeader>
 8005f6e:	e009      	b.n	8005f84 <tcpProcessSegment+0x1e8>
   }
   else
   {
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f7c:	69b9      	ldr	r1, [r7, #24]
 8005f7e:	6978      	ldr	r0, [r7, #20]
 8005f80:	f002 fc74 	bl	800886c <tcpDumpHeader>
   }

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	881b      	ldrh	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fb f8d5 	bl	800113a <swapInt16>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	885b      	ldrh	r3, [r3, #2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fb f8cb 	bl	800113a <swapInt16>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fb f8d0 	bl	8001156 <swapInt32>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fb f8c8 	bl	8001156 <swapInt32>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	89db      	ldrh	r3, [r3, #14]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fb f8b1 	bl	800113a <swapInt16>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	8a5b      	ldrh	r3, [r3, #18]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fb f8a7 	bl	800113a <swapInt16>
 8005fec:	4603      	mov	r3, r0
 8005fee:	461a      	mov	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	825a      	strh	r2, [r3, #18]

   //Specified port unreachable?
   if(socket == NULL)
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d110      	bne.n	800601c <tcpProcessSegment+0x280>
   {
      //An incoming segment not containing a RST causes a reset to be sent in
      //response
      if((segment->flags & TCP_FLAG_RST) == 0)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	7b5b      	ldrb	r3, [r3, #13]
 8005ffe:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 808c 	bne.w	8006126 <tcpProcessSegment+0x38a>
      {
         tcpRejectSegment(interface, pseudoHeader, segment, length);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 ff4d 	bl	8006eb4 <tcpRejectSegment>
      }

      //Return immediately
      return;
 800601a:	e084      	b.n	8006126 <tcpProcessSegment+0x38a>
   }

   //Check current state
   switch(socket->state)
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006022:	2b0a      	cmp	r3, #10
 8006024:	d86c      	bhi.n	8006100 <tcpProcessSegment+0x364>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <tcpProcessSegment+0x290>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	08006059 	.word	0x08006059
 8006030:	08006067 	.word	0x08006067
 8006034:	08006079 	.word	0x08006079
 8006038:	08006085 	.word	0x08006085
 800603c:	08006097 	.word	0x08006097
 8006040:	080060a9 	.word	0x080060a9
 8006044:	080060b5 	.word	0x080060b5
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060d3 	.word	0x080060d3
 8006050:	080060e9 	.word	0x080060e9
 8006054:	080060f5 	.word	0x080060f5
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before the
      //process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	68b9      	ldr	r1, [r7, #8]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f866 	bl	8006130 <tcpStateClosed>
      break;
 8006064:	e060      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6a38      	ldr	r0, [r7, #32]
 8006072:	f000 f877 	bl	8006164 <tcpStateListen>
      break;
 8006076:	e057      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	6979      	ldr	r1, [r7, #20]
 800607c:	6a38      	ldr	r0, [r7, #32]
 800607e:	f000 f943 	bl	8006308 <tcpStateSynSent>
      break;
 8006082:	e051      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own
      //SYN. It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6979      	ldr	r1, [r7, #20]
 800608e:	6a38      	ldr	r0, [r7, #32]
 8006090:	f000 fa32 	bl	80064f8 <tcpStateSynReceived>
      break;
 8006094:	e048      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6979      	ldr	r1, [r7, #20]
 80060a0:	6a38      	ldr	r0, [r7, #32]
 80060a2:	f000 fa90 	bl	80065c6 <tcpStateEstablished>
      break;
 80060a6:	e03f      	b.n	8006128 <tcpProcessSegment+0x38c>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	6a38      	ldr	r0, [r7, #32]
 80060ae:	f000 fb04 	bl	80066ba <tcpStateCloseWait>
      break;
 80060b2:	e039      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	6979      	ldr	r1, [r7, #20]
 80060b8:	6a38      	ldr	r0, [r7, #32]
 80060ba:	f000 fb41 	bl	8006740 <tcpStateLastAck>
      break;
 80060be:	e033      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6979      	ldr	r1, [r7, #20]
 80060ca:	6a38      	ldr	r0, [r7, #32]
 80060cc:	f000 fb79 	bl	80067c2 <tcpStateFinWait1>
      break;
 80060d0:	e02a      	b.n	8006128 <tcpProcessSegment+0x38c>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate
      //the connection and is now waiting for a matching FIN from the other
      //device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6979      	ldr	r1, [r7, #20]
 80060dc:	6a38      	ldr	r0, [r7, #32]
 80060de:	f000 fc06 	bl	80068ee <tcpStateFinWait2>
      break;
 80060e2:	e021      	b.n	8006128 <tcpProcessSegment+0x38c>
 80060e4:	20009990 	.word	0x20009990

   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	6979      	ldr	r1, [r7, #20]
 80060ec:	6a38      	ldr	r0, [r7, #32]
 80060ee:	f000 fc75 	bl	80069dc <tcpStateClosing>
      break;
 80060f2:	e019      	b.n	8006128 <tcpProcessSegment+0x38c>
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	6979      	ldr	r1, [r7, #20]
 80060f8:	6a38      	ldr	r0, [r7, #32]
 80060fa:	f000 fcba 	bl	8006a72 <tcpStateTimeWait>
      break;
 80060fe:	e013      	b.n	8006128 <tcpProcessSegment+0x38c>

   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8006100:	2100      	movs	r1, #0
 8006102:	6a38      	ldr	r0, [r7, #32]
 8006104:	f002 f8b1 	bl	800826a <tcpChangeState>
      //Silently discard incoming packet
      break;
 8006108:	e00e      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 800610a:	bf00      	nop
 800610c:	e00c      	b.n	8006128 <tcpProcessSegment+0x38c>
         return;
 800610e:	bf00      	nop
 8006110:	e00a      	b.n	8006128 <tcpProcessSegment+0x38c>
         return;
 8006112:	bf00      	nop
 8006114:	e008      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 8006116:	bf00      	nop
 8006118:	e006      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 800611a:	bf00      	nop
 800611c:	e004      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <tcpProcessSegment+0x38c>
      return;
 8006126:	bf00      	nop
   }
}
 8006128:	372c      	adds	r7, #44	; 0x2c
 800612a:	46bd      	mov	sp, r7
 800612c:	bd90      	pop	{r4, r7, pc}
 800612e:	bf00      	nop

08006130 <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes a reset to be sent in
   //response
   if((segment->flags & TCP_FLAG_RST) == 0)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7b5b      	ldrb	r3, [r3, #13]
 8006142:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <tcpStateClosed+0x2c>
   {
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 feac 	bl	8006eb4 <tcpRejectSegment>
   }
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if((segment->flags & TCP_FLAG_RST) != 0)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	7b5b      	ldrb	r3, [r3, #13]
 8006176:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	f040 80b7 	bne.w	80062f4 <tcpStateListen+0x190>
      return;

   //Any acknowledgment is bad if it arrives on a connection still in the
   //LISTEN state
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	7b5b      	ldrb	r3, [r3, #13]
 800618a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	d006      	beq.n	80061a6 <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f000 fe88 	bl	8006eb4 <tcpRejectSegment>
      //Return immediately
      return;
 80061a4:	e0ad      	b.n	8006302 <tcpStateListen+0x19e>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	7b5b      	ldrb	r3, [r3, #13]
 80061aa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80a4 	beq.w	8006302 <tcpStateListen+0x19e>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f001 fa46 	bl	8007650 <tcpIsDuplicateSyn>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f040 8096 	bne.w	80062f8 <tcpStateListen+0x194>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d108      	bne.n	80061e8 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 80061d6:	2024      	movs	r0, #36	; 0x24
 80061d8:	f7fc fd5e 	bl	8002c98 <memPoolAlloc>
 80061dc:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 80061e6:	e02b      	b.n	8006240 <tcpStateListen+0xdc>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061ee:	61bb      	str	r3, [r7, #24]
         firstQueueItem = socket->synQueue;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80061f6:	617b      	str	r3, [r7, #20]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 80061f8:	2301      	movs	r3, #1
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e005      	b.n	800620a <tcpStateListen+0xa6>
         {
            queueItem = queueItem->next;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	3301      	adds	r3, #1
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f5      	bne.n	80061fe <tcpStateListen+0x9a>
         }

         //Check whether the SYN queue is full
         if(i >= socket->synQueueSize)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	429a      	cmp	r2, r3
 800621c:	d307      	bcc.n	800622e <tcpStateListen+0xca>
         {
            //Remove the first item if the SYN queue runs out of space
            socket->synQueue = firstQueueItem->next;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
            //Deallocate memory buffer
            memPoolFree(firstQueueItem);
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f7fc fd57 	bl	8002cdc <memPoolFree>
         }

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 800622e:	2024      	movs	r0, #36	; 0x24
 8006230:	f7fc fd32 	bl	8002c98 <memPoolAlloc>
 8006234:	4602      	mov	r2, r0
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d05a      	beq.n	80062fc <tcpStateListen+0x198>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d158      	bne.n	8006300 <tcpStateListen+0x19c>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2204      	movs	r2, #4
 8006252:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	60da      	str	r2, [r3, #12]

         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2204      	movs	r2, #4
 8006260:	615a      	str	r2, [r3, #20]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	619a      	str	r2, [r3, #24]
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29a      	uxth	r2, r3
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	821a      	strh	r2, [r3, #16]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	61da      	str	r2, [r3, #28]
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800628e:	841a      	strh	r2, [r3, #32]

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8006290:	2102      	movs	r1, #2
 8006292:	6838      	ldr	r0, [r7, #0]
 8006294:	f000 ff5d 	bl	8007152 <tcpGetOption>
 8006298:	6138      	str	r0, [r7, #16]

      //Specified option found?
      if(option != NULL && option->length == 4)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d025      	beq.n	80062ec <tcpStateListen+0x188>
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	785b      	ldrb	r3, [r3, #1]
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d121      	bne.n	80062ec <tcpStateListen+0x188>
      {
         //Retrieve MSS value
         osMemcpy(&queueItem->mss, option->value, 2);
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	3320      	adds	r3, #32
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	3202      	adds	r2, #2
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	b292      	uxth	r2, r2
 80062b4:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	8c1b      	ldrh	r3, [r3, #32]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fa ff3d 	bl	800113a <swapInt16>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	841a      	strh	r2, [r3, #32]

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	8c1b      	ldrh	r3, [r3, #32]
 80062cc:	f240 5296 	movw	r2, #1430	; 0x596
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf28      	it	cs
 80062d4:	4613      	movcs	r3, r2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	841a      	strh	r2, [r3, #32]
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	8c1b      	ldrh	r3, [r3, #32]
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	bf38      	it	cc
 80062e4:	2340      	movcc	r3, #64	; 0x40
 80062e6:	b29a      	uxth	r2, r3
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	841a      	strh	r2, [r3, #32]
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 ffe3 	bl	80082b8 <tcpUpdateEvents>
 80062f2:	e006      	b.n	8006302 <tcpStateListen+0x19e>
      return;
 80062f4:	bf00      	nop
 80062f6:	e004      	b.n	8006302 <tcpStateListen+0x19e>
         return;
 80062f8:	bf00      	nop
 80062fa:	e002      	b.n	8006302 <tcpStateListen+0x19e>
         return;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <tcpStateListen+0x19e>
         return;
 8006300:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	7b5b      	ldrb	r3, [r3, #13]
 8006318:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0310 	and.w	r3, r3, #16
 8006322:	2b00      	cmp	r3, #0
 8006324:	d017      	beq.n	8006356 <tcpStateSynSent+0x4e>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006330:	429a      	cmp	r2, r3
 8006332:	d010      	beq.n	8006356 <tcpStateSynSent+0x4e>
      {
         //Send a reset segment unless the RST bit is set
         if((segment->flags & TCP_FLAG_RST) == 0)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	7b5b      	ldrb	r3, [r3, #13]
 8006338:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 80d2 	bne.w	80064ec <tcpStateSynSent+0x1e4>
         {
            tcpSendResetSegment(socket, segment->ackNum);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4619      	mov	r1, r3
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fd7e 	bl	8006e50 <tcpSendResetSegment>
         }

         //Drop the segment and return
         return;
 8006354:	e0ca      	b.n	80064ec <tcpStateSynSent+0x1e4>
      }
   }

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	7b5b      	ldrb	r3, [r3, #13]
 800635a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <tcpStateSynSent+0x7e>
   {
      //Make sure the ACK is acceptable
      if((segment->flags & TCP_FLAG_ACK) != 0)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	7b5b      	ldrb	r3, [r3, #13]
 800636c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80ba 	beq.w	80064f0 <tcpStateSynSent+0x1e8>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 800637c:	2100      	movs	r1, #0
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f001 ff73 	bl	800826a <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8006384:	e0b4      	b.n	80064f0 <tcpStateSynSent+0x1e8>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	7b5b      	ldrb	r3, [r3, #13]
 800638a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80ac 	beq.w	80064f2 <tcpStateSynSent+0x1ea>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if((segment->flags & TCP_FLAG_ACK) != 0)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	7b5b      	ldrb	r3, [r3, #13]
 80063b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <tcpStateSynSent+0xc4>
      {
         socket->sndUna = segment->ackNum;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      }

      //Compute retransmission timeout
      tcpComputeRto(socket);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f001 fd1c 	bl	8007e0a <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f001 faf4 	bl	80079c0 <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 80063d8:	2102      	movs	r1, #2
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f000 feb9 	bl	8007152 <tcpGetOption>
 80063e0:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d02b      	beq.n	8006440 <tcpStateSynSent+0x138>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	785b      	ldrb	r3, [r3, #1]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d127      	bne.n	8006440 <tcpStateSynSent+0x138>
      {
         //Retrieve MSS value
         osMemcpy(&socket->smss, option->value, 2);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	339c      	adds	r3, #156	; 0x9c
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	3202      	adds	r2, #2
 80063f8:	8812      	ldrh	r2, [r2, #0]
 80063fa:	b292      	uxth	r2, r2
 80063fc:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8006404:	4618      	mov	r0, r3
 8006406:	f7fa fe98 	bl	800113a <swapInt16>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800641a:	f240 5296 	movw	r2, #1430	; 0x596
 800641e:	4293      	cmp	r3, r2
 8006420:	bf28      	it	cs
 8006422:	4613      	movcs	r3, r2
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	bf38      	it	cc
 8006436:	2340      	movcc	r3, #64	; 0x40
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800644c:	4619      	mov	r1, r3
 800644e:	460b      	mov	r3, r1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	440b      	add	r3, r1
 8006454:	4293      	cmp	r3, r2
 8006456:	bf28      	it	cs
 8006458:	4613      	movcs	r3, r2
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	dd28      	ble.n	80064c6 <tcpStateSynSent+0x1be>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	89db      	ldrh	r3, [r3, #14]
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
         socket->sndWl1 = segment->seqNum;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
         socket->sndWl2 = segment->ackNum;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	89db      	ldrh	r3, [r3, #14]
 8006498:	b29a      	uxth	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064ac:	2100      	movs	r1, #0
 80064ae:	9101      	str	r1, [sp, #4]
 80064b0:	2100      	movs	r1, #0
 80064b2:	9100      	str	r1, [sp, #0]
 80064b4:	2110      	movs	r1, #16
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fb3e 	bl	8006b38 <tcpSendSegment>
            FALSE);

         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 80064bc:	2104      	movs	r1, #4
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f001 fed3 	bl	800826a <tcpChangeState>
 80064c4:	e015      	b.n	80064f2 <tcpStateSynSent+0x1ea>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80064d2:	2101      	movs	r1, #1
 80064d4:	9101      	str	r1, [sp, #4]
 80064d6:	2100      	movs	r1, #0
 80064d8:	9100      	str	r1, [sp, #0]
 80064da:	2112      	movs	r1, #18
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fb2b 	bl	8006b38 <tcpSendSegment>
            socket->rcvNxt, 0, TRUE);

         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 80064e2:	2103      	movs	r1, #3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fec0 	bl	800826a <tcpChangeState>
 80064ea:	e002      	b.n	80064f2 <tcpStateSynSent+0x1ea>
         return;
 80064ec:	bf00      	nop
 80064ee:	e000      	b.n	80064f2 <tcpStateSynSent+0x1ea>
      return;
 80064f0:	bf00      	nop
      }
   }
}
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 fe89 	bl	8007222 <tcpCheckSeqNum>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d14f      	bne.n	80065b6 <tcpStateSynReceived+0xbe>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	7b5b      	ldrb	r3, [r3, #13]
 800651a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8006528:	2100      	movs	r1, #0
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f001 fe9d 	bl	800826a <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 8006530:	e046      	b.n	80065c0 <tcpStateSynReceived+0xc8>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 ff12 	bl	8007360 <tcpCheckSyn>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d13b      	bne.n	80065ba <tcpStateSynReceived+0xc2>
      return;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	7b5b      	ldrb	r3, [r3, #13]
 8006546:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	d034      	beq.n	80065be <tcpStateSynReceived+0xc6>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800655e:	429a      	cmp	r2, r3
 8006560:	d006      	beq.n	8006570 <tcpStateSynReceived+0x78>
   {
      //If the segment acknowledgment is not acceptable, form a reset segment
      //and send it
      tcpSendResetSegment(socket, segment->ackNum);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fc71 	bl	8006e50 <tcpSendResetSegment>

      //Drop the segment and return
      return;
 800656e:	e027      	b.n	80065c0 <tcpStateSynReceived+0xc8>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	89db      	ldrh	r3, [r3, #14]
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
   socket->sndWl1 = segment->seqNum;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   socket->sndWl2 = segment->ackNum;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	89db      	ldrh	r3, [r3, #14]
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 800659c:	2104      	movs	r1, #4
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f001 fe63 	bl	800826a <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f809 	bl	80065c6 <tcpStateEstablished>
 80065b4:	e004      	b.n	80065c0 <tcpStateSynReceived+0xc8>
      return;
 80065b6:	bf00      	nop
 80065b8:	e002      	b.n	80065c0 <tcpStateSynReceived+0xc8>
      return;
 80065ba:	bf00      	nop
 80065bc:	e000      	b.n	80065c0 <tcpStateSynReceived+0xc8>
      return;
 80065be:	bf00      	nop
}
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b088      	sub	sp, #32
 80065ca:	af02      	add	r7, sp, #8
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80065d8:	6a3a      	ldr	r2, [r7, #32]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fe20 	bl	8007222 <tcpCheckSeqNum>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d160      	bne.n	80066aa <tcpStateEstablished+0xe4>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	7b5b      	ldrb	r3, [r3, #13]
 80065ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f001 fe34 	bl	800826a <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 8006602:	e057      	b.n	80066b4 <tcpStateEstablished+0xee>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006604:	6a3a      	ldr	r2, [r7, #32]
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fea9 	bl	8007360 <tcpCheckSyn>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d14c      	bne.n	80066ae <tcpStateEstablished+0xe8>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	68b9      	ldr	r1, [r7, #8]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fed5 	bl	80073c8 <tcpCheckAck>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d146      	bne.n	80066b2 <tcpStateEstablished+0xec>
      return;

   //Process the segment text
   if(length > 0)
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <tcpStateEstablished+0x74>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f001 f916 	bl	8007866 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	7b5b      	ldrb	r3, [r3, #13]
 800663e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d021      	beq.n	8006690 <tcpStateEstablished+0xca>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	440b      	add	r3, r1
 800665a:	429a      	cmp	r2, r3
 800665c:	d118      	bne.n	8006690 <tcpStateEstablished+0xca>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006678:	2100      	movs	r1, #0
 800667a:	9101      	str	r1, [sp, #4]
 800667c:	2100      	movs	r1, #0
 800667e:	9100      	str	r1, [sp, #0]
 8006680:	2110      	movs	r1, #16
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fa58 	bl	8006b38 <tcpSendSegment>
            FALSE);

         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 8006688:	2105      	movs	r1, #5
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 fded 	bl	800826a <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <tcpStateEstablished+0xda>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 800669a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800669e:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce short segments (refer
   //to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f001 fcc6 	bl	8008034 <tcpNagleAlgo>
 80066a8:	e004      	b.n	80066b4 <tcpStateEstablished+0xee>
      return;
 80066aa:	bf00      	nop
 80066ac:	e002      	b.n	80066b4 <tcpStateEstablished+0xee>
      return;
 80066ae:	bf00      	nop
 80066b0:	e000      	b.n	80066b4 <tcpStateEstablished+0xee>
      return;
 80066b2:	bf00      	nop
}
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fda7 	bl	8007222 <tcpCheckSeqNum>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d12a      	bne.n	8006730 <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	7b5b      	ldrb	r3, [r3, #13]
 80066de:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80066ec:	2100      	movs	r1, #0
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 fdbb 	bl	800826a <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 80066f4:	e021      	b.n	800673a <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fe30 	bl	8007360 <tcpCheckSyn>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d116      	bne.n	8006734 <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fe5c 	bl	80073c8 <tcpCheckAck>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d110      	bne.n	8006738 <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <tcpStateCloseWait+0x6c>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 8006720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006724:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8006726:	6979      	ldr	r1, [r7, #20]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f001 fc83 	bl	8008034 <tcpNagleAlgo>
 800672e:	e004      	b.n	800673a <tcpStateCloseWait+0x80>
      return;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <tcpStateCloseWait+0x80>
      return;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <tcpStateCloseWait+0x80>
      return;
 8006738:	bf00      	nop
}
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fd66 	bl	8007222 <tcpCheckSeqNum>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d12a      	bne.n	80067b2 <tcpStateLastAck+0x72>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	7b5b      	ldrb	r3, [r3, #13]
 8006760:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d004      	beq.n	8006778 <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800676e:	2100      	movs	r1, #0
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f001 fd7a 	bl	800826a <tcpChangeState>
      //Return immediately
      return;
 8006776:	e021      	b.n	80067bc <tcpStateLastAck+0x7c>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fdef 	bl	8007360 <tcpCheckSyn>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d116      	bne.n	80067b6 <tcpStateLastAck+0x76>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	7b5b      	ldrb	r3, [r3, #13]
 800678c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006790:	b2db      	uxtb	r3, r3
 8006792:	f003 0310 	and.w	r3, r3, #16
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00f      	beq.n	80067ba <tcpStateLastAck+0x7a>
      return;

   //The only thing that can arrive in this state is an acknowledgment of
   //our FIN
   if(segment->ackNum == socket->sndNxt)
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d109      	bne.n	80067bc <tcpStateLastAck+0x7c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80067a8:	2100      	movs	r1, #0
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f001 fd5d 	bl	800826a <tcpChangeState>
 80067b0:	e004      	b.n	80067bc <tcpStateLastAck+0x7c>
      return;
 80067b2:	bf00      	nop
 80067b4:	e002      	b.n	80067bc <tcpStateLastAck+0x7c>
      return;
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <tcpStateLastAck+0x7c>
      return;
 80067ba:	bf00      	nop
   }
}
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b086      	sub	sp, #24
 80067c6:	af02      	add	r7, sp, #8
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	68b9      	ldr	r1, [r7, #8]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 fd24 	bl	8007222 <tcpCheckSeqNum>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d17e      	bne.n	80068de <tcpStateFinWait1+0x11c>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	7b5b      	ldrb	r3, [r3, #13]
 80067e4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80067f2:	2100      	movs	r1, #0
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 fd38 	bl	800826a <tcpChangeState>
      //Return immediately
      return;
 80067fa:	e075      	b.n	80068e8 <tcpStateFinWait1+0x126>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fdad 	bl	8007360 <tcpCheckSyn>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d16a      	bne.n	80068e2 <tcpStateFinWait1+0x120>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 fdd9 	bl	80073c8 <tcpCheckAck>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d164      	bne.n	80068e6 <tcpStateFinWait1+0x124>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006826:	429a      	cmp	r2, r3
 8006828:	d10b      	bne.n	8006842 <tcpStateFinWait1+0x80>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection from staying in
      //the FIN-WAIT-2 state forever
      netStartTimer(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8006830:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006834:	4618      	mov	r0, r3
 8006836:	f7fc fff9 	bl	800382c <netStartTimer>

      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 800683a:	2108      	movs	r1, #8
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f001 fd14 	bl	800826a <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d007      	beq.n	8006858 <tcpStateFinWait1+0x96>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f001 f807 	bl	8007866 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	7b5b      	ldrb	r3, [r3, #13]
 800685c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d03e      	beq.n	80068e8 <tcpStateFinWait1+0x126>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	440b      	add	r3, r1
 8006878:	429a      	cmp	r2, r3
 800687a:	d135      	bne.n	80068e8 <tcpStateFinWait1+0x126>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006896:	2100      	movs	r1, #0
 8006898:	9101      	str	r1, [sp, #4]
 800689a:	2100      	movs	r1, #0
 800689c:	9100      	str	r1, [sp, #0]
 800689e:	2110      	movs	r1, #16
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f949 	bl	8006b38 <tcpSendSegment>
            FALSE);

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d10f      	bne.n	80068d4 <tcpStateFinWait1+0x112>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 f868 	bl	800798a <tcpDeleteControlBlock>
            //Start the 2MSL timer
            netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80068c0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fc ffb1 	bl	800382c <netStartTimer>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80068ca:	210a      	movs	r1, #10
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f001 fccc 	bl	800826a <tcpChangeState>
 80068d2:	e009      	b.n	80068e8 <tcpStateFinWait1+0x126>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 80068d4:	2109      	movs	r1, #9
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f001 fcc7 	bl	800826a <tcpChangeState>
 80068dc:	e004      	b.n	80068e8 <tcpStateFinWait1+0x126>
      return;
 80068de:	bf00      	nop
 80068e0:	e002      	b.n	80068e8 <tcpStateFinWait1+0x126>
      return;
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <tcpStateFinWait1+0x126>
      return;
 80068e6:	bf00      	nop
         }
      }
   }
}
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af02      	add	r7, sp, #8
 80068f4:	60f8      	str	r0, [r7, #12]
 80068f6:	60b9      	str	r1, [r7, #8]
 80068f8:	607a      	str	r2, [r7, #4]
 80068fa:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	68b9      	ldr	r1, [r7, #8]
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fc8e 	bl	8007222 <tcpCheckSeqNum>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d15f      	bne.n	80069cc <tcpStateFinWait2+0xde>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	7b5b      	ldrb	r3, [r3, #13]
 8006910:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800691e:	2100      	movs	r1, #0
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 fca2 	bl	800826a <tcpChangeState>
      //Return immediately
      return;
 8006926:	e056      	b.n	80069d6 <tcpStateFinWait2+0xe8>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fd17 	bl	8007360 <tcpCheckSyn>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d14b      	bne.n	80069d0 <tcpStateFinWait2+0xe2>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fd43 	bl	80073c8 <tcpCheckAck>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d145      	bne.n	80069d4 <tcpStateFinWait2+0xe6>
      return;

   //Process the segment text
   if(length > 0)
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <tcpStateFinWait2+0x70>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 ff84 	bl	8007866 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7b5b      	ldrb	r3, [r3, #13]
 8006962:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d032      	beq.n	80069d6 <tcpStateFinWait2+0xe8>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	440b      	add	r3, r1
 800697e:	429a      	cmp	r2, r3
 8006980:	d129      	bne.n	80069d6 <tcpStateFinWait2+0xe8>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800699c:	2100      	movs	r1, #0
 800699e:	9101      	str	r1, [sp, #4]
 80069a0:	2100      	movs	r1, #0
 80069a2:	9100      	str	r1, [sp, #0]
 80069a4:	2110      	movs	r1, #16
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f8c6 	bl	8006b38 <tcpSendSegment>
            FALSE);

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 ffec 	bl	800798a <tcpDeleteControlBlock>
         //Start the 2MSL timer
         netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80069b8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fc ff35 	bl	800382c <netStartTimer>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 80069c2:	210a      	movs	r1, #10
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fc50 	bl	800826a <tcpChangeState>
 80069ca:	e004      	b.n	80069d6 <tcpStateFinWait2+0xe8>
      return;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <tcpStateFinWait2+0xe8>
      return;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <tcpStateFinWait2+0xe8>
      return;
 80069d4:	bf00      	nop
      }
   }
}
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f000 fc18 	bl	8007222 <tcpCheckSeqNum>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d134      	bne.n	8006a62 <tcpStateClosing+0x86>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	7b5b      	ldrb	r3, [r3, #13]
 80069fc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 fc2c 	bl	800826a <tcpChangeState>
      //Return immediately
      return;
 8006a12:	e02b      	b.n	8006a6c <tcpStateClosing+0x90>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fca1 	bl	8007360 <tcpCheckSyn>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d120      	bne.n	8006a66 <tcpStateClosing+0x8a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fccd 	bl	80073c8 <tcpCheckAck>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d11a      	bne.n	8006a6a <tcpStateClosing+0x8e>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT state, otherwise
   //ignore the segment
   if(segment->ackNum == socket->sndNxt)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d114      	bne.n	8006a6c <tcpStateClosing+0x90>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 ffa1 	bl	800798a <tcpDeleteControlBlock>
      //Start the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006a4e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fc feea 	bl	800382c <netStartTimer>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8006a58:	210a      	movs	r1, #10
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f001 fc05 	bl	800826a <tcpChangeState>
 8006a60:	e004      	b.n	8006a6c <tcpStateClosing+0x90>
      return;
 8006a62:	bf00      	nop
 8006a64:	e002      	b.n	8006a6c <tcpStateClosing+0x90>
      return;
 8006a66:	bf00      	nop
 8006a68:	e000      	b.n	8006a6c <tcpStateClosing+0x90>
      return;
 8006a6a:	bf00      	nop
   }
}
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b086      	sub	sp, #24
 8006a76:	af02      	add	r7, sp, #8
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 fbcd 	bl	8007222 <tcpCheckSeqNum>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d149      	bne.n	8006b22 <tcpStateTimeWait+0xb0>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	7b5b      	ldrb	r3, [r3, #13]
 8006a92:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00f      	beq.n	8006ac0 <tcpStateTimeWait+0x4e>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 fbe1 	bl	800826a <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d139      	bne.n	8006b26 <tcpStateTimeWait+0xb4>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 ff69 	bl	800798a <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 8006abe:	e032      	b.n	8006b26 <tcpStateTimeWait+0xb4>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fc4b 	bl	8007360 <tcpCheckSyn>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d12c      	bne.n	8006b2a <tcpStateTimeWait+0xb8>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	7b5b      	ldrb	r3, [r3, #13]
 8006ad4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0310 	and.w	r3, r3, #16
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d025      	beq.n	8006b2e <tcpStateTimeWait+0xbc>
      return;

   //The only thing that can arrive in this state is a retransmission of the
   //remote FIN. Acknowledge it and restart the 2 MSL timeout
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	7b5b      	ldrb	r3, [r3, #13]
 8006ae6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01d      	beq.n	8006b30 <tcpStateTimeWait+0xbe>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006b00:	2100      	movs	r1, #0
 8006b02:	9101      	str	r1, [sp, #4]
 8006b04:	2100      	movs	r1, #0
 8006b06:	9100      	str	r1, [sp, #0]
 8006b08:	2110      	movs	r1, #16
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f814 	bl	8006b38 <tcpSendSegment>
         FALSE);

      //Restart the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8006b16:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7fc fe86 	bl	800382c <netStartTimer>
 8006b20:	e006      	b.n	8006b30 <tcpStateTimeWait+0xbe>
      return;
 8006b22:	bf00      	nop
 8006b24:	e004      	b.n	8006b30 <tcpStateTimeWait+0xbe>
      return;
 8006b26:	bf00      	nop
 8006b28:	e002      	b.n	8006b30 <tcpStateTimeWait+0xbe>
      return;
 8006b2a:	bf00      	nop
 8006b2c:	e000      	b.n	8006b30 <tcpStateTimeWait+0xbe>
      return;
 8006b2e:	bf00      	nop
   }
}
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 8006b38:	b5b0      	push	{r4, r5, r7, lr}
 8006b3a:	b098      	sub	sp, #96	; 0x60
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	460b      	mov	r3, r1
 8006b46:	72fb      	strb	r3, [r7, #11]
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8006b4e:	ba5b      	rev16	r3, r3
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	82fb      	strh	r3, [r7, #22]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 8006b54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b58:	4619      	mov	r1, r3
 8006b5a:	203c      	movs	r0, #60	; 0x3c
 8006b5c:	f7fb fda6 	bl	80026ac <ipAllocBuffer>
 8006b60:	6538      	str	r0, [r7, #80]	; 0x50
   //Failed to allocate memory?
   if(buffer == NULL)
 8006b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 8006b68:	2364      	movs	r3, #100	; 0x64
 8006b6a:	e16a      	b.n	8006e42 <tcpSendSegment+0x30a>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 8006b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b6e:	4619      	mov	r1, r3
 8006b70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006b72:	f7fc f9cb 	bl	8002f0c <netBufferAt>
 8006b76:	64f8      	str	r0, [r7, #76]	; 0x4c

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8b1b      	ldrh	r3, [r3, #24]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fa fadc 	bl	800113a <swapInt16>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fa fad3 	bl	800113a <swapInt16>
 8006b94:	4603      	mov	r3, r0
 8006b96:	461a      	mov	r2, r3
 8006b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9a:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fa fada 	bl	8001156 <swapInt32>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <tcpSendSegment+0x84>
 8006bb2:	6838      	ldr	r0, [r7, #0]
 8006bb4:	f7fa facf 	bl	8001156 <swapInt32>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	e000      	b.n	8006bbe <tcpSendSegment+0x86>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bc0:	6093      	str	r3, [r2, #8]
   segment->reserved1 = 0;
 8006bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bc4:	7b13      	ldrb	r3, [r2, #12]
 8006bc6:	f36f 0303 	bfc	r3, #0, #4
 8006bca:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 8006bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bce:	7b13      	ldrb	r3, [r2, #12]
 8006bd0:	2105      	movs	r1, #5
 8006bd2:	f361 1307 	bfi	r3, r1, #4, #4
 8006bd6:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bde:	b2d9      	uxtb	r1, r3
 8006be0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006be2:	7b53      	ldrb	r3, [r2, #13]
 8006be4:	f361 0305 	bfi	r3, r1, #0, #6
 8006be8:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 8006bea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bec:	7b53      	ldrb	r3, [r2, #13]
 8006bee:	f36f 1387 	bfc	r3, #6, #2
 8006bf2:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fa fa9d 	bl	800113a <swapInt16>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c06:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 8006c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	741a      	strb	r2, [r3, #16]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	2200      	movs	r2, #0
 8006c16:	749a      	strb	r2, [r3, #18]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if((flags & TCP_FLAG_SYN) != 0)
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 8006c26:	f107 0216 	add.w	r2, r7, #22
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	2102      	movs	r1, #2
 8006c2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006c30:	f000 fa28 	bl	8007084 <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 8006c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c36:	7b1b      	ldrb	r3, [r3, #12]
 8006c38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	461a      	mov	r2, r3
 8006c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c44:	4413      	add	r3, r2
 8006c46:	4619      	mov	r1, r3
 8006c48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c4a:	f7fc f8b9 	bl	8002dc0 <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 8006c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d012      	beq.n	8006c7a <tcpSendSegment+0x142>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8006c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 fd1a 	bl	8008694 <tcpReadTxBuffer>
 8006c60:	4603      	mov	r3, r0
 8006c62:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      //Any error to report?
      if(error)
 8006c66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d005      	beq.n	8006c7a <tcpSendSegment+0x142>
      {
         //Clean up side effects
         netBufferFree(buffer);
 8006c6e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c70:	f7fc f872 	bl	8002d58 <netBufferFree>
         //Exit immediately
         return error;
 8006c74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c78:	e0e3      	b.n	8006e42 <tcpSendSegment+0x30a>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	7b1b      	ldrb	r3, [r3, #12]
 8006c7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	461a      	mov	r2, r3
 8006c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c8a:	4413      	add	r3, r2
 8006c8c:	647b      	str	r3, [r7, #68]	; 0x44

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d128      	bne.n	8006ce8 <tcpSendSegment+0x1b0>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8006c96:	230c      	movs	r3, #12
 8006c98:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
      pseudoHeader.ipv4Data.reserved = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8006cac:	2306      	movs	r3, #6
 8006cae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
      pseudoHeader.ipv4Data.length = htons(totalLength);
 8006cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fa fa3f 	bl	800113a <swapInt16>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	87fb      	strh	r3, [r7, #62]	; 0x3e

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8006cc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cc6:	1d18      	adds	r0, r3, #4
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cd0:	210c      	movs	r1, #12
 8006cd2:	f7fb fcc2 	bl	800265a <ipCalcUpperLayerChecksumEx>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cdc:	821a      	strh	r2, [r3, #16]
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 8006cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8082 	beq.w	8006dea <tcpSendSegment+0x2b2>
 8006ce6:	e004      	b.n	8006cf2 <tcpSendSegment+0x1ba>
      netBufferFree(buffer);
 8006ce8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006cea:	f7fc f835 	bl	8002d58 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8006cee:	23e4      	movs	r3, #228	; 0xe4
 8006cf0:	e0a7      	b.n	8006e42 <tcpSendSegment+0x30a>
   {
      //Empty retransmission queue?
      if(socket->retransmitQueue == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d108      	bne.n	8006d0e <tcpSendSegment+0x1d6>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 8006cfc:	2058      	movs	r0, #88	; 0x58
 8006cfe:	f7fb ffcb 	bl	8002c98 <memPoolAlloc>
 8006d02:	6578      	str	r0, [r7, #84]	; 0x54
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d08:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8006d0c:	e014      	b.n	8006d38 <tcpSendSegment+0x200>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8006d14:	657b      	str	r3, [r7, #84]	; 0x54
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 8006d16:	e002      	b.n	8006d1e <tcpSendSegment+0x1e6>
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	657b      	str	r3, [r7, #84]	; 0x54
 8006d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1f8      	bne.n	8006d18 <tcpSendSegment+0x1e0>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 8006d26:	2058      	movs	r0, #88	; 0x58
 8006d28:	f7fb ffb6 	bl	8002c98 <memPoolAlloc>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d30:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8006d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8006d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d104      	bne.n	8006d48 <tcpSendSegment+0x210>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 8006d3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006d40:	f7fc f80a 	bl	8002d58 <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 8006d44:	2364      	movs	r3, #100	; 0x64
 8006d46:	e07c      	b.n	8006e42 <tcpSendSegment+0x30a>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 8006d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 8006d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d52:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 8006d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]
      //Save TCP header
      osMemcpy(queueItem->header, segment, segment->dataOffset * 4);
 8006d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5c:	f103 001c 	add.w	r0, r3, #28
 8006d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d62:	7b1b      	ldrb	r3, [r3, #12]
 8006d64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006d70:	f00b fea1 	bl	8012ab6 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 8006d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d76:	f103 040c 	add.w	r4, r3, #12
 8006d7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d116      	bne.n	8006dbc <tcpSendSegment+0x284>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 8006d8e:	f7fa fb6f 	bl	8001470 <osGetSystemTime>
 8006d92:	4602      	mov	r2, r0
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fa f9d9 	bl	8001156 <swapInt32>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif
      }

      //Check whether the RTO timer is running or not
      if(!netTimerRunning(&socket->retransmitTimer))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fc fd53 	bl	800386e <netTimerRunning>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10d      	bne.n	8006dea <tcpSendSegment+0x2b2>
      {
         //If the timer is not running, start it running so that it will expire
         //after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7fc fd25 	bl	800382c <netStartTimer>

         //Reset retransmission counter
         socket->retransmitCount = 0;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006df6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006df8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006dfa:	f001 fd37 	bl	800886c <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <tcpSendSegment+0x314>)
 8006e00:	f107 0418 	add.w	r4, r7, #24
 8006e04:	461d      	mov	r5, r3
 8006e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006e0e:	e884 0003 	stmia.w	r4, {r0, r1}
   //Set the TTL value to be used
   ancillary.ttl = socket->ttl;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e18:	763b      	strb	r3, [r7, #24]
   ancillary.vmanPcp = socket->vmanPcp;
   ancillary.vmanDei = socket->vmanDei;
#endif

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset,
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68d8      	ldr	r0, [r3, #12]
 8006e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e20:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006e24:	f107 0318 	add.w	r3, r7, #24
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e2e:	f7fb fa97 	bl	8002360 <ipSendDatagram>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8006e38:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006e3a:	f7fb ff8d 	bl	8002d58 <netBufferFree>

   //Return error code
   return error;
 8006e3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3758      	adds	r7, #88	; 0x58
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bdb0      	pop	{r4, r5, r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08014540 	.word	0x08014540

08006e50 <tcpSendResetSegment>:
 * @param[in] seqNum Sequence number
 * @return Error code
 **/

error_t tcpSendResetSegment(Socket *socket, uint32_t seqNum)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	81fb      	strh	r3, [r7, #14]

   //Check current state
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d013      	beq.n	8006e90 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_ESTABLISHED ||
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d00e      	beq.n	8006e90 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_ESTABLISHED ||
 8006e78:	2b07      	cmp	r3, #7
 8006e7a:	d009      	beq.n	8006e90 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d004      	beq.n	8006e90 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 8006e8c:	2b05      	cmp	r3, #5
 8006e8e:	d10b      	bne.n	8006ea8 <tcpSendResetSegment+0x58>
   {
      //Send a reset segment
      error = tcpSendSegment(socket, TCP_FLAG_RST, seqNum, 0, 0, FALSE);
 8006e90:	2300      	movs	r3, #0
 8006e92:	9301      	str	r3, [sp, #4]
 8006e94:	2300      	movs	r3, #0
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	2104      	movs	r1, #4
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff fe4a 	bl	8006b38 <tcpSendSegment>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <tcpRejectSegment>:
 * @return Error code
 **/

error_t tcpRejectSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment, size_t length)
{
 8006eb4:	b5b0      	push	{r4, r5, r7, lr}
 8006eb6:	b098      	sub	sp, #96	; 0x60
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;
   NetTxAncillary ancillary;

   //Check whether the ACK bit is set
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	7b5b      	ldrb	r3, [r3, #13]
 8006ec6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <tcpRejectSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      seqNum = segment->ackNum;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	653b      	str	r3, [r7, #80]	; 0x50
      ackNum = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee4:	e021      	b.n	8006f2a <tcpRejectSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 8006ee6:	2314      	movs	r3, #20
 8006ee8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      seqNum = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	653b      	str	r3, [r7, #80]	; 0x50
      ackNum = segment->seqNum + length;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	64fb      	str	r3, [r7, #76]	; 0x4c

      //Advance the acknowledgment number over the SYN or the FIN
      if((segment->flags & TCP_FLAG_SYN) != 0)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7b5b      	ldrb	r3, [r3, #13]
 8006efe:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <tcpRejectSegment+0x5e>
      {
         ackNum++;
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	3301      	adds	r3, #1
 8006f10:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if((segment->flags & TCP_FLAG_FIN) != 0)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7b5b      	ldrb	r3, [r3, #13]
 8006f16:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <tcpRejectSegment+0x76>
      {
         ackNum++;
 8006f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f26:	3301      	adds	r3, #1
 8006f28:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 8006f2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006f2e:	4619      	mov	r1, r3
 8006f30:	2014      	movs	r0, #20
 8006f32:	f7fb fbbb 	bl	80026ac <ipAllocBuffer>
 8006f36:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(buffer == NULL)
 8006f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <tcpRejectSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 8006f3e:	2364      	movs	r3, #100	; 0x64
 8006f40:	e09a      	b.n	8007078 <tcpRejectSegment+0x1c4>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 8006f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f44:	4619      	mov	r1, r3
 8006f46:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006f48:	f7fb ffe0 	bl	8002f0c <netBufferAt>
 8006f4c:	6478      	str	r0, [r7, #68]	; 0x44

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	885b      	ldrh	r3, [r3, #2]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7fa f8f0 	bl	800113a <swapInt16>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f60:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fa f8e6 	bl	800113a <swapInt16>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f74:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 8006f76:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006f78:	f7fa f8ed 	bl	8001156 <swapInt32>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f80:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 8006f82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006f84:	f7fa f8e7 	bl	8001156 <swapInt32>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8c:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 8006f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f90:	7b13      	ldrb	r3, [r2, #12]
 8006f92:	f36f 0303 	bfc	r3, #0, #4
 8006f96:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 8006f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f9a:	7b13      	ldrb	r3, [r2, #12]
 8006f9c:	2105      	movs	r1, #5
 8006f9e:	f361 1307 	bfi	r3, r1, #4, #4
 8006fa2:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 8006fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fac:	b2d9      	uxtb	r1, r3
 8006fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fb0:	7b53      	ldrb	r3, [r2, #13]
 8006fb2:	f361 0305 	bfi	r3, r1, #0, #6
 8006fb6:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 8006fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fba:	7b53      	ldrb	r3, [r2, #13]
 8006fbc:	f36f 1387 	bfc	r3, #6, #2
 8006fc0:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	739a      	strb	r2, [r3, #14]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 8006fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fce:	2200      	movs	r2, #0
 8006fd0:	741a      	strb	r2, [r3, #16]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 8006fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd8:	2200      	movs	r2, #0
 8006fda:	749a      	strb	r2, [r3, #18]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b0c      	cmp	r3, #12
 8006fe6:	d143      	bne.n	8007070 <tcpRejectSegment+0x1bc>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 8006fe8:	230c      	movs	r3, #12
 8006fea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader2.ipv4Data.reserved = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 8006ffe:	2306      	movs	r3, #6
 8007000:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 8007004:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007008:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 800700a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800700c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007010:	1d18      	adds	r0, r3, #4
 8007012:	2314      	movs	r3, #20
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800701a:	210c      	movs	r1, #12
 800701c:	f7fb fb1d 	bl	800265a <ipCalcUpperLayerChecksumEx>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007026:	821a      	strh	r2, [r3, #16]
   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 8007028:	2300      	movs	r3, #0
 800702a:	2200      	movs	r2, #0
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007030:	f001 fc1c 	bl	800886c <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007034:	4b12      	ldr	r3, [pc, #72]	; (8007080 <tcpRejectSegment+0x1cc>)
 8007036:	f107 0414 	add.w	r4, r7, #20
 800703a:	461d      	mov	r5, r3
 800703c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800703e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007040:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007044:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset,
 8007048:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800704a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f7fb f981 	bl	8002360 <ipSendDatagram>
 800705e:	4603      	mov	r3, r0
 8007060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8007064:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007066:	f7fb fe77 	bl	8002d58 <netBufferFree>

   //Return error code
   return error;
 800706a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800706e:	e003      	b.n	8007078 <tcpRejectSegment+0x1c4>
      netBufferFree(buffer);
 8007070:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007072:	f7fb fe71 	bl	8002d58 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8007076:	23e4      	movs	r3, #228	; 0xe4
}
 8007078:	4618      	mov	r0, r3
 800707a:	3758      	adds	r7, #88	; 0x58
 800707c:	46bd      	mov	sp, r7
 800707e:	bdb0      	pop	{r4, r5, r7, pc}
 8007080:	08014540 	.word	0x08014540

08007084 <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	461a      	mov	r2, r3
 8007090:	460b      	mov	r3, r1
 8007092:	72fb      	strb	r3, [r7, #11]
 8007094:	4613      	mov	r3, r2
 8007096:	72bb      	strb	r3, [r7, #10]
   size_t paddingSize;
   TcpOption *option;

   //The option-length counts the two octets of option-kind and option-length
   //as well as the option-data octets (refer to RFC 793, section 3.1)
   length += sizeof(TcpOption);
 8007098:	7abb      	ldrb	r3, [r7, #10]
 800709a:	3302      	adds	r3, #2
 800709c:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough room to add the option
   if((segment->dataOffset * 4 + length) <= TCP_MAX_HEADER_LENGTH)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7b1b      	ldrb	r3, [r3, #12]
 80070a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	009a      	lsls	r2, r3, #2
 80070aa:	7abb      	ldrb	r3, [r7, #10]
 80070ac:	4413      	add	r3, r2
 80070ae:	2b3c      	cmp	r3, #60	; 0x3c
 80070b0:	dc48      	bgt.n	8007144 <tcpAddOption+0xc0>
   {
      //Index of the first available byte
      i = (segment->dataOffset * 4) - sizeof(TcpHeader);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	7b1b      	ldrb	r3, [r3, #12]
 80070b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	3b14      	subs	r3, #20
 80070c0:	61bb      	str	r3, [r7, #24]

      //Calculate the number of padding bytes
      paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 80070c2:	7abb      	ldrb	r3, [r7, #10]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <tcpAddOption+0x56>
 80070ce:	7abb      	ldrb	r3, [r7, #10]
 80070d0:	f003 0303 	and.w	r3, r3, #3
 80070d4:	f1c3 0304 	rsb	r3, r3, #4
 80070d8:	e000      	b.n	80070dc <tcpAddOption+0x58>
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]

      //Write padding bytes
      while(paddingSize--)
 80070de:	e006      	b.n	80070ee <tcpAddOption+0x6a>
      {
         segment->options[i++] = TCP_OPTION_NOP;
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	61ba      	str	r2, [r7, #24]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4413      	add	r3, r2
 80070ea:	2201      	movs	r2, #1
 80070ec:	751a      	strb	r2, [r3, #20]
      while(paddingSize--)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	1e5a      	subs	r2, r3, #1
 80070f2:	617a      	str	r2, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f3      	bne.n	80070e0 <tcpAddOption+0x5c>
      }

      //Point to the current location
      option = (TcpOption *) (segment->options + i);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 0214 	add.w	r2, r3, #20
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	4413      	add	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

      //Format option
      option->kind = kind;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	7afa      	ldrb	r2, [r7, #11]
 8007108:	701a      	strb	r2, [r3, #0]
      option->length = length;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	7aba      	ldrb	r2, [r7, #10]
 800710e:	705a      	strb	r2, [r3, #1]
      osMemcpy(option->value, value, length - sizeof(TcpOption));
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1c98      	adds	r0, r3, #2
 8007114:	7abb      	ldrb	r3, [r7, #10]
 8007116:	3b02      	subs	r3, #2
 8007118:	461a      	mov	r2, r3
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	f00b fccb 	bl	8012ab6 <memcpy>

      //Adjust index value
      i += length;
 8007120:	7abb      	ldrb	r3, [r7, #10]
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	4413      	add	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]

      //Update the length of the TCP header
      segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	3314      	adds	r3, #20
 800712c:	089b      	lsrs	r3, r3, #2
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	b2d9      	uxtb	r1, r3
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	7b13      	ldrb	r3, [r2, #12]
 8007138:	f361 1307 	bfi	r3, r1, #4, #4
 800713c:	7313      	strb	r3, [r2, #12]

      //Successful processing
      error = NO_ERROR;
 800713e:	2300      	movs	r3, #0
 8007140:	83fb      	strh	r3, [r7, #30]
 8007142:	e001      	b.n	8007148 <tcpAddOption+0xc4>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 8007144:	2301      	movs	r3, #1
 8007146:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 8007148:	8bfb      	ldrh	r3, [r7, #30]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3720      	adds	r7, #32
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
   size_t i;
   size_t length;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset >= (sizeof(TcpHeader) / 4))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7b1b      	ldrb	r3, [r3, #12]
 8007162:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b04      	cmp	r3, #4
 800716a:	d942      	bls.n	80071f2 <tcpGetOption+0xa0>
   {
      //Compute the length of the options field
      length = (segment->dataOffset * 4) - sizeof(TcpHeader);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7b1b      	ldrb	r3, [r3, #12]
 8007170:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007174:	b2db      	uxtb	r3, r3
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	3b14      	subs	r3, #20
 800717a:	613b      	str	r3, [r7, #16]

      //Point to the very first option
      i = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	617b      	str	r3, [r7, #20]

      //Loop through the list of options
      while(i < length)
 8007180:	e02f      	b.n	80071e2 <tcpGetOption+0x90>
      {
         //Point to the current option
         option = (TcpOption *) (segment->options + i);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f103 0214 	add.w	r2, r3, #20
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4413      	add	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

         //Check option code
         if(option->kind == TCP_OPTION_END)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02a      	beq.n	80071ec <tcpGetOption+0x9a>
         {
            //This option code indicates the end of the option list
            break;
         }
         else if(option->kind == TCP_OPTION_NOP)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d103      	bne.n	80071a6 <tcpGetOption+0x54>
         {
            //This option consists of a single octet
            i++;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	3301      	adds	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	e01d      	b.n	80071e2 <tcpGetOption+0x90>
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	3301      	adds	r3, #1
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d91f      	bls.n	80071f0 <tcpGetOption+0x9e>
               break;

            //Check the length of the option
            if(option->length < sizeof(TcpOption) || (i + option->length) > length)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d91c      	bls.n	80071f2 <tcpGetOption+0xa0>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	461a      	mov	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	4413      	add	r3, r2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d314      	bcc.n	80071f2 <tcpGetOption+0xa0>
               break;

            //Matching option code?
            if(option->kind == kind)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d101      	bne.n	80071d6 <tcpGetOption+0x84>
               return option;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	e00e      	b.n	80071f4 <tcpGetOption+0xa2>

            //Jump to the next option
            i += option->length;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	785b      	ldrb	r3, [r3, #1]
 80071da:	461a      	mov	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	4413      	add	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
      while(i < length)
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d3cb      	bcc.n	8007182 <tcpGetOption+0x30>
 80071ea:	e002      	b.n	80071f2 <tcpGetOption+0xa0>
            break;
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <tcpGetOption+0xa0>
               break;
 80071f0:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <tcpGenerateInitialSeqNum>:
 * @return Value of the initial sequence number
 **/

uint32_t tcpGenerateInitialSeqNum(const IpAddr *localIpAddr,
   uint16_t localPort, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	461a      	mov	r2, r3
 800720c:	460b      	mov	r3, r1
 800720e:	817b      	strh	r3, [r7, #10]
 8007210:	4613      	mov	r3, r2
 8007212:	813b      	strh	r3, [r7, #8]

   //Calculate ISN = M + F(localip, localport, remoteip, remoteport, secretkey)
   return isn + netGetSystemTickCount();
#else
   //Generate a random initial sequence number
   return netGetRand();
 8007214:	f7fc fbf0 	bl	80039f8 <netGetRand>
 8007218:	4603      	mov	r3, r0
#endif
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <tcpCheckSeqNum>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSeqNum(Socket *socket, TcpHeader *segment, size_t length)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b088      	sub	sp, #32
 8007226:	af02      	add	r7, sp, #8
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	607a      	str	r2, [r7, #4]
   bool_t acceptable;

   //Due to zero windows and zero length segments, we have four cases for the
   //acceptability of an incoming segment (refer to RFC 793, section 3.3)
   if(length == 0 && socket->rcvWnd == 0)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d111      	bne.n	8007258 <tcpCheckSeqNum+0x36>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10c      	bne.n	8007258 <tcpCheckSeqNum+0x36>
   {
      //If both segment length and receive window are zero, then test if
      //SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007248:	429a      	cmp	r2, r3
 800724a:	d102      	bne.n	8007252 <tcpCheckSeqNum+0x30>
      {
         acceptable = TRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8007250:	e065      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8007256:	e062      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length == 0 && socket->rcvWnd != 0)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d11e      	bne.n	800729c <tcpCheckSeqNum+0x7a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8007264:	2b00      	cmp	r3, #0
 8007266:	d019      	beq.n	800729c <tcpCheckSeqNum+0x7a>
   {
      //If segment length is zero and receive window is non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	db0e      	blt.n	8007296 <tcpCheckSeqNum+0x74>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 8007288:	440b      	add	r3, r1
 800728a:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800728c:	2b00      	cmp	r3, #0
 800728e:	da02      	bge.n	8007296 <tcpCheckSeqNum+0x74>
      {
         acceptable = TRUE;
 8007290:	2301      	movs	r3, #1
 8007292:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8007294:	e043      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800729a:	e040      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length != 0 && socket->rcvWnd == 0)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <tcpCheckSeqNum+0x90>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <tcpCheckSeqNum+0x90>
   {
      //If segment length is non zero and receive window is zero, then the
      //sequence number is not acceptable
      acceptable = FALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e035      	b.n	800731e <tcpCheckSeqNum+0xfc>
   else
   {
      //If both segment length and receive window are non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND or
      //RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	db0e      	blt.n	80072e0 <tcpCheckSeqNum+0xbe>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072cc:	68f9      	ldr	r1, [r7, #12]
 80072ce:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 80072d2:	440b      	add	r3, r1
 80072d4:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da02      	bge.n	80072e0 <tcpCheckSeqNum+0xbe>
      {
         acceptable = TRUE;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e01e      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	441a      	add	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	3b01      	subs	r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	db11      	blt.n	800731a <tcpCheckSeqNum+0xf8>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	441a      	add	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 800730a:	440b      	add	r3, r1
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8007310:	2b00      	cmp	r3, #0
 8007312:	da02      	bge.n	800731a <tcpCheckSeqNum+0xf8>
      {
         acceptable = TRUE;
 8007314:	2301      	movs	r3, #1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	e001      	b.n	800731e <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d118      	bne.n	8007356 <tcpCheckSeqNum+0x134>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment should
      //be sent in reply (unless the RST bit is set)
      if((segment->flags & TCP_FLAG_RST) == 0)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	7b5b      	ldrb	r3, [r3, #13]
 8007328:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800732c:	b2db      	uxtb	r3, r3
 800732e:	f003 0304 	and.w	r3, r3, #4
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10d      	bne.n	8007352 <tcpCheckSeqNum+0x130>
      {
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007342:	2100      	movs	r1, #0
 8007344:	9101      	str	r1, [sp, #4]
 8007346:	2100      	movs	r1, #0
 8007348:	9100      	str	r1, [sp, #0]
 800734a:	2110      	movs	r1, #16
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fbf3 	bl	8006b38 <tcpSendSegment>
            0, FALSE);
      }

      //Return status code
      return ERROR_FAILURE;
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <tcpCheckSeqNum+0x136>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
   //Check whether the SYN bit is set
   if((segment->flags & TCP_FLAG_SYN) != 0)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	7b5b      	ldrb	r3, [r3, #13]
 8007370:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d01f      	beq.n	80073be <tcpCheckSyn+0x5e>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if((segment->flags & TCP_FLAG_ACK) != 0)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	7b5b      	ldrb	r3, [r3, #13]
 8007382:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <tcpCheckSyn+0x3e>
      {
         tcpSendResetSegment(socket, segment->ackNum);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	4619      	mov	r1, r3
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7ff fd5a 	bl	8006e50 <tcpSendResetSegment>
 800739c:	e00d      	b.n	80073ba <tcpCheckSyn+0x5a>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 80073a6:	3301      	adds	r3, #1
 80073a8:	2200      	movs	r2, #0
 80073aa:	9201      	str	r2, [sp, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	9200      	str	r2, [sp, #0]
 80073b0:	2200      	movs	r2, #0
 80073b2:	2114      	movs	r1, #20
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f7ff fbbf 	bl	8006b38 <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <tcpCheckSyn+0x60>
   }

   //No error to report
   return NO_ERROR;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b08c      	sub	sp, #48	; 0x30
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	7b5b      	ldrb	r3, [r3, #13]
 80073d8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 0310 	and.w	r3, r3, #16
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e12e      	b.n	8007648 <tcpCheckAck+0x280>
      socket->keepAliveProbeCount = 0;
   }
#endif

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689a      	ldr	r2, [r3, #8]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da01      	bge.n	80073fe <tcpCheckAck+0x36>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e124      	b.n	8007648 <tcpCheckAck+0x280>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd0f      	ble.n	800742e <tcpCheckAck+0x66>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800741a:	2100      	movs	r1, #0
 800741c:	9101      	str	r1, [sp, #4]
 800741e:	2100      	movs	r1, #0
 8007420:	9100      	str	r1, [sp, #0]
 8007422:	2110      	movs	r1, #16
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	f7ff fb87 	bl	8006b38 <tcpSendSegment>
         FALSE);

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 800742a:	2301      	movs	r3, #1
 800742c:	e10c      	b.n	8007648 <tcpCheckAck+0x280>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68b9      	ldr	r1, [r7, #8]
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f947 	bl	80076c6 <tcpIsDuplicateAck>
 8007438:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fc02 	bl	8007c46 <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd7b      	ble.n	800754a <tcpCheckAck+0x182>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800746c:	429a      	cmp	r2, r3
 800746e:	d102      	bne.n	8007476 <tcpCheckAck+0xae>
      {
         n--;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	3b01      	subs	r3, #1
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
      }

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 fcba 	bl	8007e0a <tcpComputeRto>
 8007496:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fa91 	bl	80079c0 <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d105      	bne.n	80074b4 <tcpCheckAck+0xec>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 80074a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074aa:	68b9      	ldr	r1, [r7, #8]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 f976 	bl	800779e <tcpFastRecovery>
 80074b2:	e03c      	b.n	800752e <tcpCheckAck+0x166>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d103      	bne.n	80074ce <tcpCheckAck+0x106>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f9af 	bl	800782c <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 80074da:	429a      	cmp	r2, r3
 80074dc:	d211      	bcs.n	8007502 <tcpCheckAck+0x13a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80074ea:	4619      	mov	r1, r3
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	428b      	cmp	r3, r1
 80074f0:	bf28      	it	cs
 80074f2:	460b      	movcs	r3, r1
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	4413      	add	r3, r2
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8007500:	e015      	b.n	800752e <tcpCheckAck+0x166>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d012      	beq.n	800752e <tcpCheckAck+0x166>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007514:	4619      	mov	r1, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800751c:	428b      	cmp	r3, r1
 800751e:	bf28      	it	cs
 8007520:	460b      	movcs	r3, r1
 8007522:	b29b      	uxth	r3, r3
 8007524:	4413      	add	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	f8b2 20e2 	ldrh.w	r2, [r2, #226]	; 0xe2
 800753a:	4293      	cmp	r3, r2
 800753c:	bf28      	it	cs
 800753e:	4613      	movcs	r3, r2
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8007548:	e07a      	b.n	8007640 <tcpCheckAck+0x278>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <tcpCheckAck+0x198>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800755e:	e003      	b.n	8007568 <tcpCheckAck+0x1a0>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d146      	bne.n	8007600 <tcpCheckAck+0x238>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 8007572:	2303      	movs	r3, #3
 8007574:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00c      	beq.n	80075aa <tcpCheckAck+0x1e2>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8007596:	4619      	mov	r1, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	4299      	cmp	r1, r3
 80075a8:	d817      	bhi.n	80075da <tcpCheckAck+0x212>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80075b0:	461a      	mov	r2, r3
 80075b2:	4613      	mov	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	4413      	add	r3, r2
 80075b8:	461a      	mov	r2, r3
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	4293      	cmp	r3, r2
 80075be:	d802      	bhi.n	80075c6 <tcpCheckAck+0x1fe>
            {
               thresh = 1;
 80075c0:	2301      	movs	r3, #1
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	e009      	b.n	80075da <tcpCheckAck+0x212>
            }
            else if(ownd <= (4 * socket->smss))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	461a      	mov	r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d801      	bhi.n	80075da <tcpCheckAck+0x212>
            {
               thresh = 2;
 80075d6:	2302      	movs	r3, #2
 80075d8:	623b      	str	r3, [r7, #32]
            {
            }
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075e0:	6a3a      	ldr	r2, [r7, #32]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d81f      	bhi.n	8007626 <tcpCheckAck+0x25e>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	3b01      	subs	r3, #1
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dd16      	ble.n	8007626 <tcpCheckAck+0x25e>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f895 	bl	8007728 <tcpFastRetransmit>
 80075fe:	e012      	b.n	8007626 <tcpCheckAck+0x25e>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d10d      	bne.n	8007626 <tcpCheckAck+0x25e>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <tcpCheckAck+0x25e>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800761c:	4413      	add	r3, r2
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	f8b2 20e2 	ldrh.w	r2, [r2, #226]	; 0xe2
 8007632:	4293      	cmp	r3, r2
 8007634:	bf28      	it	cs
 8007636:	4613      	movcs	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fe39 	bl	80082b8 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 800765c:	2300      	movs	r3, #0
 800765e:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007666:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 8007668:	e023      	b.n	80076b2 <tcpIsDuplicateSyn+0x62>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2b04      	cmp	r3, #4
 8007670:	d11c      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	695b      	ldr	r3, [r3, #20]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8007676:	2b04      	cmp	r3, #4
 8007678:	d118      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 800767e:	2b0c      	cmp	r3, #12
 8007680:	d114      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	429a      	cmp	r2, r3
 800768c:	d10e      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8007696:	429a      	cmp	r2, r3
 8007698:	d108      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	8a1a      	ldrh	r2, [r3, #16]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d101      	bne.n	80076ac <tcpIsDuplicateSyn+0x5c>
            {
               //Duplicate SYN
               flag = TRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1d8      	bne.n	800766a <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 80076b8:	697b      	ldr	r3, [r7, #20]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b087      	sub	sp, #28
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d01c      	beq.n	800771a <tcpIsDuplicateAck+0x54>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d119      	bne.n	800771a <tcpIsDuplicateAck+0x54>
      {
         //The SYN and FIN bits are both off
         if((segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)) == 0)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d110      	bne.n	800771a <tcpIsDuplicateAck+0x54>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	689a      	ldr	r2, [r3, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007702:	429a      	cmp	r2, r3
 8007704:	d109      	bne.n	800771a <tcpIsDuplicateAck+0x54>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	89db      	ldrh	r3, [r3, #14]
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8007712:	429a      	cmp	r2, r3
 8007714:	d101      	bne.n	800771a <tcpIsDuplicateAck+0x54>
               {
                  //Duplicate ACK
                  flag = TRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	371c      	adds	r7, #28
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint32_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	461a      	mov	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	4293      	cmp	r3, r2
 8007750:	bf38      	it	cc
 8007752:	4613      	movcc	r3, r2
 8007754:	b29a      	uxth	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007762:	1e5a      	subs	r2, r3, #1
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fbd4 	bl	8007f18 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800777c:	4619      	mov	r1, r3
 800777e:	0049      	lsls	r1, r1, #1
 8007780:	440b      	add	r3, r1
 8007782:	b29b      	uxth	r3, r3
 8007784:	4413      	add	r3, r2
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
#endif
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	60b9      	str	r1, [r7, #8]
 80077a8:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd0a      	ble.n	80077d0 <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 80077ce:	e029      	b.n	8007824 <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fba1 	bl	8007f18 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 80077dc:	461a      	mov	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d209      	bcs.n	80077f8 <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      if(n >= socket->smss)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4293      	cmp	r3, r2
 8007804:	d30a      	bcc.n	800781c <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007812:	4413      	add	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd04      	ble.n	8007850 <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 800784e:	e006      	b.n	800785e <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fb61 	bl	8007f18 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2202      	movs	r2, #2
 800785a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b088      	sub	sp, #32
 800786a:	af02      	add	r7, sp, #8
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	4413      	add	r3, r2
 8007882:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	da0b      	bge.n	80078aa <tcpProcessSegmentData+0x44>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	4413      	add	r3, r2
 80078a0:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078a8:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 80078b8:	440b      	add	r3, r1
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dd07      	ble.n	80078d0 <tcpProcessSegmentData+0x6a>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	f8b2 20c6 	ldrh.w	r2, [r2, #198]	; 0xc6
 80078cc:	4413      	add	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 80078d0:	6979      	ldr	r1, [r7, #20]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 ff27 	bl	8008732 <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 80078e4:	f107 0210 	add.w	r2, r7, #16
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	4619      	mov	r1, r3
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f91d 	bl	8007b2e <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dd0e      	ble.n	8007920 <tcpProcessSegmentData+0xba>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800790e:	2100      	movs	r1, #0
 8007910:	9101      	str	r1, [sp, #4]
 8007912:	2100      	movs	r1, #0
 8007914:	9100      	str	r1, [sp, #0]
 8007916:	2110      	movs	r1, #16
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f7ff f90d 	bl	8006b38 <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 800791e:	e030      	b.n	8007982 <tcpProcessSegmentData+0x11c>
      length = rightEdge - leftEdge;
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	441a      	add	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      socket->rcvUser += length;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	b29b      	uxth	r3, r3
 8007942:	4413      	add	r3, r2
 8007944:	b29a      	uxth	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      socket->rcvWnd -= length;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	b29b      	uxth	r3, r3
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	b29a      	uxth	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800796c:	2100      	movs	r1, #0
 800796e:	9101      	str	r1, [sp, #4]
 8007970:	2100      	movs	r1, #0
 8007972:	9100      	str	r1, [sp, #0]
 8007974:	2110      	movs	r1, #16
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f7ff f8de 	bl	8006b38 <tcpSendSegment>
      tcpUpdateEvents(socket);
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fc9b 	bl	80082b8 <tcpUpdateEvents>
}
 8007982:	bf00      	nop
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f88d 	bl	8007ab2 <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8ac 	bl	8007af6 <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	33f4      	adds	r3, #244	; 0xf4
 80079a2:	2100      	movs	r1, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fb fa0b 	bl	8002dc0 <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80079b0:	2100      	movs	r1, #0
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fb fa04 	bl	8002dc0 <netBufferSetLength>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 80079c0:	b590      	push	{r4, r7, lr}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80079d2:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 80079d4:	e05b      	b.n	8007a8e <tcpUpdateRetransmitQueue+0xce>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	331c      	adds	r3, #28
 80079da:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	7b5b      	ldrb	r3, [r3, #13]
 80079e0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <tcpUpdateRetransmitQueue+0x34>
      {
         length = 1;
 80079ee:	2301      	movs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e010      	b.n	8007a16 <tcpUpdateRetransmitQueue+0x56>
      }
      else if(header->flags & TCP_FLAG_FIN)
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	7b5b      	ldrb	r3, [r3, #13]
 80079f8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <tcpUpdateRetransmitQueue+0x50>
      {
         length = queueItem->length + 1;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	e002      	b.n	8007a16 <tcpUpdateRetransmitQueue+0x56>
      }
      else
      {
         length = queueItem->length;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	617b      	str	r3, [r7, #20]
      }

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7f9 fb98 	bl	8001156 <swapInt32>
 8007a26:	4602      	mov	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	1ae3      	subs	r3, r4, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	db28      	blt.n	8007a84 <tcpUpdateRetransmitQueue+0xc4>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10c      	bne.n	8007a52 <tcpUpdateRetransmitQueue+0x92>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
            //The item can now be safely deleted
            memPoolFree(queueItem);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7fb f94a 	bl	8002cdc <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e009      	b.n	8007a66 <tcpUpdateRetransmitQueue+0xa6>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f7fb f93e 	bl	8002cdc <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f7fb fed9 	bl	800382c <netStartTimer>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8007a82:	e004      	b.n	8007a8e <tcpUpdateRetransmitQueue+0xce>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1a0      	bne.n	80079d6 <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <tcpUpdateRetransmitQueue+0xea>
      netStopTimer(&socket->retransmitTimer);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7fb fed5 	bl	8003854 <netStopTimer>
}
 8007aaa:	bf00      	nop
 8007aac:	371c      	adds	r7, #28
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd90      	pop	{r4, r7, pc}

08007ab2 <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007ac0:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 8007ac2:	e007      	b.n	8007ad4 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7fb f906 	bl	8002cdc <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f4      	bne.n	8007ac4 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

   //Turn off the retransmission timer
   netStopTimer(&socket->retransmitTimer);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fb feb3 	bl	8003854 <netStopTimer>
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b04:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 8007b06:	e007      	b.n	8007b18 <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7fb f8e4 	bl	8002cdc <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f4      	bne.n	8007b08 <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	60b9      	str	r1, [r7, #8]
 8007b38:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 8007b3e:	e04e      	b.n	8007bde <tcpUpdateSackBlocks+0xb0>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	68f9      	ldr	r1, [r7, #12]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	334a      	adds	r3, #74	; 0x4a
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	440b      	add	r3, r1
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	db40      	blt.n	8007bd8 <tcpUpdateSackBlocks+0xaa>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	334a      	adds	r3, #74	; 0x4a
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	440b      	add	r3, r1
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	dc35      	bgt.n	8007bd8 <tcpUpdateSackBlocks+0xaa>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	334a      	adds	r3, #74	; 0x4a
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	4413      	add	r3, r2
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf28      	it	cs
 8007b80:	461a      	movcs	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	334a      	adds	r3, #74	; 0x4a
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4413      	add	r3, r2
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf38      	it	cc
 8007b9a:	461a      	movcc	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	601a      	str	r2, [r3, #0]

         //Delete current block
         osMemmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	18d0      	adds	r0, r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	18d1      	adds	r1, r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f1c3 0303 	rsb	r3, r3, #3
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f00a ff85 	bl	8012ad2 <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8007bce:	1e5a      	subs	r2, r3, #1
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8007bd6:	e002      	b.n	8007bde <tcpUpdateSackBlocks+0xb0>
      }
      else
      {
         //Point to the next block
         i++;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3aa      	bcc.n	8007b40 <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dd21      	ble.n	8007c3e <tcpUpdateSackBlocks+0x110>
   {
      //Make room for the new non-contiguous block
      osMemmove(socket->sackBlock + 1, socket->sackBlock,
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007c00:	f103 0008 	add.w	r0, r3, #8
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8007c0a:	2218      	movs	r2, #24
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f00a ff60 	bl	8012ad2 <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
      socket->sackBlock[0].rightEdge = *rightEdge;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d806      	bhi.n	8007c3e <tcpUpdateSackBlocks+0x110>
         socket->sackBlockCount++;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   }
}
 8007c3e:	bf00      	nop
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d12c      	bne.n	8007cb8 <tcpUpdateSendWindow+0x72>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d125      	bne.n	8007cb8 <tcpUpdateSendWindow+0x72>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	89db      	ldrh	r3, [r3, #14]
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d968      	bls.n	8007d4e <tcpUpdateSendWindow+0x108>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	89db      	ldrh	r3, [r3, #14]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
         socket->sndWl1 = segment->seqNum;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
         socket->sndWl2 = segment->ackNum;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	89db      	ldrh	r3, [r3, #14]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bf38      	it	cc
 8007cac:	4613      	movcc	r3, r2
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
      if(segment->window > socket->sndWnd)
 8007cb6:	e04a      	b.n	8007d4e <tcpUpdateSendWindow+0x108>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	db42      	blt.n	8007d4e <tcpUpdateSendWindow+0x108>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007cd2:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	db3a      	blt.n	8007d4e <tcpUpdateSendWindow+0x108>
   {
      //Check whether the remote host advertises a zero window
      if(segment->window == 0 && socket->sndWnd != 0)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	89db      	ldrh	r3, [r3, #14]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d117      	bne.n	8007d12 <tcpUpdateSendWindow+0xcc>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d012      	beq.n	8007d12 <tcpUpdateSendWindow+0xcc>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
         netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fb fd8d 	bl	800382c <netStartTimer>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	89db      	ldrh	r3, [r3, #14]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      socket->sndWl1 = segment->seqNum;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      socket->sndWl2 = segment->ackNum;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	89db      	ldrh	r3, [r3, #14]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bf38      	it	cc
 8007d42:	4613      	movcc	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
   }
}
 8007d4c:	e7ff      	b.n	8007d4e <tcpUpdateSendWindow+0x108>
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <tcpUpdateReceiveWindow>:
 * @brief Update receive window so as to avoid Silly Window Syndrome
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateReceiveWindow(Socket *socket)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af02      	add	r7, sp, #8
 8007d5c:	6078      	str	r0, [r7, #4]
   uint16_t reduction;

   //Space available but not yet advertised
   reduction = socket->rxBufferSize - socket->rcvUser - socket->rcvWnd;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	81fb      	strh	r3, [r7, #14]

   //To avoid SWS, the receiver should not advertise small windows
   if((socket->rcvWnd + reduction) >= MIN(socket->rmss, socket->rxBufferSize / 2))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8007d80:	461a      	mov	r2, r3
 8007d82:	89fb      	ldrh	r3, [r7, #14]
 8007d84:	4413      	add	r3, r2
 8007d86:	4619      	mov	r1, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8007d96:	4293      	cmp	r3, r2
 8007d98:	bf28      	it	cs
 8007d9a:	4613      	movcs	r3, r2
 8007d9c:	4299      	cmp	r1, r3
 8007d9e:	d330      	bcc.n	8007e02 <tcpUpdateReceiveWindow+0xac>
   {
      //Check whether a window update should be sent
      if(socket->rcvWnd < MIN(socket->rmss, socket->rxBufferSize / 2))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8007da6:	4619      	mov	r1, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	f8b2 209e 	ldrh.w	r2, [r2, #158]	; 0x9e
 8007db6:	4293      	cmp	r3, r2
 8007db8:	bf28      	it	cs
 8007dba:	4613      	movcs	r3, r2
 8007dbc:	4299      	cmp	r1, r3
 8007dbe:	d217      	bcs.n	8007df0 <tcpUpdateReceiveWindow+0x9a>
         //Debug message
         TRACE_INFO("%s: TCP sending window update...\r\n",
            formatSystemTime(osGetSystemTime(), NULL));

         //Update the receive window
         socket->rcvWnd += reduction;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 8007dc6:	89fb      	ldrh	r3, [r7, #14]
 8007dc8:	4413      	add	r3, r2
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
         //Send an ACK segment to advertise the new window size
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0, FALSE);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007dde:	2100      	movs	r1, #0
 8007de0:	9101      	str	r1, [sp, #4]
 8007de2:	2100      	movs	r1, #0
 8007de4:	9100      	str	r1, [sp, #0]
 8007de6:	2110      	movs	r1, #16
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fe fea5 	bl	8006b38 <tcpSendSegment>
      {
         //The receive window can be updated
         socket->rcvWnd += reduction;
      }
   }
}
 8007dee:	e008      	b.n	8007e02 <tcpUpdateReceiveWindow+0xac>
         socket->rcvWnd += reduction;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 8007df6:	89fb      	ldrh	r3, [r7, #14]
 8007df8:	4413      	add	r3, r2
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
}
 8007e02:	bf00      	nop
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d076      	beq.n	8007f0e <tcpComputeRto+0x104>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dd6d      	ble.n	8007f0e <tcpComputeRto+0x104>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 8007e32:	f7f9 fb1d 	bl	8001470 <osGetSystemTime>
 8007e36:	4602      	mov	r2, r0
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(socket->srtt == 0 && socket->rttvar == 0)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10e      	bne.n	8007e6a <tcpComputeRto+0x60>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <tcpComputeRto+0x60>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            socket->rttvar = r / 2;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	085a      	lsrs	r2, r3, #1
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007e68:	e029      	b.n	8007ebe <tcpComputeRto+0xb4>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d905      	bls.n	8007e82 <tcpComputeRto+0x78>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	e004      	b.n	8007e8c <tcpComputeRto+0x82>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8007e94:	4613      	mov	r3, r2
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	441a      	add	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	089a      	lsrs	r2, r3, #2
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            socket->srtt = (7 * socket->srtt + r) / 8;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007eac:	4613      	mov	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	1a9a      	subs	r2, r3, r2
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	08da      	lsrs	r2, r3, #3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	441a      	add	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ede:	bf38      	it	cc
 8007ee0:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ef2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	bf28      	it	cs
 8007efa:	461a      	movcs	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
         //Set flag
         flag = TRUE;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 8007f0e:	697b      	ldr	r3, [r7, #20]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 8007f18:	b5b0      	push	{r4, r5, r7, lr}
 8007f1a:	b090      	sub	sp, #64	; 0x40
 8007f1c:	af02      	add	r7, sp, #8
 8007f1e:	6078      	str	r0, [r7, #4]
   TcpQueueItem *queueItem;
   TcpHeader *header;
   NetTxAncillary ancillary;

   //Initialize error code
   error = NO_ERROR;
 8007f20:	2300      	movs	r3, #0
 8007f22:	86fb      	strh	r3, [r7, #54]	; 0x36
   //Total number of bytes that have been retransmitted
   length = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	633b      	str	r3, [r7, #48]	; 0x30

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8007f2e:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 8007f30:	e074      	b.n	800801c <tcpRetransmitSegment+0x104>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f38:	4413      	add	r3, r2
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8007f42:	461a      	mov	r2, r3
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d902      	bls.n	8007f50 <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 8007f4e:	e06a      	b.n	8008026 <tcpRetransmitSegment+0x10e>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8007f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f52:	331c      	adds	r3, #28
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8007f56:	f107 0320 	add.w	r3, r7, #32
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f7fa fba5 	bl	80026ac <ipAllocBuffer>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24
      //Failed to allocate memory?
      if(buffer == NULL)
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8007f6a:	2364      	movs	r3, #100	; 0x64
 8007f6c:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 8007f6e:	e05a      	b.n	8008026 <tcpRetransmitSegment+0x10e>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 8007f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f72:	7b1b      	ldrb	r3, [r3, #12]
 8007f74:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f82:	f7fb f95b 	bl	800323c <netBufferAppend>
 8007f86:	4603      	mov	r3, r0
 8007f88:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Any error to report?
         if(error)
 8007f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d139      	bne.n	8008004 <tcpRetransmitSegment+0xec>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 8007f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f9 f8de 	bl	8001156 <swapInt32>
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fb76 	bl	8008694 <tcpReadTxBuffer>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	86fb      	strh	r3, [r7, #54]	; 0x36
            queueItem->length);
         //Any error to report?
         if(error)
 8007fac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d12a      	bne.n	8008008 <tcpRetransmitSegment+0xf0>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	6859      	ldr	r1, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fc4:	f000 fc52 	bl	800886c <tcpDumpHeader>

         //Additional options can be passed to the stack along with the packet
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <tcpRetransmitSegment+0x118>)
 8007fca:	f107 0408 	add.w	r4, r7, #8
 8007fce:	461d      	mov	r5, r3
 8007fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007fd8:	e884 0003 	stmia.w	r4, {r0, r1}
         //Set the TTL value to be used
         ancillary.ttl = socket->ttl;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fe2:	723b      	strb	r3, [r7, #8]
         ancillary.vmanPcp = socket->vmanPcp;
         ancillary.vmanDei = socket->vmanDei;
#endif
         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68d8      	ldr	r0, [r3, #12]
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	f103 010c 	add.w	r1, r3, #12
 8007fee:	6a3a      	ldr	r2, [r7, #32]
 8007ff0:	f107 0308 	add.w	r3, r7, #8
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffa:	f7fa f9b1 	bl	8002360 <ipSendDatagram>
 8007ffe:	4603      	mov	r3, r0
 8008000:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008002:	e002      	b.n	800800a <tcpRetransmitSegment+0xf2>
            break;
 8008004:	bf00      	nop
 8008006:	e000      	b.n	800800a <tcpRetransmitSegment+0xf2>
            break;
 8008008:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 800800a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800800c:	f7fa fea4 	bl	8002d58 <netBufferFree>

      //Any error to report?
      if(error)
 8008010:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <tcpRetransmitSegment+0x10c>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8008016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	62fb      	str	r3, [r7, #44]	; 0x2c
   while(queueItem != NULL)
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d187      	bne.n	8007f32 <tcpRetransmitSegment+0x1a>
 8008022:	e000      	b.n	8008026 <tcpRetransmitSegment+0x10e>
         break;
 8008024:	bf00      	nop
   }

   //Return status code
   return error;
 8008026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8008028:	4618      	mov	r0, r3
 800802a:	3738      	adds	r7, #56	; 0x38
 800802c:	46bd      	mov	sp, r7
 800802e:	bdb0      	pop	{r4, r5, r7, pc}
 8008030:	08014540 	.word	0x08014540

08008034 <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af02      	add	r7, sp, #8
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
   uint32_t n;
   uint32_t u;

   //The amount of data that can be sent at any given time is limited by the
   //receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 800804a:	4293      	cmp	r3, r2
 800804c:	bf28      	it	cs
 800804e:	4613      	movcs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8008058:	461a      	mov	r2, r3
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4293      	cmp	r3, r2
 800805e:	bf28      	it	cs
 8008060:	4613      	movcs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when the data to be
   //sent increases in small increments
   while(socket->sndUser > 0)
 8008078:	e0e1      	b.n	800823e <tcpNagleAlgo+0x20a>
   {
      //The usable window size may become zero or negative, preventing packet
      //transmission
      if((int32_t) u <= 0)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f340 80e5 	ble.w	800824c <tcpNagleAlgo+0x218>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008088:	461a      	mov	r2, r3
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	4293      	cmp	r3, r2
 800808e:	bf28      	it	cs
 8008090:	4613      	movcs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800809a:	461a      	mov	r2, r3
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4293      	cmp	r3, r2
 80080a0:	bf28      	it	cs
 80080a2:	4613      	movcs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if((flags & SOCKET_FLAG_NO_DELAY) != 0)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01a      	beq.n	80080e6 <tcpNagleAlgo+0xb2>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80cc 	beq.w	8008250 <tcpNagleAlgo+0x21c>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80080c4:	2301      	movs	r3, #1
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	460b      	mov	r3, r1
 80080ce:	2118      	movs	r1, #24
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7fe fd31 	bl	8006b38 <tcpSendSegment>
 80080d6:	4603      	mov	r3, r0
 80080d8:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80080da:	89fb      	ldrh	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f000 8098 	beq.w	8008212 <tcpNagleAlgo+0x1de>
               return error;
 80080e2:	89fb      	ldrh	r3, [r7, #14]
 80080e4:	e0bd      	b.n	8008262 <tcpNagleAlgo+0x22e>
         {
            //We are done...
            break;
         }
      }
      else if((flags & SOCKET_FLAG_DELAY) != 0)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d023      	beq.n	8008138 <tcpNagleAlgo+0x104>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80080f6:	461a      	mov	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	4293      	cmp	r3, r2
 80080fc:	bf28      	it	cs
 80080fe:	4613      	movcs	r3, r2
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 8008106:	4293      	cmp	r3, r2
 8008108:	f0c0 80a4 	bcc.w	8008254 <tcpNagleAlgo+0x220>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008118:	2301      	movs	r3, #1
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	460b      	mov	r3, r1
 8008122:	2118      	movs	r1, #24
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fe fd07 	bl	8006b38 <tcpSendSegment>
 800812a:	4603      	mov	r3, r0
 800812c:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 800812e:	89fb      	ldrh	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d06e      	beq.n	8008212 <tcpNagleAlgo+0x1de>
               return error;
 8008134:	89fb      	ldrh	r3, [r7, #14]
 8008136:	e094      	b.n	8008262 <tcpNagleAlgo+0x22e>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800813e:	461a      	mov	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	4293      	cmp	r3, r2
 8008144:	bf28      	it	cs
 8008146:	4613      	movcs	r3, r2
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 800814e:	4293      	cmp	r3, r2
 8008150:	d315      	bcc.n	800817e <tcpNagleAlgo+0x14a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800815e:	2301      	movs	r3, #1
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	460b      	mov	r3, r1
 8008168:	2118      	movs	r1, #24
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fe fce4 	bl	8006b38 <tcpSendSegment>
 8008170:	4603      	mov	r3, r0
 8008172:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8008174:	89fb      	ldrh	r3, [r7, #14]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d04b      	beq.n	8008212 <tcpNagleAlgo+0x1de>
               return error;
 800817a:	89fb      	ldrh	r3, [r7, #14]
 800817c:	e071      	b.n	8008262 <tcpNagleAlgo+0x22e>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800818a:	429a      	cmp	r2, r3
 800818c:	d11c      	bne.n	80081c8 <tcpNagleAlgo+0x194>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008194:	461a      	mov	r2, r3
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	4293      	cmp	r3, r2
 800819a:	d315      	bcc.n	80081c8 <tcpNagleAlgo+0x194>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80081a8:	2301      	movs	r3, #1
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	460b      	mov	r3, r1
 80081b2:	2118      	movs	r1, #24
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fe fcbf 	bl	8006b38 <tcpSendSegment>
 80081ba:	4603      	mov	r3, r0
 80081bc:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80081be:	89fb      	ldrh	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d026      	beq.n	8008212 <tcpNagleAlgo+0x1de>
               return error;
 80081c4:	89fb      	ldrh	r3, [r7, #14]
 80081c6:	e04c      	b.n	8008262 <tcpNagleAlgo+0x22e>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80081ce:	461a      	mov	r2, r3
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bf28      	it	cs
 80081d6:	4613      	movcs	r3, r2
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 80081de:	0852      	lsrs	r2, r2, #1
 80081e0:	b292      	uxth	r2, r2
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d338      	bcc.n	8008258 <tcpNagleAlgo+0x224>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80081f2:	2301      	movs	r3, #1
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	460b      	mov	r3, r1
 80081fc:	2118      	movs	r1, #24
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fe fc9a 	bl	8006b38 <tcpSendSegment>
 8008204:	4603      	mov	r3, r0
 8008206:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8008208:	89fb      	ldrh	r3, [r7, #14]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <tcpNagleAlgo+0x1de>
               return error;
 800820e:	89fb      	ldrh	r3, [r7, #14]
 8008210:	e027      	b.n	8008262 <tcpNagleAlgo+0x22e>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	b29b      	uxth	r3, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
      //Update the size of the usable window
      u -= n;
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008244:	2b00      	cmp	r3, #0
 8008246:	f47f af18 	bne.w	800807a <tcpNagleAlgo+0x46>
 800824a:	e006      	b.n	800825a <tcpNagleAlgo+0x226>
         break;
 800824c:	bf00      	nop
 800824e:	e004      	b.n	800825a <tcpNagleAlgo+0x226>
            break;
 8008250:	bf00      	nop
 8008252:	e002      	b.n	800825a <tcpNagleAlgo+0x226>
            break;
 8008254:	bf00      	nop
 8008256:	e000      	b.n	800825a <tcpNagleAlgo+0x226>
            break;
 8008258:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f82c 	bl	80082b8 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d112      	bne.n	80082a2 <tcpChangeState+0x38>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008282:	2b06      	cmp	r3, #6
 8008284:	d004      	beq.n	8008290 <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      if(socket->state == TCP_STATE_LAST_ACK ||
 800828c:	2b0a      	cmp	r3, #10
 800828e:	d104      	bne.n	800829a <tcpChangeState+0x30>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8008298:	e003      	b.n	80082a2 <tcpChangeState+0x38>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      }
   }

   //Enter the desired state
   socket->state = newState;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   //Update TCP related events
   tcpUpdateEvents(socket);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f804 	bl	80082b8 <tcpUpdateEvents>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check current TCP state
   switch(socket->state)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80082ce:	2b0a      	cmp	r3, #10
 80082d0:	d85c      	bhi.n	800838c <tcpUpdateEvents+0xd4>
 80082d2:	a201      	add	r2, pc, #4	; (adr r2, 80082d8 <tcpUpdateEvents+0x20>)
 80082d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d8:	0800835b 	.word	0x0800835b
 80082dc:	0800838d 	.word	0x0800838d
 80082e0:	0800838d 	.word	0x0800838d
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	08008305 	.word	0x08008305
 80082ec:	08008339 	.word	0x08008339
 80082f0:	08008339 	.word	0x08008339
 80082f4:	08008305 	.word	0x08008305
 80082f8:	08008317 	.word	0x08008317
 80082fc:	08008339 	.word	0x08008339
 8008300:	0800835b 	.word	0x0800835b
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800830a:	f043 0202 	orr.w	r2, r3, #2
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8008314:	e03b      	b.n	800838e <tcpUpdateEvents+0xd6>

   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800831c:	f043 0202 	orr.w	r2, r3, #2
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800832c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8008336:	e02a      	b.n	800838e <tcpUpdateEvents+0xd6>

   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833e:	f043 0202 	orr.w	r2, r3, #2
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8008358:	e019      	b.n	800838e <tcpUpdateEvents+0xd6>

   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008360:	f043 0204 	orr.w	r2, r3, #4
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008380:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 800838a:	e000      	b.n	800838e <tcpUpdateEvents+0xd6>

   //Any other state
   default:
      break;
 800838c:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008394:	2b02      	cmp	r3, #2
 8008396:	d004      	beq.n	80083a2 <tcpUpdateEvents+0xea>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_SYN_SENT ||
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d110      	bne.n	80083c4 <tcpUpdateEvents+0x10c>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a8:	f043 0210 	orr.w	r2, r3, #16
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b8:	f043 0220 	orr.w	r2, r3, #32
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80083c2:	e060      	b.n	8008486 <tcpUpdateEvents+0x1ce>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d004      	beq.n	80083d8 <tcpUpdateEvents+0x120>
      socket->state == TCP_STATE_CLOSE_WAIT)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d137      	bne.n	8008448 <tcpUpdateEvents+0x190>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083e6:	441a      	add	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d207      	bcs.n	800840a <tcpUpdateEvents+0x152>
      {
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008400:	f043 0208 	orr.w	r2, r3, #8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }

      //Check whether all the data in the send buffer has been transmitted
      if(socket->sndUser == 0)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d137      	bne.n	8008484 <tcpUpdateEvents+0x1cc>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841a:	f043 0210 	orr.w	r2, r3, #16
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	db26      	blt.n	8008484 <tcpUpdateEvents+0x1cc>
         {
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800843c:	f043 0220 	orr.w	r2, r3, #32
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      if(socket->sndUser == 0)
 8008446:	e01d      	b.n	8008484 <tcpUpdateEvents+0x1cc>
         }
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800844e:	2b01      	cmp	r3, #1
 8008450:	d019      	beq.n	8008486 <tcpUpdateEvents+0x1ce>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008458:	f043 0208 	orr.w	r2, r3, #8
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008468:	f043 0210 	orr.w	r2, r3, #16
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008478:	f043 0220 	orr.w	r2, r3, #32
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008482:	e000      	b.n	8008486 <tcpUpdateEvents+0x1ce>
      if(socket->sndUser == 0)
 8008484:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800848c:	2b04      	cmp	r3, #4
 800848e:	d009      	beq.n	80084a4 <tcpUpdateEvents+0x1ec>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8008496:	2b07      	cmp	r3, #7
 8008498:	d004      	beq.n	80084a4 <tcpUpdateEvents+0x1ec>
      socket->state == TCP_STATE_FIN_WAIT_2)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d10d      	bne.n	80084c0 <tcpUpdateEvents+0x208>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d035      	beq.n	800851a <tcpUpdateEvents+0x262>
      {
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      if(socket->rcvUser > 0)
 80084be:	e02c      	b.n	800851a <tcpUpdateEvents+0x262>
      }
   }
   else if(socket->state == TCP_STATE_LISTEN)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d115      	bne.n	80084f6 <tcpUpdateEvents+0x23e>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d022      	beq.n	800851a <tcpUpdateEvents+0x262>
      {
         socket->eventFlags |= SOCKET_EVENT_ACCEPT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084da:	f043 0201 	orr.w	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80084f4:	e011      	b.n	800851a <tcpUpdateEvents+0x262>
      }
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d00c      	beq.n	800851a <tcpUpdateEvents+0x262>
      socket->state != TCP_STATE_SYN_RECEIVED)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8008506:	2b03      	cmp	r3, #3
 8008508:	d007      	beq.n	800851a <tcpUpdateEvents+0x262>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008510:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d016      	beq.n	8008550 <tcpUpdateEvents+0x298>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <tcpUpdateEvents+0x288>
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008534:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800853e:	e007      	b.n	8008550 <tcpUpdateEvents+0x298>
      }
      else
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008546:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800855c:	401a      	ands	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Any event to signal?
   if(socket->eventFlags)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00f      	beq.n	800858e <tcpUpdateEvents+0x2d6>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3334      	adds	r3, #52	; 0x34
 8008572:	4618      	mov	r0, r3
 8008574:	f7f8 fef8 	bl	8001368 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <tcpUpdateEvents+0x2d6>
      {
         osSetEvent(socket->userEvent);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008588:	4618      	mov	r0, r3
 800858a:	f7f8 feed 	bl	8001368 <osSetEvent>
      }
   }
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop

08008598 <tcpWaitForEvents>:
 * @param[in] timeout Maximum time to wait
 * @return Logic OR of all the TCP events that satisfied the wait
 **/

uint_t tcpWaitForEvents(Socket *socket, uint_t eventMask, systime_t timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
   //Sanity check
   if(socket == NULL)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <tcpWaitForEvents+0x16>
      return 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e01f      	b.n	80085ee <tcpWaitForEvents+0x56>

   //Only one of the events listed here may complete the wait
   socket->eventMask = eventMask;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   //Update TCP related events
   tcpUpdateEvents(socket);
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff fe7e 	bl	80082b8 <tcpUpdateEvents>

   //No event is signaled?
   if(socket->eventFlags == 0)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d110      	bne.n	80085e8 <tcpWaitForEvents+0x50>
   {
      //Reset the event object
      osResetEvent(&socket->event);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3334      	adds	r3, #52	; 0x34
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7f8 fedb 	bl	8001386 <osResetEvent>

      //Release exclusive access
      osReleaseMutex(&netMutex);
 80085d0:	4809      	ldr	r0, [pc, #36]	; (80085f8 <tcpWaitForEvents+0x60>)
 80085d2:	f7f8 ff3e 	bl	8001452 <osReleaseMutex>
      //Wait until an event is triggered
      osWaitForEvent(&socket->event, timeout);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3334      	adds	r3, #52	; 0x34
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7f8 fee0 	bl	80013a2 <osWaitForEvent>
      //Get exclusive access
      osAcquireMutex(&netMutex);
 80085e2:	4805      	ldr	r0, [pc, #20]	; (80085f8 <tcpWaitForEvents+0x60>)
 80085e4:	f7f8 ff26 	bl	8001434 <osAcquireMutex>
   }

   //Return the list of TCP events that satisfied the wait
   return socket->eventFlags;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	20009178 	.word	0x20009178

080085fc <tcpWriteTxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteTxBuffer(Socket *socket, uint32_t seqNum,
   const uint8_t *data, size_t length)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	f8d2 2174 	ldr.w	r2, [r2, #372]	; 0x174
 800861c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008620:	fb02 f201 	mul.w	r2, r2, r1
 8008624:	1a9b      	subs	r3, r3, r2
 8008626:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	441a      	add	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008634:	429a      	cmp	r2, r3
 8008636:	d808      	bhi.n	800864a <tcpWriteTxBuffer+0x4e>
   {
      //Copy the payload
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6979      	ldr	r1, [r7, #20]
 8008644:	f7fa fe2d 	bl	80032a2 <netBufferWrite>
      //Wrap around to the beginning of the circular buffer
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
         data + socket->txBufferSize - offset,
         length - socket->txBufferSize + offset);
   }
}
 8008648:	e020      	b.n	800868c <tcpWriteTxBuffer+0x90>
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
         offset, data, socket->txBufferSize - offset);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6979      	ldr	r1, [r7, #20]
 800865e:	f7fa fe20 	bl	80032a2 <netBufferWrite>
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
         data + socket->txBufferSize - offset,
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	18d1      	adds	r1, r2, r3
         length - socket->txBufferSize + offset);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	1ad2      	subs	r2, r2, r3
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	4413      	add	r3, r2
 8008684:	460a      	mov	r2, r1
 8008686:	2100      	movs	r1, #0
 8008688:	f7fa fe0b 	bl	80032a2 <netBufferWrite>
}
 800868c:	bf00      	nop
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	f8d2 2174 	ldr.w	r2, [r2, #372]	; 0x174
 80086b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80086b8:	fb02 f201 	mul.w	r2, r2, r1
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d80a      	bhi.n	80086e6 <tcpReadTxBuffer+0x52>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fa fc49 	bl	8002f72 <netBufferConcat>
 80086e0:	4603      	mov	r3, r0
 80086e2:	82fb      	strh	r3, [r7, #22]
 80086e4:	e020      	b.n	8008728 <tcpReadTxBuffer+0x94>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
         offset, socket->txBufferSize - offset);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fa fc3a 	bl	8002f72 <netBufferConcat>
 80086fe:	4603      	mov	r3, r0
 8008700:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8008702:	8afb      	ldrh	r3, [r7, #22]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10f      	bne.n	8008728 <tcpReadTxBuffer+0x94>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
            0, length - socket->txBufferSize + offset);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	2200      	movs	r2, #0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fa fc27 	bl	8002f72 <netBufferConcat>
 8008724:	4603      	mov	r3, r0
 8008726:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8008728:	8afb      	ldrh	r3, [r7, #22]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b088      	sub	sp, #32
 8008736:	af02      	add	r7, sp, #8
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	f8d2 21f8 	ldr.w	r2, [r2, #504]	; 0x1f8
 8008752:	fbb3 f1f2 	udiv	r1, r3, r2
 8008756:	fb02 f201 	mul.w	r2, r2, r1
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	441a      	add	r2, r3
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800876a:	429a      	cmp	r2, r3
 800876c:	d80a      	bhi.n	8008784 <tcpWriteRxBuffer+0x52>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8008774:	6a3b      	ldr	r3, [r7, #32]
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6979      	ldr	r1, [r7, #20]
 800877e:	f7fa fc93 	bl	80030a8 <netBufferCopy>
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset,
         length - socket->rxBufferSize + offset);
   }
}
 8008782:	e024      	b.n	80087ce <tcpWriteRxBuffer+0x9c>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 70bc 	add.w	r0, r3, #376	; 0x178
         offset, data, dataOffset, socket->rxBufferSize - offset);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6979      	ldr	r1, [r7, #20]
 800879c:	f7fa fc84 	bl	80030a8 <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 70bc 	add.w	r0, r3, #376	; 0x178
         dataOffset + socket->rxBufferSize - offset,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	1ad1      	subs	r1, r2, r3
         length - socket->rxBufferSize + offset);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80087ba:	6a3a      	ldr	r2, [r7, #32]
 80087bc:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	460b      	mov	r3, r1
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	2100      	movs	r1, #0
 80087ca:	f7fa fc6d 	bl	80030a8 <netBufferCopy>
}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <tcpReadRxBuffer>:
 * @param[in] length Number of data to read
 **/

void tcpReadRxBuffer(Socket *socket, uint32_t seqNum, uint8_t *data,
   size_t length)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	f8d2 21f8 	ldr.w	r2, [r2, #504]	; 0x1f8
 80087f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087fa:	fb02 f201 	mul.w	r2, r2, r1
 80087fe:	1a9b      	subs	r3, r3, r2
 8008800:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	441a      	add	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800880e:	429a      	cmp	r2, r3
 8008810:	d808      	bhi.n	8008824 <tcpReadRxBuffer+0x4e>
   {
      //Copy the payload
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7fa fd99 	bl	8003354 <netBufferRead>
      //Wrap around to the beginning of the circular buffer
      netBufferRead(data + socket->rxBufferSize - offset,
         (NetBuffer *) &socket->rxBuffer, 0,
         length - socket->rxBufferSize + offset);
   }
}
 8008822:	e01f      	b.n	8008864 <tcpReadRxBuffer+0x8e>
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 71bc 	add.w	r1, r3, #376	; 0x178
         offset, socket->rxBufferSize - offset);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fa fd8c 	bl	8003354 <netBufferRead>
      netBufferRead(data + socket->rxBufferSize - offset,
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	18d0      	adds	r0, r2, r3
         (NetBuffer *) &socket->rxBuffer, 0,
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 71bc 	add.w	r1, r3, #376	; 0x178
         length - socket->rxBufferSize + offset);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	1ad2      	subs	r2, r2, r3
      netBufferRead(data + socket->rxBufferSize - offset,
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	4413      	add	r3, r2
 800885e:	2200      	movs	r2, #0
 8008860:	f7fa fd78 	bl	8003354 <netBufferRead>
}
 8008864:	bf00      	nop
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 800887a:	bf00      	nop
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
   uint_t i;
   Socket *socket;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800888e:	2300      	movs	r3, #0
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	e025      	b.n	80088e0 <tcpTick+0x58>
   {
      //Point to the current socket
      socket = &socketTable[i];
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	4a14      	ldr	r2, [pc, #80]	; (80088f0 <tcpTick+0x68>)
 80088a0:	4413      	add	r3, r2
 80088a2:	603b      	str	r3, [r7, #0]

      //TCP socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d116      	bne.n	80088da <tcpTick+0x52>
      {
         //Check current TCP state
         if(socket->state != TCP_STATE_CLOSED)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <tcpTick+0x52>
         {
            //Check retransmission timer
            tcpCheckRetransmitTimer(socket);
 80088b6:	6838      	ldr	r0, [r7, #0]
 80088b8:	f000 f81c 	bl	80088f4 <tcpCheckRetransmitTimer>
            //Check persist timer
            tcpCheckPersistTimer(socket);
 80088bc:	6838      	ldr	r0, [r7, #0]
 80088be:	f000 f8a2 	bl	8008a06 <tcpCheckPersistTimer>
            //Check TCP keep-alive timer
            tcpCheckKeepAliveTimer(socket);
 80088c2:	6838      	ldr	r0, [r7, #0]
 80088c4:	f000 f8fc 	bl	8008ac0 <tcpCheckKeepAliveTimer>
            //Check override timer
            tcpCheckOverrideTimer(socket);
 80088c8:	6838      	ldr	r0, [r7, #0]
 80088ca:	f000 f903 	bl	8008ad4 <tcpCheckOverrideTimer>
            //Check FIN-WAIT-2 timer
            tcpCheckFinWait2Timer(socket);
 80088ce:	6838      	ldr	r0, [r7, #0]
 80088d0:	f000 f997 	bl	8008c02 <tcpCheckFinWait2Timer>
            //Check 2MSL timer
            tcpCheckTimeWaitTimer(socket);
 80088d4:	6838      	ldr	r0, [r7, #0]
 80088d6:	f000 f9ae 	bl	8008c36 <tcpCheckTimeWaitTimer>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3301      	adds	r3, #1
 80088de:	607b      	str	r3, [r7, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b09      	cmp	r3, #9
 80088e4:	d9d6      	bls.n	8008894 <tcpTick+0xc>
         }
      }
   }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	20009990 	.word	0x20009990

080088f4 <tcpCheckRetransmitTimer>:
 * @brief Check retransmission timer
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckRetransmitTimer(Socket *socket)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d07b      	beq.n	80089fe <tcpCheckRetransmitTimer+0x10a>
   {
      //Any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800890c:	2b00      	cmp	r3, #0
 800890e:	d076      	beq.n	80089fe <tcpCheckRetransmitTimer+0x10a>
      {
         //Retransmission timeout?
         if(netTimerExpired(&socket->retransmitTimer))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008916:	4618      	mov	r0, r3
 8008918:	f7fa ffb5 	bl	8003886 <netTimerExpired>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d06d      	beq.n	80089fe <tcpCheckRetransmitTimer+0x10a>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(socket->retransmitCount == 0)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d115      	bne.n	8008958 <tcpCheckRetransmitTimer+0x64>
            {
               uint32_t flightSize;

               //Amount of data that has been sent but not yet acknowledged
               flightSize = socket->sndNxt - socket->sndUna;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	60fb      	str	r3, [r7, #12]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	461a      	mov	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	4293      	cmp	r3, r2
 800894c:	bf38      	it	cc
 800894e:	4613      	movcc	r3, r2
 8008950:	b29a      	uxth	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
            }

            //Furthermore, upon a timeout cwnd must be set to no more than the
            //loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 8008964:	4293      	cmp	r3, r2
 8008966:	bf28      	it	cs
 8008968:	4613      	movcs	r3, r2
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
               socket->txBufferSize);

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
#endif
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800898e:	2b04      	cmp	r3, #4
 8008990:	d820      	bhi.n	80089d4 <tcpCheckRetransmitTimer+0xe0>
                  socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been acknowledged
               //by the TCP receiver
               tcpRetransmitSegment(socket);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7ff fac0 	bl	8007f18 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80089a4:	429a      	cmp	r2, r3
 80089a6:	bf28      	it	cs
 80089a8:	461a      	movcs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
               //Restart retransmission timer
               netStartTimer(&socket->retransmitTimer, socket->rto);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80089bc:	4619      	mov	r1, r3
 80089be:	4610      	mov	r0, r2
 80089c0:	f7fa ff34 	bl	800382c <netStartTimer>
               //Increment retransmission counter
               socket->retransmitCount++;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 80089d2:	e010      	b.n	80089f6 <tcpCheckRetransmitTimer+0x102>
            }
            else
            {
               //Send a reset segment
               tcpSendResetSegment(socket, socket->sndNxt);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7fe fa37 	bl	8006e50 <tcpSendResetSegment>
               //Turn off the retransmission timer
               netStopTimer(&socket->retransmitTimer);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fa ff33 	bl	8003854 <netStopTimer>
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80089ee:	2100      	movs	r1, #0
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7ff fc3a 	bl	800826a <tcpChangeState>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
         }
      }
   }
}
 80089fe:	bf00      	nop
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <tcpCheckPersistTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckPersistTimer(Socket *socket)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af02      	add	r7, sp, #8
 8008a0c:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d04f      	beq.n	8008ab8 <tcpCheckPersistTimer+0xb2>
   {
      //Check whether the remote host advertises a window size of zero
      if(socket->sndWnd == 0 && socket->wndProbeInterval != 0)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d14a      	bne.n	8008ab8 <tcpCheckPersistTimer+0xb2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d045      	beq.n	8008ab8 <tcpCheckPersistTimer+0xb2>
      {
         //Persist timer expired?
         if(netTimerExpired(&socket->persistTimer))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fa ff27 	bl	8003886 <netTimerExpired>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d03c      	beq.n	8008ab8 <tcpCheckPersistTimer+0xb2>
         {
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d82c      	bhi.n	8008aa2 <tcpCheckPersistTimer+0x9c>
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less
               //than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndUna - 1,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a4e:	1e5a      	subs	r2, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008a56:	2100      	movs	r1, #0
 8008a58:	9101      	str	r1, [sp, #4]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	9100      	str	r1, [sp, #0]
 8008a5e:	2110      	movs	r1, #16
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7fe f869 	bl	8006b38 <tcpSendSegment>
                  socket->rcvNxt, 0, FALSE);

               //The interval between successive probes should be increased
               //exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2,
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a6c:	005b      	lsls	r3, r3, #1
 8008a6e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008a72:	429a      	cmp	r2, r3
 8008a74:	bf28      	it	cs
 8008a76:	461a      	movcs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
                  TCP_MAX_PROBE_INTERVAL);

               //Restart the persist timer
               netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f503 7208 	add.w	r2, r3, #544	; 0x220
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f7fa fecd 	bl	800382c <netStartTimer>
               //Increment window probe counter
               socket->wndProbeCount++;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008a98:	1c5a      	adds	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
               tcpChangeState(socket, TCP_STATE_CLOSED);
            }
         }
      }
   }
}
 8008aa0:	e00a      	b.n	8008ab8 <tcpCheckPersistTimer+0xb2>
               tcpSendResetSegment(socket, socket->sndNxt);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fe f9d0 	bl	8006e50 <tcpSendResetSegment>
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fbd9 	bl	800826a <tcpChangeState>
}
 8008ab8:	bf00      	nop
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <tcpCheckKeepAliveTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckKeepAliveTimer(Socket *socket)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
            }
         }
      }
   }
#endif
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <tcpCheckOverrideTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckOverrideTimer(Socket *socket)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t n;
   uint32_t u;

   //Check current TCP state
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008ae2:	2b04      	cmp	r3, #4
 8008ae4:	d005      	beq.n	8008af2 <tcpCheckOverrideTimer+0x1e>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8008aec:	2b05      	cmp	r3, #5
 8008aee:	f040 8084 	bne.w	8008bfa <tcpCheckOverrideTimer+0x126>
   {
      //Override timer expired?
      if(socket->sndUser && netTimerExpired(&socket->overrideTimer))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d07e      	beq.n	8008bfa <tcpCheckOverrideTimer+0x126>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fa febf 	bl	8003886 <netTimerExpired>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d075      	beq.n	8008bfa <tcpCheckOverrideTimer+0x126>
      {
         //The amount of data that can be sent at any given time is limited by
         //the receiver window and the congestion window
         n = MIN(socket->sndWnd, socket->txBufferSize);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	bf28      	it	cs
 8008b1e:	4613      	movcs	r3, r2
 8008b20:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Check the congestion window
         n = MIN(n, socket->cwnd);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8008b28:	461a      	mov	r2, r3
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bf28      	it	cs
 8008b30:	4613      	movcs	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
#endif
         //Retrieve the size of the usable window
         u = n - (socket->sndNxt - socket->sndUna);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4413      	add	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]

         //Send as much data as possible
         while(socket->sndUser > 0)
 8008b48:	e03e      	b.n	8008bc8 <tcpCheckOverrideTimer+0xf4>
         {
            //The usable window size may become zero or negative, preventing
            //packet transmission
            if((int32_t) u <= 0)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd41      	ble.n	8008bd4 <tcpCheckOverrideTimer+0x100>
               break;

            //Calculate the number of bytes to send at a time
            n = MIN(u, socket->sndUser);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008b56:	461a      	mov	r2, r3
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	bf28      	it	cs
 8008b5e:	4613      	movcs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
            n = MIN(n, socket->smss);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8008b68:	461a      	mov	r2, r3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bf28      	it	cs
 8008b70:	4613      	movcs	r3, r2
 8008b72:	613b      	str	r3, [r7, #16]

            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8008b80:	2301      	movs	r3, #1
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	2118      	movs	r1, #24
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7fd ffd3 	bl	8006b38 <tcpSendSegment>
 8008b92:	4603      	mov	r3, r0
 8008b94:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8008b96:	89fb      	ldrh	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11d      	bne.n	8008bd8 <tcpCheckOverrideTimer+0x104>
               break;

            //Advance SND.NXT pointer
            socket->sndNxt += n;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            //Adjust the number of bytes buffered but not yet sent
            socket->sndUser -= n;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
            //Update the size of the usable window
            u -= n;
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	617b      	str	r3, [r7, #20]
         while(socket->sndUser > 0)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1bb      	bne.n	8008b4a <tcpCheckOverrideTimer+0x76>
 8008bd2:	e002      	b.n	8008bda <tcpCheckOverrideTimer+0x106>
               break;
 8008bd4:	bf00      	nop
 8008bd6:	e000      	b.n	8008bda <tcpCheckOverrideTimer+0x106>
               break;
 8008bd8:	bf00      	nop
         }

         //Check whether the transmitter can accept more data
         tcpUpdateEvents(socket);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff fb6c 	bl	80082b8 <tcpUpdateEvents>

         //Restart override timer if necessary
         if(socket->sndUser > 0)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <tcpCheckOverrideTimer+0x126>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8008bf0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fa fe19 	bl	800382c <netStartTimer>
         }
      }
   }
}
 8008bfa:	bf00      	nop
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <tcpCheckFinWait2Timer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckFinWait2Timer(Socket *socket)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b082      	sub	sp, #8
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_FIN_WAIT_2)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d10c      	bne.n	8008c2e <tcpCheckFinWait2Timer+0x2c>
   {
      //FIN-WAIT-2 timer expired?
      if(netTimerExpired(&socket->finWait2Timer))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fa fe33 	bl	8003886 <netTimerExpired>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <tcpCheckFinWait2Timer+0x2c>
      {
         //Debug message
         TRACE_INFO("TCP FIN-WAIT-2 timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8008c26:	2100      	movs	r1, #0
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fb1e 	bl	800826a <tcpChangeState>
      }
   }
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <tcpCheckTimeWaitTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckTimeWaitTimer(Socket *socket)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_TIME_WAIT)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8008c44:	2b0a      	cmp	r3, #10
 8008c46:	d117      	bne.n	8008c78 <tcpCheckTimeWaitTimer+0x42>
   {
      //2MSL timer expired?
      if(netTimerExpired(&socket->timeWaitTimer))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fa fe19 	bl	8003886 <netTimerExpired>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00e      	beq.n	8008c78 <tcpCheckTimeWaitTimer+0x42>
      {
         //Debug message
         TRACE_INFO("TCP 2MSL timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fb04 	bl	800826a <tcpChangeState>

         //Dispose the socket if the user does not have the ownership anymore
         if(!socket->ownedFlag)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d105      	bne.n	8008c78 <tcpCheckTimeWaitTimer+0x42>
         {
            //Delete the TCB
            tcpDeleteControlBlock(socket);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fe fe8c 	bl	800798a <tcpDeleteControlBlock>
            //Mark the socket as closed
            socket->type = SOCKET_TYPE_UNUSED;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	605a      	str	r2, [r3, #4]
         }
      }
   }
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <udpInit+0x1c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	801a      	strh	r2, [r3, #0]

   //Initialize callback table
   osMemset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 8008c8a:	22a0      	movs	r2, #160	; 0xa0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4804      	ldr	r0, [pc, #16]	; (8008ca0 <udpInit+0x20>)
 8008c90:	f009 ff39 	bl	8012b06 <memset>

   //Successful initialization
   return NO_ERROR;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000338 	.word	0x20000338
 8008ca0:	2000b26c 	.word	0x2000b26c

08008ca4 <udpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t udpGetDynamicPort(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
   uint_t port;

   //Retrieve current port number
   port = udpDynamicPort;
 8008caa:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <udpGetDynamicPort+0x58>)
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	607b      	str	r3, [r7, #4]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008cb6:	d303      	bcc.n	8008cc0 <udpGetDynamicPort+0x1c>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbe:	d307      	bcc.n	8008cd0 <udpGetDynamicPort+0x2c>
   {
      //Generate a random port number
      port = SOCKET_EPHEMERAL_PORT_MIN + netGetRand() %
 8008cc0:	f7fa fe9a 	bl	80039f8 <netGetRand>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008cca:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8008cce:	607b      	str	r3, [r7, #4]
         (SOCKET_EPHEMERAL_PORT_MAX - SOCKET_EPHEMERAL_PORT_MIN + 1);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d806      	bhi.n	8008ce8 <udpGetDynamicPort+0x44>
   {
      //Increment port number
      udpDynamicPort = port + 1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3301      	adds	r3, #1
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <udpGetDynamicPort+0x58>)
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	e003      	b.n	8008cf0 <udpGetDynamicPort+0x4c>
   }
   else
   {
      //Wrap around if necessary
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <udpGetDynamicPort+0x58>)
 8008cea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008cee:	801a      	strh	r2, [r3, #0]
   }

   //Return an ephemeral port number
   return port;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	b29b      	uxth	r3, r3
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20000338 	.word	0x20000338

08008d00 <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 8008d00:	b590      	push	{r4, r7, lr}
 8008d02:	b08f      	sub	sp, #60	; 0x3c
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7fa f834 	bl	8002d7c <netBufferGetLength>
 8008d14:	4602      	mov	r2, r0
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	2b07      	cmp	r3, #7
 8008d20:	d801      	bhi.n	8008d26 <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 8008d22:	23d4      	movs	r3, #212	; 0xd4
 8008d24:	e138      	b.n	8008f98 <udpProcessDatagram+0x298>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7fa f8ef 	bl	8002f0c <netBufferAt>
 8008d2e:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e12e      	b.n	8008f98 <udpProcessDatagram+0x298>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8008d3a:	69f8      	ldr	r0, [r7, #28]
 8008d3c:	f000 fc0e 	bl	800955c <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	88db      	ldrh	r3, [r3, #6]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <udpProcessDatagram+0x52>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b28      	cmp	r3, #40	; 0x28
 8008d50:	d10e      	bne.n	8008d70 <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	1d18      	adds	r0, r3, #4
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	6819      	ldr	r1, [r3, #0]
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	f7f9 fc7a 	bl	800265a <ipCalcUpperLayerChecksumEx>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 8008d6c:	23d5      	movs	r3, #213	; 0xd5
 8008d6e:	e113      	b.n	8008f98 <udpProcessDatagram+0x298>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8008d70:	2300      	movs	r3, #0
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d74:	e065      	b.n	8008e42 <udpProcessDatagram+0x142>
   {
      //Point to the current socket
      socket = socketTable + i;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8008d7c:	fb02 f303 	mul.w	r3, r2, r3
 8008d80:	4a87      	ldr	r2, [pc, #540]	; (8008fa0 <udpProcessDatagram+0x2a0>)
 8008d82:	4413      	add	r3, r2
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d147      	bne.n	8008e1e <udpProcessDatagram+0x11e>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <udpProcessDatagram+0xa0>
 8008d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d140      	bne.n	8008e22 <udpProcessDatagram+0x122>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	8b1b      	ldrh	r3, [r3, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d03e      	beq.n	8008e26 <udpProcessDatagram+0x126>
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	8b1c      	ldrh	r4, [r3, #24]
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	885b      	ldrh	r3, [r3, #2]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f8 f9c1 	bl	800113a <swapInt16>
 8008db8:	4603      	mov	r3, r0
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d133      	bne.n	8008e26 <udpProcessDatagram+0x126>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <udpProcessDatagram+0xdc>
 8008dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc8:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7f8 f9b2 	bl	800113a <swapInt16>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	429c      	cmp	r4, r3
 8008dda:	d126      	bne.n	8008e2a <udpProcessDatagram+0x12a>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b0c      	cmp	r3, #12
 8008de2:	d124      	bne.n	8008e2e <udpProcessDatagram+0x12e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d009      	beq.n	8008e00 <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d11e      	bne.n	8008e32 <udpProcessDatagram+0x132>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d11a      	bne.n	8008e36 <udpProcessDatagram+0x136>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	69db      	ldr	r3, [r3, #28]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d020      	beq.n	8008e4a <udpProcessDatagram+0x14a>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	2b04      	cmp	r3, #4
 8008e0e:	d114      	bne.n	8008e3a <udpProcessDatagram+0x13a>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	6a1a      	ldr	r2, [r3, #32]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d016      	beq.n	8008e4a <udpProcessDatagram+0x14a>
               continue;
 8008e1c:	e00e      	b.n	8008e3c <udpProcessDatagram+0x13c>
         continue;
 8008e1e:	bf00      	nop
 8008e20:	e00c      	b.n	8008e3c <udpProcessDatagram+0x13c>
         continue;
 8008e22:	bf00      	nop
 8008e24:	e00a      	b.n	8008e3c <udpProcessDatagram+0x13c>
         continue;
 8008e26:	bf00      	nop
 8008e28:	e008      	b.n	8008e3c <udpProcessDatagram+0x13c>
         continue;
 8008e2a:	bf00      	nop
 8008e2c:	e006      	b.n	8008e3c <udpProcessDatagram+0x13c>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 8008e2e:	bf00      	nop
 8008e30:	e004      	b.n	8008e3c <udpProcessDatagram+0x13c>
               continue;
 8008e32:	bf00      	nop
 8008e34:	e002      	b.n	8008e3c <udpProcessDatagram+0x13c>
               continue;
 8008e36:	bf00      	nop
 8008e38:	e000      	b.n	8008e3c <udpProcessDatagram+0x13c>
               continue;
 8008e3a:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8008e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3e:	3301      	adds	r3, #1
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2b09      	cmp	r3, #9
 8008e46:	d996      	bls.n	8008d76 <udpProcessDatagram+0x76>
 8008e48:	e000      	b.n	8008e4c <udpProcessDatagram+0x14c>
      }

      //The current socket meets all the criteria
      break;
 8008e4a:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	3308      	adds	r3, #8
 8008e50:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	3b08      	subs	r3, #8
 8008e56:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2b09      	cmp	r3, #9
 8008e5c:	d90d      	bls.n	8008e7a <udpProcessDatagram+0x17a>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer,
 8008e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	69fa      	ldr	r2, [r7, #28]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f000 fb2f 	bl	80094d0 <udpInvokeRxCallback>
 8008e72:	4603      	mov	r3, r0
 8008e74:	82fb      	strh	r3, [r7, #22]
         offset, ancillary);
      //Return status code
      return error;
 8008e76:	8afb      	ldrh	r3, [r7, #22]
 8008e78:	e08e      	b.n	8008f98 <udpProcessDatagram+0x298>
   }

   //Empty receive queue?
   if(socket->receiveQueue == NULL)
 8008e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d118      	bne.n	8008eb6 <udpProcessDatagram+0x1b6>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	3334      	adds	r3, #52	; 0x34
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7f9 ff32 	bl	8002cf2 <netBufferAlloc>
 8008e8e:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00c      	beq.n	8008eb0 <udpProcessDatagram+0x1b0>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 8008e96:	2100      	movs	r1, #0
 8008e98:	69b8      	ldr	r0, [r7, #24]
 8008e9a:	f7fa f837 	bl	8002f0c <netBufferAt>
 8008e9e:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	61da      	str	r2, [r3, #28]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eaa:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 8008eae:	e031      	b.n	8008f14 <udpProcessDatagram+0x214>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb4:	e02e      	b.n	8008f14 <udpProcessDatagram+0x214>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 8008eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb8:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24

      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ec2:	e005      	b.n	8008ed0 <udpProcessDatagram+0x1d0>
      {
         queueItem = queueItem->next;
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 8008eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ecc:	3301      	adds	r3, #1
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f5      	bne.n	8008ec4 <udpProcessDatagram+0x1c4>
      }

      //Check whether the receive queue is full
      if(i >= UDP_RX_QUEUE_SIZE)
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d901      	bls.n	8008ee2 <udpProcessDatagram+0x1e2>
         //though no errors had been detected
         MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
         IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

         //Report an error
         return ERROR_RECEIVE_QUEUE_FULL;
 8008ede:	23db      	movs	r3, #219	; 0xdb
 8008ee0:	e05a      	b.n	8008f98 <udpProcessDatagram+0x298>
      }

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	3334      	adds	r3, #52	; 0x34
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f9 ff03 	bl	8002cf2 <netBufferAlloc>
 8008eec:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00d      	beq.n	8008f10 <udpProcessDatagram+0x210>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	69b8      	ldr	r0, [r7, #24]
 8008ef8:	f7fa f808 	bl	8002f0c <netBufferAt>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f00:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	61da      	str	r2, [r3, #28]
 8008f0e:	e001      	b.n	8008f14 <udpProcessDatagram+0x214>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Not enough resources to properly handle the packet?
   if(queueItem == NULL)
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <udpProcessDatagram+0x21e>
      //though no errors had been detected
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

      //Report an error
      return ERROR_OUT_OF_MEMORY;
 8008f1a:	2364      	movs	r3, #100	; 0x64
 8008f1c:	e03c      	b.n	8008f98 <udpProcessDatagram+0x298>
   }

   //Initialize next field
   queueItem->next = NULL;
 8008f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
   //Network interface where the packet was received
   queueItem->interface = interface;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	605a      	str	r2, [r3, #4]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7f8 f902 	bl	800113a <swapInt16>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	821a      	strh	r2, [r3, #16]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b0c      	cmp	r3, #12
 8008f44:	d10d      	bne.n	8008f62 <udpProcessDatagram+0x262>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2204      	movs	r2, #4
 8008f4a:	609a      	str	r2, [r3, #8]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	60da      	str	r2, [r3, #12]

      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	2204      	movs	r2, #4
 8008f58:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	689a      	ldr	r2, [r3, #8]
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	619a      	str	r2, [r3, #24]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	2234      	movs	r2, #52	; 0x34
 8008f66:	621a      	str	r2, [r3, #32]
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	69d8      	ldr	r0, [r3, #28]
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	6a19      	ldr	r1, [r3, #32]
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	f7fa f896 	bl	80030a8 <netBufferCopy>

   //Additional options can be passed to the stack along with the packet
   queueItem->ancillary = *ancillary;
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f80:	3324      	adds	r3, #36	; 0x24
 8008f82:	4614      	mov	r4, r2
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	6861      	ldr	r1, [r4, #4]
 8008f88:	68a2      	ldr	r2, [r4, #8]
 8008f8a:	c307      	stmia	r3!, {r0, r1, r2}
 8008f8c:	7b22      	ldrb	r2, [r4, #12]
 8008f8e:	701a      	strb	r2, [r3, #0]

   //Notify user that data is available
   udpUpdateEvents(socket);
 8008f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f92:	f000 f9e1 	bl	8009358 <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3734      	adds	r7, #52	; 0x34
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd90      	pop	{r4, r7, pc}
 8008fa0:	20009990 	.word	0x20009990

08008fa4 <udpSendDatagram>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t udpSendDatagram(Socket *socket, const SocketMsg *message, uint_t flags)
{
 8008fa4:	b5b0      	push	{r4, r5, r7, lr}
 8008fa6:	b092      	sub	sp, #72	; 0x48
 8008fa8:	af04      	add	r7, sp, #16
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
   NetBuffer *buffer;
   NetInterface *interface;
   NetTxAncillary ancillary;

   //Select the relevant network interface
   if(message->interface != NULL)
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <udpSendDatagram+0x1c>
   {
      interface = message->interface;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8008fbe:	e002      	b.n	8008fc6 <udpSendDatagram+0x22>
   }
   else
   {
      interface = socket->interface;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Allocate a memory buffer to hold the UDP datagram
   buffer = udpAllocBuffer(0, &offset);
 8008fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fca:	4619      	mov	r1, r3
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f000 f9a7 	bl	8009320 <udpAllocBuffer>
 8008fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Failed to allocate buffer?
   if(buffer == NULL)
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <udpSendDatagram+0x3a>
      return ERROR_OUT_OF_MEMORY;
 8008fda:	2364      	movs	r3, #100	; 0x64
 8008fdc:	e064      	b.n	80090a8 <udpSendDatagram+0x104>

   //Copy data payload
   error = netBufferAppend(buffer, message->data, message->length);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6819      	ldr	r1, [r3, #0]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fea:	f7fa f927 	bl	800323c <netBufferAppend>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	86fb      	strh	r3, [r7, #54]	; 0x36

   //Successful processing?
   if(!error)
 8008ff2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d153      	bne.n	80090a0 <udpSendDatagram+0xfc>
   {
      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8008ff8:	4b2d      	ldr	r3, [pc, #180]	; (80090b0 <udpSendDatagram+0x10c>)
 8008ffa:	f107 0410 	add.w	r4, r7, #16
 8008ffe:	461d      	mov	r5, r3
 8009000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009004:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009008:	e884 0003 	stmia.w	r4, {r0, r1}

      //Set the TTL value to be used
      if(message->ttl != 0)
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	7b1b      	ldrb	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <udpSendDatagram+0x78>
      {
         ancillary.ttl = message->ttl;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	7b1b      	ldrb	r3, [r3, #12]
 8009018:	743b      	strb	r3, [r7, #16]
 800901a:	e010      	b.n	800903e <udpSendDatagram+0x9a>
      }
      else if(ipIsMulticastAddr(&message->destIpAddr))
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	3320      	adds	r3, #32
 8009020:	4618      	mov	r0, r3
 8009022:	f7f9 f9f5 	bl	8002410 <ipIsMulticastAddr>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d004      	beq.n	8009036 <udpSendDatagram+0x92>
      {
         ancillary.ttl = socket->multicastTtl;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009032:	743b      	strb	r3, [r7, #16]
 8009034:	e003      	b.n	800903e <udpSendDatagram+0x9a>
      }
      else
      {
         ancillary.ttl = socket->ttl;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800903c:	743b      	strb	r3, [r7, #16]
      }

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      if((flags & SOCKET_FLAG_DONT_ROUTE) != 0)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <udpSendDatagram+0xa8>
      {
         ancillary.dontRoute = TRUE;
 8009048:	2301      	movs	r3, #1
 800904a:	617b      	str	r3, [r7, #20]
      ancillary.dscp = socket->dscp;
#endif

#if (ETH_SUPPORT == ENABLED)
      //Set source and destination MAC addresses
      ancillary.srcMacAddr = message->srcMacAddr;
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	f107 031c 	add.w	r3, r7, #28
 8009052:	322a      	adds	r2, #42	; 0x2a
 8009054:	6810      	ldr	r0, [r2, #0]
 8009056:	6018      	str	r0, [r3, #0]
 8009058:	8892      	ldrh	r2, [r2, #4]
 800905a:	809a      	strh	r2, [r3, #4]
      ancillary.destMacAddr = message->destMacAddr;
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8009062:	3230      	adds	r2, #48	; 0x30
 8009064:	6810      	ldr	r0, [r2, #0]
 8009066:	6018      	str	r0, [r3, #0]
 8009068:	8892      	ldrh	r2, [r2, #4]
 800906a:	809a      	strh	r2, [r3, #4]
      //Unique identifier for hardware time stamping
      ancillary.timestampId = message->timestampId;
#endif

      //Send UDP datagram
      error = udpSendBuffer(interface, &message->srcIpAddr, socket->localPort,
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f103 0014 	add.w	r0, r3, #20
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	8b1c      	ldrh	r4, [r3, #24]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f103 0520 	add.w	r5, r3, #32
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009082:	f107 0110 	add.w	r1, r7, #16
 8009086:	9103      	str	r1, [sp, #12]
 8009088:	9202      	str	r2, [sp, #8]
 800908a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800908c:	9201      	str	r2, [sp, #4]
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	462b      	mov	r3, r5
 8009092:	4622      	mov	r2, r4
 8009094:	4601      	mov	r1, r0
 8009096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009098:	f000 f80c 	bl	80090b4 <udpSendBuffer>
 800909c:	4603      	mov	r3, r0
 800909e:	86fb      	strh	r3, [r7, #54]	; 0x36
         &message->destIpAddr, message->destPort, buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 80090a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090a2:	f7f9 fe59 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 80090a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3738      	adds	r7, #56	; 0x38
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bdb0      	pop	{r4, r5, r7, pc}
 80090b0:	08014540 	.word	0x08014540

080090b4 <udpSendBuffer>:
 **/

error_t udpSendBuffer(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	; 0x38
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 80090c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c6:	3b08      	subs	r3, #8
 80090c8:	643b      	str	r3, [r7, #64]	; 0x40
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 80090ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090cc:	f7f9 fe56 	bl	8002d7c <netBufferGetLength>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 80090d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090dc:	f7f9 ff16 	bl	8002f0c <netBufferAt>
 80090e0:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(header == NULL)
 80090e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <udpSendBuffer+0x38>
      return ERROR_FAILURE;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e088      	b.n	80091fe <udpSendBuffer+0x14a>

   //Format UDP header
   header->srcPort = htons(srcPort);
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f8 f823 	bl	800113a <swapInt16>
 80090f4:	4603      	mov	r3, r0
 80090f6:	461a      	mov	r2, r3
 80090f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fa:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 80090fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f8 f81b 	bl	800113a <swapInt16>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	b29b      	uxth	r3, r3
 8009110:	4618      	mov	r0, r3
 8009112:	f7f8 f812 	bl	800113a <swapInt16>
 8009116:	4603      	mov	r3, r0
 8009118:	461a      	mov	r2, r3
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 800911e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009120:	2200      	movs	r2, #0
 8009122:	719a      	strb	r2, [r3, #6]
 8009124:	2200      	movs	r2, #0
 8009126:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b04      	cmp	r3, #4
 800912e:	d14e      	bne.n	80091ce <udpSendBuffer+0x11a>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d007      	beq.n	8009146 <udpSendBuffer+0x92>
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b04      	cmp	r3, #4
 800913c:	d103      	bne.n	8009146 <udpSendBuffer+0x92>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	61bb      	str	r3, [r7, #24]
 8009144:	e01d      	b.n	8009182 <udpSendBuffer+0xce>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6859      	ldr	r1, [r3, #4]
 800914a:	f107 0210 	add.w	r2, r7, #16
 800914e:	f107 030c 	add.w	r3, r7, #12
 8009152:	4618      	mov	r0, r3
 8009154:	f004 fe06 	bl	800dd64 <ipv4SelectSourceAddr>
 8009158:	4603      	mov	r3, r0
 800915a:	84fb      	strh	r3, [r7, #38]	; 0x26
            &ipAddr);

         //Check status code
         if(!error)
 800915c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <udpSendBuffer+0xb4>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e00c      	b.n	8009182 <udpSendBuffer+0xce>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009170:	d105      	bne.n	800917e <udpSendBuffer+0xca>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <udpSendBuffer+0xca>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
 800917c:	e001      	b.n	8009182 <udpSendBuffer+0xce>
            }
            else
            {
               //Source address selection failed
               return error;
 800917e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009180:	e03d      	b.n	80091fe <udpSendBuffer+0x14a>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8009182:	230c      	movs	r3, #12
 8009184:	617b      	str	r3, [r7, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 8009192:	2311      	movs	r3, #17
 8009194:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 8009198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919a:	b29b      	uxth	r3, r3
 800919c:	4618      	mov	r0, r3
 800919e:	f7f7 ffcc 	bl	800113a <swapInt16>
 80091a2:	4603      	mov	r3, r0
 80091a4:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 80091a6:	f107 0314 	add.w	r3, r7, #20
 80091aa:	1d18      	adds	r0, r3, #4
 80091ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091b4:	210c      	movs	r1, #12
 80091b6:	f7f9 fa50 	bl	800265a <ipCalcUpperLayerChecksumEx>
 80091ba:	4603      	mov	r3, r0
 80091bc:	461a      	mov	r2, r3
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	80da      	strh	r2, [r3, #6]
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	88db      	ldrh	r3, [r3, #6]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d109      	bne.n	80091e0 <udpSendBuffer+0x12c>
 80091cc:	e001      	b.n	80091d2 <udpSendBuffer+0x11e>
      return ERROR_FAILURE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e015      	b.n	80091fe <udpSendBuffer+0x14a>
   {
      header->checksum = 0xFFFF;
 80091d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d8:	719a      	strb	r2, [r3, #6]
 80091da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091de:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 80091e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091e2:	f000 f9bb 	bl	800955c <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, ancillary);
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f107 0114 	add.w	r1, r7, #20
 80091ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091f4:	f7f9 f8b4 	bl	8002360 <ipSendDatagram>
 80091f8:	4603      	mov	r3, r0
 80091fa:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Return status code
   return error;
 80091fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3730      	adds	r7, #48	; 0x30
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <udpReceiveDatagram>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t udpReceiveDatagram(Socket *socket, SocketMsg *message, uint_t flags)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
   error_t error;
   SocketQueueItem *queueItem;

   //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
   if((flags & SOCKET_FLAG_DONT_WAIT) == 0)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	2b00      	cmp	r3, #0
 800921c:	d11c      	bne.n	8009258 <udpReceiveDatagram+0x50>
   {
      //Check whether the receive queue is empty
      if(socket->receiveQueue == NULL)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009224:	2b00      	cmp	r3, #0
 8009226:	d117      	bne.n	8009258 <udpReceiveDatagram+0x50>
      {
         //Set the events the application is interested in
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2280      	movs	r2, #128	; 0x80
 800922c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

         //Reset the event object
         osResetEvent(&socket->event);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	3334      	adds	r3, #52	; 0x34
 8009234:	4618      	mov	r0, r3
 8009236:	f7f8 f8a6 	bl	8001386 <osResetEvent>

         //Release exclusive access
         osReleaseMutex(&netMutex);
 800923a:	4838      	ldr	r0, [pc, #224]	; (800931c <udpReceiveDatagram+0x114>)
 800923c:	f7f8 f909 	bl	8001452 <osReleaseMutex>
         //Wait until an event is triggered
         osWaitForEvent(&socket->event, socket->timeout);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f7f8 f8a8 	bl	80013a2 <osWaitForEvent>
         //Get exclusive access
         osAcquireMutex(&netMutex);
 8009252:	4832      	ldr	r0, [pc, #200]	; (800931c <udpReceiveDatagram+0x114>)
 8009254:	f7f8 f8ee 	bl	8001434 <osAcquireMutex>
      }
   }

   //Any datagram received?
   if(socket->receiveQueue != NULL)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800925e:	2b00      	cmp	r3, #0
 8009260:	d052      	beq.n	8009308 <udpReceiveDatagram+0x100>
   {
      //Point to the first item in the receive queue
      queueItem = socket->receiveQueue;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8009268:	613b      	str	r3, [r7, #16]

      //Copy data to user buffer
      message->length = netBufferRead(message->data, queueItem->buffer,
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6818      	ldr	r0, [r3, #0]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	69d9      	ldr	r1, [r3, #28]
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	6a1a      	ldr	r2, [r3, #32]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f7fa f86b 	bl	8003354 <netBufferRead>
 800927e:	4602      	mov	r2, r0
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	609a      	str	r2, [r3, #8]
         queueItem->offset, message->size);

      //Network interface where the packet was received
      message->interface = queueItem->interface;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	611a      	str	r2, [r3, #16]
      //Save the source IP address
      message->srcIpAddr = queueItem->srcIpAddr;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	693a      	ldr	r2, [r7, #16]
 8009290:	3314      	adds	r3, #20
 8009292:	3208      	adds	r2, #8
 8009294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009298:	e883 0003 	stmia.w	r3, {r0, r1}
      //Save the source port number
      message->srcPort = queueItem->srcPort;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	8a1a      	ldrh	r2, [r3, #16]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	839a      	strh	r2, [r3, #28]
      //Save the destination IP address
      message->destIpAddr = queueItem->destIpAddr;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	3320      	adds	r3, #32
 80092aa:	3214      	adds	r2, #20
 80092ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092b0:	e883 0003 	stmia.w	r3, {r0, r1}

      //Save TTL value
      message->ttl = queueItem->ancillary.ttl;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	731a      	strb	r2, [r3, #12]

#if (ETH_SUPPORT == ENABLED)
      //Save source and destination MAC addresses
      message->srcMacAddr = queueItem->ancillary.srcMacAddr;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	332a      	adds	r3, #42	; 0x2a
 80092c4:	3225      	adds	r2, #37	; 0x25
 80092c6:	6811      	ldr	r1, [r2, #0]
 80092c8:	6019      	str	r1, [r3, #0]
 80092ca:	8892      	ldrh	r2, [r2, #4]
 80092cc:	809a      	strh	r2, [r3, #4]
      message->destMacAddr = queueItem->ancillary.destMacAddr;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	3330      	adds	r3, #48	; 0x30
 80092d4:	322b      	adds	r2, #43	; 0x2b
 80092d6:	6810      	ldr	r0, [r2, #0]
 80092d8:	6018      	str	r0, [r3, #0]
 80092da:	8892      	ldrh	r2, [r2, #4]
 80092dc:	809a      	strh	r2, [r3, #4]
      message->timestamp = queueItem->ancillary.timestamp;
#endif

      //If the SOCKET_FLAG_PEEK flag is set, the data is copied into the
      //buffer but is not removed from the input queue
      if((flags & SOCKET_FLAG_PEEK) == 0)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d109      	bne.n	80092fc <udpReceiveDatagram+0xf4>
      {
         //Remove the item from the receive queue
         socket->receiveQueue = queueItem->next;
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278

         //Deallocate memory buffer
         netBufferFree(queueItem->buffer);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7f9 fd2e 	bl	8002d58 <netBufferFree>
      }

      //Update the state of events
      udpUpdateEvents(socket);
 80092fc:	68f8      	ldr	r0, [r7, #12]
 80092fe:	f000 f82b 	bl	8009358 <udpUpdateEvents>

      //Successful read operation
      error = NO_ERROR;
 8009302:	2300      	movs	r3, #0
 8009304:	82fb      	strh	r3, [r7, #22]
 8009306:	e004      	b.n	8009312 <udpReceiveDatagram+0x10a>
   }
   else
   {
      //Total number of data that have been received
      message->length = 0;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2200      	movs	r2, #0
 800930c:	609a      	str	r2, [r3, #8]

      //Report a timeout error
      error = ERROR_TIMEOUT;
 800930e:	23dc      	movs	r3, #220	; 0xdc
 8009310:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8009312:	8afb      	ldrh	r3, [r7, #22]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20009178 	.word	0x20009178

08009320 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3308      	adds	r3, #8
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	4618      	mov	r0, r3
 8009332:	f7f9 f9bb 	bl	80026ac <ipAllocBuffer>
 8009336:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <udpAllocBuffer+0x22>
      return NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	e006      	b.n	8009350 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f103 0208 	add.w	r2, r3, #8
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 800934e:	68fb      	ldr	r3, [r7, #12]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <udpUpdateEvents+0x2a>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009378:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <udpUpdateEvents+0x60>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009392:	2b00      	cmp	r3, #0
 8009394:	d008      	beq.n	80093a8 <udpUpdateEvents+0x50>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800939c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80093a6:	e007      	b.n	80093b8 <udpUpdateEvents+0x60>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ae:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093c4:	401a      	ands	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Any event to signal?
   if(socket->eventFlags)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <udpUpdateEvents+0x9e>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3334      	adds	r3, #52	; 0x34
 80093da:	4618      	mov	r0, r3
 80093dc:	f7f7 ffc4 	bl	8001368 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <udpUpdateEvents+0x9e>
      {
         osSetEvent(socket->userEvent);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7f7 ffb9 	bl	8001368 <osSetEvent>
      }
   }
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <udpAttachRxCallback>:
 * @return Error code
 **/

error_t udpAttachRxCallback(NetInterface *interface, uint16_t port,
   UdpRxCallback callback, void *param)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	460b      	mov	r3, r1
 800940e:	817b      	strh	r3, [r7, #10]
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	e018      	b.n	8009448 <udpAttachRxCallback+0x48>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	4a13      	ldr	r2, [pc, #76]	; (8009468 <udpAttachRxCallback+0x68>)
 800941c:	4413      	add	r3, r2
 800941e:	613b      	str	r3, [r7, #16]

      //Check whether the entry is currently in use
      if(entry->callback == NULL)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10c      	bne.n	8009442 <udpAttachRxCallback+0x42>
      {
         //Create a new entry
         entry->interface = interface;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	601a      	str	r2, [r3, #0]
         entry->port = port;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	897a      	ldrh	r2, [r7, #10]
 8009432:	809a      	strh	r2, [r3, #4]
         entry->callback = callback;
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	609a      	str	r2, [r3, #8]
         entry->param = param;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	60da      	str	r2, [r3, #12]
         //We are done
         break;
 8009440:	e005      	b.n	800944e <udpAttachRxCallback+0x4e>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	3301      	adds	r3, #1
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	2b09      	cmp	r3, #9
 800944c:	d9e3      	bls.n	8009416 <udpAttachRxCallback+0x16>
      }
   }

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b09      	cmp	r3, #9
 8009452:	d901      	bls.n	8009458 <udpAttachRxCallback+0x58>
      return ERROR_OUT_OF_RESOURCES;
 8009454:	2365      	movs	r3, #101	; 0x65
 8009456:	e000      	b.n	800945a <udpAttachRxCallback+0x5a>

   //Successful processing
   return NO_ERROR;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	371c      	adds	r7, #28
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	2000b26c 	.word	0x2000b26c

0800946c <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 8009478:	2301      	movs	r3, #1
 800947a:	82fb      	strh	r3, [r7, #22]

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	e01a      	b.n	80094b8 <udpDetachRxCallback+0x4c>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	4a11      	ldr	r2, [pc, #68]	; (80094cc <udpDetachRxCallback+0x60>)
 8009488:	4413      	add	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00e      	beq.n	80094b2 <udpDetachRxCallback+0x46>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	889b      	ldrh	r3, [r3, #4]
 8009498:	887a      	ldrh	r2, [r7, #2]
 800949a:	429a      	cmp	r2, r3
 800949c:	d109      	bne.n	80094b2 <udpDetachRxCallback+0x46>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d104      	bne.n	80094b2 <udpDetachRxCallback+0x46>
         {
            //Unregister user callback
            entry->callback = NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 80094ae:	2300      	movs	r3, #0
 80094b0:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	3301      	adds	r3, #1
 80094b6:	613b      	str	r3, [r7, #16]
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d9e1      	bls.n	8009482 <udpDetachRxCallback+0x16>
         }
      }
   }

   //Return status code
   return error;
 80094be:	8afb      	ldrh	r3, [r7, #22]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	371c      	adds	r7, #28
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr
 80094cc:	2000b26c 	.word	0x2000b26c

080094d0 <udpInvokeRxCallback>:
 **/

error_t udpInvokeRxCallback(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *header,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 80094d0:	b590      	push	{r4, r7, lr}
 80094d2:	b08d      	sub	sp, #52	; 0x34
 80094d4:	af04      	add	r7, sp, #16
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
 80094dc:	603b      	str	r3, [r7, #0]
   error_t error;
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 80094de:	23d2      	movs	r3, #210	; 0xd2
 80094e0:	83fb      	strh	r3, [r7, #30]

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80094e2:	2300      	movs	r3, #0
 80094e4:	61bb      	str	r3, [r7, #24]
 80094e6:	e02f      	b.n	8009548 <udpInvokeRxCallback+0x78>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <udpInvokeRxCallback+0x88>)
 80094ee:	4413      	add	r3, r2
 80094f0:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d023      	beq.n	8009542 <udpInvokeRxCallback+0x72>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d004      	beq.n	800950c <udpInvokeRxCallback+0x3c>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	429a      	cmp	r2, r3
 800950a:	d11a      	bne.n	8009542 <udpInvokeRxCallback+0x72>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	889c      	ldrh	r4, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	885b      	ldrh	r3, [r3, #2]
 8009514:	b29b      	uxth	r3, r3
 8009516:	4618      	mov	r0, r3
 8009518:	f7f7 fe0f 	bl	800113a <swapInt16>
 800951c:	4603      	mov	r3, r0
 800951e:	429c      	cmp	r4, r3
 8009520:	d10f      	bne.n	8009542 <udpInvokeRxCallback+0x72>
            {
               //Invoke user callback function
               entry->callback(interface, pseudoHeader, header, buffer, offset,
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	689c      	ldr	r4, [r3, #8]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	9301      	str	r3, [sp, #4]
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	47a0      	blx	r4
                  ancillary, entry->param);

               //A matching entry has been found
               error = NO_ERROR;
 800953e:	2300      	movs	r3, #0
 8009540:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	3301      	adds	r3, #1
 8009546:	61bb      	str	r3, [r7, #24]
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b09      	cmp	r3, #9
 800954c:	d9cc      	bls.n	80094e8 <udpInvokeRxCallback+0x18>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 800954e:	8bfb      	ldrh	r3, [r7, #30]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3724      	adds	r7, #36	; 0x24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd90      	pop	{r4, r7, pc}
 8009558:	2000b26c 	.word	0x2000b26c

0800955c <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <dhcpClientStateInit>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInit(DhcpClientContext *context)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009582:	2b00      	cmp	r3, #0
 8009584:	d018      	beq.n	80095b8 <dhcpClientStateInit+0x48>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <dhcpClientStateInit+0x48>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8009590:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009594:	2000      	movs	r0, #0
 8009596:	f7fa fa55 	bl	8003a44 <netGetRandRange>
 800959a:	4603      	mov	r3, r0
 800959c:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 800959e:	f7f7 ff67 	bl	8001470 <osGetSystemTime>
 80095a2:	4602      	mov	r2, r0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	651a      	str	r2, [r3, #80]	; 0x50
         //Clear flag
         context->timeoutEventDone = FALSE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30

         //Switch to the SELECTING state
         dhcpClientChangeState(context, DHCP_STATE_SELECTING, delay);
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	2101      	movs	r1, #1
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fe5c 	bl	800a270 <dhcpClientChangeState>
      }
   }
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <dhcpClientStateSelecting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateSelecting(DhcpClientContext *context)
{
 80095c0:	b590      	push	{r4, r7, lr}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 80095c8:	f7f7 ff52 	bl	8001470 <osGetSystemTime>
 80095cc:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	4413      	add	r3, r2
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b00      	cmp	r3, #0
 80095de:	db34      	blt.n	800964a <dhcpClientStateSelecting+0x8a>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10c      	bne.n	8009602 <dhcpClientStateSelecting+0x42>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 80095e8:	f7fa fa06 	bl	80039f8 <netGetRand>
 80095ec:	4602      	mov	r2, r0
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb0a 	bl	8009c0c <dhcpClientSendDiscover>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_DISCOVER_INIT_RT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80095fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8009600:	e010      	b.n	8009624 <dhcpClientStateSelecting+0x64>
      }
      else
      {
         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fb02 	bl	8009c0c <dhcpClientSendDiscover>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	005a      	lsls	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_DISCOVER_MAX_RT)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009616:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800961a:	d903      	bls.n	8009624 <dhcpClientStateSelecting+0x64>
            context->retransmitTimeout = DHCP_CLIENT_DISCOVER_MAX_RT;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8009622:	63da      	str	r2, [r3, #60]	; 0x3c
      }

      //Save the time at which the message was sent
      context->timestamp = time;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	635a      	str	r2, [r3, #52]	; 0x34

      //The timeout value should be randomized by the value of a uniform
      //number chosen from the range -1 to +1
      context->timeout = context->retransmitTimeout +
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
         netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 800962e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009632:	4809      	ldr	r0, [pc, #36]	; (8009658 <dhcpClientStateSelecting+0x98>)
 8009634:	f7fa fa06 	bl	8003a44 <netGetRandRange>
 8009638:	4603      	mov	r3, r0
      context->timeout = context->retransmitTimeout +
 800963a:	18e2      	adds	r2, r4, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	639a      	str	r2, [r3, #56]	; 0x38

      //Increment retransmission counter
      context->retransmitCount++;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	641a      	str	r2, [r3, #64]	; 0x40
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fdbe 	bl	800a1cc <dhcpClientCheckTimeout>
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bd90      	pop	{r4, r7, pc}
 8009658:	fffffc18 	.word	0xfffffc18

0800965c <dhcpClientStateRequesting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRequesting(DhcpClientContext *context)
{
 800965c:	b590      	push	{r4, r7, lr}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8009664:	f7f7 ff04 	bl	8001470 <osGetSystemTime>
 8009668:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	4413      	add	r3, r2
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	db51      	blt.n	8009720 <dhcpClientStateRequesting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	d11f      	bne.n	80096c4 <dhcpClientStateRequesting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8009684:	f7fa f9b8 	bl	80039f8 <netGetRand>
 8009688:	4602      	mov	r2, r0
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb90 	bl	8009db4 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800969a:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 80096a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096aa:	4821      	ldr	r0, [pc, #132]	; (8009730 <dhcpClientStateRequesting+0xd4>)
 80096ac:	f7fa f9ca 	bl	8003a44 <netGetRandRange>
 80096b0:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 80096b2:	18e2      	adds	r2, r4, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	641a      	str	r2, [r3, #64]	; 0x40
 80096c2:	e02d      	b.n	8009720 <dhcpClientStateRequesting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d824      	bhi.n	8009716 <dhcpClientStateRequesting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 fb71 	bl	8009db4 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	005a      	lsls	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80096e4:	d903      	bls.n	80096ee <dhcpClientStateRequesting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80096ec:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 80096f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096fc:	480c      	ldr	r0, [pc, #48]	; (8009730 <dhcpClientStateRequesting+0xd4>)
 80096fe:	f7fa f9a1 	bl	8003a44 <netGetRandRange>
 8009702:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8009704:	18e2      	adds	r2, r4, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	641a      	str	r2, [r3, #64]	; 0x40
 8009714:	e004      	b.n	8009720 <dhcpClientStateRequesting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8009716:	2200      	movs	r2, #0
 8009718:	2100      	movs	r1, #0
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fda8 	bl	800a270 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fd53 	bl	800a1cc <dhcpClientCheckTimeout>
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	bd90      	pop	{r4, r7, pc}
 800972e:	bf00      	nop
 8009730:	fffffc18 	.word	0xfffffc18

08009734 <dhcpClientStateInitReboot>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInitReboot(DhcpClientContext *context)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d018      	beq.n	800977c <dhcpClientStateInitReboot+0x48>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d013      	beq.n	800977c <dhcpClientStateInitReboot+0x48>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8009754:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009758:	2000      	movs	r0, #0
 800975a:	f7fa f973 	bl	8003a44 <netGetRandRange>
 800975e:	4603      	mov	r3, r0
 8009760:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 8009762:	f7f7 fe85 	bl	8001470 <osGetSystemTime>
 8009766:	4602      	mov	r2, r0
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	651a      	str	r2, [r3, #80]	; 0x50
         //Clear flag
         context->timeoutEventDone = FALSE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	; 0x30

         //Switch to the REBOOTING state
         dhcpClientChangeState(context, DHCP_STATE_REBOOTING, delay);
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	2104      	movs	r1, #4
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fd7a 	bl	800a270 <dhcpClientChangeState>
      }
   }
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <dhcpClientStateRebooting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebooting(DhcpClientContext *context)
{
 8009784:	b590      	push	{r4, r7, lr}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 800978c:	f7f7 fe70 	bl	8001470 <osGetSystemTime>
 8009790:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	4413      	add	r3, r2
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	db51      	blt.n	8009848 <dhcpClientStateRebooting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11f      	bne.n	80097ec <dhcpClientStateRebooting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 80097ac:	f7fa f924 	bl	80039f8 <netGetRand>
 80097b0:	4602      	mov	r2, r0
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fafc 	bl	8009db4 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80097c2:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 80097ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80097d2:	4821      	ldr	r0, [pc, #132]	; (8009858 <dhcpClientStateRebooting+0xd4>)
 80097d4:	f7fa f936 	bl	8003a44 <netGetRandRange>
 80097d8:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 80097da:	18e2      	adds	r2, r4, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	641a      	str	r2, [r3, #64]	; 0x40
 80097ea:	e02d      	b.n	8009848 <dhcpClientStateRebooting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d824      	bhi.n	800983e <dhcpClientStateRebooting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fadd 	bl	8009db4 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fe:	005a      	lsls	r2, r3, #1
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009808:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800980c:	d903      	bls.n	8009816 <dhcpClientStateRebooting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8009814:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8009820:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009824:	480c      	ldr	r0, [pc, #48]	; (8009858 <dhcpClientStateRebooting+0xd4>)
 8009826:	f7fa f90d 	bl	8003a44 <netGetRandRange>
 800982a:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 800982c:	18e2      	adds	r2, r4, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	641a      	str	r2, [r3, #64]	; 0x40
 800983c:	e004      	b.n	8009848 <dhcpClientStateRebooting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 800983e:	2200      	movs	r2, #0
 8009840:	2100      	movs	r1, #0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fd14 	bl	800a270 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fcbf 	bl	800a1cc <dhcpClientCheckTimeout>
}
 800984e:	bf00      	nop
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	bd90      	pop	{r4, r7, pc}
 8009856:	bf00      	nop
 8009858:	fffffc18 	.word	0xfffffc18

0800985c <dhcpClientStateProbing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateProbing(DhcpClientContext *context)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	617b      	str	r3, [r7, #20]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	613b      	str	r3, [r7, #16]

   //Get current time
   time = osGetSystemTime();
 8009870:	f7f7 fdfe 	bl	8001470 <osGetSystemTime>
 8009874:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987e:	4413      	add	r3, r2
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	db46      	blt.n	8009916 <dhcpClientStateProbing+0xba>
   {
      //The address is already in use?
      if(interface->ipv4Context.addrList[i].conflict)
 8009888:	6979      	ldr	r1, [r7, #20]
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4613      	mov	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	440b      	add	r3, r1
 8009896:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <dhcpClientStateProbing+0x56>
      {
         //If the client detects that the address is already in use, the
         //client must send a DHCPDECLINE message to the server and
         //restarts the configuration process
         dhcpClientSendDecline(context);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fbbd 	bl	800a020 <dhcpClientSendDecline>

         //The client should wait a minimum of ten seconds before
         //restarting the configuration process to avoid excessive
         //network traffic in case of looping
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 80098a6:	2200      	movs	r2, #0
 80098a8:	2100      	movs	r1, #0
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fce0 	bl	800a270 <dhcpClientChangeState>

         //The client transitions to the BOUND state
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
      }
   }
}
 80098b0:	e031      	b.n	8009916 <dhcpClientStateProbing+0xba>
      else if(context->retransmitCount < DHCP_CLIENT_PROBE_NUM)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d11a      	bne.n	80098f0 <dhcpClientStateProbing+0x94>
         arpSendProbe(interface, interface->ipv4Context.addrList[i].addr);
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4613      	mov	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4413      	add	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6978      	ldr	r0, [r7, #20]
 80098d2:	f002 fcfb 	bl	800c2cc <arpSendProbe>
         context->timestamp = time;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	635a      	str	r2, [r3, #52]	; 0x34
         context->timeout = DHCP_CLIENT_PROBE_DELAY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098e2:	639a      	str	r2, [r3, #56]	; 0x38
         context->retransmitCount++;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80098ee:	e012      	b.n	8009916 <dhcpClientStateProbing+0xba>
         interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 80098f0:	6979      	ldr	r1, [r7, #20]
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8009902:	2202      	movs	r2, #2
 8009904:	701a      	strb	r2, [r3, #0]
         dhcpClientDumpConfig(context);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fd50 	bl	800a3ac <dhcpClientDumpConfig>
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 800990c:	2200      	movs	r2, #0
 800990e:	2106      	movs	r1, #6
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fcad 	bl	800a270 <dhcpClientChangeState>
}
 8009916:	bf00      	nop
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <dhcpClientStateBound>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateBound(DhcpClientContext *context)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
   systime_t t1;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8009928:	f7f7 fda2 	bl	8001470 <osGetSystemTime>
 800992c:	60b8      	str	r0, [r7, #8]

   //A client will never attempt to extend the lifetime
   //of the address when T1 set to 0xFFFFFFFF
   if(context->t1 != DHCP_INFINITE_TIME)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009936:	d01f      	beq.n	8009978 <dhcpClientStateBound+0x58>
   {
      //Convert T1 to milliseconds
      if(context->t1 < (MAX_DELAY / 1000))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800993c:	4a10      	ldr	r2, [pc, #64]	; (8009980 <dhcpClientStateBound+0x60>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d807      	bhi.n	8009952 <dhcpClientStateBound+0x32>
      {
         t1 = context->t1 * 1000;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800994a:	fb02 f303 	mul.w	r3, r2, r3
 800994e:	60fb      	str	r3, [r7, #12]
 8009950:	e002      	b.n	8009958 <dhcpClientStateBound+0x38>
      }
      else
      {
         t1 = MAX_DELAY;
 8009952:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009956:	60fb      	str	r3, [r7, #12]
      }

      //Check the time elapsed since the lease was obtained
      if(timeCompare(time, context->leaseStartTime + t1) >= 0)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	68ba      	ldr	r2, [r7, #8]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	db07      	blt.n	8009978 <dhcpClientStateBound+0x58>
      {
         //Record the time at which the client started the address renewal process
         context->configStartTime = time;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	651a      	str	r2, [r3, #80]	; 0x50

         //Enter the RENEWING state
         dhcpClientChangeState(context, DHCP_STATE_RENEWING, 0);
 800996e:	2200      	movs	r2, #0
 8009970:	2107      	movs	r1, #7
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fc7c 	bl	800a270 <dhcpClientChangeState>
      }
   }
}
 8009978:	bf00      	nop
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	0020c49a 	.word	0x0020c49a

08009984 <dhcpClientStateRenewing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRenewing(DhcpClientContext *context)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
   systime_t t2;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 800998c:	f7f7 fd70 	bl	8001470 <osGetSystemTime>
 8009990:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	4413      	add	r3, r2
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	db43      	blt.n	8009a2c <dhcpClientStateRenewing+0xa8>
   {
      //Convert T2 to milliseconds
      if(context->t2 < (MAX_DELAY / 1000))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a8:	4a22      	ldr	r2, [pc, #136]	; (8009a34 <dhcpClientStateRenewing+0xb0>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d807      	bhi.n	80099be <dhcpClientStateRenewing+0x3a>
      {
         t2 = context->t2 * 1000;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	e002      	b.n	80099c4 <dhcpClientStateRenewing+0x40>
      }
      else
      {
         t2 = MAX_DELAY;
 80099be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80099c2:	60fb      	str	r3, [r7, #12]
      }

      //Check whether T2 timer has expired
      if(timeCompare(time, context->leaseStartTime + t2) < 0)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	68ba      	ldr	r2, [r7, #8]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da26      	bge.n	8009a22 <dhcpClientStateRenewing+0x9e>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <dhcpClientStateRenewing+0x62>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 80099dc:	f7fa f80c 	bl	80039f8 <netGetRand>
 80099e0:	4602      	mov	r2, r0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	64da      	str	r2, [r3, #76]	; 0x4c
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f9e4 	bl	8009db4 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	635a      	str	r2, [r3, #52]	; 0x34

         //Compute the remaining time until T2 expires
         context->timeout = context->leaseStartTime + t2 - time;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	441a      	add	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	1ad2      	subs	r2, r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	639a      	str	r2, [r3, #56]	; 0x38

         //The client should wait one-half of the remaining time until T2, down to
         //a minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <dhcpClientStateRenewing+0xb4>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d904      	bls.n	8009a16 <dhcpClientStateRenewing+0x92>
            context->timeout /= 2;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a10:	085a      	lsrs	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	641a      	str	r2, [r3, #64]	; 0x40
      {
         //If no DHCPACK arrives before time T2, the client moves to REBINDING
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
      }
   }
}
 8009a20:	e004      	b.n	8009a2c <dhcpClientStateRenewing+0xa8>
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
 8009a22:	2200      	movs	r2, #0
 8009a24:	2108      	movs	r1, #8
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fc22 	bl	800a270 <dhcpClientChangeState>
}
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	0020c49a 	.word	0x0020c49a
 8009a38:	0001d4c0 	.word	0x0001d4c0

08009a3c <dhcpClientStateRebinding>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebinding(DhcpClientContext *context)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
   //Point to the underlying network interface
   interface = context->settings.interface;
#endif

   //Get current time
   time = osGetSystemTime();
 8009a44:	f7f7 fd14 	bl	8001470 <osGetSystemTime>
 8009a48:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a52:	4413      	add	r3, r2
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	db46      	blt.n	8009aea <dhcpClientStateRebinding+0xae>
   {
      //Convert the lease time to milliseconds
      if(context->leaseTime < (MAX_DELAY / 1000))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a60:	4a24      	ldr	r2, [pc, #144]	; (8009af4 <dhcpClientStateRebinding+0xb8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d807      	bhi.n	8009a76 <dhcpClientStateRebinding+0x3a>
      {
         leaseTime = context->leaseTime * 1000;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	e002      	b.n	8009a7c <dhcpClientStateRebinding+0x40>
      }
      else
      {
         leaseTime = MAX_DELAY;
 8009a76:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009a7a:	60fb      	str	r3, [r7, #12]
      }

      //Check whether the lease has expired
      if(timeCompare(time, context->leaseStartTime + leaseTime) < 0)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	da26      	bge.n	8009ada <dhcpClientStateRebinding+0x9e>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <dhcpClientStateRebinding+0x62>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 8009a94:	f7f9 ffb0 	bl	80039f8 <netGetRand>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	64da      	str	r2, [r3, #76]	; 0x4c
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f988 	bl	8009db4 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	635a      	str	r2, [r3, #52]	; 0x34

         //Compute the remaining time until the lease expires
         context->timeout = context->leaseStartTime + leaseTime - time;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	441a      	add	r2, r3
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	1ad2      	subs	r2, r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

         //The client should wait one-half of the remaining lease time, down to a
         //minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	4a0e      	ldr	r2, [pc, #56]	; (8009af8 <dhcpClientStateRebinding+0xbc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d904      	bls.n	8009ace <dhcpClientStateRebinding+0x92>
         {
            context->timeout /= 2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac8:	085a      	lsrs	r2, r3, #1
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	639a      	str	r2, [r3, #56]	; 0x38
         }

         //Increment retransmission counter
         context->retransmitCount++;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	641a      	str	r2, [r3, #64]	; 0x40
         //If the lease expires before the client receives a DHCPACK, the client
         //moves to INIT state
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }
}
 8009ad8:	e007      	b.n	8009aea <dhcpClientStateRebinding+0xae>
         dhcpClientResetConfig(context);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc16 	bl	800a30c <dhcpClientResetConfig>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fbc3 	bl	800a270 <dhcpClientChangeState>
}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	0020c49a 	.word	0x0020c49a
 8009af8:	0001d4c0 	.word	0x0001d4c0

08009afc <dhcpClientTick>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientTick(DhcpClientContext *context)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
   //Make sure the DHCP client has been properly instantiated
   if(context != NULL)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d043      	beq.n	8009b92 <dhcpClientTick+0x96>
   {
      //DHCP client finite state machine
      switch(context->state)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b10:	2b08      	cmp	r3, #8
 8009b12:	d839      	bhi.n	8009b88 <dhcpClientTick+0x8c>
 8009b14:	a201      	add	r2, pc, #4	; (adr r2, 8009b1c <dhcpClientTick+0x20>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b61 	.word	0x08009b61
 8009b30:	08009b69 	.word	0x08009b69
 8009b34:	08009b71 	.word	0x08009b71
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b81 	.word	0x08009b81
      //INIT state?
      case DHCP_STATE_INIT:
         //This is the initialization state, where a client begins the process
         //of acquiring a lease. It also returns here when a lease ends, or
         //when a lease negotiation fails
         dhcpClientStateInit(context);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fd15 	bl	8009570 <dhcpClientStateInit>
         break;
 8009b46:	e025      	b.n	8009b94 <dhcpClientTick+0x98>

      //SELECTING state?
      case DHCP_STATE_SELECTING:
         //The client is waiting to receive DHCPOFFER messages from one or more
         //DHCP servers, so it can choose one
         dhcpClientStateSelecting(context);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fd39 	bl	80095c0 <dhcpClientStateSelecting>
         break;
 8009b4e:	e021      	b.n	8009b94 <dhcpClientTick+0x98>

      //REQUESTING state?
      case DHCP_STATE_REQUESTING:
         //The client is waiting to hear back from the server to which it sent
         //its request
         dhcpClientStateRequesting(context);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fd83 	bl	800965c <dhcpClientStateRequesting>
         break;
 8009b56:	e01d      	b.n	8009b94 <dhcpClientTick+0x98>

      //INIT REBOOT state?
      case DHCP_STATE_INIT_REBOOT:
         //When a client that already has a valid lease starts up after a
         //power-down or reboot, it starts here instead of the INIT state
         dhcpClientStateInitReboot(context);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff fdeb 	bl	8009734 <dhcpClientStateInitReboot>
         break;
 8009b5e:	e019      	b.n	8009b94 <dhcpClientTick+0x98>

      //REBOOTING state?
      case DHCP_STATE_REBOOTING:
         //A client that has rebooted with an assigned address is waiting for
         //a confirming reply from a server
         dhcpClientStateRebooting(context);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7ff fe0f 	bl	8009784 <dhcpClientStateRebooting>
         break;
 8009b66:	e015      	b.n	8009b94 <dhcpClientTick+0x98>

      //PROBING state?
      case DHCP_STATE_PROBING:
         //The client probes the newly received address
         dhcpClientStateProbing(context);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff fe77 	bl	800985c <dhcpClientStateProbing>
         break;
 8009b6e:	e011      	b.n	8009b94 <dhcpClientTick+0x98>

      //BOUND state?
      case DHCP_STATE_BOUND:
         //Client has a valid lease and is in its normal operating state
         dhcpClientStateBound(context);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff fed5 	bl	8009920 <dhcpClientStateBound>
         break;
 8009b76:	e00d      	b.n	8009b94 <dhcpClientTick+0x98>
      //RENEWING state?
      case DHCP_STATE_RENEWING:
         //Client is trying to renew its lease. It regularly sends DHCPREQUEST
         //messages with the server that gave it its current lease specified,
         //and waits for a reply
         dhcpClientStateRenewing(context);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff03 	bl	8009984 <dhcpClientStateRenewing>
         break;
 8009b7e:	e009      	b.n	8009b94 <dhcpClientTick+0x98>
      case DHCP_STATE_REBINDING:
         //The client has failed to renew its lease with the server that
         //originally granted it, and now seeks a lease extension with any
         //server that can hear it. It periodically sends DHCPREQUEST messages
         //with no server specified until it gets a reply or the lease ends
         dhcpClientStateRebinding(context);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff5b 	bl	8009a3c <dhcpClientStateRebinding>
         break;
 8009b86:	e005      	b.n	8009b94 <dhcpClientTick+0x98>

      //Invalid state?
      default:
         //Switch to the default state
         context->state = DHCP_STATE_INIT;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         break;
 8009b90:	e000      	b.n	8009b94 <dhcpClientTick+0x98>
      }
   }
 8009b92:	bf00      	nop
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <dhcpClientLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientLinkChangeEvent(DhcpClientContext *context)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Make sure the DHCP client has been properly instantiated
   if(context == NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d02a      	beq.n	8009c00 <dhcpClientLinkChangeEvent+0x64>
      return;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d002      	beq.n	8009bbe <dhcpClientLinkChangeEvent+0x22>
   {
      //The host address is no longer valid
      dhcpClientResetConfig(context);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fba7 	bl	800a30c <dhcpClientResetConfig>
      mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif
   }

   //Check whether the client already has a valid lease
   if(context->state >= DHCP_STATE_INIT_REBOOT)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d904      	bls.n	8009bd2 <dhcpClientLinkChangeEvent+0x36>
   {
      //Switch to the INIT-REBOOT state
      context->state = DHCP_STATE_INIT_REBOOT;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2203      	movs	r2, #3
 8009bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009bd0:	e003      	b.n	8009bda <dhcpClientLinkChangeEvent+0x3e>
   }
   else
   {
      //Switch to the INIT state
      context->state = DHCP_STATE_INIT;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   }

   //Any registered callback?
   if(context->settings.linkChangeEvent != NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00f      	beq.n	8009c02 <dhcpClientLinkChangeEvent+0x66>
   {
      //Release exclusive access
      osReleaseMutex(&netMutex);
 8009be2:	4809      	ldr	r0, [pc, #36]	; (8009c08 <dhcpClientLinkChangeEvent+0x6c>)
 8009be4:	f7f7 fc35 	bl	8001452 <osReleaseMutex>
      //Invoke user callback function
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8009bf2:	68f9      	ldr	r1, [r7, #12]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8009bf8:	4803      	ldr	r0, [pc, #12]	; (8009c08 <dhcpClientLinkChangeEvent+0x6c>)
 8009bfa:	f7f7 fc1b 	bl	8001434 <osAcquireMutex>
 8009bfe:	e000      	b.n	8009c02 <dhcpClientLinkChangeEvent+0x66>
      return;
 8009c00:	bf00      	nop
   }
}
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	20009178 	.word	0x20009178

08009c0c <dhcpClientSendDiscover>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDiscover(DhcpClientContext *context)
{
 8009c0c:	b5b0      	push	{r4, r5, r7, lr}
 8009c0e:	b098      	sub	sp, #96	; 0x60
 8009c10:	af04      	add	r7, sp, #16
 8009c12:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_DISCOVER;
 8009c14:	2301      	movs	r3, #1
 8009c16:	72fb      	strb	r3, [r7, #11]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8009c1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009c20:	f7fa f82b 	bl	8003c7a <nicGetLogicalInterface>
 8009c24:	64b8      	str	r0, [r7, #72]	; 0x48

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 8009c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f44f 7009 	mov.w	r0, #548	; 0x224
 8009c30:	f7ff fb76 	bl	8009320 <udpAllocBuffer>
 8009c34:	6478      	str	r0, [r7, #68]	; 0x44
   //Failed to allocate buffer?
   if(buffer == NULL)
 8009c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d101      	bne.n	8009c40 <dhcpClientSendDiscover+0x34>
      return ERROR_OUT_OF_MEMORY;
 8009c3c:	2364      	movs	r3, #100	; 0x64
 8009c3e:	e0b2      	b.n	8009da6 <dhcpClientSendDiscover+0x19a>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8009c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c42:	4619      	mov	r1, r3
 8009c44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009c46:	f7f9 f961 	bl	8002f0c <netBufferAt>
 8009c4a:	6438      	str	r0, [r7, #64]	; 0x40
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 8009c4c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8009c50:	2100      	movs	r1, #0
 8009c52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009c54:	f008 ff57 	bl	8012b06 <memset>

   //Format DHCPDISCOVER message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8009c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8009c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c60:	2201      	movs	r2, #1
 8009c62:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8009c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c66:	2206      	movs	r2, #6
 8009c68:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f7 fa71 	bl	8001156 <swapInt32>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c78:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fad6 	bl	800a22c <dhcpClientComputeElapsedTime>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c86:	811a      	strh	r2, [r3, #8]
   message->flags = HTONS(DHCP_FLAG_BROADCAST);
 8009c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c90:	729a      	strb	r2, [r3, #10]
 8009c92:	2200      	movs	r2, #0
 8009c94:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 8009c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c98:	2200      	movs	r2, #0
 8009c9a:	731a      	strb	r2, [r3, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	735a      	strb	r2, [r3, #13]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	739a      	strb	r2, [r3, #14]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cac:	331c      	adds	r3, #28
 8009cae:	32cc      	adds	r2, #204	; 0xcc
 8009cb0:	6810      	ldr	r0, [r2, #0]
 8009cb2:	6018      	str	r0, [r3, #0]
 8009cb4:	8892      	ldrh	r2, [r2, #4]
 8009cb6:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8009cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009cc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8009cca:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009cd4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009cde:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 8009ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 8009cea:	23f1      	movs	r3, #241	; 0xf1
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8009cee:	f107 030b 	add.w	r3, r7, #11
 8009cf2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	9200      	str	r2, [sp, #0]
 8009cfa:	2235      	movs	r2, #53	; 0x35
 8009cfc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009cfe:	f000 fc5b 	bl	800a5b8 <dhcpAddOption>
      &type, sizeof(type));

   //Check whether rapid commit is enabled
   if(context->settings.rapidCommit)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d008      	beq.n	8009d1c <dhcpClientSendDiscover+0x110>
   {
      //Include the Rapid Commit option if the client is prepared
      //to perform the DHCPDISCOVER-DHCPACK message exchange
      dhcpAddOption(message, &length, DHCP_OPT_RAPID_COMMIT, NULL, 0);
 8009d0a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	2300      	movs	r3, #0
 8009d14:	2250      	movs	r2, #80	; 0x50
 8009d16:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009d18:	f000 fc4e 	bl	800a5b8 <dhcpAddOption>
   }

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a1b      	ldr	r3, [r3, #32]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d007      	beq.n	8009d34 <dhcpClientSendDiscover+0x128>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1c      	ldr	r4, [r3, #32]
 8009d28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	47a0      	blx	r4
         DHCP_MSG_TYPE_DISCOVER);
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 8009d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d36:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009d3a:	bf38      	it	cc
 8009d3c:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8009d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d46:	4413      	add	r3, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009d4c:	f7f9 f838 	bl	8002dc0 <netBufferSetLength>

   //DHCP messages broadcast by a client prior to that client obtaining its
   //IP address must have the source address field in the IP header set to 0
   //(refer to RFC 2131, section 4.1)
   srcIpAddr.length = sizeof(Ipv4Addr);
 8009d50:	2304      	movs	r3, #4
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8009d54:	2300      	movs	r3, #0
 8009d56:	633b      	str	r3, [r7, #48]	; 0x30

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 8009d58:	2304      	movs	r3, #4
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d60:	62bb      	str	r3, [r7, #40]	; 0x28

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009d62:	4b13      	ldr	r3, [pc, #76]	; (8009db0 <dhcpClientSendDiscover+0x1a4>)
 8009d64:	f107 040c 	add.w	r4, r7, #12
 8009d68:	461d      	mov	r5, r3
 8009d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d72:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDISCOVER message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8009d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d78:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009d7c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009d80:	f107 020c 	add.w	r2, r7, #12
 8009d84:	9203      	str	r2, [sp, #12]
 8009d86:	9302      	str	r3, [sp, #8]
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	2343      	movs	r3, #67	; 0x43
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	4603      	mov	r3, r0
 8009d92:	2244      	movs	r2, #68	; 0x44
 8009d94:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009d96:	f7ff f98d 	bl	80090b4 <udpSendBuffer>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8009d9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009da0:	f7f8 ffda 	bl	8002d58 <netBufferFree>
   //Return status code
   return error;
 8009da4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3750      	adds	r7, #80	; 0x50
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bdb0      	pop	{r4, r5, r7, pc}
 8009dae:	bf00      	nop
 8009db0:	08014540 	.word	0x08014540

08009db4 <dhcpClientSendRequest>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendRequest(DhcpClientContext *context)
{
 8009db4:	b5b0      	push	{r4, r5, r7, lr}
 8009db6:	b09a      	sub	sp, #104	; 0x68
 8009db8:	af04      	add	r7, sp, #16
 8009dba:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_REQUEST;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	73fb      	strb	r3, [r7, #15]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	657b      	str	r3, [r7, #84]	; 0x54
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8009dc6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dc8:	f7f9 ff57 	bl	8003c7a <nicGetLogicalInterface>
 8009dcc:	6538      	str	r0, [r7, #80]	; 0x50

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 8009dd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009dd8:	4619      	mov	r1, r3
 8009dda:	f44f 7009 	mov.w	r0, #548	; 0x224
 8009dde:	f7ff fa9f 	bl	8009320 <udpAllocBuffer>
 8009de2:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate buffer?
   if(buffer == NULL)
 8009de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <dhcpClientSendRequest+0x3a>
      return ERROR_OUT_OF_MEMORY;
 8009dea:	2364      	movs	r3, #100	; 0x64
 8009dec:	e110      	b.n	800a010 <dhcpClientSendRequest+0x25c>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8009dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009df0:	4619      	mov	r1, r3
 8009df2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009df4:	f7f9 f88a 	bl	8002f0c <netBufferAt>
 8009df8:	6478      	str	r0, [r7, #68]	; 0x44
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 8009dfa:	f44f 7209 	mov.w	r2, #548	; 0x224
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009e02:	f008 fe80 	bl	8012b06 <memset>

   //Format DHCPREQUEST message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8009e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e08:	2201      	movs	r2, #1
 8009e0a:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8009e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e0e:	2201      	movs	r2, #1
 8009e10:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8009e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e14:	2206      	movs	r2, #6
 8009e16:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7f7 f99a 	bl	8001156 <swapInt32>
 8009e22:	4602      	mov	r2, r0
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f9ff 	bl	800a22c <dhcpClientComputeElapsedTime>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	461a      	mov	r2, r3
 8009e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e34:	811a      	strh	r2, [r3, #8]

   //The client IP address must be included if the client is fully configured
   //and can respond to ARP requests
   if(context->state == DHCP_STATE_RENEWING ||
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e3c:	2b07      	cmp	r3, #7
 8009e3e:	d004      	beq.n	8009e4a <dhcpClientSendRequest+0x96>
      context->state == DHCP_STATE_REBINDING)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   if(context->state == DHCP_STATE_RENEWING ||
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d111      	bne.n	8009e6e <dhcpClientSendRequest+0xba>
   {
      message->flags = 0;
 8009e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	729a      	strb	r2, [r3, #10]
 8009e50:	2200      	movs	r2, #0
 8009e52:	72da      	strb	r2, [r3, #11]
      message->ciaddr = interface->ipv4Context.addrList[i].addr;
 8009e54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	440b      	add	r3, r1
 8009e62:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e6a:	60da      	str	r2, [r3, #12]
 8009e6c:	e00f      	b.n	8009e8e <dhcpClientSendRequest+0xda>
   }
   else
   {
      message->flags = HTONS(DHCP_FLAG_BROADCAST);
 8009e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e70:	2200      	movs	r2, #0
 8009e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e76:	729a      	strb	r2, [r3, #10]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	72da      	strb	r2, [r3, #11]
      message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 8009e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7e:	2200      	movs	r2, #0
 8009e80:	731a      	strb	r2, [r3, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	735a      	strb	r2, [r3, #13]
 8009e86:	2200      	movs	r2, #0
 8009e88:	739a      	strb	r2, [r3, #14]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	73da      	strb	r2, [r3, #15]
   }

   //Client hardware address
   message->chaddr = logicalInterface->macAddr;
 8009e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e92:	331c      	adds	r3, #28
 8009e94:	32cc      	adds	r2, #204	; 0xcc
 8009e96:	6810      	ldr	r0, [r2, #0]
 8009e98:	6018      	str	r0, [r3, #0]
 8009e9a:	8892      	ldrh	r2, [r2, #4]
 8009e9c:	809a      	strh	r2, [r3, #4]
   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8009e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009ea6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8009eb0:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8009eba:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8009ec4:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 8009ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eca:	22ff      	movs	r2, #255	; 0xff
 8009ecc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 8009ed0:	23f1      	movs	r3, #241	; 0xf1
 8009ed2:	63bb      	str	r3, [r7, #56]	; 0x38

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8009ed4:	f107 030f 	add.w	r3, r7, #15
 8009ed8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009edc:	2201      	movs	r2, #1
 8009ede:	9200      	str	r2, [sp, #0]
 8009ee0:	2235      	movs	r2, #53	; 0x35
 8009ee2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ee4:	f000 fb68 	bl	800a5b8 <dhcpAddOption>
      &type, sizeof(type));

   //Server Identifier option
   if(context->state == DHCP_STATE_REQUESTING)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d109      	bne.n	8009f06 <dhcpClientSendRequest+0x152>
   {
      dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
         &context->serverIpAddr, sizeof(Ipv4Addr));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	3344      	adds	r3, #68	; 0x44
      dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 8009ef6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009efa:	2204      	movs	r2, #4
 8009efc:	9200      	str	r2, [sp, #0]
 8009efe:	2236      	movs	r2, #54	; 0x36
 8009f00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f02:	f000 fb59 	bl	800a5b8 <dhcpAddOption>
   }

   //Requested IP Address option
   if(context->state == DHCP_STATE_REQUESTING ||
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d004      	beq.n	8009f1a <dhcpClientSendRequest+0x166>
      context->state == DHCP_STATE_REBOOTING)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   if(context->state == DHCP_STATE_REQUESTING ||
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	d109      	bne.n	8009f2e <dhcpClientSendRequest+0x17a>
   {
      dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
         &context->requestedIpAddr, sizeof(Ipv4Addr));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3348      	adds	r3, #72	; 0x48
      dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 8009f1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f22:	2204      	movs	r2, #4
 8009f24:	9200      	str	r2, [sp, #0]
 8009f26:	2232      	movs	r2, #50	; 0x32
 8009f28:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f2a:	f000 fb45 	bl	800a5b8 <dhcpAddOption>
   }

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <dhcpClientSendRequest+0x192>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1c      	ldr	r4, [r3, #32]
 8009f3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f3e:	2303      	movs	r3, #3
 8009f40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	47a0      	blx	r4
         DHCP_MSG_TYPE_REQUEST);
   }

   //Parameter Request List option
   if(dhcpGetOption(message, length, DHCP_OPT_PARAM_REQUEST_LIST) == NULL)
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	2237      	movs	r2, #55	; 0x37
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f4e:	f000 fb92 	bl	800a676 <dhcpGetOption>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d108      	bne.n	8009f6a <dhcpClientSendRequest+0x1b6>
   {
      //Use the default list of requested options
      dhcpAddOption(message, &length, DHCP_OPT_PARAM_REQUEST_LIST,
 8009f58:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009f5c:	2307      	movs	r3, #7
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	4b2d      	ldr	r3, [pc, #180]	; (800a018 <dhcpClientSendRequest+0x264>)
 8009f62:	2237      	movs	r2, #55	; 0x37
 8009f64:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f66:	f000 fb27 	bl	800a5b8 <dhcpAddOption>
         dhcpOptionList, sizeof(dhcpOptionList));
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f70:	bf38      	it	cc
 8009f72:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 8009f76:	63bb      	str	r3, [r7, #56]	; 0x38

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8009f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	4413      	add	r3, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009f82:	f7f8 ff1d 	bl	8002dc0 <netBufferSetLength>

   //IP address is being renewed?
   if(context->state == DHCP_STATE_RENEWING)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f8c:	2b07      	cmp	r3, #7
 8009f8e:	d112      	bne.n	8009fb6 <dhcpClientSendRequest+0x202>
   {
      //Set source IP address
      srcIpAddr.length = sizeof(Ipv4Addr);
 8009f90:	2304      	movs	r3, #4
 8009f92:	633b      	str	r3, [r7, #48]	; 0x30
      srcIpAddr.ipv4Addr = interface->ipv4Context.addrList[i].addr;
 8009f94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f98:	4613      	mov	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	440b      	add	r3, r1
 8009fa2:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	637b      	str	r3, [r7, #52]	; 0x34

      //The client transmits the message directly to the server that initially
      //granted the lease
      destIpAddr.length = sizeof(Ipv4Addr);
 8009faa:	2304      	movs	r3, #4
 8009fac:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = context->serverIpAddr;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009fb4:	e008      	b.n	8009fc8 <dhcpClientSendRequest+0x214>
   else
   {
      //DHCP messages broadcast by a client prior to that client obtaining its
      //IP address must have the source address field in the IP header set to 0
      //(refer to RFC 2131, section 4.1)
      srcIpAddr.length = sizeof(Ipv4Addr);
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	633b      	str	r3, [r7, #48]	; 0x30
      srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34

      //Broadcast the message
      destIpAddr.length = sizeof(Ipv4Addr);
 8009fbe:	2304      	movs	r3, #4
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8009fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009fc8:	4b14      	ldr	r3, [pc, #80]	; (800a01c <dhcpClientSendRequest+0x268>)
 8009fca:	f107 0410 	add.w	r4, r7, #16
 8009fce:	461d      	mov	r5, r3
 8009fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009fd4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fd8:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DHCPREQUEST message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009fe2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009fe6:	f107 0210 	add.w	r2, r7, #16
 8009fea:	9203      	str	r2, [sp, #12]
 8009fec:	9302      	str	r3, [sp, #8]
 8009fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	2343      	movs	r3, #67	; 0x43
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2244      	movs	r2, #68	; 0x44
 8009ffa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ffc:	f7ff f85a 	bl	80090b4 <udpSendBuffer>
 800a000:	4603      	mov	r3, r0
 800a002:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800a006:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a008:	f7f8 fea6 	bl	8002d58 <netBufferFree>
   //Return status code
   return error;
 800a00c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 800a010:	4618      	mov	r0, r3
 800a012:	3758      	adds	r7, #88	; 0x58
 800a014:	46bd      	mov	sp, r7
 800a016:	bdb0      	pop	{r4, r5, r7, pc}
 800a018:	08014568 	.word	0x08014568
 800a01c:	08014540 	.word	0x08014540

0800a020 <dhcpClientSendDecline>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDecline(DhcpClientContext *context)
{
 800a020:	b5b0      	push	{r4, r5, r7, lr}
 800a022:	b098      	sub	sp, #96	; 0x60
 800a024:	af04      	add	r7, sp, #16
 800a026:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_DECLINE;
 800a028:	2304      	movs	r3, #4
 800a02a:	72fb      	strb	r3, [r7, #11]

   //Point to the underlying network interface
   interface = context->settings.interface;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	64fb      	str	r3, [r7, #76]	; 0x4c
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800a032:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a034:	f7f9 fe21 	bl	8003c7a <nicGetLogicalInterface>
 800a038:	64b8      	str	r0, [r7, #72]	; 0x48

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 800a03a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a03e:	4619      	mov	r1, r3
 800a040:	f44f 7009 	mov.w	r0, #548	; 0x224
 800a044:	f7ff f96c 	bl	8009320 <udpAllocBuffer>
 800a048:	6478      	str	r0, [r7, #68]	; 0x44
   //Failed to allocate buffer?
   if(buffer == NULL)
 800a04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <dhcpClientSendDecline+0x34>
      return ERROR_OUT_OF_MEMORY;
 800a050:	2364      	movs	r3, #100	; 0x64
 800a052:	e0b5      	b.n	800a1c0 <dhcpClientSendDecline+0x1a0>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	4619      	mov	r1, r3
 800a058:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a05a:	f7f8 ff57 	bl	8002f0c <netBufferAt>
 800a05e:	6438      	str	r0, [r7, #64]	; 0x40
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 800a060:	f44f 7209 	mov.w	r2, #548	; 0x224
 800a064:	2100      	movs	r1, #0
 800a066:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a068:	f008 fd4d 	bl	8012b06 <memset>

   //Format DHCPDECLINE message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 800a06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a06e:	2201      	movs	r2, #1
 800a070:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 800a072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a074:	2201      	movs	r2, #1
 800a076:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 800a078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a07a:	2206      	movs	r2, #6
 800a07c:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a082:	4618      	mov	r0, r3
 800a084:	f7f7 f867 	bl	8001156 <swapInt32>
 800a088:	4602      	mov	r2, r0
 800a08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08c:	605a      	str	r2, [r3, #4]
   message->secs = 0;
 800a08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a090:	2200      	movs	r2, #0
 800a092:	721a      	strb	r2, [r3, #8]
 800a094:	2200      	movs	r2, #0
 800a096:	725a      	strb	r2, [r3, #9]
   message->flags = 0;
 800a098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a09a:	2200      	movs	r2, #0
 800a09c:	729a      	strb	r2, [r3, #10]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 800a0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	731a      	strb	r2, [r3, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	735a      	strb	r2, [r3, #13]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	739a      	strb	r2, [r3, #14]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0b8:	331c      	adds	r3, #28
 800a0ba:	32cc      	adds	r2, #204	; 0xcc
 800a0bc:	6810      	ldr	r0, [r2, #0]
 800a0be:	6018      	str	r0, [r3, #0]
 800a0c0:	8892      	ldrh	r2, [r2, #4]
 800a0c2:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 800a0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800a0cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800a0d6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800a0e0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800a0ea:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 800a0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 800a0f6:	23f1      	movs	r3, #241	; 0xf1
 800a0f8:	637b      	str	r3, [r7, #52]	; 0x34

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 800a0fa:	f107 030b 	add.w	r3, r7, #11
 800a0fe:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a102:	2201      	movs	r2, #1
 800a104:	9200      	str	r2, [sp, #0]
 800a106:	2235      	movs	r2, #53	; 0x35
 800a108:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a10a:	f000 fa55 	bl	800a5b8 <dhcpAddOption>
      &type, sizeof(type));

   //Server Identifier option
   dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
      &context->serverIpAddr, sizeof(Ipv4Addr));
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3344      	adds	r3, #68	; 0x44
   dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 800a112:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a116:	2204      	movs	r2, #4
 800a118:	9200      	str	r2, [sp, #0]
 800a11a:	2236      	movs	r2, #54	; 0x36
 800a11c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a11e:	f000 fa4b 	bl	800a5b8 <dhcpAddOption>

   //Requested IP Address option
   dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
      &context->requestedIpAddr, sizeof(Ipv4Addr));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3348      	adds	r3, #72	; 0x48
   dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 800a126:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800a12a:	2204      	movs	r2, #4
 800a12c:	9200      	str	r2, [sp, #0]
 800a12e:	2232      	movs	r2, #50	; 0x32
 800a130:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a132:	f000 fa41 	bl	800a5b8 <dhcpAddOption>

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <dhcpClientSendDecline+0x12e>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a1c      	ldr	r4, [r3, #32]
 800a142:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800a146:	2304      	movs	r3, #4
 800a148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	47a0      	blx	r4
         DHCP_MSG_TYPE_DECLINE);
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 800a14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a150:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a154:	bf38      	it	cc
 800a156:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 800a15a:	637b      	str	r3, [r7, #52]	; 0x34

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800a15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a160:	4413      	add	r3, r2
 800a162:	4619      	mov	r1, r3
 800a164:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a166:	f7f8 fe2b 	bl	8002dc0 <netBufferSetLength>

   //Use the unspecified address as source address
   srcIpAddr.length = sizeof(Ipv4Addr);
 800a16a:	2304      	movs	r3, #4
 800a16c:	62fb      	str	r3, [r7, #44]	; 0x2c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 800a16e:	2300      	movs	r3, #0
 800a170:	633b      	str	r3, [r7, #48]	; 0x30

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 800a172:	2304      	movs	r3, #4
 800a174:	627b      	str	r3, [r7, #36]	; 0x24
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 800a176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a17a:	62bb      	str	r3, [r7, #40]	; 0x28

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <dhcpClientSendDecline+0x1a8>)
 800a17e:	f107 040c 	add.w	r4, r7, #12
 800a182:	461d      	mov	r5, r3
 800a184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a188:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a18c:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDECLINE message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 800a190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a192:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a196:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800a19a:	f107 020c 	add.w	r2, r7, #12
 800a19e:	9203      	str	r2, [sp, #12]
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	2343      	movs	r3, #67	; 0x43
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2244      	movs	r2, #68	; 0x44
 800a1ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a1b0:	f7fe ff80 	bl	80090b4 <udpSendBuffer>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800a1b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a1ba:	f7f8 fdcd 	bl	8002d58 <netBufferFree>
   //Return status code
   return error;
 800a1be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3750      	adds	r7, #80	; 0x50
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1c8:	08014540 	.word	0x08014540

0800a1cc <dhcpClientCheckTimeout>:
 * @brief Manage DHCP configuration timeout
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientCheckTimeout(DhcpClientContext *context)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]

   //Get current time
   time = osGetSystemTime();
 800a1da:	f7f7 f949 	bl	8001470 <osGetSystemTime>
 800a1de:	60b8      	str	r0, [r7, #8]

   //Any registered callback?
   if(context->settings.timeoutEvent != NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	695b      	ldr	r3, [r3, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01a      	beq.n	800a21e <dhcpClientCheckTimeout+0x52>
   {
      //DHCP configuration timeout?
      if(timeCompare(time, context->configStartTime + context->settings.timeout) >= 0)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	db11      	blt.n	800a21e <dhcpClientCheckTimeout+0x52>
      {
         //Ensure the callback function is only called once
         if(!context->timeoutEventDone)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d10d      	bne.n	800a21e <dhcpClientCheckTimeout+0x52>
         {
            //Release exclusive access
            osReleaseMutex(&netMutex);
 800a202:	4809      	ldr	r0, [pc, #36]	; (800a228 <dhcpClientCheckTimeout+0x5c>)
 800a204:	f7f7 f925 	bl	8001452 <osReleaseMutex>
            //Invoke user callback function
            context->settings.timeoutEvent(context, interface);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	68f9      	ldr	r1, [r7, #12]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4798      	blx	r3
            //Get exclusive access
            osAcquireMutex(&netMutex);
 800a212:	4805      	ldr	r0, [pc, #20]	; (800a228 <dhcpClientCheckTimeout+0x5c>)
 800a214:	f7f7 f90e 	bl	8001434 <osAcquireMutex>

            //Set flag
            context->timeoutEventDone = TRUE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
         }
      }
   }
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20009178 	.word	0x20009178

0800a22c <dhcpClientComputeElapsedTime>:
 * @param[in] context Pointer to the DHCP client context
 * @return The elapsed time expressed in seconds
 **/

uint16_t dhcpClientComputeElapsedTime(DhcpClientContext *context)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Compute the time elapsed since the DHCP configuration process started
   time = (osGetSystemTime() - context->configStartTime) / 1000;
 800a234:	f7f7 f91c 	bl	8001470 <osGetSystemTime>
 800a238:	4602      	mov	r2, r0
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <dhcpClientComputeElapsedTime+0x40>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	60fb      	str	r3, [r7, #12]

   //The value 0xFFFF is used to represent any elapsed time values
   //greater than the largest time value that can be represented
   time = MIN(time, 0xFFFF);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a250:	4293      	cmp	r3, r2
 800a252:	bf28      	it	cs
 800a254:	4613      	movcs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

   //Convert the 16-bit value to network byte order
   return htons(time);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f6 ff6c 	bl	800113a <swapInt16>
 800a262:	4603      	mov	r3, r0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	10624dd3 	.word	0x10624dd3

0800a270 <dhcpClientChangeState>:
 * @param[in] delay Initial delay
 **/

void dhcpClientChangeState(DhcpClientContext *context,
   DhcpState newState, systime_t delay)
{
 800a270:	b590      	push	{r4, r7, lr}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	460b      	mov	r3, r1
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	72fb      	strb	r3, [r7, #11]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 800a27e:	f7f7 f8f7 	bl	8001470 <osGetSystemTime>
 800a282:	6178      	str	r0, [r7, #20]

#if (DHCP_TRACE_LEVEL >= TRACE_LEVEL_INFO)
   //Sanity check
   if(newState <= DHCP_STATE_REBINDING)
 800a284:	7afb      	ldrb	r3, [r7, #11]
 800a286:	2b08      	cmp	r3, #8
 800a288:	d813      	bhi.n	800a2b2 <dhcpClientChangeState+0x42>
         "RENEWING",
         "REBINDING"
      };

      //Debug message
      TRACE_INFO("%s: DHCP client %s state\r\n",
 800a28a:	f7f7 f82b 	bl	80012e4 <osSuspendAllTasks>
 800a28e:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <dhcpClientChangeState+0x8c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68dc      	ldr	r4, [r3, #12]
 800a294:	2100      	movs	r1, #0
 800a296:	6978      	ldr	r0, [r7, #20]
 800a298:	f7f6 ff76 	bl	8001188 <formatSystemTime>
 800a29c:	4602      	mov	r2, r0
 800a29e:	7afb      	ldrb	r3, [r7, #11]
 800a2a0:	4917      	ldr	r1, [pc, #92]	; (800a300 <dhcpClientChangeState+0x90>)
 800a2a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a2a6:	4917      	ldr	r1, [pc, #92]	; (800a304 <dhcpClientChangeState+0x94>)
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f008 fb4f 	bl	801294c <fiprintf>
 800a2ae:	f7f7 f824 	bl	80012fa <osResumeAllTasks>
         formatSystemTime(time, NULL), stateLabel[newState]);
   }
#endif

   //Set time stamp
   context->timestamp = time;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	635a      	str	r2, [r3, #52]	; 0x34
   //Set initial delay
   context->timeout = delay;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38
   //Reset retransmission counter
   context->retransmitCount = 0;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40
   //Switch to the new state
   context->state = newState;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	7afa      	ldrb	r2, [r7, #11]
 800a2c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   //Any registered callback?
   if(context->settings.stateChangeEvent != NULL)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00e      	beq.n	800a2f2 <dhcpClientChangeState+0x82>
   {
      NetInterface *interface;

      //Point to the underlying network interface
      interface = context->settings.interface;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	613b      	str	r3, [r7, #16]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 800a2da:	480b      	ldr	r0, [pc, #44]	; (800a308 <dhcpClientChangeState+0x98>)
 800a2dc:	f7f7 f8b9 	bl	8001452 <osReleaseMutex>
      //Invoke user callback function
      context->settings.stateChangeEvent(context, interface, newState);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	7afa      	ldrb	r2, [r7, #11]
 800a2e6:	6939      	ldr	r1, [r7, #16]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 800a2ec:	4806      	ldr	r0, [pc, #24]	; (800a308 <dhcpClientChangeState+0x98>)
 800a2ee:	f7f7 f8a1 	bl	8001434 <osAcquireMutex>
   }
}
 800a2f2:	bf00      	nop
 800a2f4:	371c      	adds	r7, #28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd90      	pop	{r4, r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000034 	.word	0x20000034
 800a300:	20000004 	.word	0x20000004
 800a304:	0801424c 	.word	0x0801424c
 800a308:	20009178 	.word	0x20009178

0800a30c <dhcpClientResetConfig>:
 * @brief Reset DHCP configuration
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientResetConfig(DhcpClientContext *context)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
   uint_t i;
   uint_t j;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	613b      	str	r3, [r7, #16]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	60fb      	str	r3, [r7, #12]

   //The host address is not longer valid
   interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 800a320:	6939      	ldr	r1, [r7, #16]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
   interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 800a336:	6939      	ldr	r1, [r7, #16]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4613      	mov	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4413      	add	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800a348:	2200      	movs	r2, #0
 800a34a:	701a      	strb	r2, [r3, #0]

   //Clear subnet mask
   interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 800a34c:	6939      	ldr	r1, [r7, #16]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]

   //The default gateway is no longer valid
   interface->ipv4Context.addrList[i].defaultGateway = IPV4_UNSPECIFIED_ADDR;
 800a362:	6939      	ldr	r1, [r7, #16]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	440b      	add	r3, r1
 800a370:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a374:	2200      	movs	r2, #0
 800a376:	601a      	str	r2, [r3, #0]

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10f      	bne.n	800a3a0 <dhcpClientResetConfig+0x94>
   {
      //Loop through the list of DNS servers
      for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 800a380:	2300      	movs	r3, #0
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e009      	b.n	800a39a <dhcpClientResetConfig+0x8e>
      {
         //The DNS server is no longer valid
         interface->ipv4Context.dnsServerList[j] = IPV4_UNSPECIFIED_ADDR;
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	337a      	adds	r3, #122	; 0x7a
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	4413      	add	r3, r2
 800a390:	2200      	movs	r2, #0
 800a392:	609a      	str	r2, [r3, #8]
      for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	3301      	adds	r3, #1
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d9f2      	bls.n	800a386 <dhcpClientResetConfig+0x7a>
      }
   }
}
 800a3a0:	bf00      	nop
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <dhcpClientDumpConfig>:
 * @brief Dump DHCP configuration for debugging purpose
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientDumpConfig(DhcpClientContext *context)
{
 800a3ac:	b5b0      	push	{r4, r5, r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
   uint_t j;
   NetInterface *interface;
   Ipv4Context *ipv4Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	613b      	str	r3, [r7, #16]
   //Point to the IPv4 context
   ipv4Context = &interface->ipv4Context;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800a3c0:	60fb      	str	r3, [r7, #12]

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	60bb      	str	r3, [r7, #8]

   //Debug message
   TRACE_INFO("\r\n");
 800a3c8:	f7f6 ff8c 	bl	80012e4 <osSuspendAllTasks>
 800a3cc:	4b6e      	ldr	r3, [pc, #440]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	2101      	movs	r1, #1
 800a3d6:	486d      	ldr	r0, [pc, #436]	; (800a58c <dhcpClientDumpConfig+0x1e0>)
 800a3d8:	f008 fb2a 	bl	8012a30 <fwrite>
 800a3dc:	f7f6 ff8d 	bl	80012fa <osResumeAllTasks>
   TRACE_INFO("DHCP configuration:\r\n");
 800a3e0:	f7f6 ff80 	bl	80012e4 <osSuspendAllTasks>
 800a3e4:	4b68      	ldr	r3, [pc, #416]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	2215      	movs	r2, #21
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	4868      	ldr	r0, [pc, #416]	; (800a590 <dhcpClientDumpConfig+0x1e4>)
 800a3f0:	f008 fb1e 	bl	8012a30 <fwrite>
 800a3f4:	f7f6 ff81 	bl	80012fa <osResumeAllTasks>

   //Lease start time
   TRACE_INFO("  Lease Start Time = %s\r\n",
 800a3f8:	f7f6 ff74 	bl	80012e4 <osSuspendAllTasks>
 800a3fc:	4b62      	ldr	r3, [pc, #392]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68dc      	ldr	r4, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a406:	2100      	movs	r1, #0
 800a408:	4618      	mov	r0, r3
 800a40a:	f7f6 febd 	bl	8001188 <formatSystemTime>
 800a40e:	4603      	mov	r3, r0
 800a410:	461a      	mov	r2, r3
 800a412:	4960      	ldr	r1, [pc, #384]	; (800a594 <dhcpClientDumpConfig+0x1e8>)
 800a414:	4620      	mov	r0, r4
 800a416:	f008 fa99 	bl	801294c <fiprintf>
 800a41a:	f7f6 ff6e 	bl	80012fa <osResumeAllTasks>
      formatSystemTime(context->leaseStartTime, NULL));

   //Lease time
   TRACE_INFO("  Lease Time = %" PRIu32 "s\r\n", context->leaseTime);
 800a41e:	f7f6 ff61 	bl	80012e4 <osSuspendAllTasks>
 800a422:	4b59      	ldr	r3, [pc, #356]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68d8      	ldr	r0, [r3, #12]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42c:	461a      	mov	r2, r3
 800a42e:	495a      	ldr	r1, [pc, #360]	; (800a598 <dhcpClientDumpConfig+0x1ec>)
 800a430:	f008 fa8c 	bl	801294c <fiprintf>
 800a434:	f7f6 ff61 	bl	80012fa <osResumeAllTasks>
   //Renewal time
   TRACE_INFO("  T1 = %" PRIu32 "s\r\n", context->t1);
 800a438:	f7f6 ff54 	bl	80012e4 <osSuspendAllTasks>
 800a43c:	4b52      	ldr	r3, [pc, #328]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a446:	461a      	mov	r2, r3
 800a448:	4954      	ldr	r1, [pc, #336]	; (800a59c <dhcpClientDumpConfig+0x1f0>)
 800a44a:	f008 fa7f 	bl	801294c <fiprintf>
 800a44e:	f7f6 ff54 	bl	80012fa <osResumeAllTasks>
   //Rebinding time
   TRACE_INFO("  T2 = %" PRIu32 "s\r\n", context->t2);
 800a452:	f7f6 ff47 	bl	80012e4 <osSuspendAllTasks>
 800a456:	4b4c      	ldr	r3, [pc, #304]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68d8      	ldr	r0, [r3, #12]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a460:	461a      	mov	r2, r3
 800a462:	494f      	ldr	r1, [pc, #316]	; (800a5a0 <dhcpClientDumpConfig+0x1f4>)
 800a464:	f008 fa72 	bl	801294c <fiprintf>
 800a468:	f7f6 ff47 	bl	80012fa <osResumeAllTasks>

   //Host address
   TRACE_INFO("  IPv4 Address = %s\r\n",
 800a46c:	f7f6 ff3a 	bl	80012e4 <osSuspendAllTasks>
 800a470:	4b45      	ldr	r3, [pc, #276]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68dc      	ldr	r4, [r3, #12]
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	440b      	add	r3, r1
 800a484:	3310      	adds	r3, #16
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f003 f812 	bl	800d4b4 <ipv4AddrToString>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	4943      	ldr	r1, [pc, #268]	; (800a5a4 <dhcpClientDumpConfig+0x1f8>)
 800a496:	4620      	mov	r0, r4
 800a498:	f008 fa58 	bl	801294c <fiprintf>
 800a49c:	f7f6 ff2d 	bl	80012fa <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].addr, NULL));

   //Subnet mask
   TRACE_INFO("  Subnet Mask = %s\r\n",
 800a4a0:	f7f6 ff20 	bl	80012e4 <osSuspendAllTasks>
 800a4a4:	4b38      	ldr	r3, [pc, #224]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68dc      	ldr	r4, [r3, #12]
 800a4aa:	68f9      	ldr	r1, [r7, #12]
 800a4ac:	68ba      	ldr	r2, [r7, #8]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	331c      	adds	r3, #28
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f002 fff8 	bl	800d4b4 <ipv4AddrToString>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	4937      	ldr	r1, [pc, #220]	; (800a5a8 <dhcpClientDumpConfig+0x1fc>)
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f008 fa3e 	bl	801294c <fiprintf>
 800a4d0:	f7f6 ff13 	bl	80012fa <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].subnetMask, NULL));

   //Default gateway
   TRACE_INFO("  Default Gateway = %s\r\n",
 800a4d4:	f7f6 ff06 	bl	80012e4 <osSuspendAllTasks>
 800a4d8:	4b2b      	ldr	r3, [pc, #172]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68dc      	ldr	r4, [r3, #12]
 800a4de:	68f9      	ldr	r1, [r7, #12]
 800a4e0:	68ba      	ldr	r2, [r7, #8]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	440b      	add	r3, r1
 800a4ec:	3320      	adds	r3, #32
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f002 ffde 	bl	800d4b4 <ipv4AddrToString>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	492b      	ldr	r1, [pc, #172]	; (800a5ac <dhcpClientDumpConfig+0x200>)
 800a4fe:	4620      	mov	r0, r4
 800a500:	f008 fa24 	bl	801294c <fiprintf>
 800a504:	f7f6 fef9 	bl	80012fa <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].defaultGateway, NULL));

   //DNS servers
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 800a508:	2300      	movs	r3, #0
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	e01b      	b.n	800a546 <dhcpClientDumpConfig+0x19a>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", j + 1,
 800a50e:	f7f6 fee9 	bl	80012e4 <osSuspendAllTasks>
 800a512:	4b1d      	ldr	r3, [pc, #116]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68dc      	ldr	r4, [r3, #12]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	1c5d      	adds	r5, r3, #1
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	3308      	adds	r3, #8
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	2100      	movs	r1, #0
 800a52a:	4618      	mov	r0, r3
 800a52c:	f002 ffc2 	bl	800d4b4 <ipv4AddrToString>
 800a530:	4603      	mov	r3, r0
 800a532:	462a      	mov	r2, r5
 800a534:	491e      	ldr	r1, [pc, #120]	; (800a5b0 <dhcpClientDumpConfig+0x204>)
 800a536:	4620      	mov	r0, r4
 800a538:	f008 fa08 	bl	801294c <fiprintf>
 800a53c:	f7f6 fedd 	bl	80012fa <osResumeAllTasks>
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	3301      	adds	r3, #1
 800a544:	617b      	str	r3, [r7, #20]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d9e0      	bls.n	800a50e <dhcpClientDumpConfig+0x162>
         ipv4AddrToString(ipv4Context->dnsServerList[j], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", interface->ipv4Context.linkMtu);
 800a54c:	f7f6 feca 	bl	80012e4 <osSuspendAllTasks>
 800a550:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68d8      	ldr	r0, [r3, #12]
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a55c:	461a      	mov	r2, r3
 800a55e:	4915      	ldr	r1, [pc, #84]	; (800a5b4 <dhcpClientDumpConfig+0x208>)
 800a560:	f008 f9f4 	bl	801294c <fiprintf>
 800a564:	f7f6 fec9 	bl	80012fa <osResumeAllTasks>
   TRACE_INFO("\r\n");
 800a568:	f7f6 febc 	bl	80012e4 <osSuspendAllTasks>
 800a56c:	4b06      	ldr	r3, [pc, #24]	; (800a588 <dhcpClientDumpConfig+0x1dc>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	2202      	movs	r2, #2
 800a574:	2101      	movs	r1, #1
 800a576:	4805      	ldr	r0, [pc, #20]	; (800a58c <dhcpClientDumpConfig+0x1e0>)
 800a578:	f008 fa5a 	bl	8012a30 <fwrite>
 800a57c:	f7f6 febd 	bl	80012fa <osResumeAllTasks>
#endif
}
 800a580:	bf00      	nop
 800a582:	3718      	adds	r7, #24
 800a584:	46bd      	mov	sp, r7
 800a586:	bdb0      	pop	{r4, r5, r7, pc}
 800a588:	20000034 	.word	0x20000034
 800a58c:	08014268 	.word	0x08014268
 800a590:	0801426c 	.word	0x0801426c
 800a594:	08014284 	.word	0x08014284
 800a598:	080142a0 	.word	0x080142a0
 800a59c:	080142b8 	.word	0x080142b8
 800a5a0:	080142c8 	.word	0x080142c8
 800a5a4:	080142d8 	.word	0x080142d8
 800a5a8:	080142f0 	.word	0x080142f0
 800a5ac:	08014308 	.word	0x08014308
 800a5b0:	08014324 	.word	0x08014324
 800a5b4:	0801433c 	.word	0x0801433c

0800a5b8 <dhcpAddOption>:
 * @return Error code
 **/

error_t dhcpAddOption(DhcpMessage *message, size_t *messageLen,
   uint8_t optionCode, const void *optionValue, size_t optionLen)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	71fb      	strb	r3, [r7, #7]
   size_t n;
   DhcpOption *option;

   //Check parameters
   if(message == NULL || messageLen == NULL)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d002      	beq.n	800a5d4 <dhcpAddOption+0x1c>
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <dhcpAddOption+0x20>
      return ERROR_INVALID_PARAMETER;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	e04a      	b.n	800a66e <dhcpAddOption+0xb6>

   //Check the length of the DHCP message
   if(*messageLen < (sizeof(DhcpMessage) + sizeof(uint8_t)))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2bf0      	cmp	r3, #240	; 0xf0
 800a5de:	d801      	bhi.n	800a5e4 <dhcpAddOption+0x2c>
      return ERROR_INVALID_LENGTH;
 800a5e0:	23ec      	movs	r3, #236	; 0xec
 800a5e2:	e044      	b.n	800a66e <dhcpAddOption+0xb6>

   //Check the length of the option
   if(optionLen > 0 && optionValue == NULL)
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <dhcpAddOption+0x3c>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <dhcpAddOption+0x3c>
      return ERROR_INVALID_PARAMETER;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e03c      	b.n	800a66e <dhcpAddOption+0xb6>

   if(optionLen > UINT8_MAX)
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	2bff      	cmp	r3, #255	; 0xff
 800a5f8:	d901      	bls.n	800a5fe <dhcpAddOption+0x46>
      return ERROR_INVALID_LENGTH;
 800a5fa:	23ec      	movs	r3, #236	; 0xec
 800a5fc:	e037      	b.n	800a66e <dhcpAddOption+0xb6>

   //Ensure that the length of the resulting message will not exceed the
   //maximum DHCP message size
   if((*messageLen + sizeof(DhcpOption) + optionLen) > DHCP_MAX_MSG_SIZE)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	6a3b      	ldr	r3, [r7, #32]
 800a604:	4413      	add	r3, r2
 800a606:	3302      	adds	r3, #2
 800a608:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 800a60c:	d902      	bls.n	800a614 <dhcpAddOption+0x5c>
      return ERROR_BUFFER_OVERFLOW;
 800a60e:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800a612:	e02c      	b.n	800a66e <dhcpAddOption+0xb6>

   //Retrieve the total length of the options field, excluding the end option
   n = *messageLen - sizeof(DhcpMessage) - sizeof(uint8_t);
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3bf1      	subs	r3, #241	; 0xf1
 800a61a:	617b      	str	r3, [r7, #20]

   //Point to the buffer where to format the option
   option = (DhcpOption *) (message->options + n);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

   //Set option code
   option->code = optionCode;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	79fa      	ldrb	r2, [r7, #7]
 800a62c:	701a      	strb	r2, [r3, #0]
   //Set option length
   option->length = (uint8_t) optionLen;
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	b2da      	uxtb	r2, r3
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	705a      	strb	r2, [r3, #1]
   //Copy option value
   osMemcpy(option->value, optionValue, optionLen);
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3302      	adds	r3, #2
 800a63a:	6a3a      	ldr	r2, [r7, #32]
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f008 fa39 	bl	8012ab6 <memcpy>

   //Determine the length of the options field
   n += sizeof(DhcpOption) + option->length;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	461a      	mov	r2, r3
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	4413      	add	r3, r2
 800a64e:	3302      	adds	r3, #2
 800a650:	617b      	str	r3, [r7, #20]

   //Always terminate the options field with 255
   message->options[n++] = DHCP_OPT_END;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	617a      	str	r2, [r7, #20]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	4413      	add	r3, r2
 800a65c:	22ff      	movs	r2, #255	; 0xff
 800a65e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Update the length of the DHCPv6 message
   *messageLen = sizeof(DhcpMessage) + n;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <dhcpGetOption>:
 *   option is returned. Otherwise NULL pointer is returned
 **/

DhcpOption *dhcpGetOption(const DhcpMessage *message, size_t length,
   uint8_t optionCode)
{
 800a676:	b480      	push	{r7}
 800a678:	b087      	sub	sp, #28
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
   size_t i;
   DhcpOption *option;

   //Make sure the DHCP header is valid
   if(length >= sizeof(DhcpMessage))
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	2bef      	cmp	r3, #239	; 0xef
 800a688:	d93c      	bls.n	800a704 <dhcpGetOption+0x8e>
   {
      //Get the length of the options field
      length -= sizeof(DhcpMessage);
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3bf0      	subs	r3, #240	; 0xf0
 800a68e:	60bb      	str	r3, [r7, #8]

      //Loop through the list of options
      for(i = 0; i < length; i++)
 800a690:	2300      	movs	r3, #0
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	e02c      	b.n	800a6f0 <dhcpGetOption+0x7a>
      {
         //Point to the current option
         option = (DhcpOption *) (message->options + i);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	4413      	add	r3, r2
 800a6a0:	613b      	str	r3, [r7, #16]

         //Check option code
         if(option->code == DHCP_OPT_PAD)
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d01f      	beq.n	800a6ea <dhcpGetOption+0x74>
         {
            //The pad option can be used to cause subsequent fields to align
            //on word boundaries
         }
         else if(option->code == DHCP_OPT_END)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2bff      	cmp	r3, #255	; 0xff
 800a6b0:	d023      	beq.n	800a6fa <dhcpGetOption+0x84>
            break;
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d920      	bls.n	800a6fe <dhcpGetOption+0x88>
            {
               break;
            }

            //Check the length of the option
            if((i + sizeof(DhcpOption) + option->length) > length)
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d319      	bcc.n	800a702 <dhcpGetOption+0x8c>
            {
               break;
            }

            //Matching option code?
            if(option->code == optionCode)
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	79fa      	ldrb	r2, [r7, #7]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d101      	bne.n	800a6dc <dhcpGetOption+0x66>
            {
               return option;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	e014      	b.n	800a706 <dhcpGetOption+0x90>
            }

            //Jump to the next option
            i += option->length + 1;
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	785b      	ldrb	r3, [r3, #1]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	617b      	str	r3, [r7, #20]
      for(i = 0; i < length; i++)
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d3ce      	bcc.n	800a696 <dhcpGetOption+0x20>
 800a6f8:	e004      	b.n	800a704 <dhcpGetOption+0x8e>
            break;
 800a6fa:	bf00      	nop
 800a6fc:	e002      	b.n	800a704 <dhcpGetOption+0x8e>
               break;
 800a6fe:	bf00      	nop
 800a700:	e000      	b.n	800a704 <dhcpGetOption+0x8e>
               break;
 800a702:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	371c      	adds	r7, #28
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
	...

0800a714 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   osMemset(dnsCache, 0, sizeof(dnsCache));
 800a718:	f44f 7250 	mov.w	r2, #832	; 0x340
 800a71c:	2100      	movs	r1, #0
 800a71e:	4803      	ldr	r0, [pc, #12]	; (800a72c <dnsInit+0x18>)
 800a720:	f008 f9f1 	bl	8012b06 <memset>

   //Successful initialization
   return NO_ERROR;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	2000b314 	.word	0x2000b314

0800a730 <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	e015      	b.n	800a76a <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2268      	movs	r2, #104	; 0x68
 800a742:	fb02 f303 	mul.w	r3, r2, r3
 800a746:	4a0d      	ldr	r2, [pc, #52]	; (800a77c <dnsFlushCache+0x4c>)
 800a748:	4413      	add	r3, r2
 800a74a:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != DNS_STATE_NONE)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d102      	bne.n	800a764 <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 800a75e:	68b8      	ldr	r0, [r7, #8]
 800a760:	f000 f80e 	bl	800a780 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3301      	adds	r3, #1
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b07      	cmp	r3, #7
 800a76e:	d9e6      	bls.n	800a73e <dnsFlushCache+0xe>
      }
   }
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	2000b314 	.word	0x2000b314

0800a780 <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d012      	beq.n	800a7b4 <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	789b      	ldrb	r3, [r3, #2]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d10b      	bne.n	800a7ae <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d107      	bne.n	800a7ae <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	899b      	ldrh	r3, [r3, #12]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fe fe5f 	bl	800946c <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
   }
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800a7c2:	f7f6 fe55 	bl	8001470 <osGetSystemTime>
 800a7c6:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	e079      	b.n	800a8c2 <dnsTick+0x106>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	2268      	movs	r2, #104	; 0x68
 800a7d2:	fb02 f303 	mul.w	r3, r2, r3
 800a7d6:	4a3f      	ldr	r2, [pc, #252]	; (800a8d4 <dnsTick+0x118>)
 800a7d8:	4413      	add	r3, r2
 800a7da:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d15b      	bne.n	800a89c <dnsTick+0xe0>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ec:	4413      	add	r3, r2
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	1ad3      	subs	r3, r2, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	db62      	blt.n	800a8bc <dnsTick+0x100>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d025      	beq.n	800a84a <dnsTick+0x8e>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	789b      	ldrb	r3, [r3, #2]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d105      	bne.n	800a812 <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 800a806:	6838      	ldr	r0, [r7, #0]
 800a808:	f000 f866 	bl	800a8d8 <dnsSendQuery>
 800a80c:	4603      	mov	r3, r0
 800a80e:	81fb      	strh	r3, [r7, #14]
 800a810:	e001      	b.n	800a816 <dnsTick+0x5a>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 800a812:	2301      	movs	r3, #1
 800a814:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 800a816:	89fb      	ldrh	r3, [r7, #14]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d112      	bne.n	800a842 <dnsTick+0x86>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	659a      	str	r2, [r3, #88]	; 0x58
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bf28      	it	cs
 800a830:	461a      	movcs	r2, r3
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a83a:	1e5a      	subs	r2, r3, #1
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	665a      	str	r2, [r3, #100]	; 0x64
 800a840:	e03c      	b.n	800a8bc <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 800a842:	6838      	ldr	r0, [r7, #0]
 800a844:	f7ff ff9c 	bl	800a780 <dnsDeleteEntry>
 800a848:	e038      	b.n	800a8bc <dnsTick+0x100>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	789b      	ldrb	r3, [r3, #2]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d120      	bne.n	800a894 <dnsTick+0xd8>
            {
               //Select the next DNS server
               entry->dnsServerIndex++;
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2203      	movs	r2, #3
 800a860:	665a      	str	r2, [r3, #100]	; 0x64
               //Send DNS query
               error = dnsSendQuery(entry);
 800a862:	6838      	ldr	r0, [r7, #0]
 800a864:	f000 f838 	bl	800a8d8 <dnsSendQuery>
 800a868:	4603      	mov	r3, r0
 800a86a:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10c      	bne.n	800a88c <dnsTick+0xd0>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	659a      	str	r2, [r3, #88]	; 0x58
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a87e:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a884:	1e5a      	subs	r2, r3, #1
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	665a      	str	r2, [r3, #100]	; 0x64
 800a88a:	e017      	b.n	800a8bc <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 800a88c:	6838      	ldr	r0, [r7, #0]
 800a88e:	f7ff ff77 	bl	800a780 <dnsDeleteEntry>
 800a892:	e013      	b.n	800a8bc <dnsTick+0x100>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 800a894:	6838      	ldr	r0, [r7, #0]
 800a896:	f7ff ff73 	bl	800a780 <dnsDeleteEntry>
 800a89a:	e00f      	b.n	800a8bc <dnsTick+0x100>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d10b      	bne.n	800a8bc <dnsTick+0x100>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ac:	4413      	add	r3, r2
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	db02      	blt.n	800a8bc <dnsTick+0x100>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 800a8b6:	6838      	ldr	r0, [r7, #0]
 800a8b8:	f7ff ff62 	bl	800a780 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60bb      	str	r3, [r7, #8]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	2b07      	cmp	r3, #7
 800a8c6:	d982      	bls.n	800a7ce <dnsTick+0x12>
         }
      }
   }
}
 800a8c8:	bf00      	nop
 800a8ca:	bf00      	nop
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000b314 	.word	0x2000b314

0800a8d8 <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 800a8d8:	b5b0      	push	{r4, r5, r7, lr}
 800a8da:	b096      	sub	sp, #88	; 0x58
 800a8dc:	af04      	add	r7, sp, #16
 800a8de:	6078      	str	r0, [r7, #4]
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	2b10      	cmp	r3, #16
 800a8e6:	d11e      	bne.n	800a926 <dnsSendQuery+0x4e>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800a8f0:	647b      	str	r3, [r7, #68]	; 0x44

      //Select the relevant DNS server
      while(1)
      {
         //Out of range index?
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d902      	bls.n	800a900 <dnsSendQuery+0x28>
            return ERROR_NO_DNS_SERVER;
 800a8fa:	f240 2325 	movw	r3, #549	; 0x225
 800a8fe:	e0ce      	b.n	800aa9e <dnsSendQuery+0x1c6>

         //Copy the address of the DNS server
         destIpAddr.length = sizeof(Ipv4Addr);
 800a900:	2304      	movs	r3, #4
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
         destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerIndex];
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a90a:	3308      	adds	r3, #8
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	62bb      	str	r3, [r7, #40]	; 0x28

         //Make sure the IP address is valid
         if(destIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR)
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	2b00      	cmp	r3, #0
 800a918:	d107      	bne.n	800a92a <dnsSendQuery+0x52>
            break;

         //Select the next DNS server in the list
         entry->dnsServerIndex++;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	609a      	str	r2, [r3, #8]
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 800a924:	e7e5      	b.n	800a8f2 <dnsSendQuery+0x1a>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 800a926:	2302      	movs	r3, #2
 800a928:	e0b9      	b.n	800aa9e <dnsSendQuery+0x1c6>
            break;
 800a92a:	bf00      	nop
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800a92c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a930:	4619      	mov	r1, r3
 800a932:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a936:	f7fe fcf3 	bl	8009320 <udpAllocBuffer>
 800a93a:	6438      	str	r0, [r7, #64]	; 0x40
   //Failed to allocate buffer?
   if(buffer == NULL)
 800a93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <dnsSendQuery+0x6e>
      return ERROR_OUT_OF_MEMORY;
 800a942:	2364      	movs	r3, #100	; 0x64
 800a944:	e0ab      	b.n	800aa9e <dnsSendQuery+0x1c6>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	4619      	mov	r1, r3
 800a94a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a94c:	f7f8 fade 	bl	8002f0c <netBufferAt>
 800a950:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Format DNS query message
   message->id = htons(entry->id);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	89db      	ldrh	r3, [r3, #14]
 800a956:	4618      	mov	r0, r3
 800a958:	f7f6 fbef 	bl	800113a <swapInt16>
 800a95c:	4603      	mov	r3, r0
 800a95e:	461a      	mov	r2, r3
 800a960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a962:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 800a964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a966:	7893      	ldrb	r3, [r2, #2]
 800a968:	f36f 13c7 	bfc	r3, #7, #1
 800a96c:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800a96e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a970:	7893      	ldrb	r3, [r2, #2]
 800a972:	f36f 03c6 	bfc	r3, #3, #4
 800a976:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 800a978:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a97a:	7893      	ldrb	r3, [r2, #2]
 800a97c:	f36f 0382 	bfc	r3, #2, #1
 800a980:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800a982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a984:	7893      	ldrb	r3, [r2, #2]
 800a986:	f36f 0341 	bfc	r3, #1, #1
 800a98a:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 800a98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a98e:	7893      	ldrb	r3, [r2, #2]
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 800a996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a998:	78d3      	ldrb	r3, [r2, #3]
 800a99a:	f36f 13c7 	bfc	r3, #7, #1
 800a99e:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 800a9a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9a2:	78d3      	ldrb	r3, [r2, #3]
 800a9a4:	f36f 1306 	bfc	r3, #4, #3
 800a9a8:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800a9aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ac:	78d3      	ldrb	r3, [r2, #3]
 800a9ae:	f36f 0303 	bfc	r3, #0, #4
 800a9b2:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	711a      	strb	r2, [r3, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f042 0201 	orr.w	r2, r2, #1
 800a9c0:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 800a9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	719a      	strb	r2, [r3, #6]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800a9cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	721a      	strb	r2, [r3, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d8:	2200      	movs	r2, #0
 800a9da:	729a      	strb	r2, [r3, #10]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	63bb      	str	r3, [r7, #56]	; 0x38

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f103 0210 	add.w	r2, r3, #16
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ec:	330c      	adds	r3, #12
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f000 f85f 	bl	800aab4 <dnsEncodeName>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fa:	4413      	add	r3, r2
 800a9fc:	63bb      	str	r3, [r7, #56]	; 0x38

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 800a9fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	4413      	add	r3, r2
 800aa04:	637b      	str	r3, [r7, #52]	; 0x34

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	2b10      	cmp	r3, #16
 800aa0c:	d10d      	bne.n	800aa2a <dnsSendQuery+0x152>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa10:	2200      	movs	r2, #0
 800aa12:	701a      	strb	r2, [r3, #0]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f042 0201 	orr.w	r2, r2, #1
 800aa1a:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa1e:	2200      	movs	r2, #0
 800aa20:	709a      	strb	r2, [r3, #2]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f042 0201 	orr.w	r2, r2, #1
 800aa28:	70da      	strb	r2, [r3, #3]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	63bb      	str	r3, [r7, #56]	; 0x38

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800aa30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa34:	4413      	add	r3, r2
 800aa36:	4619      	mov	r1, r3
 800aa38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aa3a:	f7f8 f9c1 	bl	8002dc0 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 800aa3e:	f7f6 fc51 	bl	80012e4 <osSuspendAllTasks>
 800aa42:	4b19      	ldr	r3, [pc, #100]	; (800aaa8 <dnsSendQuery+0x1d0>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa4a:	4918      	ldr	r1, [pc, #96]	; (800aaac <dnsSendQuery+0x1d4>)
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f007 ff7d 	bl	801294c <fiprintf>
 800aa52:	f7f6 fc52 	bl	80012fa <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800aa56:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <dnsSendQuery+0x1d8>)
 800aa58:	f107 040c 	add.w	r4, r7, #12
 800aa5c:	461d      	mov	r5, r3
 800aa5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa62:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aa66:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DNS query message
   error = udpSendBuffer(entry->interface, NULL, entry->port, &destIpAddr,
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6858      	ldr	r0, [r3, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	8999      	ldrh	r1, [r3, #12]
 800aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa74:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800aa78:	f107 020c 	add.w	r2, r7, #12
 800aa7c:	9203      	str	r2, [sp, #12]
 800aa7e:	9302      	str	r3, [sp, #8]
 800aa80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa82:	9301      	str	r3, [sp, #4]
 800aa84:	2335      	movs	r3, #53	; 0x35
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	4623      	mov	r3, r4
 800aa8a:	460a      	mov	r2, r1
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	f7fe fb11 	bl	80090b4 <udpSendBuffer>
 800aa92:	4603      	mov	r3, r0
 800aa94:	867b      	strh	r3, [r7, #50]	; 0x32
      DNS_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800aa96:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800aa98:	f7f8 f95e 	bl	8002d58 <netBufferFree>
   //Return status code
   return error;
 800aa9c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3748      	adds	r7, #72	; 0x48
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bdb0      	pop	{r4, r5, r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000034 	.word	0x20000034
 800aaac:	08014418 	.word	0x08014418
 800aab0:	08014540 	.word	0x08014540

0800aab4 <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	4413      	add	r3, r2
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d11b      	bne.n	800ab0a <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <dnsEncodeName+0x2a>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b3f      	cmp	r3, #63	; 0x3f
 800aadc:	d901      	bls.n	800aae2 <dnsEncodeName+0x2e>
            return 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	e04d      	b.n	800ab7e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <dnsEncodeName+0x48>
         {
            dest[0] = i;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	2200      	movs	r2, #0
 800aafa:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	4413      	add	r3, r2
 800ab02:	3302      	adds	r3, #2
 800ab04:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	e039      	b.n	800ab7e <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b2e      	cmp	r3, #46	; 0x2e
 800ab14:	d123      	bne.n	800ab5e <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <dnsEncodeName+0x6e>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b3f      	cmp	r3, #63	; 0x3f
 800ab20:	d901      	bls.n	800ab26 <dnsEncodeName+0x72>
            return 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e02b      	b.n	800ab7e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d003      	beq.n	800ab34 <dnsEncodeName+0x80>
            dest[0] = i;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	b2da      	uxtb	r2, r3
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	4413      	add	r3, r2
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <dnsEncodeName+0x9a>
            dest += i + 1;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4413      	add	r3, r2
 800ab56:	607b      	str	r3, [r7, #4]
         i = 0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60fb      	str	r3, [r7, #12]
 800ab5c:	e7b3      	b.n	800aac6 <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d008      	beq.n	800ab76 <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	441a      	add	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	440b      	add	r3, r1
 800ab72:	7812      	ldrb	r2, [r2, #0]
 800ab74:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 800ab7c:	e7a3      	b.n	800aac6 <dnsEncodeName+0x12>
      }
   }
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message,
   size_t length, size_t pos, char_t *dest, uint_t level)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b08a      	sub	sp, #40	; 0x28
 800ab8e:	af02      	add	r7, sp, #8
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
 800ab96:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d901      	bls.n	800aba2 <dnsParseName+0x18>
      return 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e08d      	b.n	800acbe <dnsParseName+0x134>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 800aba6:	e084      	b.n	800acb2 <dnsParseName+0x128>
   {
      //End marker found?
      if(src[pos] == 0)
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d108      	bne.n	800abc6 <dnsParseName+0x3c>
      {
         //Properly terminate the string
         if(dest != NULL)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <dnsParseName+0x36>
            *dest = '\0';
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2200      	movs	r2, #0
 800abbe:	701a      	strb	r2, [r3, #0]

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3301      	adds	r3, #1
 800abc4:	e07b      	b.n	800acbe <dnsParseName+0x134>
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 800abc6:	69fa      	ldr	r2, [r7, #28]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4413      	add	r3, r2
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2bbf      	cmp	r3, #191	; 0xbf
 800abd0:	d92a      	bls.n	800ac28 <dnsParseName+0x9e>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3301      	adds	r3, #1
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d801      	bhi.n	800abe0 <dnsParseName+0x56>
            return 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	e06e      	b.n	800acbe <dnsParseName+0x134>

         //Read the most significant byte of the pointer
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4413      	add	r3, r2
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	021b      	lsls	r3, r3, #8
 800abea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800abee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800abf2:	617b      	str	r3, [r7, #20]
         //Read the least significant byte of the pointer
         pointer |= src[pos + 1];
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3301      	adds	r3, #1
 800abf8:	69fa      	ldr	r2, [r7, #28]
 800abfa:	4413      	add	r3, r2
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	617b      	str	r3, [r7, #20]

         //Decode the remaining part of the domain name
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	3301      	adds	r3, #1
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7ff ffb9 	bl	800ab8a <dnsParseName>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <dnsParseName+0x98>
         {
            //Domain name decoding failed
            return 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e04d      	b.n	800acbe <dnsParseName+0x134>
         }

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	3302      	adds	r3, #2
 800ac26:	e04a      	b.n	800acbe <dnsParseName+0x134>
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 800ac28:	69fa      	ldr	r2, [r7, #28]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b3e      	cmp	r3, #62	; 0x3e
 800ac32:	d836      	bhi.n	800aca2 <dnsParseName+0x118>
      {
         //Get the length of the current label
         n = src[pos++];
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	61bb      	str	r3, [r7, #24]

         //Malformed DNS message?
         if((pos + n) > length)
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	4413      	add	r3, r2
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d201      	bcs.n	800ac52 <dnsParseName+0xc8>
            return 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e035      	b.n	800acbe <dnsParseName+0x134>

         //The last parameter is optional
         if(dest != NULL)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01f      	beq.n	800ac98 <dnsParseName+0x10e>
         {
            //Copy current label
            osMemcpy(dest, src + pos, n);
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6838      	ldr	r0, [r7, #0]
 800ac64:	f007 ff27 	bl	8012ab6 <memcpy>

            //Advance read pointer
            pos += n;
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	607b      	str	r3, [r7, #4]
            //Advance write pointer
            dest += n;
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	4413      	add	r3, r2
 800ac76:	603b      	str	r3, [r7, #0]

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d218      	bcs.n	800acb2 <dnsParseName+0x128>
 800ac80:	69fa      	ldr	r2, [r7, #28]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4413      	add	r3, r2
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d012      	beq.n	800acb2 <dnsParseName+0x128>
               *(dest++) = '.';
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	1c5a      	adds	r2, r3, #1
 800ac90:	603a      	str	r2, [r7, #0]
 800ac92:	222e      	movs	r2, #46	; 0x2e
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e00c      	b.n	800acb2 <dnsParseName+0x128>
         }
         else
         {
            //Advance read pointer
            pos += n;
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	607b      	str	r3, [r7, #4]
 800aca0:	e007      	b.n	800acb2 <dnsParseName+0x128>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <dnsParseName+0x124>
            *dest = '\0';
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	701a      	strb	r2, [r3, #0]
         //Domain name decoding failed
         return 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	e005      	b.n	800acbe <dnsParseName+0x134>
   while(pos < length)
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	f4ff af76 	bcc.w	800aba8 <dnsParseName+0x1e>
      }
   }

   //Domain name decoding failed
   return 0;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3720      	adds	r7, #32
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length,
   size_t pos, const char_t *name, uint_t level)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b08a      	sub	sp, #40	; 0x28
 800acca:	af02      	add	r7, sp, #8
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d902      	bls.n	800ace0 <dnsCompareName+0x1a>
      return -2;
 800acda:	f06f 0301 	mvn.w	r3, #1
 800acde:	e076      	b.n	800adce <dnsCompareName+0x108>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 800ace4:	e06d      	b.n	800adc2 <dnsCompareName+0xfc>
   {
      //Retrieve the length of the current label
      n = p[pos];
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4413      	add	r3, r2
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	61bb      	str	r3, [r7, #24]

      //End marker found?
      if(n == 0)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d108      	bne.n	800ad08 <dnsCompareName+0x42>
      {
         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0')
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <dnsCompareName+0x3e>
            return -1;
 800acfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad02:	e064      	b.n	800adce <dnsCompareName+0x108>

         //The domain names match each other
         return 0;
 800ad04:	2300      	movs	r3, #0
 800ad06:	e062      	b.n	800adce <dnsCompareName+0x108>
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	2bbf      	cmp	r3, #191	; 0xbf
 800ad0c:	d925      	bls.n	800ad5a <dnsCompareName+0x94>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	3301      	adds	r3, #1
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d801      	bhi.n	800ad1c <dnsCompareName+0x56>
            return FALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e058      	b.n	800adce <dnsCompareName+0x108>

         //Read the most significant byte of the pointer
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	021b      	lsls	r3, r3, #8
 800ad26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ad2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ad2e:	613b      	str	r3, [r7, #16]
         //Read the least significant byte of the pointer
         pointer |= p[pos + 1];
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3301      	adds	r3, #1
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	4413      	add	r3, r2
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]

         //Compare the remaining part
         res = dnsCompareName(message, length, pointer, name, level + 1);
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	3301      	adds	r3, #1
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	693a      	ldr	r2, [r7, #16]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff ffb9 	bl	800acc6 <dnsCompareName>
 800ad54:	6178      	str	r0, [r7, #20]

         //Return comparison result
         return res;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	e039      	b.n	800adce <dnsCompareName+0x108>
      }
      else
      {
         //Advance data pointer
         pos++;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	607b      	str	r3, [r7, #4]

         //Malformed DNS message?
         if((pos + n) > length)
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	4413      	add	r3, r2
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d202      	bcs.n	800ad72 <dnsCompareName+0xac>
            return -2;
 800ad6c:	f06f 0301 	mvn.w	r3, #1
 800ad70:	e02d      	b.n	800adce <dnsCompareName+0x108>

         //Compare current label
         res = osStrncasecmp((char_t *) p + pos, name, n);
 800ad72:	69fa      	ldr	r2, [r7, #28]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4413      	add	r3, r2
 800ad78:	69ba      	ldr	r2, [r7, #24]
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f008 fa65 	bl	801324c <strncasecmp>
 800ad82:	6178      	str	r0, [r7, #20]
         //Any mismatch?
         if(res)
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <dnsCompareName+0xc8>
            return res;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	e01f      	b.n	800adce <dnsCompareName+0x108>

         //Advance data pointer
         pos += n;
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	4413      	add	r3, r2
 800ad94:	607b      	str	r3, [r7, #4]
         name += n;
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	603b      	str	r3, [r7, #0]

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <dnsCompareName+0xee>
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b2e      	cmp	r3, #46	; 0x2e
 800adac:	d002      	beq.n	800adb4 <dnsCompareName+0xee>
            return -1;
 800adae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800adb2:	e00c      	b.n	800adce <dnsCompareName+0x108>

         //Skip the separator character, if any
         if(*name == '.')
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b2e      	cmp	r3, #46	; 0x2e
 800adba:	d102      	bne.n	800adc2 <dnsCompareName+0xfc>
            name++;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	3301      	adds	r3, #1
 800adc0:	603b      	str	r3, [r7, #0]
   while(pos < length)
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d38d      	bcc.n	800ace6 <dnsCompareName+0x20>
      }
   }

   //Malformed DNS message
   return -2;
 800adca:	f06f 0301 	mvn.w	r3, #1
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <enc28j60Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60Init(NetInterface *interface)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
   uint8_t revisionId;
   Enc28j60Context *context;

   //Debug message
   TRACE_INFO("Initializing ENC28J60 Ethernet controller...\r\n");
 800ade0:	f7f6 fa80 	bl	80012e4 <osSuspendAllTasks>
 800ade4:	4ba4      	ldr	r3, [pc, #656]	; (800b078 <enc28j60Init+0x2a0>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	222e      	movs	r2, #46	; 0x2e
 800adec:	2101      	movs	r1, #1
 800adee:	48a3      	ldr	r0, [pc, #652]	; (800b07c <enc28j60Init+0x2a4>)
 800adf0:	f007 fe1e 	bl	8012a30 <fwrite>
 800adf4:	f7f6 fa81 	bl	80012fa <osResumeAllTasks>

   //Initialize SPI
   interface->spiDriver->init();
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4798      	blx	r3
   //Initialize external interrupt line
   interface->extIntDriver->init();
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4798      	blx	r3

   //Issue a system reset
   enc28j60SoftReset(interface);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fba6 	bl	800b55a <enc28j60SoftReset>

   //After issuing the reset command, wait at least 1ms in firmware
   //for the device to be ready
   sleep(10);
 800ae0e:	f649 4340 	movw	r3, #40000	; 0x9c40
 800ae12:	60fb      	str	r3, [r7, #12]
 800ae14:	e002      	b.n	800ae1c <enc28j60Init+0x44>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	60fb      	str	r3, [r7, #12]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1f9      	bne.n	800ae16 <enc28j60Init+0x3e>

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3344      	adds	r3, #68	; 0x44
 800ae26:	617b      	str	r3, [r7, #20]

   //Initialize driver specific variables
   context->currentBank = UINT16_MAX;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae2e:	801a      	strh	r2, [r3, #0]
   context->nextPacket = ENC28J60_RX_BUFFER_START;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2200      	movs	r2, #0
 800ae34:	805a      	strh	r2, [r3, #2]

   //Read silicon revision ID
   revisionId = enc28j60ReadReg(interface, ENC28J60_EREVID);
 800ae36:	f240 3112 	movw	r1, #786	; 0x312
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 fc14 	bl	800b668 <enc28j60ReadReg>
 800ae40:	4603      	mov	r3, r0
 800ae42:	74fb      	strb	r3, [r7, #19]

   //Debug message
   TRACE_INFO("ENC28J60 revision ID: 0x%02X\r\n", revisionId);
 800ae44:	f7f6 fa4e 	bl	80012e4 <osSuspendAllTasks>
 800ae48:	4b8b      	ldr	r3, [pc, #556]	; (800b078 <enc28j60Init+0x2a0>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	7cfa      	ldrb	r2, [r7, #19]
 800ae50:	498b      	ldr	r1, [pc, #556]	; (800b080 <enc28j60Init+0x2a8>)
 800ae52:	4618      	mov	r0, r3
 800ae54:	f007 fd7a 	bl	801294c <fiprintf>
 800ae58:	f7f6 fa4f 	bl	80012fa <osResumeAllTasks>

   //Disable CLKOUT output
   enc28j60WriteReg(interface, ENC28J60_ECOCON, ENC28J60_ECOCON_COCON_DISABLED);
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f240 3115 	movw	r1, #789	; 0x315
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 fbd3 	bl	800b60e <enc28j60WriteReg>

   //Set the MAC address of the station
   enc28j60WriteReg(interface, ENC28J60_MAADR5, interface->macAddr.b[0]);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f241 3104 	movw	r1, #4868	; 0x1304
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fbca 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR4, interface->macAddr.b[1]);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800ae80:	461a      	mov	r2, r3
 800ae82:	f241 3105 	movw	r1, #4869	; 0x1305
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fbc1 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR3, interface->macAddr.b[2]);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 800ae92:	461a      	mov	r2, r3
 800ae94:	f241 3102 	movw	r1, #4866	; 0x1302
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fbb8 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR2, interface->macAddr.b[3]);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 800aea4:	461a      	mov	r2, r3
 800aea6:	f241 3103 	movw	r1, #4867	; 0x1303
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 fbaf 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR1, interface->macAddr.b[4]);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 fba6 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR0, interface->macAddr.b[5]);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800aec8:	461a      	mov	r2, r3
 800aeca:	f241 3101 	movw	r1, #4865	; 0x1301
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fb9d 	bl	800b60e <enc28j60WriteReg>

   //Set receive buffer location
   enc28j60WriteReg(interface, ENC28J60_ERXSTL, LSB(ENC28J60_RX_BUFFER_START));
 800aed4:	2200      	movs	r2, #0
 800aed6:	2108      	movs	r1, #8
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fb98 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXSTH, MSB(ENC28J60_RX_BUFFER_START));
 800aede:	2200      	movs	r2, #0
 800aee0:	2109      	movs	r1, #9
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fb93 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXNDL, LSB(ENC28J60_RX_BUFFER_STOP));
 800aee8:	22ff      	movs	r2, #255	; 0xff
 800aeea:	210a      	movs	r1, #10
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 fb8e 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXNDH, MSB(ENC28J60_RX_BUFFER_STOP));
 800aef2:	2217      	movs	r2, #23
 800aef4:	210b      	movs	r1, #11
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fb89 	bl	800b60e <enc28j60WriteReg>

   //The ERXRDPT register defines a location within the FIFO where the receive
   //hardware is forbidden to write to
   enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));
 800aefc:	22ff      	movs	r2, #255	; 0xff
 800aefe:	210c      	movs	r1, #12
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fb84 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));
 800af06:	2217      	movs	r2, #23
 800af08:	210d      	movs	r1, #13
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fb7f 	bl	800b60e <enc28j60WriteReg>

   //Configure the receive filters
   enc28j60WriteReg(interface, ENC28J60_ERXFCON, ENC28J60_ERXFCON_UCEN |
 800af10:	22a5      	movs	r2, #165	; 0xa5
 800af12:	f44f 718c 	mov.w	r1, #280	; 0x118
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fb79 	bl	800b60e <enc28j60WriteReg>
      ENC28J60_ERXFCON_CRCEN | ENC28J60_ERXFCON_HTEN | ENC28J60_ERXFCON_BCEN);

   //Initialize the hash table
   enc28j60WriteReg(interface, ENC28J60_EHT0, 0x00);
 800af1c:	2200      	movs	r2, #0
 800af1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fb73 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT1, 0x00);
 800af28:	2200      	movs	r2, #0
 800af2a:	f240 1101 	movw	r1, #257	; 0x101
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fb6d 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT2, 0x00);
 800af34:	2200      	movs	r2, #0
 800af36:	f44f 7181 	mov.w	r1, #258	; 0x102
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fb67 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT3, 0x00);
 800af40:	2200      	movs	r2, #0
 800af42:	f240 1103 	movw	r1, #259	; 0x103
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fb61 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT4, 0x00);
 800af4c:	2200      	movs	r2, #0
 800af4e:	f44f 7182 	mov.w	r1, #260	; 0x104
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fb5b 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT5, 0x00);
 800af58:	2200      	movs	r2, #0
 800af5a:	f240 1105 	movw	r1, #261	; 0x105
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fb55 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT6, 0x00);
 800af64:	2200      	movs	r2, #0
 800af66:	f44f 7183 	mov.w	r1, #262	; 0x106
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fb4f 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT7, 0x00);
 800af70:	2200      	movs	r2, #0
 800af72:	f240 1107 	movw	r1, #263	; 0x107
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 fb49 	bl	800b60e <enc28j60WriteReg>

   //Pull the MAC out of reset
   enc28j60WriteReg(interface, ENC28J60_MACON2, 0x00);
 800af7c:	2200      	movs	r2, #0
 800af7e:	f241 2101 	movw	r1, #4609	; 0x1201
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fb43 	bl	800b60e <enc28j60WriteReg>

   //Enable the MAC to receive frames
   enc28j60WriteReg(interface, ENC28J60_MACON1, ENC28J60_MACON1_TXPAUS |
 800af88:	220d      	movs	r2, #13
 800af8a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fb3d 	bl	800b60e <enc28j60WriteReg>
      ENC28J60_MACON1_RXPAUS | ENC28J60_MACON1_MARXEN);

   //Enable automatic padding, always append a valid CRC and check frame
   //length. MAC can operate in half-duplex or full-duplex mode
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WriteReg(interface, ENC28J60_MACON3, ENC28J60_MACON3_PADCFG_AUTO |
 800af94:	22b3      	movs	r2, #179	; 0xb3
 800af96:	f241 2102 	movw	r1, #4610	; 0x1202
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb37 	bl	800b60e <enc28j60WriteReg>
      ENC28J60_MACON3_TXCRCEN | ENC28J60_MACON3_FRMLNEN);
#endif

   //When the medium is occupied, the MAC will wait indefinitely for it to
   //become free when attempting to transmit
   enc28j60WriteReg(interface, ENC28J60_MACON4, ENC28J60_MACON4_DEFER);
 800afa0:	2240      	movs	r2, #64	; 0x40
 800afa2:	f241 2103 	movw	r1, #4611	; 0x1203
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fb31 	bl	800b60e <enc28j60WriteReg>

   //Maximum frame length that can be received or transmitted
   enc28j60WriteReg(interface, ENC28J60_MAMXFLL, LSB(ENC28J60_ETH_RX_BUFFER_SIZE));
 800afac:	2200      	movs	r2, #0
 800afae:	f241 210a 	movw	r1, #4618	; 0x120a
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fb2b 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAMXFLH, MSB(ENC28J60_ETH_RX_BUFFER_SIZE));
 800afb8:	2206      	movs	r2, #6
 800afba:	f241 210b 	movw	r1, #4619	; 0x120b
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fb25 	bl	800b60e <enc28j60WriteReg>

   //Configure the back-to-back inter-packet gap register
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WriteReg(interface, ENC28J60_MABBIPG, ENC28J60_MABBIPG_DEFAULT_FD);
 800afc4:	2215      	movs	r2, #21
 800afc6:	f241 2104 	movw	r1, #4612	; 0x1204
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fb1f 	bl	800b60e <enc28j60WriteReg>
#else
   enc28j60WriteReg(interface, ENC28J60_MABBIPG, ENC28J60_MABBIPG_DEFAULT_HD);
#endif

   //Configure the non-back-to-back inter-packet gap register
   enc28j60WriteReg(interface, ENC28J60_MAIPGL, ENC28J60_MAIPGL_DEFAULT);
 800afd0:	2212      	movs	r2, #18
 800afd2:	f241 2106 	movw	r1, #4614	; 0x1206
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 fb19 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAIPGH, ENC28J60_MAIPGH_DEFAULT);
 800afdc:	220c      	movs	r2, #12
 800afde:	f241 2107 	movw	r1, #4615	; 0x1207
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 fb13 	bl	800b60e <enc28j60WriteReg>

   //Collision window register
   enc28j60WriteReg(interface, ENC28J60_MACLCON2,
 800afe8:	2237      	movs	r2, #55	; 0x37
 800afea:	f241 2109 	movw	r1, #4617	; 0x1209
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fb0d 	bl	800b60e <enc28j60WriteReg>
      ENC28J60_MACLCON2_COLWIN_DEFAULT);

   //Set the PHY to the proper duplex mode
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WritePhyReg(interface, ENC28J60_PHCON1, ENC28J60_PHCON1_PDPXMD);
 800aff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aff8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb67 	bl	800b6d0 <enc28j60WritePhyReg>
#else
   enc28j60WritePhyReg(interface, ENC28J60_PHCON1, 0x0000);
#endif

   //Disable half-duplex loopback in PHY
   enc28j60WritePhyReg(interface, ENC28J60_PHCON2, ENC28J60_PHCON2_HDLDIS);
 800b002:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b006:	f243 0110 	movw	r1, #12304	; 0x3010
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 fb60 	bl	800b6d0 <enc28j60WritePhyReg>

   //LEDA displays link status and LEDB displays TX/RX activity
   enc28j60WritePhyReg(interface, ENC28J60_PHLCON,
 800b010:	f240 4272 	movw	r2, #1138	; 0x472
 800b014:	f243 0114 	movw	r1, #12308	; 0x3014
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f000 fb59 	bl	800b6d0 <enc28j60WritePhyReg>
      ENC28J60_PHLCON_LACFG_LINK | ENC28J60_PHLCON_LBCFG_TX_RX |
      ENC28J60_PHLCON_LFRQ_40_MS | ENC28J60_PHLCON_STRCH);

   //Clear interrupt flags
   enc28j60WriteReg(interface, ENC28J60_EIR, 0x00);
 800b01e:	2200      	movs	r2, #0
 800b020:	211c      	movs	r1, #28
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 faf3 	bl	800b60e <enc28j60WriteReg>

   //Configure interrupts as desired
   enc28j60WriteReg(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE |
 800b028:	22da      	movs	r2, #218	; 0xda
 800b02a:	211b      	movs	r1, #27
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 faee 	bl	800b60e <enc28j60WriteReg>
      ENC28J60_EIE_PKTIE | ENC28J60_EIE_LINKIE | ENC28J60_EIE_TXIE |
      ENC28J60_EIE_TXERIE);

   //Configure PHY interrupts as desired
   enc28j60WritePhyReg(interface, ENC28J60_PHIE, ENC28J60_PHIE_PLNKIE |
 800b032:	2212      	movs	r2, #18
 800b034:	f243 0112 	movw	r1, #12306	; 0x3012
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fb49 	bl	800b6d0 <enc28j60WritePhyReg>
      ENC28J60_PHIE_PGEIE);

   //Set RXEN to enable reception
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_RXEN);
 800b03e:	2204      	movs	r2, #4
 800b040:	211f      	movs	r1, #31
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fc48 	bl	800b8d8 <enc28j60SetBit>

   //Dump registers for debugging purpose
   enc28j60DumpReg(interface);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fcd5 	bl	800b9f8 <enc28j60DumpReg>
   enc28j60DumpPhyReg(interface);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fcdc 	bl	800ba0c <enc28j60DumpPhyReg>

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3354      	adds	r3, #84	; 0x54
 800b058:	4618      	mov	r0, r3
 800b05a:	f7f6 f985 	bl	8001368 <osSetEvent>

   //Force the TCP/IP stack to poll the link state at startup
   interface->nicEvent = TRUE;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2201      	movs	r2, #1
 800b062:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   //Notify the TCP/IP stack of the event
   osSetEvent(&netEvent);
 800b066:	4807      	ldr	r0, [pc, #28]	; (800b084 <enc28j60Init+0x2ac>)
 800b068:	f7f6 f97e 	bl	8001368 <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000034 	.word	0x20000034
 800b07c:	08014464 	.word	0x08014464
 800b080:	08014494 	.word	0x08014494
 800b084:	200091c4 	.word	0x200091c4

0800b088 <enc28j60Tick>:
 * @brief ENC28J60 timer handler
 * @param[in] interface Underlying network interface
 **/

void enc28j60Tick(NetInterface *interface)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <enc28j60EnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void enc28j60EnableIrq(NetInterface *interface)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
   //Enable interrupts
   interface->extIntDriver->enableIrq();
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	4798      	blx	r3
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <enc28j60DisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void enc28j60DisableIrq(NetInterface *interface)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
   //Disable interrupts
   interface->extIntDriver->disableIrq();
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	4798      	blx	r3
}
 800b0c4:	bf00      	nop
 800b0c6:	3708      	adds	r7, #8
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <enc28j60IrqHandler>:
 * @param[in] interface Underlying network interface
 * @return TRUE if a higher priority task must be woken. Else FALSE is returned
 **/

bool_t enc28j60IrqHandler(NetInterface *interface)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
   bool_t flag;
   uint8_t status;

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]

   //Clear the INTIE bit, immediately after an interrupt event
   enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE);
 800b0d8:	2280      	movs	r2, #128	; 0x80
 800b0da:	211b      	movs	r1, #27
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fc24 	bl	800b92a <enc28j60ClearBit>

   //Read interrupt status register
   status = enc28j60ReadReg(interface, ENC28J60_EIR);
 800b0e2:	211c      	movs	r1, #28
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fabf 	bl	800b668 <enc28j60ReadReg>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	72fb      	strb	r3, [r7, #11]

   //Link status change?
   if((status & ENC28J60_EIR_LINKIF) != 0)
 800b0ee:	7afb      	ldrb	r3, [r7, #11]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00f      	beq.n	800b118 <enc28j60IrqHandler+0x4c>
   {
      //Disable LINKIE interrupt
      enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_LINKIE);
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	211b      	movs	r1, #27
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 fc14 	bl	800b92a <enc28j60ClearBit>

      //Set event flag
      interface->nicEvent = TRUE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2201      	movs	r2, #1
 800b106:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Notify the TCP/IP stack of the event
      flag |= osSetEventFromIsr(&netEvent);
 800b10a:	481e      	ldr	r0, [pc, #120]	; (800b184 <enc28j60IrqHandler+0xb8>)
 800b10c:	f7f6 f967 	bl	80013de <osSetEventFromIsr>
 800b110:	4602      	mov	r2, r0
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
   }

   //Packet received?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 800b118:	f240 1119 	movw	r1, #281	; 0x119
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 faa3 	bl	800b668 <enc28j60ReadReg>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00f      	beq.n	800b148 <enc28j60IrqHandler+0x7c>
   {
      //Disable PKTIE interrupt
      enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_PKTIE);
 800b128:	2240      	movs	r2, #64	; 0x40
 800b12a:	211b      	movs	r1, #27
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fbfc 	bl	800b92a <enc28j60ClearBit>

      //Set event flag
      interface->nicEvent = TRUE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Notify the TCP/IP stack of the event
      flag |= osSetEventFromIsr(&netEvent);
 800b13a:	4812      	ldr	r0, [pc, #72]	; (800b184 <enc28j60IrqHandler+0xb8>)
 800b13c:	f7f6 f94f 	bl	80013de <osSetEventFromIsr>
 800b140:	4602      	mov	r2, r0
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
   }

   //Packet transmission complete?
   if((status & (ENC28J60_EIR_TXIF | ENC28J60_EIE_TXERIE)) != 0)
 800b148:	7afb      	ldrb	r3, [r7, #11]
 800b14a:	f003 030a 	and.w	r3, r3, #10
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <enc28j60IrqHandler+0xa2>
   {
      //Clear interrupt flags
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_TXIF |
 800b152:	220a      	movs	r2, #10
 800b154:	211c      	movs	r1, #28
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fbe7 	bl	800b92a <enc28j60ClearBit>
         ENC28J60_EIE_TXERIE);

      //Notify the TCP/IP stack that the transmitter is ready to send
      flag |= osSetEventFromIsr(&interface->nicTxEvent);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3354      	adds	r3, #84	; 0x54
 800b160:	4618      	mov	r0, r3
 800b162:	f7f6 f93c 	bl	80013de <osSetEventFromIsr>
 800b166:	4602      	mov	r2, r0
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	60fb      	str	r3, [r7, #12]
   }

   //Once the interrupt has been serviced, the INTIE bit is set again to
   //re-enable interrupts
   enc28j60SetBit(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE);
 800b16e:	2280      	movs	r2, #128	; 0x80
 800b170:	211b      	movs	r1, #27
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 fbb0 	bl	800b8d8 <enc28j60SetBit>

   //A higher priority task must be woken?
   return flag;
 800b178:	68fb      	ldr	r3, [r7, #12]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	200091c4 	.word	0x200091c4

0800b188 <enc28j60EventHandler>:
 * @brief ENC28J60 event handler
 * @param[in] interface Underlying network interface
 **/

void enc28j60EventHandler(NetInterface *interface)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
   error_t error;
   uint16_t status;
   uint16_t value;

   //Read interrupt status register
   status = enc28j60ReadReg(interface, ENC28J60_EIR);
 800b190:	211c      	movs	r1, #28
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa68 	bl	800b668 <enc28j60ReadReg>
 800b198:	4603      	mov	r3, r0
 800b19a:	81fb      	strh	r3, [r7, #14]

   //Check whether the link state has changed
   if((status & ENC28J60_EIR_LINKIF) != 0)
 800b19c:	89fb      	ldrh	r3, [r7, #14]
 800b19e:	f003 0310 	and.w	r3, r3, #16
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d029      	beq.n	800b1fa <enc28j60EventHandler+0x72>
   {
      //Clear PHY interrupts flags
      enc28j60ReadPhyReg(interface, ENC28J60_PHIR);
 800b1a6:	f243 0113 	movw	r1, #12307	; 0x3013
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 fac5 	bl	800b73a <enc28j60ReadPhyReg>
      //Clear interrupt flag
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_LINKIF);
 800b1b0:	2210      	movs	r2, #16
 800b1b2:	211c      	movs	r1, #28
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 fbb8 	bl	800b92a <enc28j60ClearBit>
      //Read PHY status register
      value = enc28j60ReadPhyReg(interface, ENC28J60_PHSTAT2);
 800b1ba:	f243 0111 	movw	r1, #12305	; 0x3011
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fabb 	bl	800b73a <enc28j60ReadPhyReg>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	81bb      	strh	r3, [r7, #12]

      //Check link state
      if((value & ENC28J60_PHSTAT2_LSTAT) != 0)
 800b1c8:	89bb      	ldrh	r3, [r7, #12]
 800b1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00c      	beq.n	800b1ec <enc28j60EventHandler+0x64>
      {
         //Link speed
         interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a19      	ldr	r2, [pc, #100]	; (800b23c <enc28j60EventHandler+0xb4>)
 800b1d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
         //Full-duplex mode
         interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2202      	movs	r2, #2
 800b1de:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
#else
         //Half-duplex mode
         interface->duplexMode = NIC_HALF_DUPLEX_MODE;
#endif
         //Link is up
         interface->linkState = TRUE;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800b1ea:	e003      	b.n	800b1f4 <enc28j60EventHandler+0x6c>
      }
      else
      {
         //Link is down
         interface->linkState = FALSE;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      }

      //Process link state change event
      nicNotifyLinkChange(interface);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7f8 fe43 	bl	8003e80 <nicNotifyLinkChange>
   }

   //Check whether a packet has been received?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 800b1fa:	f240 1119 	movw	r1, #281	; 0x119
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fa32 	bl	800b668 <enc28j60ReadReg>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <enc28j60EventHandler+0xa0>
   {
      //Clear interrupt flag
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_PKTIF);
 800b20a:	2240      	movs	r2, #64	; 0x40
 800b20c:	211c      	movs	r1, #28
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb8b 	bl	800b92a <enc28j60ClearBit>

      //Process all pending packets
      do
      {
         //Read incoming packet
         error = enc28j60ReceivePacket(interface);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f87b 	bl	800b310 <enc28j60ReceivePacket>
 800b21a:	4603      	mov	r3, r0
 800b21c:	817b      	strh	r3, [r7, #10]

         //No more data in the receive buffer?
      } while(error != ERROR_BUFFER_EMPTY);
 800b21e:	897b      	ldrh	r3, [r7, #10]
 800b220:	f240 1209 	movw	r2, #265	; 0x109
 800b224:	4293      	cmp	r3, r2
 800b226:	d1f5      	bne.n	800b214 <enc28j60EventHandler+0x8c>
   }

   //Re-enable LINKIE and PKTIE interrupts
   enc28j60SetBit(interface, ENC28J60_EIE, ENC28J60_EIE_LINKIE |
 800b228:	2250      	movs	r2, #80	; 0x50
 800b22a:	211b      	movs	r1, #27
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 fb53 	bl	800b8d8 <enc28j60SetBit>
      ENC28J60_EIE_PKTIE);
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	00989680 	.word	0x00989680

0800b240 <enc28j60SendPacket>:
 * @return Error code
 **/

error_t enc28j60SendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
 800b24c:	603b      	str	r3, [r7, #0]
   size_t length;

   //Retrieve the length of the packet
   length = netBufferGetLength(buffer) - offset;
 800b24e:	68b8      	ldr	r0, [r7, #8]
 800b250:	f7f7 fd94 	bl	8002d7c <netBufferGetLength>
 800b254:	4602      	mov	r2, r0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	617b      	str	r3, [r7, #20]

   //Check the frame length
   if(length > 1536)
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b262:	d906      	bls.n	800b272 <enc28j60SendPacket+0x32>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	3354      	adds	r3, #84	; 0x54
 800b268:	4618      	mov	r0, r3
 800b26a:	f7f6 f87d 	bl	8001368 <osSetEvent>
      //Report an error
      return ERROR_INVALID_LENGTH;
 800b26e:	23ec      	movs	r3, #236	; 0xec
 800b270:	e04a      	b.n	800b308 <enc28j60SendPacket+0xc8>
   }

   //Make sure the link is up before transmitting the frame
   if(!interface->linkState)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <enc28j60SendPacket+0x4a>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3354      	adds	r3, #84	; 0x54
 800b280:	4618      	mov	r0, r3
 800b282:	f7f6 f871 	bl	8001368 <osSetEvent>
      //Drop current packet
      return NO_ERROR;
 800b286:	2300      	movs	r3, #0
 800b288:	e03e      	b.n	800b308 <enc28j60SendPacket+0xc8>
   }

   //It is recommended to reset the transmit logic before
   //attempting to transmit a packet
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST);
 800b28a:	2280      	movs	r2, #128	; 0x80
 800b28c:	211f      	movs	r1, #31
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fb22 	bl	800b8d8 <enc28j60SetBit>
   enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST);
 800b294:	2280      	movs	r2, #128	; 0x80
 800b296:	211f      	movs	r1, #31
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 fb46 	bl	800b92a <enc28j60ClearBit>

   //Interrupt flags should be cleared after the reset is completed
   enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_TXIF |
 800b29e:	220a      	movs	r2, #10
 800b2a0:	211c      	movs	r1, #28
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	f000 fb41 	bl	800b92a <enc28j60ClearBit>
      ENC28J60_EIR_TXERIF);

   //Set transmit buffer location
   enc28j60WriteReg(interface, ENC28J60_ETXSTL, LSB(ENC28J60_TX_BUFFER_START));
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	2104      	movs	r1, #4
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f9ae 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ETXSTH, MSB(ENC28J60_TX_BUFFER_START));
 800b2b2:	2218      	movs	r2, #24
 800b2b4:	2105      	movs	r1, #5
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f000 f9a9 	bl	800b60e <enc28j60WriteReg>

   //Point to start of transmit buffer
   enc28j60WriteReg(interface, ENC28J60_EWRPTL, LSB(ENC28J60_TX_BUFFER_START));
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2102      	movs	r1, #2
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f000 f9a4 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EWRPTH, MSB(ENC28J60_TX_BUFFER_START));
 800b2c6:	2218      	movs	r2, #24
 800b2c8:	2103      	movs	r1, #3
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 f99f 	bl	800b60e <enc28j60WriteReg>

   //Copy the data to the transmit buffer
   enc28j60WriteBuffer(interface, buffer, offset);
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f000 fa71 	bl	800b7bc <enc28j60WriteBuffer>

   //ETXND should point to the last byte in the data payload
   enc28j60WriteReg(interface, ENC28J60_ETXNDL, LSB(ENC28J60_TX_BUFFER_START + length));
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	461a      	mov	r2, r3
 800b2e0:	2106      	movs	r1, #6
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f993 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ETXNDH, MSB(ENC28J60_TX_BUFFER_START + length));
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	2107      	movs	r1, #7
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f000 f989 	bl	800b60e <enc28j60WriteReg>

   //Start transmission
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS);
 800b2fc:	2208      	movs	r2, #8
 800b2fe:	211f      	movs	r1, #31
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 fae9 	bl	800b8d8 <enc28j60SetBit>

   //Successful processing
   return NO_ERROR;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3718      	adds	r7, #24
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <enc28j60ReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60ReceivePacket(NetInterface *interface)
{
 800b310:	b590      	push	{r4, r7, lr}
 800b312:	b08b      	sub	sp, #44	; 0x2c
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
   uint16_t status;
   uint8_t header[6];
   Enc28j60Context *context;

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3344      	adds	r3, #68	; 0x44
 800b31c:	623b      	str	r3, [r7, #32]

   //Any packet pending in the receive buffer?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 800b31e:	f240 1119 	movw	r1, #281	; 0x119
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 f9a0 	bl	800b668 <enc28j60ReadReg>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d073      	beq.n	800b416 <enc28j60ReceivePacket+0x106>
   {
      //Point to the start of the received packet
      enc28j60WriteReg(interface, ENC28J60_ERDPTL, LSB(context->nextPacket));
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	b2db      	uxtb	r3, r3
 800b334:	461a      	mov	r2, r3
 800b336:	2100      	movs	r1, #0
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f968 	bl	800b60e <enc28j60WriteReg>
      enc28j60WriteReg(interface, ENC28J60_ERDPTH, MSB(context->nextPacket));
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	885b      	ldrh	r3, [r3, #2]
 800b342:	0a1b      	lsrs	r3, r3, #8
 800b344:	b29b      	uxth	r3, r3
 800b346:	b2db      	uxtb	r3, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	2101      	movs	r1, #1
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f95e 	bl	800b60e <enc28j60WriteReg>

      //The packet is preceded by a 6-byte header
      enc28j60ReadBuffer(interface, header, sizeof(header));
 800b352:	f107 0318 	add.w	r3, r7, #24
 800b356:	2206      	movs	r2, #6
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f000 fa91 	bl	800b882 <enc28j60ReadBuffer>

      //The first two bytes are the address of the next packet
      context->nextPacket = LOAD16LE(header);
 800b360:	7e3b      	ldrb	r3, [r7, #24]
 800b362:	b21a      	sxth	r2, r3
 800b364:	7e7b      	ldrb	r3, [r7, #25]
 800b366:	021b      	lsls	r3, r3, #8
 800b368:	b21b      	sxth	r3, r3
 800b36a:	4313      	orrs	r3, r2
 800b36c:	b21b      	sxth	r3, r3
 800b36e:	b29a      	uxth	r2, r3
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	805a      	strh	r2, [r3, #2]
      //Get the length of the received packet
      length = LOAD16LE(header + 2);
 800b374:	7ebb      	ldrb	r3, [r7, #26]
 800b376:	b21a      	sxth	r2, r3
 800b378:	7efb      	ldrb	r3, [r7, #27]
 800b37a:	021b      	lsls	r3, r3, #8
 800b37c:	b21b      	sxth	r3, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	b21b      	sxth	r3, r3
 800b382:	84bb      	strh	r3, [r7, #36]	; 0x24
      //Get the receive status vector (RSV)
      status = LOAD16LE(header + 4);
 800b384:	7f3b      	ldrb	r3, [r7, #28]
 800b386:	b21a      	sxth	r2, r3
 800b388:	7f7b      	ldrb	r3, [r7, #29]
 800b38a:	021b      	lsls	r3, r3, #8
 800b38c:	b21b      	sxth	r3, r3
 800b38e:	4313      	orrs	r3, r2
 800b390:	b21b      	sxth	r3, r3
 800b392:	83fb      	strh	r3, [r7, #30]

      //Make sure no error occurred
      if((status & ENC28J60_RSV_RECEIVED_OK) != 0)
 800b394:	8bfb      	ldrh	r3, [r7, #30]
 800b396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00f      	beq.n	800b3be <enc28j60ReceivePacket+0xae>
      {
         //Limit the number of data to read
         length = MIN(length, ENC28J60_ETH_RX_BUFFER_SIZE);
 800b39e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b3a4:	bf28      	it	cs
 800b3a6:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 800b3aa:	84bb      	strh	r3, [r7, #36]	; 0x24
         //Read the Ethernet frame
         enc28j60ReadBuffer(interface, temp, length);
 800b3ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	4927      	ldr	r1, [pc, #156]	; (800b450 <enc28j60ReceivePacket+0x140>)
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fa65 	bl	800b882 <enc28j60ReadBuffer>
         //Valid packet received
         error = NO_ERROR;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b3bc:	e002      	b.n	800b3c4 <enc28j60ReceivePacket+0xb4>
      }
      else
      {
         //The received packet contains an error
         error = ERROR_INVALID_PACKET;
 800b3be:	f44f 7384 	mov.w	r3, #264	; 0x108
 800b3c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      //Advance the ERXRDPT pointer, taking care to wrap back at the end of the
      //received memory buffer
      if(context->nextPacket == ENC28J60_RX_BUFFER_START)
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <enc28j60ReceivePacket+0xd2>
      {
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));
 800b3cc:	22ff      	movs	r2, #255	; 0xff
 800b3ce:	210c      	movs	r1, #12
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f91c 	bl	800b60e <enc28j60WriteReg>
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));
 800b3d6:	2217      	movs	r2, #23
 800b3d8:	210d      	movs	r1, #13
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f917 	bl	800b60e <enc28j60WriteReg>
 800b3e0:	e013      	b.n	800b40a <enc28j60ReceivePacket+0xfa>
      }
      else
      {
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(context->nextPacket - 1));
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	885b      	ldrh	r3, [r3, #2]
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	210c      	movs	r1, #12
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f90c 	bl	800b60e <enc28j60WriteReg>
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(context->nextPacket - 1));
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	121b      	asrs	r3, r3, #8
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	461a      	mov	r2, r3
 800b402:	210d      	movs	r1, #13
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f902 	bl	800b60e <enc28j60WriteReg>
      }

      //Decrement the packet counter
      enc28j60SetBit(interface, ENC28J60_ECON2, ENC28J60_ECON2_PKTDEC);
 800b40a:	2240      	movs	r2, #64	; 0x40
 800b40c:	211e      	movs	r1, #30
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa62 	bl	800b8d8 <enc28j60SetBit>
 800b414:	e002      	b.n	800b41c <enc28j60ReceivePacket+0x10c>
   }
   else
   {
      //No more data in the receive buffer
      error = ERROR_BUFFER_EMPTY;
 800b416:	f240 1309 	movw	r3, #265	; 0x109
 800b41a:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Check whether a valid packet has been received
   if(!error)
 800b41c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d110      	bne.n	800b444 <enc28j60ReceivePacket+0x134>
   {
      NetRxAncillary ancillary;

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_RX_ANCILLARY;
 800b422:	4a0c      	ldr	r2, [pc, #48]	; (800b454 <enc28j60ReceivePacket+0x144>)
 800b424:	f107 0308 	add.w	r3, r7, #8
 800b428:	4614      	mov	r4, r2
 800b42a:	6820      	ldr	r0, [r4, #0]
 800b42c:	6861      	ldr	r1, [r4, #4]
 800b42e:	68a2      	ldr	r2, [r4, #8]
 800b430:	c307      	stmia	r3!, {r0, r1, r2}
 800b432:	7b22      	ldrb	r2, [r4, #12]
 800b434:	701a      	strb	r2, [r3, #0]

      //Pass the packet to the upper layer
      nicProcessPacket(interface, temp, length, &ancillary);
 800b436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b438:	f107 0308 	add.w	r3, r7, #8
 800b43c:	4904      	ldr	r1, [pc, #16]	; (800b450 <enc28j60ReceivePacket+0x140>)
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7f8 fcea 	bl	8003e18 <nicProcessPacket>
   }

   //Return status code
   return error;
 800b444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800b446:	4618      	mov	r0, r3
 800b448:	372c      	adds	r7, #44	; 0x2c
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd90      	pop	{r4, r7, pc}
 800b44e:	bf00      	nop
 800b450:	2000033c 	.word	0x2000033c
 800b454:	08014558 	.word	0x08014558

0800b458 <enc28j60UpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60UpdateMacAddrFilter(NetInterface *interface)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b088      	sub	sp, #32
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_DEBUG("Updating MAC filter...\r\n");

   //Clear hash table
   osMemset(hashTable, 0, sizeof(hashTable));
 800b460:	f107 0308 	add.w	r3, r7, #8
 800b464:	2208      	movs	r2, #8
 800b466:	2100      	movs	r1, #0
 800b468:	4618      	mov	r0, r3
 800b46a:	f007 fb4c 	bl	8012b06 <memset>

   //The MAC address filter contains the list of MAC addresses to accept
   //when receiving an Ethernet frame
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	e032      	b.n	800b4da <enc28j60UpdateMacAddrFilter+0x82>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 800b474:	69fa      	ldr	r2, [r7, #28]
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	33d0      	adds	r3, #208	; 0xd0
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	4413      	add	r3, r2
 800b484:	3304      	adds	r3, #4
 800b486:	61bb      	str	r3, [r7, #24]

      //Valid entry?
      if(entry->refCount > 0)
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d021      	beq.n	800b4d4 <enc28j60UpdateMacAddrFilter+0x7c>
      {
         //Compute CRC over the current MAC address
         crc = enc28j60CalcCrc(&entry->addr, sizeof(MacAddr));
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2106      	movs	r1, #6
 800b494:	4618      	mov	r0, r3
 800b496:	f000 fa71 	bl	800b97c <enc28j60CalcCrc>
 800b49a:	6178      	str	r0, [r7, #20]
         //Calculate the corresponding index in the table
         k = (crc >> 23) & 0x3F;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	0ddb      	lsrs	r3, r3, #23
 800b4a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4a4:	613b      	str	r3, [r7, #16]
         //Update hash table contents
         hashTable[k / 8] |= (1 << (k % 8));
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	08db      	lsrs	r3, r3, #3
 800b4aa:	f107 0220 	add.w	r2, r7, #32
 800b4ae:	441a      	add	r2, r3
 800b4b0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800b4b4:	b251      	sxtb	r1, r2
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	f002 0207 	and.w	r2, r2, #7
 800b4bc:	2001      	movs	r0, #1
 800b4be:	fa00 f202 	lsl.w	r2, r0, r2
 800b4c2:	b252      	sxtb	r2, r2
 800b4c4:	430a      	orrs	r2, r1
 800b4c6:	b252      	sxtb	r2, r2
 800b4c8:	b2d2      	uxtb	r2, r2
 800b4ca:	f107 0120 	add.w	r1, r7, #32
 800b4ce:	440b      	add	r3, r1
 800b4d0:	f803 2c18 	strb.w	r2, [r3, #-24]
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	61fb      	str	r3, [r7, #28]
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	2b0b      	cmp	r3, #11
 800b4de:	d9c9      	bls.n	800b474 <enc28j60UpdateMacAddrFilter+0x1c>
      }
   }

   //Write the hash table to the ENC28J60 controller
   enc28j60WriteReg(interface, ENC28J60_EHT0, hashTable[0]);
 800b4e0:	7a3b      	ldrb	r3, [r7, #8]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f890 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT1, hashTable[1]);
 800b4ee:	7a7b      	ldrb	r3, [r7, #9]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	f240 1101 	movw	r1, #257	; 0x101
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f889 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT2, hashTable[2]);
 800b4fc:	7abb      	ldrb	r3, [r7, #10]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f882 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT3, hashTable[3]);
 800b50a:	7afb      	ldrb	r3, [r7, #11]
 800b50c:	461a      	mov	r2, r3
 800b50e:	f240 1103 	movw	r1, #259	; 0x103
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f87b 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT4, hashTable[4]);
 800b518:	7b3b      	ldrb	r3, [r7, #12]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f44f 7182 	mov.w	r1, #260	; 0x104
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f874 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT5, hashTable[5]);
 800b526:	7b7b      	ldrb	r3, [r7, #13]
 800b528:	461a      	mov	r2, r3
 800b52a:	f240 1105 	movw	r1, #261	; 0x105
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f86d 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT6, hashTable[6]);
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	461a      	mov	r2, r3
 800b538:	f44f 7183 	mov.w	r1, #262	; 0x106
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f866 	bl	800b60e <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT7, hashTable[7]);
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	461a      	mov	r2, r3
 800b546:	f240 1107 	movw	r1, #263	; 0x107
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f85f 	bl	800b60e <enc28j60WriteReg>
   TRACE_DEBUG("  EHT1 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT5));
   TRACE_DEBUG("  EHT2 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT6));
   TRACE_DEBUG("  EHT3 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT7));

   //Successful processing
   return NO_ERROR;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3720      	adds	r7, #32
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <enc28j60SoftReset>:
 * @brief ENC28J60 controller reset
 * @param[in] interface Underlying network interface
 **/

void enc28j60SoftReset(NetInterface *interface)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b082      	sub	sp, #8
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_SRC);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	20ff      	movs	r0, #255	; 0xff
 800b572:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	4798      	blx	r3
}
 800b57c:	bf00      	nop
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <enc28j60SelectBank>:
 * @param[in] interface Underlying network interface
 * @param[in] address Register address
 **/

void enc28j60SelectBank(NetInterface *interface, uint16_t address)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	460b      	mov	r3, r1
 800b58e:	807b      	strh	r3, [r7, #2]
   uint16_t bank;
   Enc28j60Context *context;

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	3344      	adds	r3, #68	; 0x44
 800b594:	60fb      	str	r3, [r7, #12]

   //Get the bank number from the specified address
   bank = address & REG_BANK_MASK;
 800b596:	887b      	ldrh	r3, [r7, #2]
 800b598:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b59c:	817b      	strh	r3, [r7, #10]

   //Rewrite the bank number only if a change is detected
   if(bank != context->currentBank)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	897a      	ldrh	r2, [r7, #10]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d02e      	beq.n	800b606 <enc28j60SelectBank+0x82>
   {
      //Select the relevant bank
      if(bank == BANK_0)
 800b5a8:	897b      	ldrh	r3, [r7, #10]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d105      	bne.n	800b5ba <enc28j60SelectBank+0x36>
      {
         //Select bank 0
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1 |
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	211f      	movs	r1, #31
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f9b9 	bl	800b92a <enc28j60ClearBit>
 800b5b8:	e022      	b.n	800b600 <enc28j60SelectBank+0x7c>
            ENC28J60_ECON1_BSEL0);
      }
      else if(bank == BANK_1)
 800b5ba:	897b      	ldrh	r3, [r7, #10]
 800b5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c0:	d10a      	bne.n	800b5d8 <enc28j60SelectBank+0x54>
      {
         //Select bank 1
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL0);
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	211f      	movs	r1, #31
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f986 	bl	800b8d8 <enc28j60SetBit>
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1);
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	211f      	movs	r1, #31
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f9aa 	bl	800b92a <enc28j60ClearBit>
 800b5d6:	e013      	b.n	800b600 <enc28j60SelectBank+0x7c>
      }
      else if(bank == BANK_2)
 800b5d8:	897b      	ldrh	r3, [r7, #10]
 800b5da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5de:	d10a      	bne.n	800b5f6 <enc28j60SelectBank+0x72>
      {
         //Select bank 2
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL0);
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	211f      	movs	r1, #31
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f9a0 	bl	800b92a <enc28j60ClearBit>
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1);
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	211f      	movs	r1, #31
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f972 	bl	800b8d8 <enc28j60SetBit>
 800b5f4:	e004      	b.n	800b600 <enc28j60SelectBank+0x7c>
      }
      else
      {
         //Select bank 3
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1 |
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	211f      	movs	r1, #31
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f96c 	bl	800b8d8 <enc28j60SetBit>
            ENC28J60_ECON1_BSEL0);
      }

      //Save bank number
      context->currentBank = bank;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	897a      	ldrh	r2, [r7, #10]
 800b604:	801a      	strh	r2, [r3, #0]
   }
}
 800b606:	bf00      	nop
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <enc28j60WriteReg>:
 * @param[in] address Register address
 * @param[in] data Register value
 **/

void enc28j60WriteReg(NetInterface *interface, uint16_t address, uint8_t data)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b082      	sub	sp, #8
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	807b      	strh	r3, [r7, #2]
 800b61a:	4613      	mov	r3, r2
 800b61c:	707b      	strb	r3, [r7, #1]
   //Make sure the corresponding bank is selected
   enc28j60SelectBank(interface, address);
 800b61e:	887b      	ldrh	r3, [r7, #2]
 800b620:	4619      	mov	r1, r3
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff ffae 	bl	800b584 <enc28j60SelectBank>

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_WCR | (address & REG_ADDR_MASK));
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	887a      	ldrh	r2, [r7, #2]
 800b638:	b252      	sxtb	r2, r2
 800b63a:	f002 021f 	and.w	r2, r2, #31
 800b63e:	b252      	sxtb	r2, r2
 800b640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b644:	b252      	sxtb	r2, r2
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	4610      	mov	r0, r2
 800b64a:	4798      	blx	r3
   //Write register value
   interface->spiDriver->transfer(data);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	787a      	ldrb	r2, [r7, #1]
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	4798      	blx	r3
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <enc28j60ReadReg>:
 * @param[in] address Register address
 * @return Register value
 **/

uint8_t enc28j60ReadReg(NetInterface *interface, uint16_t address)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	807b      	strh	r3, [r7, #2]
   uint16_t data;

   //Make sure the corresponding bank is selected
   enc28j60SelectBank(interface, address);
 800b674:	887b      	ldrh	r3, [r7, #2]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff ff83 	bl	800b584 <enc28j60SelectBank>

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_RCR | (address & REG_ADDR_MASK));
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	695b      	ldr	r3, [r3, #20]
 800b68c:	887a      	ldrh	r2, [r7, #2]
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	f002 021f 	and.w	r2, r2, #31
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	4610      	mov	r0, r2
 800b698:	4798      	blx	r3

   //When reading MAC or MII registers, a dummy byte is first shifted out
   if((address & REG_TYPE_MASK) != ETH_REG_TYPE)
 800b69a:	887b      	ldrh	r3, [r7, #2]
 800b69c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <enc28j60ReadReg+0x46>
   {
      interface->spiDriver->transfer(0x00);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a8:	695b      	ldr	r3, [r3, #20]
 800b6aa:	2000      	movs	r0, #0
 800b6ac:	4798      	blx	r3
   }

   //Read register contents
   data = interface->spiDriver->transfer(0x00);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	4798      	blx	r3
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	81fb      	strh	r3, [r7, #14]

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	4798      	blx	r3

   //Return register contents
   return data;
 800b6c4:	89fb      	ldrh	r3, [r7, #14]
 800b6c6:	b2db      	uxtb	r3, r3
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <enc28j60WritePhyReg>:
 * @param[in] data Register value
 **/

void enc28j60WritePhyReg(NetInterface *interface, uint16_t address,
   uint16_t data)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	807b      	strh	r3, [r7, #2]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	803b      	strh	r3, [r7, #0]
   //Write register address
   enc28j60WriteReg(interface, ENC28J60_MIREGADR, address & REG_ADDR_MASK);
 800b6e0:	887b      	ldrh	r3, [r7, #2]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	f003 031f 	and.w	r3, r3, #31
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	f242 2114 	movw	r1, #8724	; 0x2214
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff ff8c 	bl	800b60e <enc28j60WriteReg>

   //Write the lower 8 bits
   enc28j60WriteReg(interface, ENC28J60_MIWRL, LSB(data));
 800b6f6:	883b      	ldrh	r3, [r7, #0]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	f242 2116 	movw	r1, #8726	; 0x2216
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff ff84 	bl	800b60e <enc28j60WriteReg>
   //Write the upper 8 bits
   enc28j60WriteReg(interface, ENC28J60_MIWRH, MSB(data));
 800b706:	883b      	ldrh	r3, [r7, #0]
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	461a      	mov	r2, r3
 800b710:	f242 2117 	movw	r1, #8727	; 0x2217
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff7a 	bl	800b60e <enc28j60WriteReg>

   //Wait until the PHY register has been written
   while((enc28j60ReadReg(interface, ENC28J60_MISTAT) & ENC28J60_MISTAT_BUSY) != 0)
 800b71a:	bf00      	nop
 800b71c:	f242 310a 	movw	r1, #8970	; 0x230a
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f7ff ffa1 	bl	800b668 <enc28j60ReadReg>
 800b726:	4603      	mov	r3, r0
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1f5      	bne.n	800b71c <enc28j60WritePhyReg+0x4c>
   {
   }
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <enc28j60ReadPhyReg>:
 * @param[in] address PHY register address
 * @return Register value
 **/

uint16_t enc28j60ReadPhyReg(NetInterface *interface, uint16_t address)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b084      	sub	sp, #16
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	460b      	mov	r3, r1
 800b744:	807b      	strh	r3, [r7, #2]
   uint16_t data;

   //Write register address
   enc28j60WriteReg(interface, ENC28J60_MIREGADR, address & REG_ADDR_MASK);
 800b746:	887b      	ldrh	r3, [r7, #2]
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	f003 031f 	and.w	r3, r3, #31
 800b74e:	b2db      	uxtb	r3, r3
 800b750:	461a      	mov	r2, r3
 800b752:	f242 2114 	movw	r1, #8724	; 0x2214
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff ff59 	bl	800b60e <enc28j60WriteReg>

   //Start read operation
   enc28j60WriteReg(interface, ENC28J60_MICMD, ENC28J60_MICMD_MIIRD);
 800b75c:	2201      	movs	r2, #1
 800b75e:	f242 2112 	movw	r1, #8722	; 0x2212
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7ff ff53 	bl	800b60e <enc28j60WriteReg>
   //Wait for the read operation to complete
   while((enc28j60ReadReg(interface, ENC28J60_MISTAT) & ENC28J60_MISTAT_BUSY) != 0)
 800b768:	bf00      	nop
 800b76a:	f242 310a 	movw	r1, #8970	; 0x230a
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7ff ff7a 	bl	800b668 <enc28j60ReadReg>
 800b774:	4603      	mov	r3, r0
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f5      	bne.n	800b76a <enc28j60ReadPhyReg+0x30>
   {
   }

   //Clear command register
   enc28j60WriteReg(interface, ENC28J60_MICMD, 0);
 800b77e:	2200      	movs	r2, #0
 800b780:	f242 2112 	movw	r1, #8722	; 0x2212
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff ff42 	bl	800b60e <enc28j60WriteReg>

   //Read the lower 8 bits
   data = enc28j60ReadReg(interface, ENC28J60_MIRDL);
 800b78a:	f242 2118 	movw	r1, #8728	; 0x2218
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ff6a 	bl	800b668 <enc28j60ReadReg>
 800b794:	4603      	mov	r3, r0
 800b796:	81fb      	strh	r3, [r7, #14]
   //Read the upper 8 bits
   data |= enc28j60ReadReg(interface, ENC28J60_MIRDH) << 8;
 800b798:	f242 2119 	movw	r1, #8729	; 0x2219
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff ff63 	bl	800b668 <enc28j60ReadReg>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	b21a      	sxth	r2, r3
 800b7a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	81fb      	strh	r3, [r7, #14]

   //Return register contents
   return data;
 800b7b2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <enc28j60WriteBuffer>:
 * @param[in] offset Offset to the first data byte
 **/

void enc28j60WriteBuffer(NetInterface *interface,
   const NetBuffer *buffer, size_t offset)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
   size_t j;
   size_t n;
   uint8_t *p;

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_WBM);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	207a      	movs	r0, #122	; 0x7a
 800b7d8:	4798      	blx	r3
   //Write per-packet control byte
   interface->spiDriver->transfer(0x00);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	4798      	blx	r3

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61fb      	str	r3, [r7, #28]
 800b7e8:	e03e      	b.n	800b868 <enc28j60WriteBuffer+0xac>
   {
      //Is there any data to copy from the current chunk?
      if(offset < buffer->chunk[i].length)
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	4413      	add	r3, r2
 800b7f4:	889b      	ldrh	r3, [r3, #4]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	d227      	bcs.n	800b84e <enc28j60WriteBuffer+0x92>
      {
         //Point to the first byte to be read
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	69fa      	ldr	r2, [r7, #28]
 800b802:	3201      	adds	r2, #1
 800b804:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4413      	add	r3, r2
 800b80c:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = buffer->chunk[i].length - offset;
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	3301      	adds	r3, #1
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	4413      	add	r3, r2
 800b818:	889b      	ldrh	r3, [r3, #4]
 800b81a:	461a      	mov	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	613b      	str	r3, [r7, #16]

         //Copy data to SRAM buffer
         for(j = 0; j < n; j++)
 800b822:	2300      	movs	r3, #0
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	e00b      	b.n	800b840 <enc28j60WriteBuffer+0x84>
         {
            interface->spiDriver->transfer(p[j]);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	6979      	ldr	r1, [r7, #20]
 800b830:	69ba      	ldr	r2, [r7, #24]
 800b832:	440a      	add	r2, r1
 800b834:	7812      	ldrb	r2, [r2, #0]
 800b836:	4610      	mov	r0, r2
 800b838:	4798      	blx	r3
         for(j = 0; j < n; j++)
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	3301      	adds	r3, #1
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	69ba      	ldr	r2, [r7, #24]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	429a      	cmp	r2, r3
 800b846:	d3ef      	bcc.n	800b828 <enc28j60WriteBuffer+0x6c>
         }

         //Process the next block from the start
         offset = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	607b      	str	r3, [r7, #4]
 800b84c:	e009      	b.n	800b862 <enc28j60WriteBuffer+0xa6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	3301      	adds	r3, #1
 800b854:	00db      	lsls	r3, r3, #3
 800b856:	4413      	add	r3, r2
 800b858:	889b      	ldrh	r3, [r3, #4]
 800b85a:	461a      	mov	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	1a9b      	subs	r3, r3, r2
 800b860:	607b      	str	r3, [r7, #4]
   for(i = 0; i < buffer->chunkCount; i++)
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	3301      	adds	r3, #1
 800b866:	61fb      	str	r3, [r7, #28]
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	69fa      	ldr	r2, [r7, #28]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d3bb      	bcc.n	800b7ea <enc28j60WriteBuffer+0x2e>
      }
   }

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	4798      	blx	r3
}
 800b87a:	bf00      	nop
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <enc28j60ReadBuffer>:
 * @param[in] length Number of data to read
 **/

void enc28j60ReadBuffer(NetInterface *interface,
   uint8_t *data, size_t length)
{
 800b882:	b590      	push	{r4, r7, lr}
 800b884:	b087      	sub	sp, #28
 800b886:	af00      	add	r7, sp, #0
 800b888:	60f8      	str	r0, [r7, #12]
 800b88a:	60b9      	str	r1, [r7, #8]
 800b88c:	607a      	str	r2, [r7, #4]
   size_t i;

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b892:	68db      	ldr	r3, [r3, #12]
 800b894:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_RBM);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	203a      	movs	r0, #58	; 0x3a
 800b89e:	4798      	blx	r3

   //Copy data from SRAM buffer
   for(i = 0; i < length; i++)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e00c      	b.n	800b8c0 <enc28j60ReadBuffer+0x3e>
   {
      data[i] = interface->spiDriver->transfer(0x00);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	68b9      	ldr	r1, [r7, #8]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	188c      	adds	r4, r1, r2
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	4798      	blx	r3
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	7023      	strb	r3, [r4, #0]
   for(i = 0; i < length; i++)
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d3ee      	bcc.n	800b8a6 <enc28j60ReadBuffer+0x24>
   }

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	4798      	blx	r3
}
 800b8d0:	bf00      	nop
 800b8d2:	371c      	adds	r7, #28
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd90      	pop	{r4, r7, pc}

0800b8d8 <enc28j60SetBit>:
 * @param[in] address Register address
 * @param[in] mask Bits to set in the target register
 **/

void enc28j60SetBit(NetInterface *interface, uint16_t address, uint16_t mask)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	807b      	strh	r3, [r7, #2]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	803b      	strh	r3, [r7, #0]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_BFS | (address & REG_ADDR_MASK));
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	887a      	ldrh	r2, [r7, #2]
 800b8f8:	b252      	sxtb	r2, r2
 800b8fa:	f002 021f 	and.w	r2, r2, #31
 800b8fe:	b252      	sxtb	r2, r2
 800b900:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b904:	b252      	sxtb	r2, r2
 800b906:	b2d2      	uxtb	r2, r2
 800b908:	4610      	mov	r0, r2
 800b90a:	4798      	blx	r3
   //Write bit mask
   interface->spiDriver->transfer(mask);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	883a      	ldrh	r2, [r7, #0]
 800b914:	b2d2      	uxtb	r2, r2
 800b916:	4610      	mov	r0, r2
 800b918:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91e:	691b      	ldr	r3, [r3, #16]
 800b920:	4798      	blx	r3
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <enc28j60ClearBit>:
 * @param[in] address Register address
 * @param[in] mask Bits to clear in the target register
 **/

void enc28j60ClearBit(NetInterface *interface, uint16_t address, uint16_t mask)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	807b      	strh	r3, [r7, #2]
 800b936:	4613      	mov	r3, r2
 800b938:	803b      	strh	r3, [r7, #0]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_BFC | (address & REG_ADDR_MASK));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	887a      	ldrh	r2, [r7, #2]
 800b94a:	b252      	sxtb	r2, r2
 800b94c:	f002 021f 	and.w	r2, r2, #31
 800b950:	b252      	sxtb	r2, r2
 800b952:	f062 025f 	orn	r2, r2, #95	; 0x5f
 800b956:	b252      	sxtb	r2, r2
 800b958:	b2d2      	uxtb	r2, r2
 800b95a:	4610      	mov	r0, r2
 800b95c:	4798      	blx	r3
   //Write bit mask
   interface->spiDriver->transfer(mask);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	883a      	ldrh	r2, [r7, #0]
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	4610      	mov	r0, r2
 800b96a:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	4798      	blx	r3
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <enc28j60CalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t enc28j60CalcCrc(const void *data, size_t length)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
   uint_t j;
   uint32_t crc;
   const uint8_t *p;

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   crc = 0xFFFFFFFF;
 800b98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b98e:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	e023      	b.n	800b9de <enc28j60CalcCrc+0x62>
   {
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 800b996:	2300      	movs	r3, #0
 800b998:	613b      	str	r3, [r7, #16]
 800b99a:	e01a      	b.n	800b9d2 <enc28j60CalcCrc+0x56>
      {
         //Update CRC value
         if((((crc >> 31) ^ (p[i] >> j)) & 0x01) != 0)
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	0fdb      	lsrs	r3, r3, #31
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	7812      	ldrb	r2, [r2, #0]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	693a      	ldr	r2, [r7, #16]
 800b9ac:	fa41 f202 	asr.w	r2, r1, r2
 800b9b0:	4053      	eors	r3, r2
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <enc28j60CalcCrc+0x4a>
         {
            crc = (crc << 1) ^ 0x04C11DB7;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	005a      	lsls	r2, r3, #1
 800b9be:	4b0d      	ldr	r3, [pc, #52]	; (800b9f4 <enc28j60CalcCrc+0x78>)
 800b9c0:	4053      	eors	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]
 800b9c4:	e002      	b.n	800b9cc <enc28j60CalcCrc+0x50>
         }
         else
         {
            crc = crc << 1;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	2b07      	cmp	r3, #7
 800b9d6:	d9e1      	bls.n	800b99c <enc28j60CalcCrc+0x20>
   for(i = 0; i < length; i++)
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d3d7      	bcc.n	800b996 <enc28j60CalcCrc+0x1a>
         }
      }
   }

   //Return CRC value
   return crc;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	371c      	adds	r7, #28
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	04c11db7 	.word	0x04c11db7

0800b9f8 <enc28j60DumpReg>:
 * @brief Dump registers for debugging purpose
 * @param[in] interface Underlying network interface
 **/

void enc28j60DumpReg(NetInterface *interface)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
   }

   //Terminate with a line feed
   TRACE_DEBUG("\r\n");
#endif
}
 800ba00:	bf00      	nop
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <enc28j60DumpPhyReg>:
 * @brief Dump PHY registers for debugging purpose
 * @param[in] interface Underlying network interface
 **/

void enc28j60DumpPhyReg(NetInterface *interface)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
   }

   //Terminate with a line feed
   TRACE_DEBUG("\r\n");
#endif
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <arpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t arpInit(NetInterface *interface)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
   //Initialize the ARP cache
   osMemset(interface->arpCache, 0, sizeof(interface->arpCache));
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800ba2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ba32:	2100      	movs	r1, #0
 800ba34:	4618      	mov	r0, r3
 800ba36:	f007 f866 	bl	8012b06 <memset>

   //Successful initialization
   return NO_ERROR;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3708      	adds	r7, #8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <arpFlushCache>:
 * @brief Flush ARP cache
 * @param[in] interface Underlying network interface
 **/

void arpFlushCache(NetInterface *interface)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]
 800ba50:	e013      	b.n	800ba7a <arpFlushCache+0x36>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	4613      	mov	r3, r2
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	015b      	lsls	r3, r3, #5
 800ba5c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	60bb      	str	r3, [r7, #8]

      //Drop packets that are waiting for address resolution
      arpFlushQueuedPackets(interface, entry);
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f8c4 	bl	800bbf6 <arpFlushQueuedPackets>
      //Release ARP entry
      entry->state = ARP_STATE_NONE;
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	2200      	movs	r2, #0
 800ba72:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60fb      	str	r3, [r7, #12]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b07      	cmp	r3, #7
 800ba7e:	d9e8      	bls.n	800ba52 <arpFlushCache+0xe>
   }
}
 800ba80:	bf00      	nop
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <arpCreateEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

ArpCacheEntry *arpCreateEntry(NetInterface *interface)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
   systime_t time;
   ArpCacheEntry *entry;
   ArpCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 800ba92:	f7f5 fced 	bl	8001470 <osGetSystemTime>
 800ba96:	60f8      	str	r0, [r7, #12]

   //Keep track of the oldest entry
   oldestEntry = &interface->arpCache[0];
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800ba9e:	613b      	str	r3, [r7, #16]

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800baa0:	2300      	movs	r3, #0
 800baa2:	617b      	str	r3, [r7, #20]
 800baa4:	e023      	b.n	800baee <arpCreateEntry+0x64>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	4613      	mov	r3, r2
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	4413      	add	r3, r2
 800baae:	015b      	lsls	r3, r3, #5
 800bab0:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	4413      	add	r3, r2
 800bab8:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use or not
      if(entry->state == ARP_STATE_NONE)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <arpCreateEntry+0x46>
      {
         //Erase contents
         osMemset(entry, 0, sizeof(ArpCacheEntry));
 800bac2:	2260      	movs	r2, #96	; 0x60
 800bac4:	2100      	movs	r1, #0
 800bac6:	68b8      	ldr	r0, [r7, #8]
 800bac8:	f007 f81d 	bl	8012b06 <memset>
         //Return a pointer to the ARP entry
         return entry;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	e01b      	b.n	800bb08 <arpCreateEntry+0x7e>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	1ad2      	subs	r2, r2, r3
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	68f9      	ldr	r1, [r7, #12]
 800bade:	1acb      	subs	r3, r1, r3
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d901      	bls.n	800bae8 <arpCreateEntry+0x5e>
      {
         oldestEntry = entry;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	613b      	str	r3, [r7, #16]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	3301      	adds	r3, #1
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b07      	cmp	r3, #7
 800baf2:	d9d8      	bls.n	800baa6 <arpCreateEntry+0x1c>
      }
   }

   //Drop any pending packets
   arpFlushQueuedPackets(interface, oldestEntry);
 800baf4:	6939      	ldr	r1, [r7, #16]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f87d 	bl	800bbf6 <arpFlushQueuedPackets>
   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(ArpCacheEntry));
 800bafc:	2260      	movs	r2, #96	; 0x60
 800bafe:	2100      	movs	r1, #0
 800bb00:	6938      	ldr	r0, [r7, #16]
 800bb02:	f007 f800 	bl	8012b06 <memset>
   //Return a pointer to the ARP entry
   return oldestEntry;
 800bb06:	693b      	ldr	r3, [r7, #16]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3718      	adds	r7, #24
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <arpFindEntry>:
 * @return A pointer to the matching ARP entry is returned. NULL is returned
 *   if the specified IPv4 address could not be found in ARP cache
 **/

ArpCacheEntry *arpFindEntry(NetInterface *interface, Ipv4Addr ipAddr)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b085      	sub	sp, #20
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e017      	b.n	800bb50 <arpFindEntry+0x40>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	4613      	mov	r3, r2
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	4413      	add	r3, r2
 800bb28:	015b      	lsls	r3, r3, #5
 800bb2a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != ARP_STATE_NONE)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d006      	beq.n	800bb4a <arpFindEntry+0x3a>
      {
         //Current entry matches the specified address?
         if(entry->ipAddr == ipAddr)
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	683a      	ldr	r2, [r7, #0]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d101      	bne.n	800bb4a <arpFindEntry+0x3a>
            return entry;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	e006      	b.n	800bb58 <arpFindEntry+0x48>
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b07      	cmp	r3, #7
 800bb54:	d9e4      	bls.n	800bb20 <arpFindEntry+0x10>
      }
   }

   //No matching entry in ARP cache...
   return NULL;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <arpSendQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpSendQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af02      	add	r7, sp, #8
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t length;
   ArpQueueItem *item;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d138      	bne.n	800bbe8 <arpSendQueuedPackets+0x84>
   {
      //Loop through the queued packets
      for(i = 0; i < entry->queueSize; i++)
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	e030      	b.n	800bbde <arpSendQueuedPackets+0x7a>
      {
         //Point to the current queue item
         item = &entry->queue[i];
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	015b      	lsls	r3, r3, #5
 800bb80:	3318      	adds	r3, #24
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	4413      	add	r3, r2
 800bb86:	3304      	adds	r3, #4
 800bb88:	613b      	str	r3, [r7, #16]

         //Retrieve the length of the IPv4 packet
         length = netBufferGetLength(item->buffer) - item->offset;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7f7 f8f4 	bl	8002d7c <netBufferGetLength>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	60fb      	str	r3, [r7, #12]
         //Update IP statistics
         ipv4UpdateOutStats(interface, entry->ipAddr, length);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f002 fb98 	bl	800e2dc <ipv4UpdateOutStats>

         //Send the IPv4 packet
         ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV4, item->buffer,
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	f103 0108 	add.w	r1, r3, #8
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	3208      	adds	r2, #8
 800bbbe:	9201      	str	r2, [sp, #4]
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f7f5 ffcb 	bl	8001b64 <ethSendFrame>
            item->offset, &item->ancillary);

         //Release memory buffer
         netBufferFree(item->buffer);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7f7 f8c0 	bl	8002d58 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe2:	697a      	ldr	r2, [r7, #20]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d3c9      	bcc.n	800bb7c <arpSendQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bbee:	bf00      	nop
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <arpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpFlushQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b084      	sub	sp, #16
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d113      	bne.n	800bc30 <arpFlushQueuedPackets+0x3a>
   {
      //Drop packets that are waiting for address resolution
      for(i = 0; i < entry->queueSize; i++)
 800bc08:	2300      	movs	r3, #0
 800bc0a:	60fb      	str	r3, [r7, #12]
 800bc0c:	e00b      	b.n	800bc26 <arpFlushQueuedPackets+0x30>
      {
         //Release memory buffer
         netBufferFree(entry->queue[i].buffer);
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	015b      	lsls	r3, r3, #5
 800bc14:	4413      	add	r3, r2
 800bc16:	331c      	adds	r3, #28
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f7 f89c 	bl	8002d58 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3301      	adds	r3, #1
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d3ee      	bcc.n	800bc0e <arpFlushQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2200      	movs	r2, #0
 800bc34:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bc36:	bf00      	nop
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <arpResolve>:
 * @param[in] macAddr Physical address matching the specified IPv4 address
 * @return Error code
 **/

error_t arpResolve(NetInterface *interface, Ipv4Addr ipAddr, MacAddr *macAddr)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
   error_t error;
   ArpCacheEntry *entry;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 800bc4c:	68b9      	ldr	r1, [r7, #8]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f7ff ff5e 	bl	800bb10 <arpFindEntry>
 800bc54:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry has been found
   if(entry != NULL)
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d02b      	beq.n	800bcb4 <arpResolve+0x74>
   {
      //Check the state of the ARP entry
      if(entry->state == ARP_STATE_INCOMPLETE)
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d103      	bne.n	800bc6c <arpResolve+0x2c>
      {
         //The address resolution is already in progress
         error = ERROR_IN_PROGRESS;
 800bc64:	f240 2303 	movw	r3, #515	; 0x203
 800bc68:	82fb      	strh	r3, [r7, #22]
 800bc6a:	e04c      	b.n	800bd06 <arpResolve+0xc6>
      }
      else if(entry->state == ARP_STATE_STALE)
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d115      	bne.n	800bca0 <arpResolve+0x60>
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	3308      	adds	r3, #8
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	6010      	str	r0, [r2, #0]
 800bc7e:	889b      	ldrh	r3, [r3, #4]
 800bc80:	8093      	strh	r3, [r2, #4]

         //Start delay timer
         entry->timestamp = osGetSystemTime();
 800bc82:	f7f5 fbf5 	bl	8001470 <osGetSystemTime>
 800bc86:	4602      	mov	r2, r0
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	611a      	str	r2, [r3, #16]
         //Delay before sending the first probe
         entry->timeout = ARP_DELAY_FIRST_PROBE_TIME;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc92:	615a      	str	r2, [r3, #20]
         //Switch to the DELAY state
         entry->state = ARP_STATE_DELAY;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2204      	movs	r2, #4
 800bc98:	701a      	strb	r2, [r3, #0]

         //Successful address resolution
         error = NO_ERROR;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	82fb      	strh	r3, [r7, #22]
 800bc9e:	e032      	b.n	800bd06 <arpResolve+0xc6>
      }
      else
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	3308      	adds	r3, #8
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	6010      	str	r0, [r2, #0]
 800bcaa:	889b      	ldrh	r3, [r3, #4]
 800bcac:	8093      	strh	r3, [r2, #4]

         //Successful address resolution
         error = NO_ERROR;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	82fb      	strh	r3, [r7, #22]
 800bcb2:	e028      	b.n	800bd06 <arpResolve+0xc6>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = arpCreateEntry(interface);
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f7ff fee8 	bl	800ba8a <arpCreateEntry>
 800bcba:	6138      	str	r0, [r7, #16]

      //ARP cache entry successfully created?
      if(entry != NULL)
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d01f      	beq.n	800bd02 <arpResolve+0xc2>
      {
         //Record the IPv4 address whose MAC address is unknown
         entry->ipAddr = ipAddr;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	68ba      	ldr	r2, [r7, #8]
 800bcc6:	605a      	str	r2, [r3, #4]

         //Reset retransmission counter
         entry->retransmitCount = 0;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	2200      	movs	r2, #0
 800bccc:	619a      	str	r2, [r3, #24]
         //No packet are pending in the transmit queue
         entry->queueSize = 0;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	65da      	str	r2, [r3, #92]	; 0x5c

         //Send an ARP request
         arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	4a0d      	ldr	r2, [pc, #52]	; (800bd10 <arpResolve+0xd0>)
 800bcda:	4619      	mov	r1, r3
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fb71 	bl	800c3c4 <arpSendRequest>

         //Save the time at which the packet was sent
         entry->timestamp = osGetSystemTime();
 800bce2:	f7f5 fbc5 	bl	8001470 <osGetSystemTime>
 800bce6:	4602      	mov	r2, r0
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	611a      	str	r2, [r3, #16]
         //Set timeout value
         entry->timeout = ARP_REQUEST_TIMEOUT;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bcf2:	615a      	str	r2, [r3, #20]
         //Enter INCOMPLETE state
         entry->state = ARP_STATE_INCOMPLETE;
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	701a      	strb	r2, [r3, #0]

         //The address resolution is in progress
         error = ERROR_IN_PROGRESS;
 800bcfa:	f240 2303 	movw	r3, #515	; 0x203
 800bcfe:	82fb      	strh	r3, [r7, #22]
 800bd00:	e001      	b.n	800bd06 <arpResolve+0xc6>
      }
      else
      {
         //Failed to create ARP cache entry...
         error = ERROR_OUT_OF_RESOURCES;
 800bd02:	2365      	movs	r3, #101	; 0x65
 800bd04:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 800bd06:	8afb      	ldrh	r3, [r7, #22]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	080144f0 	.word	0x080144f0

0800bd14 <arpEnqueuePacket>:
 * @return Error code
 **/

error_t arpEnqueuePacket(NetInterface *interface, Ipv4Addr ipAddr,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800bd14:	b5b0      	push	{r4, r5, r7, lr}
 800bd16:	b08a      	sub	sp, #40	; 0x28
 800bd18:	af02      	add	r7, sp, #8
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	603b      	str	r3, [r7, #0]
   uint_t i;
   size_t length;
   ArpCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7f7 f82a 	bl	8002d7c <netBufferGetLength>
 800bd28:	6178      	str	r0, [r7, #20]

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7ff feef 	bl	800bb10 <arpFindEntry>
 800bd32:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry exists
   if(entry != NULL)
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d073      	beq.n	800be22 <arpEnqueuePacket+0x10e>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	d16c      	bne.n	800be1c <arpEnqueuePacket+0x108>
      {
         //Check whether the packet queue is full
         if(entry->queueSize >= ARP_MAX_PENDING_PACKETS)
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d926      	bls.n	800bd98 <arpEnqueuePacket+0x84>
         {
            //When the queue overflows, the new arrival should replace the oldest entry
            netBufferFree(entry->queue[0].buffer);
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7f7 f802 	bl	8002d58 <netBufferFree>

            //Make room for the new packet
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 800bd54:	2301      	movs	r3, #1
 800bd56:	61bb      	str	r3, [r7, #24]
 800bd58:	e016      	b.n	800bd88 <arpEnqueuePacket+0x74>
            {
               entry->queue[i - 1] = entry->queue[i];
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	015b      	lsls	r3, r3, #5
 800bd62:	4413      	add	r3, r2
 800bd64:	f103 0218 	add.w	r2, r3, #24
 800bd68:	6939      	ldr	r1, [r7, #16]
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	015b      	lsls	r3, r3, #5
 800bd6e:	440b      	add	r3, r1
 800bd70:	3318      	adds	r3, #24
 800bd72:	1d14      	adds	r4, r2, #4
 800bd74:	1d1d      	adds	r5, r3, #4
 800bd76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bd7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	3301      	adds	r3, #1
 800bd86:	61bb      	str	r3, [r7, #24]
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d9e5      	bls.n	800bd5a <arpEnqueuePacket+0x46>
            }

            //Adjust the number of pending packets
            entry->queueSize--;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd92:	1e5a      	subs	r2, r3, #1
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	65da      	str	r2, [r3, #92]	; 0x5c
         }

         //Index of the entry to be filled in
         i = entry->queueSize;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd9c:	61bb      	str	r3, [r7, #24]
         //Allocate a memory buffer to store the packet
         entry->queue[i].buffer = netBufferAlloc(length);
 800bd9e:	6978      	ldr	r0, [r7, #20]
 800bda0:	f7f6 ffa7 	bl	8002cf2 <netBufferAlloc>
 800bda4:	4601      	mov	r1, r0
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	015b      	lsls	r3, r3, #5
 800bdac:	4413      	add	r3, r2
 800bdae:	331c      	adds	r3, #28
 800bdb0:	6019      	str	r1, [r3, #0]

         //Successful memory allocation?
         if(entry->queue[i].buffer != NULL)
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	015b      	lsls	r3, r3, #5
 800bdb8:	4413      	add	r3, r2
 800bdba:	331c      	adds	r3, #28
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d029      	beq.n	800be16 <arpEnqueuePacket+0x102>
         {
            //Copy the contents of the IPv4 packet
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	015b      	lsls	r3, r3, #5
 800bdc8:	4413      	add	r3, r2
 800bdca:	331c      	adds	r3, #28
 800bdcc:	6818      	ldr	r0, [r3, #0]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	f7f7 f966 	bl	80030a8 <netBufferCopy>
            //Offset to the first byte of the IPv4 header
            entry->queue[i].offset = offset;
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	015b      	lsls	r3, r3, #5
 800bde2:	4413      	add	r3, r2
 800bde4:	3320      	adds	r3, #32
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	601a      	str	r2, [r3, #0]
            //Additional options passed to the stack along with the packet
            entry->queue[i].ancillary = *ancillary;
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	015b      	lsls	r3, r3, #5
 800bdf2:	4413      	add	r3, r2
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf6:	1d1c      	adds	r4, r3, #4
 800bdf8:	4615      	mov	r5, r2
 800bdfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bdfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bdfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 800be02:	e884 0003 	stmia.w	r4, {r0, r1}

            //Increment the number of queued packets
            entry->queueSize++;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	65da      	str	r2, [r3, #92]	; 0x5c
            //The packet was successfully enqueued
            error = NO_ERROR;
 800be10:	2300      	movs	r3, #0
 800be12:	83fb      	strh	r3, [r7, #30]
 800be14:	e008      	b.n	800be28 <arpEnqueuePacket+0x114>
         }
         else
         {
            //Failed to allocate memory
            error = ERROR_OUT_OF_MEMORY;
 800be16:	2364      	movs	r3, #100	; 0x64
 800be18:	83fb      	strh	r3, [r7, #30]
 800be1a:	e005      	b.n	800be28 <arpEnqueuePacket+0x114>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 800be1c:	23e0      	movs	r3, #224	; 0xe0
 800be1e:	83fb      	strh	r3, [r7, #30]
 800be20:	e002      	b.n	800be28 <arpEnqueuePacket+0x114>
      }
   }
   else
   {
      //No matching entry in ARP cache
      error = ERROR_NOT_FOUND;
 800be22:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800be26:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 800be28:	8bfb      	ldrh	r3, [r7, #30]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3720      	adds	r7, #32
 800be2e:	46bd      	mov	sp, r7
 800be30:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800be34 <arpTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void arpTick(NetInterface *interface)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   ArpCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800be3c:	f7f5 fb18 	bl	8001470 <osGetSystemTime>
 800be40:	6138      	str	r0, [r7, #16]

   //Go through ARP cache
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800be42:	2300      	movs	r3, #0
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	e098      	b.n	800bf7a <arpTick+0x146>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 800be48:	697a      	ldr	r2, [r7, #20]
 800be4a:	4613      	mov	r3, r2
 800be4c:	005b      	lsls	r3, r3, #1
 800be4e:	4413      	add	r3, r2
 800be50:	015b      	lsls	r3, r3, #5
 800be52:	f503 7362 	add.w	r3, r3, #904	; 0x388
 800be56:	687a      	ldr	r2, [r7, #4]
 800be58:	4413      	add	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]

      //INCOMPLETE state?
      if(entry->state == ARP_STATE_INCOMPLETE)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d128      	bne.n	800beb6 <arpTick+0x82>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	691a      	ldr	r2, [r3, #16]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	695b      	ldr	r3, [r3, #20]
 800be6c:	4413      	add	r3, r2
 800be6e:	693a      	ldr	r2, [r7, #16]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	db7e      	blt.n	800bf74 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	699b      	ldr	r3, [r3, #24]
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_REQUESTS)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	699b      	ldr	r3, [r3, #24]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d80e      	bhi.n	800bea6 <arpTick+0x72>
            {
               //Retransmit ARP request
               arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	4a3f      	ldr	r2, [pc, #252]	; (800bf8c <arpTick+0x158>)
 800be8e:	4619      	mov	r1, r3
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fa97 	bl	800c3c4 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_REQUEST_TIMEOUT;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bea2:	615a      	str	r2, [r3, #20]
 800bea4:	e066      	b.n	800bf74 <arpTick+0x140>
            }
            else
            {
               //Drop packets that are waiting for address resolution
               arpFlushQueuedPackets(interface, entry);
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fea4 	bl	800bbf6 <arpFlushQueuedPackets>
               //The entry should be deleted since address resolution has failed
               entry->state = ARP_STATE_NONE;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	701a      	strb	r2, [r3, #0]
 800beb4:	e05e      	b.n	800bf74 <arpTick+0x140>
            }
         }
      }
      //REACHABLE state?
      else if(entry->state == ARP_STATE_REACHABLE)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d111      	bne.n	800bee2 <arpTick+0xae>
      {
         //Periodically time out ARP cache entries
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691a      	ldr	r2, [r3, #16]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	4413      	add	r3, r2
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	db51      	blt.n	800bf74 <arpTick+0x140>
         {
            //Save current time
            entry->timestamp = osGetSystemTime();
 800bed0:	f7f5 face 	bl	8001470 <osGetSystemTime>
 800bed4:	4602      	mov	r2, r0
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	611a      	str	r2, [r3, #16]
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2203      	movs	r2, #3
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e048      	b.n	800bf74 <arpTick+0x140>
         }
      }
      //DELAY state?
      else if(entry->state == ARP_STATE_DELAY)
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b04      	cmp	r3, #4
 800bee8:	d11b      	bne.n	800bf22 <arpTick+0xee>
      {
         //Wait for the specified delay before sending the first probe
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	691a      	ldr	r2, [r3, #16]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	4413      	add	r3, r2
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	2b00      	cmp	r3, #0
 800befa:	db3b      	blt.n	800bf74 <arpTick+0x140>
         {
            //Send a point-to-point ARP request to the host
            arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6859      	ldr	r1, [r3, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	3308      	adds	r3, #8
 800bf04:	461a      	mov	r2, r3
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa5c 	bl	800c3c4 <arpSendRequest>

            //Save the time at which the packet was sent
            entry->timestamp = time;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	693a      	ldr	r2, [r7, #16]
 800bf10:	611a      	str	r2, [r3, #16]
            //Set timeout value
            entry->timeout = ARP_PROBE_TIMEOUT;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f64e 2260 	movw	r2, #60000	; 0xea60
 800bf18:	615a      	str	r2, [r3, #20]
            //Switch to the PROBE state
            entry->state = ARP_STATE_PROBE;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2205      	movs	r2, #5
 800bf1e:	701a      	strb	r2, [r3, #0]
 800bf20:	e028      	b.n	800bf74 <arpTick+0x140>
         }
      }
      //PROBE state?
      else if(entry->state == ARP_STATE_PROBE)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b05      	cmp	r3, #5
 800bf28:	d124      	bne.n	800bf74 <arpTick+0x140>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	691a      	ldr	r2, [r3, #16]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	4413      	add	r3, r2
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	db1b      	blt.n	800bf74 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_PROBES)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	699b      	ldr	r3, [r3, #24]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d80f      	bhi.n	800bf6e <arpTick+0x13a>
            {
               //Send a point-to-point ARP request to the host
               arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6859      	ldr	r1, [r3, #4]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3308      	adds	r3, #8
 800bf56:	461a      	mov	r2, r3
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fa33 	bl	800c3c4 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	693a      	ldr	r2, [r7, #16]
 800bf62:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_PROBE_TIMEOUT;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f64e 2260 	movw	r2, #60000	; 0xea60
 800bf6a:	615a      	str	r2, [r3, #20]
 800bf6c:	e002      	b.n	800bf74 <arpTick+0x140>
            }
            else
            {
               //The entry should be deleted since the host is not reachable anymore
               entry->state = ARP_STATE_NONE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	3301      	adds	r3, #1
 800bf78:	617b      	str	r3, [r7, #20]
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b07      	cmp	r3, #7
 800bf7e:	f67f af63 	bls.w	800be48 <arpTick+0x14>
            }
         }
      }
   }
}
 800bf82:	bf00      	nop
 800bf84:	bf00      	nop
 800bf86:	3718      	adds	r7, #24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	080144f0 	.word	0x080144f0

0800bf90 <arpProcessPacket>:
 * @param[in] length Packet length
 **/

void arpProcessPacket(NetInterface *interface, ArpPacket *arpPacket,
   size_t length)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b088      	sub	sp, #32
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
   bool_t validTarget;
   Ipv4AddrEntry *addrEntry;
   NetInterface *logicalInterface;

   //Discard invalid ARP packets
   if(length < sizeof(ArpPacket))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b1b      	cmp	r3, #27
 800bfa0:	d973      	bls.n	800c08a <arpProcessPacket+0xfa>
      return;

   //Debug message
   TRACE_INFO("ARP packet received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpPacket);
 800bfa2:	68b8      	ldr	r0, [r7, #8]
 800bfa4:	f000 fb08 	bl	800c5b8 <arpDumpPacket>

   //Make sure the hardware type is valid
   if(arpPacket->hrd != HTONS(ARP_HARDWARE_TYPE_ETH))
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfb2:	d16c      	bne.n	800c08e <arpProcessPacket+0xfe>
      return;
   //Make sure the protocol type is valid
   if(arpPacket->pro != HTONS(ARP_PROTOCOL_TYPE_IPV4))
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	885b      	ldrh	r3, [r3, #2]
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b08      	cmp	r3, #8
 800bfbc:	d169      	bne.n	800c092 <arpProcessPacket+0x102>
      return;
   //Check the length of the hardware address
   if(arpPacket->hln != sizeof(MacAddr))
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	791b      	ldrb	r3, [r3, #4]
 800bfc2:	2b06      	cmp	r3, #6
 800bfc4:	d167      	bne.n	800c096 <arpProcessPacket+0x106>
      return;
   //Check the length of the protocol address
   if(arpPacket->pln != sizeof(Ipv4Addr))
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	795b      	ldrb	r3, [r3, #5]
 800bfca:	2b04      	cmp	r3, #4
 800bfcc:	d165      	bne.n	800c09a <arpProcessPacket+0x10a>
      return;

   //The target protocol address must a valid address assigned to the interface
   //or a tentative address whose uniqueness on a link is being verified
   validTarget = FALSE;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	61bb      	str	r3, [r7, #24]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	e03c      	b.n	800c052 <arpProcessPacket+0xc2>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4413      	add	r3, r2
 800bfea:	3304      	adds	r3, #4
 800bfec:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(addrEntry->state != IPV4_ADDR_STATE_INVALID)
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	791b      	ldrb	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d02a      	beq.n	800c04c <arpProcessPacket+0xbc>
      {
         //Check whether the sender protocol address matches the IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->spa)
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c000:	429a      	cmp	r2, r3
 800c002:	d11b      	bne.n	800c03c <arpProcessPacket+0xac>
         {
            //Tentative address?
            if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	791b      	ldrb	r3, [r3, #4]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d103      	bne.n	800c014 <arpProcessPacket+0x84>
            {
               //If the host receives any ARP packet where the sender IP
               //address is the address being probed for, then this is a
               //conflicting ARP packet
               addrEntry->conflict = TRUE;
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	2201      	movs	r2, #1
 800c010:	609a      	str	r2, [r3, #8]
               //Exit immediately
               return;
 800c012:	e043      	b.n	800c09c <arpProcessPacket+0x10c>
            }
            else
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7f7 fe30 	bl	8003c7a <nicGetLogicalInterface>
 800c01a:	6138      	str	r0, [r7, #16]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpPacket->sha, &logicalInterface->macAddr))
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f103 0008 	add.w	r0, r3, #8
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	33cc      	adds	r3, #204	; 0xcc
 800c026:	2206      	movs	r2, #6
 800c028:	4619      	mov	r1, r3
 800c02a:	f006 fd36 	bl	8012a9a <memcmp>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <arpProcessPacket+0xac>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2201      	movs	r2, #1
 800c038:	609a      	str	r2, [r3, #8]
                  //Exit immediately
                  return;
 800c03a:	e02f      	b.n	800c09c <arpProcessPacket+0x10c>
            }
         }

         //Check whether the target protocol address matches an IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->tpa)
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	699b      	ldr	r3, [r3, #24]
 800c044:	429a      	cmp	r2, r3
 800c046:	d101      	bne.n	800c04c <arpProcessPacket+0xbc>
         {
            validTarget = TRUE;
 800c048:	2301      	movs	r3, #1
 800c04a:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800c04c:	69fb      	ldr	r3, [r7, #28]
 800c04e:	3301      	adds	r3, #1
 800c050:	61fb      	str	r3, [r7, #28]
 800c052:	69fb      	ldr	r3, [r7, #28]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0bf      	beq.n	800bfd8 <arpProcessPacket+0x48>
         }
      }
   }

   //Valid target protocol address?
   if(validTarget)
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d01e      	beq.n	800c09c <arpProcessPacket+0x10c>
   {
      //Check operation code
      switch(ntohs(arpPacket->op))
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	88db      	ldrh	r3, [r3, #6]
 800c062:	b29b      	uxth	r3, r3
 800c064:	4618      	mov	r0, r3
 800c066:	f7f5 f868 	bl	800113a <swapInt16>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d002      	beq.n	800c076 <arpProcessPacket+0xe6>
 800c070:	2b02      	cmp	r3, #2
 800c072:	d005      	beq.n	800c080 <arpProcessPacket+0xf0>
      //Unknown operation code?
      default:
         //Debug message
         TRACE_INFO("Unknown operation code!\r\n");
         //Discard incoming packet
         break;
 800c074:	e012      	b.n	800c09c <arpProcessPacket+0x10c>
         arpProcessRequest(interface, arpPacket);
 800c076:	68b9      	ldr	r1, [r7, #8]
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f000 f812 	bl	800c0a2 <arpProcessRequest>
         break;
 800c07e:	e00d      	b.n	800c09c <arpProcessPacket+0x10c>
         arpProcessReply(interface, arpPacket);
 800c080:	68b9      	ldr	r1, [r7, #8]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 f872 	bl	800c16c <arpProcessReply>
         break;
 800c088:	e008      	b.n	800c09c <arpProcessPacket+0x10c>
      return;
 800c08a:	bf00      	nop
 800c08c:	e006      	b.n	800c09c <arpProcessPacket+0x10c>
      return;
 800c08e:	bf00      	nop
 800c090:	e004      	b.n	800c09c <arpProcessPacket+0x10c>
      return;
 800c092:	bf00      	nop
 800c094:	e002      	b.n	800c09c <arpProcessPacket+0x10c>
      return;
 800c096:	bf00      	nop
 800c098:	e000      	b.n	800c09c <arpProcessPacket+0x10c>
      return;
 800c09a:	bf00      	nop
      }
   }
}
 800c09c:	3720      	adds	r7, #32
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <arpProcessRequest>:
 * @param[in] interface Underlying network interface
 * @param[in] arpRequest Incoming ARP request
 **/

void arpProcessRequest(NetInterface *interface, ArpPacket *arpRequest)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b086      	sub	sp, #24
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Request received...\r\n");

   //Check sender protocol address
   if(ipv4IsBroadcastAddr(interface, arpRequest->spa))
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 ffc5 	bl	800e044 <ipv4IsBroadcastAddr>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d14e      	bne.n	800c15e <arpProcessRequest+0xbc>
      return;
   if(ipv4IsMulticastAddr(arpRequest->spa))
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c0c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0ca:	2be0      	cmp	r3, #224	; 0xe0
 800c0cc:	d049      	beq.n	800c162 <arpProcessRequest+0xc0>
      return;

   //Initialize flag
   validTarget = TRUE;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	613b      	str	r3, [r7, #16]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	617b      	str	r3, [r7, #20]
 800c0d6:	e031      	b.n	800c13c <arpProcessRequest+0x9a>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	60fb      	str	r3, [r7, #12]

      //Tentative address?
      if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	791b      	ldrb	r3, [r3, #4]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d11f      	bne.n	800c136 <arpProcessRequest+0x94>
      {
         //Check whether the target IP address is an address being probed for
         if(addrEntry->addr == arpRequest->tpa)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	699b      	ldr	r3, [r3, #24]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d119      	bne.n	800c136 <arpProcessRequest+0x94>
         {
            //The target protocol address is a tentative address
            validTarget = FALSE;
 800c102:	2300      	movs	r3, #0
 800c104:	613b      	str	r3, [r7, #16]

            //ARP probe received?
            if(arpRequest->spa == IPV4_UNSPECIFIED_ADDR)
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d112      	bne.n	800c136 <arpProcessRequest+0x94>
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7f7 fdb2 	bl	8003c7a <nicGetLogicalInterface>
 800c116:	60b8      	str	r0, [r7, #8]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpRequest->sha, &logicalInterface->macAddr))
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f103 0008 	add.w	r0, r3, #8
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	33cc      	adds	r3, #204	; 0xcc
 800c122:	2206      	movs	r2, #6
 800c124:	4619      	mov	r1, r3
 800c126:	f006 fcb8 	bl	8012a9a <memcmp>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <arpProcessRequest+0x94>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	609a      	str	r2, [r3, #8]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	3301      	adds	r3, #1
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0ca      	beq.n	800c0d8 <arpProcessRequest+0x36>
      }
   }

   //In all cases, the host must not respond to an ARP request for an address
   //being probed for
   if(validTarget)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d00d      	beq.n	800c164 <arpProcessRequest+0xc2>
   {
      //Send ARP reply
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	6999      	ldr	r1, [r3, #24]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	f8d3 200e 	ldr.w	r2, [r3, #14]
         &arpRequest->sha);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	3308      	adds	r3, #8
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f9ba 	bl	800c4d0 <arpSendReply>
 800c15c:	e002      	b.n	800c164 <arpProcessRequest+0xc2>
      return;
 800c15e:	bf00      	nop
 800c160:	e000      	b.n	800c164 <arpProcessRequest+0xc2>
      return;
 800c162:	bf00      	nop
   }
}
 800c164:	3718      	adds	r7, #24
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <arpProcessReply>:
 * @param[in] interface Underlying network interface
 * @param[in] arpReply Incoming ARP reply
 **/

void arpProcessReply(NetInterface *interface, ArpPacket *arpReply)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Reply received...\r\n");

   //Check sender protocol address
   if(arpReply->spa == IPV4_UNSPECIFIED_ADDR)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 8090 	beq.w	800c2a2 <arpProcessReply+0x136>
      return;
   if(ipv4IsBroadcastAddr(interface, arpReply->spa))
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 ff5a 	bl	800e044 <ipv4IsBroadcastAddr>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	f040 8087 	bne.w	800c2a6 <arpProcessReply+0x13a>
      return;
   if(ipv4IsMulticastAddr(arpReply->spa))
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c19e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1a2:	2be0      	cmp	r3, #224	; 0xe0
 800c1a4:	f000 8081 	beq.w	800c2aa <arpProcessReply+0x13e>
      return;

   //Check sender hardware address
   if(macCompAddr(&arpReply->sha, &MAC_UNSPECIFIED_ADDR))
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	2206      	movs	r2, #6
 800c1ae:	4945      	ldr	r1, [pc, #276]	; (800c2c4 <arpProcessReply+0x158>)
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f006 fc72 	bl	8012a9a <memcmp>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d078      	beq.n	800c2ae <arpProcessReply+0x142>
      return;
   if(macCompAddr(&arpReply->sha, &MAC_BROADCAST_ADDR))
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	3308      	adds	r3, #8
 800c1c0:	2206      	movs	r2, #6
 800c1c2:	4941      	ldr	r1, [pc, #260]	; (800c2c8 <arpProcessReply+0x15c>)
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f006 fc68 	bl	8012a9a <memcmp>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d070      	beq.n	800c2b2 <arpProcessReply+0x146>
      return;
   if(macIsMulticastAddr(&arpReply->sha))
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	7a1b      	ldrb	r3, [r3, #8]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d16c      	bne.n	800c2b6 <arpProcessReply+0x14a>
      return;

   //Check whether the target IP address is an address being probed for
   if(ipv4IsTentativeAddr(interface, arpReply->tpa))
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 ff6f 	bl	800e0c6 <ipv4IsTentativeAddr>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d165      	bne.n	800c2ba <arpProcessReply+0x14e>
      return;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, arpReply->spa);
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f7ff fc8a 	bl	800bb10 <arpFindEntry>
 800c1fc:	60f8      	str	r0, [r7, #12]

   //Check whether a matching entry has been found
   if(entry != NULL)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d05b      	beq.n	800c2bc <arpProcessReply+0x150>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d118      	bne.n	800c23e <arpProcessReply+0xd2>
      {
         //Record the corresponding MAC address
         entry->macAddr = arpReply->sha;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	3308      	adds	r3, #8
 800c212:	3208      	adds	r2, #8
 800c214:	6810      	ldr	r0, [r2, #0]
 800c216:	6018      	str	r0, [r3, #0]
 800c218:	8892      	ldrh	r2, [r2, #4]
 800c21a:	809a      	strh	r2, [r3, #4]

         //Send all the packets that are pending for transmission
         arpSendQueuedPackets(interface, entry);
 800c21c:	68f9      	ldr	r1, [r7, #12]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7ff fca0 	bl	800bb64 <arpSendQueuedPackets>

         //Save current time
         entry->timestamp = osGetSystemTime();
 800c224:	f7f5 f924 	bl	8001470 <osGetSystemTime>
 800c228:	4602      	mov	r2, r0
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c234:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2202      	movs	r2, #2
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	e03e      	b.n	800c2bc <arpProcessReply+0x150>
      }
      else if(entry->state == ARP_STATE_REACHABLE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	2b02      	cmp	r3, #2
 800c244:	d10f      	bne.n	800c266 <arpProcessReply+0xfa>
      {
         //Different link-layer address than cached?
         if(!macCompAddr(&arpReply->sha, &entry->macAddr))
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	f103 0008 	add.w	r0, r3, #8
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	3308      	adds	r3, #8
 800c250:	2206      	movs	r2, #6
 800c252:	4619      	mov	r1, r3
 800c254:	f006 fc21 	bl	8012a9a <memcmp>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d02e      	beq.n	800c2bc <arpProcessReply+0x150>
         {
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2203      	movs	r2, #3
 800c262:	701a      	strb	r2, [r3, #0]
 800c264:	e02a      	b.n	800c2bc <arpProcessReply+0x150>
         }
      }
      else if(entry->state == ARP_STATE_PROBE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	781b      	ldrb	r3, [r3, #0]
 800c26a:	2b05      	cmp	r3, #5
 800c26c:	d126      	bne.n	800c2bc <arpProcessReply+0x150>
      {
         //Record IPv4/MAC address pair
         entry->ipAddr = arpReply->spa;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	605a      	str	r2, [r3, #4]
         entry->macAddr = arpReply->sha;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	3308      	adds	r3, #8
 800c27e:	3208      	adds	r2, #8
 800c280:	6810      	ldr	r0, [r2, #0]
 800c282:	6018      	str	r0, [r3, #0]
 800c284:	8892      	ldrh	r2, [r2, #4]
 800c286:	809a      	strh	r2, [r3, #4]

         //Save current time
         entry->timestamp = osGetSystemTime();
 800c288:	f7f5 f8f2 	bl	8001470 <osGetSystemTime>
 800c28c:	4602      	mov	r2, r0
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f64e 2260 	movw	r2, #60000	; 0xea60
 800c298:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2202      	movs	r2, #2
 800c29e:	701a      	strb	r2, [r3, #0]
 800c2a0:	e00c      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2a2:	bf00      	nop
 800c2a4:	e00a      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2a6:	bf00      	nop
 800c2a8:	e008      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2aa:	bf00      	nop
 800c2ac:	e006      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2ae:	bf00      	nop
 800c2b0:	e004      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2b2:	bf00      	nop
 800c2b4:	e002      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2b6:	bf00      	nop
 800c2b8:	e000      	b.n	800c2bc <arpProcessReply+0x150>
      return;
 800c2ba:	bf00      	nop
      }
   }
}
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	080144e8 	.word	0x080144e8
 800c2c8:	080144f0 	.word	0x080144f0

0800c2cc <arpSendProbe>:
 * @param[in] targetIpAddr Target IPv4 address
 * @return Error code
 **/

error_t arpSendProbe(NetInterface *interface, Ipv4Addr targetIpAddr)
{
 800c2cc:	b5b0      	push	{r4, r5, r7, lr}
 800c2ce:	b090      	sub	sp, #64	; 0x40
 800c2d0:	af02      	add	r7, sp, #8
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
   ArpPacket *arpRequest;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7f7 fccf 	bl	8003c7a <nicGetLogicalInterface>
 800c2dc:	6378      	str	r0, [r7, #52]	; 0x34

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 800c2de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	201c      	movs	r0, #28
 800c2e6:	f7f5 fd6e 	bl	8001dc6 <ethAllocBuffer>
 800c2ea:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate buffer?
   if(buffer == NULL)
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <arpSendProbe+0x2a>
      return ERROR_OUT_OF_MEMORY;
 800c2f2:	2364      	movs	r3, #100	; 0x64
 800c2f4:	e05b      	b.n	800c3ae <arpSendProbe+0xe2>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fc:	f7f6 fe06 	bl	8002f0c <netBufferAt>
 800c300:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 800c302:	2001      	movs	r0, #1
 800c304:	f7f4 ff19 	bl	800113a <swapInt16>
 800c308:	4603      	mov	r3, r0
 800c30a:	461a      	mov	r2, r3
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 800c310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c314:	f7f4 ff11 	bl	800113a <swapInt16>
 800c318:	4603      	mov	r3, r0
 800c31a:	461a      	mov	r2, r3
 800c31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31e:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	2206      	movs	r2, #6
 800c324:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	2204      	movs	r2, #4
 800c32a:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 800c32c:	2001      	movs	r0, #1
 800c32e:	f7f4 ff04 	bl	800113a <swapInt16>
 800c332:	4603      	mov	r3, r0
 800c334:	461a      	mov	r2, r3
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c33e:	3308      	adds	r3, #8
 800c340:	32cc      	adds	r2, #204	; 0xcc
 800c342:	6810      	ldr	r0, [r2, #0]
 800c344:	6018      	str	r0, [r3, #0]
 800c346:	8892      	ldrh	r2, [r2, #4]
 800c348:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = IPV4_UNSPECIFIED_ADDR;
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	2200      	movs	r2, #0
 800c34e:	739a      	strb	r2, [r3, #14]
 800c350:	2200      	movs	r2, #0
 800c352:	73da      	strb	r2, [r3, #15]
 800c354:	2200      	movs	r2, #0
 800c356:	741a      	strb	r2, [r3, #16]
 800c358:	2200      	movs	r2, #0
 800c35a:	745a      	strb	r2, [r3, #17]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800c35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35e:	4a16      	ldr	r2, [pc, #88]	; (800c3b8 <arpSendProbe+0xec>)
 800c360:	3312      	adds	r3, #18
 800c362:	6811      	ldr	r1, [r2, #0]
 800c364:	6019      	str	r1, [r3, #0]
 800c366:	8892      	ldrh	r2, [r2, #4]
 800c368:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800c36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36c:	683a      	ldr	r2, [r7, #0]
 800c36e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Probe (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 800c370:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c372:	f000 f921 	bl	800c5b8 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800c376:	4b11      	ldr	r3, [pc, #68]	; (800c3bc <arpSendProbe+0xf0>)
 800c378:	f107 040c 	add.w	r4, r7, #12
 800c37c:	461d      	mov	r5, r3
 800c37e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c382:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c386:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, &MAC_BROADCAST_ADDR, ETH_TYPE_ARP, buffer,
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	f107 020c 	add.w	r2, r7, #12
 800c390:	9201      	str	r2, [sp, #4]
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	f640 0206 	movw	r2, #2054	; 0x806
 800c39a:	4909      	ldr	r1, [pc, #36]	; (800c3c0 <arpSendProbe+0xf4>)
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f7f5 fbe1 	bl	8001b64 <ethSendFrame>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	857b      	strh	r3, [r7, #42]	; 0x2a
      offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800c3a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3a8:	f7f6 fcd6 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 800c3ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3738      	adds	r7, #56	; 0x38
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	080144e8 	.word	0x080144e8
 800c3bc:	08014540 	.word	0x08014540
 800c3c0:	080144f0 	.word	0x080144f0

0800c3c4 <arpSendRequest>:
 * @return Error code
 **/

error_t arpSendRequest(NetInterface *interface, Ipv4Addr targetIpAddr,
   const MacAddr *destMacAddr)
{
 800c3c4:	b5b0      	push	{r4, r5, r7, lr}
 800c3c6:	b092      	sub	sp, #72	; 0x48
 800c3c8:	af02      	add	r7, sp, #8
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
   Ipv4Addr senderIpAddr;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7f7 fc51 	bl	8003c7a <nicGetLogicalInterface>
 800c3d8:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Select the most appropriate sender IP address to be used
   error = ipv4SelectSourceAddr(&interface, targetIpAddr, &senderIpAddr);
 800c3da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c3de:	f107 030c 	add.w	r3, r7, #12
 800c3e2:	68b9      	ldr	r1, [r7, #8]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f001 fcbd 	bl	800dd64 <ipv4SelectSourceAddr>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	877b      	strh	r3, [r7, #58]	; 0x3a
   //No address assigned to the interface?
   if(error)
 800c3ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <arpSendRequest+0x34>
      return error;
 800c3f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c3f6:	e062      	b.n	800c4be <arpSendRequest+0xfa>

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 800c3f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	201c      	movs	r0, #28
 800c400:	f7f5 fce1 	bl	8001dc6 <ethAllocBuffer>
 800c404:	6378      	str	r0, [r7, #52]	; 0x34
   //Failed to allocate buffer?
   if(buffer == NULL)
 800c406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <arpSendRequest+0x4c>
      return ERROR_OUT_OF_MEMORY;
 800c40c:	2364      	movs	r3, #100	; 0x64
 800c40e:	e056      	b.n	800c4be <arpSendRequest+0xfa>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	4619      	mov	r1, r3
 800c414:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c416:	f7f6 fd79 	bl	8002f0c <netBufferAt>
 800c41a:	6338      	str	r0, [r7, #48]	; 0x30

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 800c41c:	2001      	movs	r0, #1
 800c41e:	f7f4 fe8c 	bl	800113a <swapInt16>
 800c422:	4603      	mov	r3, r0
 800c424:	461a      	mov	r2, r3
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 800c42a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c42e:	f7f4 fe84 	bl	800113a <swapInt16>
 800c432:	4603      	mov	r3, r0
 800c434:	461a      	mov	r2, r3
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	2206      	movs	r2, #6
 800c43e:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	2204      	movs	r2, #4
 800c444:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 800c446:	2001      	movs	r0, #1
 800c448:	f7f4 fe77 	bl	800113a <swapInt16>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c458:	3308      	adds	r3, #8
 800c45a:	32cc      	adds	r2, #204	; 0xcc
 800c45c:	6810      	ldr	r0, [r2, #0]
 800c45e:	6018      	str	r0, [r3, #0]
 800c460:	8892      	ldrh	r2, [r2, #4]
 800c462:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = senderIpAddr;
 800c464:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	f8c3 200e 	str.w	r2, [r3, #14]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	4a16      	ldr	r2, [pc, #88]	; (800c4c8 <arpSendRequest+0x104>)
 800c470:	3312      	adds	r3, #18
 800c472:	6811      	ldr	r1, [r2, #0]
 800c474:	6019      	str	r1, [r3, #0]
 800c476:	8892      	ldrh	r2, [r2, #4]
 800c478:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Request (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 800c480:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c482:	f000 f899 	bl	800c5b8 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800c486:	4b11      	ldr	r3, [pc, #68]	; (800c4cc <arpSendRequest+0x108>)
 800c488:	f107 0410 	add.w	r4, r7, #16
 800c48c:	461d      	mov	r5, r3
 800c48e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c492:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c496:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, destMacAddr, ETH_TYPE_ARP, buffer, offset,
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	f107 0210 	add.w	r2, r7, #16
 800c4a2:	9201      	str	r2, [sp, #4]
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	f640 0206 	movw	r2, #2054	; 0x806
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	f7f5 fb59 	bl	8001b64 <ethSendFrame>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	877b      	strh	r3, [r7, #58]	; 0x3a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800c4b6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c4b8:	f7f6 fc4e 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 800c4bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3740      	adds	r7, #64	; 0x40
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	080144e8 	.word	0x080144e8
 800c4cc:	08014540 	.word	0x08014540

0800c4d0 <arpSendReply>:
 * @return Error code
 **/

error_t arpSendReply(NetInterface *interface, Ipv4Addr senderIpAddr,
   Ipv4Addr targetIpAddr, const MacAddr *targetMacAddr)
{
 800c4d0:	b5b0      	push	{r4, r5, r7, lr}
 800c4d2:	b092      	sub	sp, #72	; 0x48
 800c4d4:	af02      	add	r7, sp, #8
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
   ArpPacket *arpReply;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f7f7 fbcb 	bl	8003c7a <nicGetLogicalInterface>
 800c4e4:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 800c4e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	201c      	movs	r0, #28
 800c4ee:	f7f5 fc6a 	bl	8001dc6 <ethAllocBuffer>
 800c4f2:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate buffer?
   if(buffer == NULL)
 800c4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <arpSendReply+0x2e>
      return ERROR_OUT_OF_MEMORY;
 800c4fa:	2364      	movs	r3, #100	; 0x64
 800c4fc:	e056      	b.n	800c5ac <arpSendReply+0xdc>

   //Point to the beginning of the ARP packet
   arpReply = netBufferAt(buffer, offset);
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	4619      	mov	r1, r3
 800c502:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c504:	f7f6 fd02 	bl	8002f0c <netBufferAt>
 800c508:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ARP reply
   arpReply->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 800c50a:	2001      	movs	r0, #1
 800c50c:	f7f4 fe15 	bl	800113a <swapInt16>
 800c510:	4603      	mov	r3, r0
 800c512:	461a      	mov	r2, r3
 800c514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c516:	801a      	strh	r2, [r3, #0]
   arpReply->pro = htons(ETH_TYPE_IPV4);
 800c518:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c51c:	f7f4 fe0d 	bl	800113a <swapInt16>
 800c520:	4603      	mov	r3, r0
 800c522:	461a      	mov	r2, r3
 800c524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c526:	805a      	strh	r2, [r3, #2]
   arpReply->hln = sizeof(MacAddr);
 800c528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c52a:	2206      	movs	r2, #6
 800c52c:	711a      	strb	r2, [r3, #4]
   arpReply->pln = sizeof(Ipv4Addr);
 800c52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c530:	2204      	movs	r2, #4
 800c532:	715a      	strb	r2, [r3, #5]
   arpReply->op = htons(ARP_OPCODE_ARP_REPLY);
 800c534:	2002      	movs	r0, #2
 800c536:	f7f4 fe00 	bl	800113a <swapInt16>
 800c53a:	4603      	mov	r3, r0
 800c53c:	461a      	mov	r2, r3
 800c53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c540:	80da      	strh	r2, [r3, #6]
   arpReply->sha = logicalInterface->macAddr;
 800c542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c546:	3308      	adds	r3, #8
 800c548:	32cc      	adds	r2, #204	; 0xcc
 800c54a:	6810      	ldr	r0, [r2, #0]
 800c54c:	6018      	str	r0, [r3, #0]
 800c54e:	8892      	ldrh	r2, [r2, #4]
 800c550:	809a      	strh	r2, [r3, #4]
   arpReply->spa = senderIpAddr;
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	f8c3 200e 	str.w	r2, [r3, #14]
   arpReply->tha = *targetMacAddr;
 800c55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	3312      	adds	r3, #18
 800c560:	6811      	ldr	r1, [r2, #0]
 800c562:	6019      	str	r1, [r3, #0]
 800c564:	8892      	ldrh	r2, [r2, #4]
 800c566:	809a      	strh	r2, [r3, #4]
   arpReply->tpa = targetIpAddr;
 800c568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Reply (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpReply);
 800c56e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c570:	f000 f822 	bl	800c5b8 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800c574:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <arpSendReply+0xe4>)
 800c576:	f107 0414 	add.w	r4, r7, #20
 800c57a:	461d      	mov	r5, r3
 800c57c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c57e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c580:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c584:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP reply
   error = ethSendFrame(interface, targetMacAddr, ETH_TYPE_ARP, buffer, offset,
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	f107 0214 	add.w	r2, r7, #20
 800c58e:	9201      	str	r2, [sp, #4]
 800c590:	9300      	str	r3, [sp, #0]
 800c592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c594:	f640 0206 	movw	r2, #2054	; 0x806
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f7f5 fae2 	bl	8001b64 <ethSendFrame>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	867b      	strh	r3, [r7, #50]	; 0x32
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800c5a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5a6:	f7f6 fbd7 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 800c5aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3740      	adds	r7, #64	; 0x40
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bdb0      	pop	{r4, r5, r7, pc}
 800c5b4:	08014540 	.word	0x08014540

0800c5b8 <arpDumpPacket>:
 * @brief Dump ARP packet for debugging purpose
 * @param[in] arpPacket ARP header
 **/

void arpDumpPacket(const ArpPacket *arpPacket)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Opcode (op) = %" PRIu16 "\r\n", ntohs(arpPacket->op));
   TRACE_DEBUG("  Sender Hardware Address (sha) = %s\r\n", macAddrToString(&arpPacket->sha, NULL));
   TRACE_DEBUG("  Sender Protocol Address (spa) = %s\r\n", ipv4AddrToString(arpPacket->spa, NULL));
   TRACE_DEBUG("  Target Hardware Address (tha)= %s\r\n", macAddrToString(&arpPacket->tha, NULL));
   TRACE_DEBUG("  Target Protocol Address (tpa) = %s\r\n", ipv4AddrToString(arpPacket->tpa, NULL));
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7f6 fbce 	bl	8002d7c <netBufferGetLength>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d922      	bls.n	800c634 <icmpProcessMessage+0x68>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 800c5ee:	6839      	ldr	r1, [r7, #0]
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7f6 fc8b 	bl	8002f0c <netBufferAt>
 800c5f6:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d01c      	beq.n	800c638 <icmpProcessMessage+0x6c>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 800c5fe:	6938      	ldr	r0, [r7, #16]
 800c600:	f000 fa20 	bl	800ca44 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f7f5 ffa7 	bl	800255c <ipCalcChecksumEx>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d113      	bne.n	800c63c <icmpProcessMessage+0x70>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 f9ab 	bl	800c974 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	2b08      	cmp	r3, #8
 800c624:	d10c      	bne.n	800c640 <icmpProcessMessage+0x74>
   {
   //Echo Request?
   case ICMP_TYPE_ECHO_REQUEST:
      //Process Echo Request message
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f80b 	bl	800c648 <icmpProcessEchoRequest>
      break;
 800c632:	e006      	b.n	800c642 <icmpProcessMessage+0x76>
      return;
 800c634:	bf00      	nop
 800c636:	e004      	b.n	800c642 <icmpProcessMessage+0x76>
      return;
 800c638:	bf00      	nop
 800c63a:	e002      	b.n	800c642 <icmpProcessMessage+0x76>
      return;
 800c63c:	bf00      	nop
 800c63e:	e000      	b.n	800c642 <icmpProcessMessage+0x76>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 800c640:	bf00      	nop
   }
}
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 800c648:	b5b0      	push	{r4, r5, r7, lr}
 800c64a:	b098      	sub	sp, #96	; 0x60
 800c64c:	af02      	add	r7, sp, #8
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7f6 fb90 	bl	8002d7c <netBufferGetLength>
 800c65c:	4602      	mov	r2, r0
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	657b      	str	r3, [r7, #84]	; 0x54

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 800c664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c666:	2b07      	cmp	r3, #7
 800c668:	f240 80b1 	bls.w	800c7ce <icmpProcessEchoRequest+0x186>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f6 fc4c 	bl	8002f0c <netBufferAt>
 800c674:	6538      	str	r0, [r7, #80]	; 0x50
   //Sanity check
   if(requestHeader == NULL)
 800c676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 80aa 	beq.w	800c7d2 <icmpProcessEchoRequest+0x18a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 800c67e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c680:	f000 f9ea 	bl	800ca58 <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	4619      	mov	r1, r3
 800c68c:	4610      	mov	r0, r2
 800c68e:	f001 fcd9 	bl	800e044 <ipv4IsBroadcastAddr>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d105      	bne.n	800c6a4 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 800c6a0:	2be0      	cmp	r3, #224	; 0xe0
 800c6a2:	d119      	bne.n	800c6d8 <icmpProcessEchoRequest+0x90>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 8093 	beq.w	800c7d6 <icmpProcessEchoRequest+0x18e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	6819      	ldr	r1, [r3, #0]
 800c6b4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800c6b8:	f107 030c 	add.w	r3, r7, #12
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f001 fb51 	bl	800dd64 <ipv4SelectSourceAddr>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         &ipAddr);
      //Any error to report?
      if(error)
 800c6c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 8084 	bne.w	800c7da <icmpProcessEchoRequest+0x192>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	633b      	str	r3, [r7, #48]	; 0x30
   {
 800c6d6:	e002      	b.n	800c6de <icmpProcessEchoRequest+0x96>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 800c6de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	2008      	movs	r0, #8
 800c6e6:	f7f5 ffe1 	bl	80026ac <ipAllocBuffer>
 800c6ea:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(reply == NULL)
 800c6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d075      	beq.n	800c7de <icmpProcessEchoRequest+0x196>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c6f8:	f7f6 fc08 	bl	8002f0c <netBufferAt>
 800c6fc:	6478      	str	r0, [r7, #68]	; 0x44

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 800c6fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c700:	2200      	movs	r2, #0
 800c702:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 800c704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c706:	2200      	movs	r2, #0
 800c708:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 800c70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c70c:	2200      	movs	r2, #0
 800c70e:	709a      	strb	r2, [r3, #2]
 800c710:	2200      	movs	r2, #0
 800c712:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 800c714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c716:	889b      	ldrh	r3, [r3, #4]
 800c718:	b29a      	uxth	r2, r3
 800c71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c71c:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 800c71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c720:	88db      	ldrh	r3, [r3, #6]
 800c722:	b29a      	uxth	r2, r3
 800c724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c726:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	3308      	adds	r3, #8
 800c72c:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 800c72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c730:	3b08      	subs	r3, #8
 800c732:	657b      	str	r3, [r7, #84]	; 0x54

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 800c734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c73c:	f7f6 fc19 	bl	8002f72 <netBufferConcat>
 800c740:	4603      	mov	r3, r0
 800c742:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

   //Check status code
   if(!error)
 800c746:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d13b      	bne.n	800c7c6 <icmpProcessEchoRequest+0x17e>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 800c74e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c750:	f7f6 fb14 	bl	8002d7c <netBufferGetLength>
 800c754:	4602      	mov	r2, r0
 800c756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	643b      	str	r3, [r7, #64]	; 0x40
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 800c75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c75e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c760:	4619      	mov	r1, r3
 800c762:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c764:	f7f5 fefa 	bl	800255c <ipCalcChecksumEx>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c76e:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	637b      	str	r3, [r7, #52]	; 0x34
      replyPseudoHeader.reserved = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 800c77c:	2301      	movs	r3, #1
 800c77e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      replyPseudoHeader.length = htons(replyLength);
 800c782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c784:	b29b      	uxth	r3, r3
 800c786:	4618      	mov	r0, r3
 800c788:	f7f4 fcd7 	bl	800113a <swapInt16>
 800c78c:	4603      	mov	r3, r0
 800c78e:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 800c790:	2000      	movs	r0, #0
 800c792:	f000 f923 	bl	800c9dc <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 800c796:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c798:	f000 f95e 	bl	800ca58 <icmpDumpEchoMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800c79c:	4b12      	ldr	r3, [pc, #72]	; (800c7e8 <icmpProcessEchoRequest+0x1a0>)
 800c79e:	f107 0414 	add.w	r4, r7, #20
 800c7a2:	461d      	mov	r5, r3
 800c7a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c7ac:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7b4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800c7b8:	f107 0314 	add.w	r3, r7, #20
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7c2:	f000 fbe2 	bl	800cf8a <ipv4SendDatagram>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 800c7c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c7c8:	f7f6 fac6 	bl	8002d58 <netBufferFree>
 800c7cc:	e008      	b.n	800c7e0 <icmpProcessEchoRequest+0x198>
      return;
 800c7ce:	bf00      	nop
 800c7d0:	e006      	b.n	800c7e0 <icmpProcessEchoRequest+0x198>
      return;
 800c7d2:	bf00      	nop
 800c7d4:	e004      	b.n	800c7e0 <icmpProcessEchoRequest+0x198>
         return;
 800c7d6:	bf00      	nop
 800c7d8:	e002      	b.n	800c7e0 <icmpProcessEchoRequest+0x198>
         return;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <icmpProcessEchoRequest+0x198>
      return;
 800c7de:	bf00      	nop
//   HAL_Delay(10); //zafer
}
 800c7e0:	3758      	adds	r7, #88	; 0x58
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bdb0      	pop	{r4, r5, r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	08014540 	.word	0x08014540

0800c7ec <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 800c7ec:	b5b0      	push	{r4, r5, r7, lr}
 800c7ee:	b094      	sub	sp, #80	; 0x50
 800c7f0:	af02      	add	r7, sp, #8
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	70fb      	strb	r3, [r7, #3]
 800c7fe:	460b      	mov	r3, r1
 800c800:	70bb      	strb	r3, [r7, #2]
 800c802:	4613      	mov	r3, r2
 800c804:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 800c806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c808:	f7f6 fab8 	bl	8002d7c <netBufferGetLength>
 800c80c:	4602      	mov	r2, r0
 800c80e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	643b      	str	r3, [r7, #64]	; 0x40

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 800c814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c816:	2b13      	cmp	r3, #19
 800c818:	d801      	bhi.n	800c81e <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 800c81a:	23ec      	movs	r3, #236	; 0xec
 800c81c:	e0a4      	b.n	800c968 <icmpSendErrorMessage+0x17c>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 800c81e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800c820:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c822:	f7f6 fb73 	bl	8002f0c <netBufferAt>
 800c826:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Sanity check
   if(ipHeader == NULL)
 800c828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 800c82e:	2301      	movs	r3, #1
 800c830:	e09a      	b.n	800c968 <icmpSendErrorMessage+0x17c>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 800c832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	4619      	mov	r1, r3
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fc03 	bl	800e044 <ipv4IsBroadcastAddr>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d105      	bne.n	800c850 <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 800c844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 800c84c:	2be0      	cmp	r3, #224	; 0xe0
 800c84e:	d101      	bne.n	800c854 <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 800c850:	23e4      	movs	r3, #228	; 0xe4
 800c852:	e089      	b.n	800c968 <icmpSendErrorMessage+0x17c>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 800c854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	3302      	adds	r3, #2
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c864:	4293      	cmp	r3, r2
 800c866:	bf28      	it	cs
 800c868:	4613      	movcs	r3, r2
 800c86a:	643b      	str	r3, [r7, #64]	; 0x40

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 800c86c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c870:	4619      	mov	r1, r3
 800c872:	2008      	movs	r0, #8
 800c874:	f7f5 ff1a 	bl	80026ac <ipAllocBuffer>
 800c878:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 800c880:	2364      	movs	r3, #100	; 0x64
 800c882:	e071      	b.n	800c968 <icmpSendErrorMessage+0x17c>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 800c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c886:	4619      	mov	r1, r3
 800c888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c88a:	f7f6 fb3f 	bl	8002f0c <netBufferAt>
 800c88e:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ICMP message
   icmpHeader->type = type;
 800c890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c892:	78fa      	ldrb	r2, [r7, #3]
 800c894:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 800c896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c898:	78ba      	ldrb	r2, [r7, #2]
 800c89a:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 800c89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89e:	2200      	movs	r2, #0
 800c8a0:	709a      	strb	r2, [r3, #2]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 800c8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a8:	787a      	ldrb	r2, [r7, #1]
 800c8aa:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused[0] = 0;
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	715a      	strb	r2, [r3, #5]
   icmpHeader->unused[1] = 0;
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	719a      	strb	r2, [r3, #6]
   icmpHeader->unused[2] = 0;
 800c8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 800c8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c8c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c8c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8c6:	f7f6 fb54 	bl	8002f72 <netBufferConcat>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Check status code
   if(!error)
 800c8d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d142      	bne.n	800c95e <icmpSendErrorMessage+0x172>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 800c8d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8da:	f7f6 fa4f 	bl	8002d7c <netBufferGetLength>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e2:	1ad3      	subs	r3, r2, r3
 800c8e4:	643b      	str	r3, [r7, #64]	; 0x40
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c8ee:	f7f5 fe35 	bl	800255c <ipCalcChecksumEx>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f8:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 800c8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	627b      	str	r3, [r7, #36]	; 0x24
      pseudoHeader.destAddr = ipHeader->srcAddr;
 800c900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	62bb      	str	r3, [r7, #40]	; 0x28
      pseudoHeader.reserved = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 800c90c:	2301      	movs	r3, #1
 800c90e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
      pseudoHeader.length = htons(length);
 800c912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c914:	b29b      	uxth	r3, r3
 800c916:	4618      	mov	r0, r3
 800c918:	f7f4 fc0f 	bl	800113a <swapInt16>
 800c91c:	4603      	mov	r3, r0
 800c91e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 800c920:	78fb      	ldrb	r3, [r7, #3]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 f85a 	bl	800c9dc <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 800c928:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c92a:	f000 f89f 	bl	800ca6c <icmpDumpErrorMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800c92e:	4b10      	ldr	r3, [pc, #64]	; (800c970 <icmpSendErrorMessage+0x184>)
 800c930:	f107 040c 	add.w	r4, r7, #12
 800c934:	461d      	mov	r5, r3
 800c936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c93a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c93e:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 800c942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c944:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800c948:	f107 030c 	add.w	r3, r7, #12
 800c94c:	9300      	str	r3, [sp, #0]
 800c94e:	4613      	mov	r3, r2
 800c950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fb19 	bl	800cf8a <ipv4SendDatagram>
 800c958:	4603      	mov	r3, r0
 800c95a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 800c95e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c960:	f7f6 f9fa 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 800c964:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3748      	adds	r7, #72	; 0x48
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bdb0      	pop	{r4, r5, r7, pc}
 800c970:	08014540 	.word	0x08014540

0800c974 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	4603      	mov	r3, r0
 800c97c:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 800c97e:	79fb      	ldrb	r3, [r7, #7]
 800c980:	3b03      	subs	r3, #3
 800c982:	2b0f      	cmp	r3, #15
 800c984:	d822      	bhi.n	800c9cc <icmpUpdateInStats+0x58>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <icmpUpdateInStats+0x18>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800c9cd 	.word	0x0800c9cd
 800c990:	0800c9cd 	.word	0x0800c9cd
 800c994:	0800c9cd 	.word	0x0800c9cd
 800c998:	0800c9cd 	.word	0x0800c9cd
 800c99c:	0800c9cd 	.word	0x0800c9cd
 800c9a0:	0800c9cd 	.word	0x0800c9cd
 800c9a4:	0800c9cd 	.word	0x0800c9cd
 800c9a8:	0800c9cd 	.word	0x0800c9cd
 800c9ac:	0800c9cd 	.word	0x0800c9cd
 800c9b0:	0800c9cd 	.word	0x0800c9cd
 800c9b4:	0800c9cd 	.word	0x0800c9cd
 800c9b8:	0800c9cd 	.word	0x0800c9cd
 800c9bc:	0800c9cd 	.word	0x0800c9cd
 800c9c0:	0800c9cd 	.word	0x0800c9cd
 800c9c4:	0800c9cd 	.word	0x0800c9cd
 800c9c8:	0800c9cd 	.word	0x0800c9cd
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 800c9cc:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop

0800c9dc <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b083      	sub	sp, #12
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	3b03      	subs	r3, #3
 800c9ea:	2b0f      	cmp	r3, #15
 800c9ec:	d822      	bhi.n	800ca34 <icmpUpdateOutStats+0x58>
 800c9ee:	a201      	add	r2, pc, #4	; (adr r2, 800c9f4 <icmpUpdateOutStats+0x18>)
 800c9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f4:	0800ca35 	.word	0x0800ca35
 800c9f8:	0800ca35 	.word	0x0800ca35
 800c9fc:	0800ca35 	.word	0x0800ca35
 800ca00:	0800ca35 	.word	0x0800ca35
 800ca04:	0800ca35 	.word	0x0800ca35
 800ca08:	0800ca35 	.word	0x0800ca35
 800ca0c:	0800ca35 	.word	0x0800ca35
 800ca10:	0800ca35 	.word	0x0800ca35
 800ca14:	0800ca35 	.word	0x0800ca35
 800ca18:	0800ca35 	.word	0x0800ca35
 800ca1c:	0800ca35 	.word	0x0800ca35
 800ca20:	0800ca35 	.word	0x0800ca35
 800ca24:	0800ca35 	.word	0x0800ca35
 800ca28:	0800ca35 	.word	0x0800ca35
 800ca2c:	0800ca35 	.word	0x0800ca35
 800ca30:	0800ca35 	.word	0x0800ca35
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 800ca34:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop

0800ca44 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7f7 f901 	bl	8003c90 <nicGetPhysicalInterface>
 800ca8e:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800ca96:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   osMemset(context, 0, sizeof(Ipv4Context));
 800ca98:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	68b8      	ldr	r0, [r7, #8]
 800caa0:	f006 f831 	bl	8012b06 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caa8:	685a      	ldr	r2, [r3, #4]
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	2200      	movs	r2, #0
 800cab2:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	2201      	movs	r2, #1
 800cab8:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2200      	movs	r2, #0
 800cabe:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	3324      	adds	r3, #36	; 0x24
 800cac4:	2208      	movs	r2, #8
 800cac6:	2100      	movs	r1, #0
 800cac8:	4618      	mov	r0, r3
 800caca:	f006 f81c 	bl	8012b06 <memset>
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	332c      	adds	r3, #44	; 0x2c
 800cad2:	2250      	movs	r2, #80	; 0x50
 800cad4:	2100      	movs	r1, #0
 800cad6:	4618      	mov	r0, r3
 800cad8:	f006 f815 	bl	8012b06 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	337c      	adds	r3, #124	; 0x7c
 800cae0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800cae4:	2100      	movs	r1, #0
 800cae6:	4618      	mov	r0, r3
 800cae8:	f006 f80d 	bl	8012b06 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <ipv4SetHostAddr>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddr(NetInterface *interface, Ipv4Addr addr)
{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b082      	sub	sp, #8
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
   //Set IPv4 host address
   return ipv4SetHostAddrEx(interface, 0, addr);
 800cb00:	683a      	ldr	r2, [r7, #0]
 800cb02:	2100      	movs	r1, #0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f805 	bl	800cb14 <ipv4SetHostAddrEx>
 800cb0a:	4603      	mov	r3, r0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <ipv4SetHostAddrEx>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddrEx(NetInterface *interface, uint_t index, Ipv4Addr addr)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b086      	sub	sp, #24
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
   Ipv4AddrEntry *entry;

   //Check parameters
   if(interface == NULL)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <ipv4SetHostAddrEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800cb26:	2302      	movs	r3, #2
 800cb28:	e02e      	b.n	800cb88 <ipv4SetHostAddrEx+0x74>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <ipv4SetHostAddrEx+0x22>
      return ERROR_OUT_OF_RANGE;
 800cb30:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cb34:	e028      	b.n	800cb88 <ipv4SetHostAddrEx+0x74>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb3c:	2be0      	cmp	r3, #224	; 0xe0
 800cb3e:	d101      	bne.n	800cb44 <ipv4SetHostAddrEx+0x30>
      return ERROR_INVALID_ADDRESS;
 800cb40:	23e4      	movs	r3, #228	; 0xe4
 800cb42:	e021      	b.n	800cb88 <ipv4SetHostAddrEx+0x74>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800cb44:	4812      	ldr	r0, [pc, #72]	; (800cb90 <ipv4SetHostAddrEx+0x7c>)
 800cb46:	f7f4 fc75 	bl	8001434 <osAcquireMutex>

   //Point to the corresponding entry
   entry = &interface->ipv4Context.addrList[index];
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	617b      	str	r3, [r7, #20]

   //Set up host address
   entry->addr = addr;
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	601a      	str	r2, [r3, #0]
   //Clear conflict flag
   entry->conflict = FALSE;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	609a      	str	r2, [r3, #8]

   //Check whether the new host address is valid
   if(addr != IPV4_UNSPECIFIED_ADDR)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d003      	beq.n	800cb7a <ipv4SetHostAddrEx+0x66>
   {
      //The use of the IPv4 address is now unrestricted
      entry->state = IPV4_ADDR_STATE_VALID;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2202      	movs	r2, #2
 800cb76:	711a      	strb	r2, [r3, #4]
 800cb78:	e002      	b.n	800cb80 <ipv4SetHostAddrEx+0x6c>
   }
   else
   {
      //The IPv4 address is no longer valid
      entry->state = IPV4_ADDR_STATE_INVALID;
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	711a      	strb	r2, [r3, #4]
   //Restart mDNS probing process
   mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800cb80:	4803      	ldr	r0, [pc, #12]	; (800cb90 <ipv4SetHostAddrEx+0x7c>)
 800cb82:	f7f4 fc66 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3718      	adds	r7, #24
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20009178 	.word	0x20009178

0800cb94 <ipv4SetSubnetMask>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMask(NetInterface *interface, Ipv4Addr mask)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
   //Set subnet mask
   return ipv4SetSubnetMaskEx(interface, 0, mask);
 800cb9e:	683a      	ldr	r2, [r7, #0]
 800cba0:	2100      	movs	r1, #0
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f806 	bl	800cbb4 <ipv4SetSubnetMaskEx>
 800cba8:	4603      	mov	r3, r0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <ipv4SetSubnetMaskEx>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMaskEx(NetInterface *interface, uint_t index, Ipv4Addr mask)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d101      	bne.n	800cbca <ipv4SetSubnetMaskEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	e017      	b.n	800cbfa <ipv4SetSubnetMaskEx+0x46>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d002      	beq.n	800cbd6 <ipv4SetSubnetMaskEx+0x22>
      return ERROR_OUT_OF_RANGE;
 800cbd0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cbd4:	e011      	b.n	800cbfa <ipv4SetSubnetMaskEx+0x46>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800cbd6:	480b      	ldr	r0, [pc, #44]	; (800cc04 <ipv4SetSubnetMaskEx+0x50>)
 800cbd8:	f7f4 fc2c 	bl	8001434 <osAcquireMutex>
   //Set up subnet mask
   interface->ipv4Context.addrList[index].subnetMask = mask;
 800cbdc:	68f9      	ldr	r1, [r7, #12]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	440b      	add	r3, r1
 800cbea:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 800cbf2:	4804      	ldr	r0, [pc, #16]	; (800cc04 <ipv4SetSubnetMaskEx+0x50>)
 800cbf4:	f7f4 fc2d 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20009178 	.word	0x20009178

0800cc08 <ipv4SetDefaultGateway>:
 * @param[in] addr Default gateway address
 * @return Error code
 **/

error_t ipv4SetDefaultGateway(NetInterface *interface, Ipv4Addr addr)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
   //Set default gateway
   return ipv4SetDefaultGatewayEx(interface, 0, addr);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	2100      	movs	r1, #0
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f806 	bl	800cc28 <ipv4SetDefaultGatewayEx>
 800cc1c:	4603      	mov	r3, r0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
	...

0800cc28 <ipv4SetDefaultGatewayEx>:
 * @return Error code
 **/

error_t ipv4SetDefaultGatewayEx(NetInterface *interface, uint_t index,
   Ipv4Addr addr)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <ipv4SetDefaultGatewayEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800cc3a:	2302      	movs	r3, #2
 800cc3c:	e01e      	b.n	800cc7c <ipv4SetDefaultGatewayEx+0x54>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <ipv4SetDefaultGatewayEx+0x22>
      return ERROR_OUT_OF_RANGE;
 800cc44:	f44f 7383 	mov.w	r3, #262	; 0x106
 800cc48:	e018      	b.n	800cc7c <ipv4SetDefaultGatewayEx+0x54>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc50:	2be0      	cmp	r3, #224	; 0xe0
 800cc52:	d101      	bne.n	800cc58 <ipv4SetDefaultGatewayEx+0x30>
      return ERROR_INVALID_ADDRESS;
 800cc54:	23e4      	movs	r3, #228	; 0xe4
 800cc56:	e011      	b.n	800cc7c <ipv4SetDefaultGatewayEx+0x54>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800cc58:	480a      	ldr	r0, [pc, #40]	; (800cc84 <ipv4SetDefaultGatewayEx+0x5c>)
 800cc5a:	f7f4 fbeb 	bl	8001434 <osAcquireMutex>
   //Set up default gateway address
   interface->ipv4Context.addrList[index].defaultGateway = addr;
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	440b      	add	r3, r1
 800cc6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 800cc74:	4803      	ldr	r0, [pc, #12]	; (800cc84 <ipv4SetDefaultGatewayEx+0x5c>)
 800cc76:	f7f4 fbec 	bl	8001452 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800cc7a:	2300      	movs	r3, #0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3710      	adds	r7, #16
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	20009178 	.word	0x20009178

0800cc88 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7f6 fffd 	bl	8003c90 <nicGetPhysicalInterface>
 800cc96:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800cc9e:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	601a      	str	r2, [r3, #0]

#if (ETH_SUPPORT == ENABLED)
   //Flush ARP cache contents
   arpFlushCache(interface);
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7fe feca 	bl	800ba44 <arpFlushCache>
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 ff78 	bl	800dba6 <ipv4FlushFragQueue>
   autoIpLinkChangeEvent(interface->autoIpContext);
#endif

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fc ff6d 	bl	8009b9c <dhcpClientLinkChangeEvent>
#endif
}
 800ccc2:	bf00      	nop
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <ipv4ProcessPacket>:
 *   the packet
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08a      	sub	sp, #40	; 0x28
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	60f8      	str	r0, [r7, #12]
 800ccd2:	60b9      	str	r1, [r7, #8]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2b13      	cmp	r3, #19
 800cce0:	d802      	bhi.n	800cce8 <ipv4ProcessPacket+0x1e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 800cce2:	23ec      	movs	r3, #236	; 0xec
 800cce4:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cce6:	e09e      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	f000 fc0f 	bl	800d50c <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	f023 030f 	bic.w	r3, r3, #15
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	2b40      	cmp	r3, #64	; 0x40
 800ccfa:	d002      	beq.n	800cd02 <ipv4ProcessPacket+0x38>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800ccfc:	23d4      	movs	r3, #212	; 0xd4
 800ccfe:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd00:	e091      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d802      	bhi.n	800cd16 <ipv4ProcessPacket+0x4c>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800cd10:	23d4      	movs	r3, #212	; 0xd4
 800cd12:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd14:	e087      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	885b      	ldrh	r3, [r3, #2]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7f4 fa0c 	bl	800113a <swapInt16>
 800cd22:	4603      	mov	r3, r0
 800cd24:	461a      	mov	r2, r3
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	429a      	cmp	r2, r3
 800cd34:	da02      	bge.n	800cd3c <ipv4ProcessPacket+0x72>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800cd36:	23d4      	movs	r3, #212	; 0xd4
 800cd38:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd3a:	e074      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	885b      	ldrh	r3, [r3, #2]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f4 f9f9 	bl	800113a <swapInt16>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d202      	bcs.n	800cd58 <ipv4ProcessPacket+0x8e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 800cd52:	23ec      	movs	r3, #236	; 0xec
 800cd54:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd56:	e066      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f000 ff8b 	bl	800dc7a <ipv4CheckSourceAddr>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <ipv4ProcessPacket+0xa6>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800cd6a:	23d4      	movs	r3, #212	; 0xd4
 800cd6c:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd6e:	e05a      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }
      else
#endif
      {
         //Destination address filtering
         error = ipv4CheckDestAddr(interface, packet->destAddr);
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	4619      	mov	r1, r3
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f000 ff97 	bl	800dcaa <ipv4CheckDestAddr>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	84fb      	strh	r3, [r7, #38]	; 0x26
         }
#endif
      }

      //Invalid destination address?
      if(error)
 800cd80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <ipv4ProcessPacket+0xc2>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800cd86:	23e4      	movs	r3, #228	; 0xe4
 800cd88:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cd8a:	e04c      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	4619      	mov	r1, r3
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f001 f997 	bl	800e0c6 <ipv4IsTentativeAddr>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <ipv4ProcessPacket+0xda>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800cd9e:	23e4      	movs	r3, #228	; 0xe4
 800cda0:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cda2:	e040      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	68b8      	ldr	r0, [r7, #8]
 800cdb4:	f7f5 fb48 	bl	8002448 <ipCalcChecksum>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <ipv4ProcessPacket+0xfa>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 800cdbe:	23d4      	movs	r3, #212	; 0xd4
 800cdc0:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800cdc2:	e030      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f001 fa75 	bl	800e2bc <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	885b      	ldrh	r3, [r3, #2]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f4 f9ae 	bl	800113a <swapInt16>
 800cdde:	4603      	mov	r3, r0
 800cde0:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if((ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK)) != 0)
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	88db      	ldrh	r3, [r3, #6]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7f4 f9a6 	bl	800113a <swapInt16>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d006      	beq.n	800ce06 <ipv4ProcessPacket+0x13c>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length, ancillary);
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	68b9      	ldr	r1, [r7, #8]
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f000 fc19 	bl	800d636 <ipv4ReassembleDatagram>
 800ce04:	e00f      	b.n	800ce26 <ipv4ProcessPacket+0x15c>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer, ancillary);
 800ce18:	f107 0314 	add.w	r3, r7, #20
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	4619      	mov	r1, r3
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 f80c 	bl	800ce3e <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 800ce26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d004      	beq.n	800ce36 <ipv4ProcessPacket+0x16c>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 800ce2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ce2e:	4619      	mov	r1, r3
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f001 fa63 	bl	800e2fc <ipv4UpdateErrorStats>
   }
}
 800ce36:	bf00      	nop
 800ce38:	3728      	adds	r7, #40	; 0x28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <ipv4ProcessDatagram>:
 *   the packet
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer,
   NetRxAncillary *ancillary)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b08e      	sub	sp, #56	; 0x38
 800ce42:	af02      	add	r7, sp, #8
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 800ce4a:	68b8      	ldr	r0, [r7, #8]
 800ce4c:	f7f5 ff96 	bl	8002d7c <netBufferGetLength>
 800ce50:	62b8      	str	r0, [r7, #40]	; 0x28

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 800ce52:	2100      	movs	r1, #0
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	f7f6 f859 	bl	8002f0c <netBufferAt>
 800ce5a:	6278      	str	r0, [r7, #36]	; 0x24
   //Sanity check
   if(header == NULL)
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f000 808f 	beq.w	800cf82 <ipv4ProcessDatagram+0x144>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 800ce64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce66:	f000 fb51 	bl	800d50c <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	623b      	str	r3, [r7, #32]
   //Compute the length of the payload
   length -= header->headerLength * 4;
 800ce78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	461a      	mov	r2, r3
 800ce86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce88:	1a9b      	subs	r3, r3, r2
 800ce8a:	62bb      	str	r3, [r7, #40]	; 0x28

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800ce8c:	230c      	movs	r3, #12
 800ce8e:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 800ce90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	617b      	str	r3, [r7, #20]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 800ce96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	61bb      	str	r3, [r7, #24]
   pseudoHeader.ipv4Data.reserved = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	773b      	strb	r3, [r7, #28]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	7a5b      	ldrb	r3, [r3, #9]
 800cea4:	777b      	strb	r3, [r7, #29]
   pseudoHeader.ipv4Data.length = htons(length);
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7f4 f945 	bl	800113a <swapInt16>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	83fb      	strh	r3, [r7, #30]

   //Save TTL value
   ancillary->ttl = header->timeToLive;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	7a1a      	ldrb	r2, [r3, #8]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	701a      	strb	r2, [r3, #0]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	7a5b      	ldrb	r3, [r3, #9]
 800cec0:	2b11      	cmp	r3, #17
 800cec2:	d026      	beq.n	800cf12 <ipv4ProcessDatagram+0xd4>
 800cec4:	2b11      	cmp	r3, #17
 800cec6:	dc30      	bgt.n	800cf2a <ipv4ProcessDatagram+0xec>
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d002      	beq.n	800ced2 <ipv4ProcessDatagram+0x94>
 800cecc:	2b06      	cmp	r3, #6
 800cece:	d014      	beq.n	800cefa <ipv4ProcessDatagram+0xbc>
 800ced0:	e02b      	b.n	800cf2a <ipv4ProcessDatagram+0xec>
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 800ced2:	f107 0310 	add.w	r3, r7, #16
 800ced6:	1d19      	adds	r1, r3, #4
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	f7ff fb75 	bl	800c5cc <icmpProcessMessage>

#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process ICMP messages
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
 800cee2:	f107 0110 	add.w	r1, r7, #16
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	6a3b      	ldr	r3, [r7, #32]
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7f7 fa86 	bl	8004400 <rawSocketProcessIpPacket>
         ancillary);
#endif

      //No error to report
      error = NO_ERROR;
 800cef4:	2300      	movs	r3, #0
 800cef6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Continue processing
      break;
 800cef8:	e023      	b.n	800cf42 <ipv4ProcessDatagram+0x104>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset, ancillary);
 800cefa:	f107 0110 	add.w	r1, r7, #16
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	68f8      	ldr	r0, [r7, #12]
 800cf08:	f7f8 ff48 	bl	8005d9c <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Continue processing
      break;
 800cf10:	e017      	b.n	800cf42 <ipv4ProcessDatagram+0x104>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset,
 800cf12:	f107 0110 	add.w	r1, r7, #16
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f7fb feee 	bl	8008d00 <udpProcessDatagram>
 800cf24:	4603      	mov	r3, r0
 800cf26:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ancillary);
      //Continue processing
      break;
 800cf28:	e00b      	b.n	800cf42 <ipv4ProcessDatagram+0x104>

   //Unknown protocol?
   default:
#if (RAW_SOCKET_SUPPORT == ENABLED)
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
 800cf2a:	f107 0110 	add.w	r1, r7, #16
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	6a3b      	ldr	r3, [r7, #32]
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7f7 fa62 	bl	8004400 <rawSocketProcessIpPacket>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
#endif
      //Continue processing
      break;
 800cf40:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 800cf42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf44:	2bd1      	cmp	r3, #209	; 0xd1
 800cf46:	d10e      	bne.n	800cf66 <ipv4ProcessDatagram+0x128>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 800cf48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f001 f9d5 	bl	800e2fc <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800cf52:	2300      	movs	r3, #0
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	2103      	movs	r1, #3
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fc43 	bl	800c7ec <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 800cf66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf68:	2bd2      	cmp	r3, #210	; 0xd2
 800cf6a:	d10b      	bne.n	800cf84 <ipv4ProcessDatagram+0x146>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	2300      	movs	r3, #0
 800cf76:	2203      	movs	r2, #3
 800cf78:	2103      	movs	r1, #3
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f7ff fc36 	bl	800c7ec <icmpSendErrorMessage>
 800cf80:	e000      	b.n	800cf84 <ipv4ProcessDatagram+0x146>
      return;
 800cf82:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 800cf84:	3730      	adds	r7, #48	; 0x30
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b08c      	sub	sp, #48	; 0x30
 800cf8e:	af04      	add	r7, sp, #16
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7f5 feef 	bl	8002d7c <netBufferGetLength>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	61bb      	str	r3, [r7, #24]

   //Identification field is primarily used to identify fragments of an
   //original IP datagram
   id = interface->ipv4Context.identification++;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	b291      	uxth	r1, r2
 800cfb0:	68fa      	ldr	r2, [r7, #12]
 800cfb2:	f8a2 11d8 	strh.w	r1, [r2, #472]	; 0x1d8
 800cfb6:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network interface MTU then no
   //fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	f103 0214 	add.w	r2, r3, #20
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d80e      	bhi.n	800cfe6 <ipv4SendDatagram+0x5c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 800cfc8:	8afa      	ldrh	r2, [r7, #22]
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	9302      	str	r3, [sp, #8]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	9301      	str	r3, [sp, #4]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	68b9      	ldr	r1, [r7, #8]
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f000 f814 	bl	800d008 <ipv4SendPacket>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	83fb      	strh	r3, [r7, #30]
 800cfe4:	e00b      	b.n	800cffe <ipv4SendDatagram+0x74>
   //must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 800cfe6:	8afa      	ldrh	r2, [r7, #22]
 800cfe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfea:	9301      	str	r3, [sp, #4]
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 fa93 	bl	800d520 <ipv4FragmentDatagram>
 800cffa:	4603      	mov	r3, r0
 800cffc:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 800cffe:	8bfb      	ldrh	r3, [r7, #30]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3720      	adds	r7, #32
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   NetTxAncillary *ancillary)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08c      	sub	sp, #48	; 0x30
 800d00c:	af02      	add	r7, sp, #8
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	603b      	str	r3, [r7, #0]
 800d014:	4613      	mov	r3, r2
 800d016:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Check whether an IP Router Alert option should be added
   if(ancillary->routerAlert)
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	689b      	ldr	r3, [r3, #8]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00c      	beq.n	800d03a <ipv4SendPacket+0x32>
   {
      //Add an IP Router Alert option
      error = ipv4AddRouterAlertOption(buffer, &offset);
 800d020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d024:	4619      	mov	r1, r3
 800d026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d028:	f000 fdfc 	bl	800dc24 <ipv4AddRouterAlertOption>
 800d02c:	4603      	mov	r3, r0
 800d02e:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Any error to report?
      if(error)
 800d030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <ipv4SendPacket+0x32>
         return error;
 800d036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d038:	e154      	b.n	800d2e4 <ipv4SendPacket+0x2dc>
   }

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	2b13      	cmp	r3, #19
 800d03e:	d801      	bhi.n	800d044 <ipv4SendPacket+0x3c>
      return ERROR_INVALID_PARAMETER;
 800d040:	2302      	movs	r3, #2
 800d042:	e14f      	b.n	800d2e4 <ipv4SendPacket+0x2dc>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 800d044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d046:	3b14      	subs	r3, #20
 800d048:	637b      	str	r3, [r7, #52]	; 0x34
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 800d04a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d04c:	f7f5 fe96 	bl	8002d7c <netBufferGetLength>
 800d050:	4602      	mov	r2, r0
 800d052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d054:	1ad3      	subs	r3, r2, r3
 800d056:	623b      	str	r3, [r7, #32]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	4619      	mov	r1, r3
 800d05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d05e:	f7f5 ff55 	bl	8002f0c <netBufferAt>
 800d062:	61f8      	str	r0, [r7, #28]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	7813      	ldrb	r3, [r2, #0]
 800d068:	2104      	movs	r1, #4
 800d06a:	f361 1307 	bfi	r3, r1, #4, #4
 800d06e:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 800d070:	69fa      	ldr	r2, [r7, #28]
 800d072:	7813      	ldrb	r3, [r2, #0]
 800d074:	2105      	movs	r1, #5
 800d076:	f361 0303 	bfi	r3, r1, #0, #4
 800d07a:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	2200      	movs	r2, #0
 800d080:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 800d082:	6a3b      	ldr	r3, [r7, #32]
 800d084:	b29b      	uxth	r3, r3
 800d086:	4618      	mov	r0, r3
 800d088:	f7f4 f857 	bl	800113a <swapInt16>
 800d08c:	4603      	mov	r3, r0
 800d08e:	461a      	mov	r2, r3
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	4618      	mov	r0, r3
 800d098:	f7f4 f84f 	bl	800113a <swapInt16>
 800d09c:	4603      	mov	r3, r0
 800d09e:	461a      	mov	r2, r3
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7f4 f846 	bl	800113a <swapInt16>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = ancillary->ttl;
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b8:	781a      	ldrb	r2, [r3, #0]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	7a5a      	ldrb	r2, [r3, #9]
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	729a      	strb	r2, [r3, #10]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	611a      	str	r2, [r3, #16]

   //The IHL field is the length of the IP packet header in 32-bit words, and
   //thus points to the beginning of the data. Note that the minimum value for
   //a correct header is 5 (refer to RFC 791, section 3.1)
   if(ancillary->routerAlert)
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d005      	beq.n	800d0f4 <ipv4SendPacket+0xec>
   {
      packet->headerLength = 6;
 800d0e8:	69fa      	ldr	r2, [r7, #28]
 800d0ea:	7813      	ldrb	r3, [r2, #0]
 800d0ec:	2106      	movs	r1, #6
 800d0ee:	f361 0303 	bfi	r3, r1, #0, #4
 800d0f2:	7013      	strb	r3, [r2, #0]
   }

   //Check whether the TTL value is zero
   if(packet->timeToLive == 0)
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	7a1b      	ldrb	r3, [r3, #8]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <ipv4SendPacket+0xfa>
   {
      //Use default Time-To-Live value
      packet->timeToLive = IPV4_DEFAULT_TTL;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	2240      	movs	r2, #64	; 0x40
 800d100:	721a      	strb	r2, [r3, #8]
   //Set DSCP field
   packet->typeOfService = (ancillary->dscp << 2) & 0xFC;
#endif

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 800d102:	6b79      	ldr	r1, [r7, #52]	; 0x34
      packet->headerLength * 4);
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d10c:	b2db      	uxtb	r3, r3
 800d10e:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 800d110:	461a      	mov	r2, r3
 800d112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d114:	f7f5 fa22 	bl	800255c <ipCalcChecksumEx>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	69fb      	ldr	r3, [r7, #28]
 800d11e:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4619      	mov	r1, r3
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f000 fda7 	bl	800dc7a <ipv4CheckSourceAddr>
 800d12c:	4603      	mov	r3, r0
 800d12e:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Invalid source address?
   if(error)
 800d130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <ipv4SendPacket+0x132>
      return error;
 800d136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d138:	e0d4      	b.n	800d2e4 <ipv4SendPacket+0x2dc>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d102      	bne.n	800d148 <ipv4SendPacket+0x140>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 800d142:	23e4      	movs	r3, #228	; 0xe4
 800d144:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d146:	e0cc      	b.n	800d2e2 <ipv4SendPacket+0x2da>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f000 ffe5 	bl	800e11c <ipv4IsLocalHostAddr>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d003      	beq.n	800d160 <ipv4SendPacket+0x158>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 800d158:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d15c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d15e:	e0c0      	b.n	800d2e2 <ipv4SendPacket+0x2da>
   }
   else
   {
#if (ETH_SUPPORT == ENABLED)
      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7f6 fd95 	bl	8003c90 <nicGetPhysicalInterface>
 800d166:	61b8      	str	r0, [r7, #24]

      //Ethernet interface?
      if(physicalInterface->nicDriver != NULL &&
 800d168:	69bb      	ldr	r3, [r7, #24]
 800d16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 80b4 	beq.w	800d2da <ipv4SendPacket+0x2d2>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d176:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 800d178:	2b01      	cmp	r3, #1
 800d17a:	f040 80ae 	bne.w	800d2da <ipv4SendPacket+0x2d2>
      {
         Ipv4Addr destIpAddr;

         //Get the destination IPv4 address
         destIpAddr = pseudoHeader->destAddr;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	617b      	str	r3, [r7, #20]

         //Perform address resolution
         if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	3312      	adds	r3, #18
 800d188:	2206      	movs	r2, #6
 800d18a:	4958      	ldr	r1, [pc, #352]	; (800d2ec <ipv4SendPacket+0x2e4>)
 800d18c:	4618      	mov	r0, r3
 800d18e:	f005 fc84 	bl	8012a9a <memcmp>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <ipv4SendPacket+0x196>
         {
            //The destination address is already resolved
            error = NO_ERROR;
 800d198:	2300      	movs	r3, #0
 800d19a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d19c:	e06d      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	68f8      	ldr	r0, [r7, #12]
 800d1a4:	f000 ff4e 	bl	800e044 <ipv4IsBroadcastAddr>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <ipv4SendPacket+0x1ba>
         {
            //Use of the broadcast MAC address to send the packet
            ancillary->destMacAddr = MAC_BROADCAST_ADDR;
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	4a4f      	ldr	r2, [pc, #316]	; (800d2f0 <ipv4SendPacket+0x2e8>)
 800d1b2:	3312      	adds	r3, #18
 800d1b4:	6811      	ldr	r1, [r2, #0]
 800d1b6:	6019      	str	r1, [r3, #0]
 800d1b8:	8892      	ldrh	r2, [r2, #4]
 800d1ba:	809a      	strh	r2, [r3, #4]
            //Successful address resolution
            error = NO_ERROR;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d1c0:	e05b      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else if(ipv4IsMulticastAddr(destIpAddr))
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1c8:	2be0      	cmp	r3, #224	; 0xe0
 800d1ca:	d109      	bne.n	800d1e0 <ipv4SendPacket+0x1d8>
         {
            //Map IPv4 multicast address to MAC-layer multicast address
            error = ipv4MapMulticastAddrToMac(destIpAddr, &ancillary->destMacAddr);
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	3312      	adds	r3, #18
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	f001 f843 	bl	800e260 <ipv4MapMulticastAddrToMac>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d1de:	e04c      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d005      	beq.n	800d1fa <ipv4SendPacket+0x1f2>
            ipv4IsLinkLocalAddr(destIpAddr))
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	b29b      	uxth	r3, r3
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 800d1f2:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d109      	bne.n	800d20e <ipv4SendPacket+0x206>
         {
            //Packets with a link-local source or destination address are not
            //routable off the link
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800d1fa:	6979      	ldr	r1, [r7, #20]
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fe:	3312      	adds	r3, #18
 800d200:	461a      	mov	r2, r3
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7fe fd1c 	bl	800bc40 <arpResolve>
 800d208:	4603      	mov	r3, r0
 800d20a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d20c:	e035      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else if(ipv4IsOnLink(interface, destIpAddr))
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	4619      	mov	r1, r3
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f000 fee7 	bl	800dfe6 <ipv4IsOnLink>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <ipv4SendPacket+0x22a>
         {
            //Resolve destination address before sending the packet
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800d21e:	6979      	ldr	r1, [r7, #20]
 800d220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d222:	3312      	adds	r3, #18
 800d224:	461a      	mov	r2, r3
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	f7fe fd0a 	bl	800bc40 <arpResolve>
 800d22c:	4603      	mov	r3, r0
 800d22e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d230:	e023      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else if(ancillary->dontRoute)
 800d232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d009      	beq.n	800d24e <ipv4SendPacket+0x246>
         {
            //Do not send the packet via a gateway
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800d23a:	6979      	ldr	r1, [r7, #20]
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	3312      	adds	r3, #18
 800d240:	461a      	mov	r2, r3
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f7fe fcfc 	bl	800bc40 <arpResolve>
 800d248:	4603      	mov	r3, r0
 800d24a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d24c:	e015      	b.n	800d27a <ipv4SendPacket+0x272>
         }
         else
         {
            //Default gateway selection
            error = ipv4SelectDefaultGateway(interface, pseudoHeader->srcAddr,
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f107 0214 	add.w	r2, r7, #20
 800d256:	4619      	mov	r1, r3
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 fe8f 	bl	800df7c <ipv4SelectDefaultGateway>
 800d25e:	4603      	mov	r3, r0
 800d260:	84fb      	strh	r3, [r7, #38]	; 0x26
               &destIpAddr);

            //Check status code
            if(!error)
 800d262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d264:	2b00      	cmp	r3, #0
 800d266:	d108      	bne.n	800d27a <ipv4SendPacket+0x272>
            {
               //Use the selected gateway to forward the packet
               error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800d268:	6979      	ldr	r1, [r7, #20]
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	3312      	adds	r3, #18
 800d26e:	461a      	mov	r2, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7fe fce5 	bl	800bc40 <arpResolve>
 800d276:	4603      	mov	r3, r0
 800d278:	84fb      	strh	r3, [r7, #38]	; 0x26
               IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutNoRoutes, 1);
            }
         }

         //Successful address resolution?
         if(error == NO_ERROR)
 800d27a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d118      	bne.n	800d2b2 <ipv4SendPacket+0x2aa>
         {
            //Update IP statistics
            ipv4UpdateOutStats(interface, destIpAddr, length);
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	6a3a      	ldr	r2, [r7, #32]
 800d284:	4619      	mov	r1, r3
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f001 f828 	bl	800e2dc <ipv4UpdateOutStats>

            //Debug message
            TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 800d28c:	69f8      	ldr	r0, [r7, #28]
 800d28e:	f000 f93d 	bl	800d50c <ipv4DumpHeader>

            //Send Ethernet frame
            error = ethSendFrame(interface, &ancillary->destMacAddr,
 800d292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d294:	f103 0112 	add.w	r1, r3, #18
 800d298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d29c:	9201      	str	r2, [sp, #4]
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f7f4 fc5c 	bl	8001b64 <ethSendFrame>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 800d2b0:	e016      	b.n	800d2e0 <ipv4SendPacket+0x2d8>
               ETH_TYPE_IPV4, buffer, offset, ancillary);
         }
         else if(error == ERROR_IN_PROGRESS)
 800d2b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2b4:	f240 2203 	movw	r2, #515	; 0x203
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d111      	bne.n	800d2e0 <ipv4SendPacket+0x2d8>
         {
            //Debug message
            TRACE_INFO("Enqueuing IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 800d2bc:	69f8      	ldr	r0, [r7, #28]
 800d2be:	f000 f925 	bl	800d50c <ipv4DumpHeader>

            //Enqueue packets waiting for address resolution
            error = arpEnqueuePacket(interface, destIpAddr, buffer, offset,
 800d2c2:	6979      	ldr	r1, [r7, #20]
 800d2c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7fe fd20 	bl	800bd14 <arpEnqueuePacket>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 800d2d8:	e002      	b.n	800d2e0 <ipv4SendPacket+0x2d8>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 800d2da:	2307      	movs	r3, #7
 800d2dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d2de:	e000      	b.n	800d2e2 <ipv4SendPacket+0x2da>
      {
 800d2e0:	bf00      	nop
      }
   }

   //Return status code
   return error;
 800d2e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3728      	adds	r7, #40	; 0x28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	080144e8 	.word	0x080144e8
 800d2f0:	080144f0 	.word	0x080144f0

0800d2f4 <ipv4JoinMulticastGroup>:
 * @param[in] groupAddr IPv4 address identifying the host group to join
 * @return Error code
 **/

error_t ipv4JoinMulticastGroup(NetInterface *interface, Ipv4Addr groupAddr)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
   NetInterface *physicalInterface;
   MacAddr macAddr;
#endif

   //The IPv4 address must be a valid multicast address
   if(!ipv4IsMulticastAddr(groupAddr))
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d304:	2be0      	cmp	r3, #224	; 0xe0
 800d306:	d001      	beq.n	800d30c <ipv4JoinMulticastGroup+0x18>
      return ERROR_INVALID_ADDRESS;
 800d308:	23e4      	movs	r3, #228	; 0xe4
 800d30a:	e065      	b.n	800d3d8 <ipv4JoinMulticastGroup+0xe4>

#if (ETH_SUPPORT == ENABLED)
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7f6 fcbf 	bl	8003c90 <nicGetPhysicalInterface>
 800d312:	61b8      	str	r0, [r7, #24]
#endif

   //Initialize error code
   error = NO_ERROR;
 800d314:	2300      	movs	r3, #0
 800d316:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Keep track of the first free entry
   firstFreeEntry = NULL;
 800d318:	2300      	movs	r3, #0
 800d31a:	61fb      	str	r3, [r7, #28]

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800d31c:	2300      	movs	r3, #0
 800d31e:	623b      	str	r3, [r7, #32]
 800d320:	e022      	b.n	800d368 <ipv4JoinMulticastGroup+0x74>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 800d322:	6a3a      	ldr	r2, [r7, #32]
 800d324:	4613      	mov	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	4413      	add	r3, r2
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	4413      	add	r3, r2
 800d334:	3308      	adds	r3, #8
 800d336:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(entry->refCount > 0)
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <ipv4JoinMulticastGroup+0x64>
      {
         //Check whether the table already contains the specified IPv4 address
         if(entry->addr == groupAddr)
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	429a      	cmp	r2, r3
 800d348:	d10b      	bne.n	800d362 <ipv4JoinMulticastGroup+0x6e>
         {
            //Increment the reference count
            entry->refCount++;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	605a      	str	r2, [r3, #4]
            //Successful processing
            return NO_ERROR;
 800d354:	2300      	movs	r3, #0
 800d356:	e03f      	b.n	800d3d8 <ipv4JoinMulticastGroup+0xe4>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <ipv4JoinMulticastGroup+0x6e>
            firstFreeEntry = entry;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	61fb      	str	r3, [r7, #28]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	3301      	adds	r3, #1
 800d366:	623b      	str	r3, [r7, #32]
 800d368:	6a3b      	ldr	r3, [r7, #32]
 800d36a:	2b03      	cmp	r3, #3
 800d36c:	d9d9      	bls.n	800d322 <ipv4JoinMulticastGroup+0x2e>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <ipv4JoinMulticastGroup+0x84>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 800d374:	2301      	movs	r3, #1
 800d376:	e02f      	b.n	800d3d8 <ipv4JoinMulticastGroup+0xe4>
   }

#if (ETH_SUPPORT == ENABLED)
   //Map the IPv4 multicast address to a MAC-layer address
   ipv4MapMulticastAddrToMac(groupAddr, &macAddr);
 800d378:	f107 030c 	add.w	r3, r7, #12
 800d37c:	4619      	mov	r1, r3
 800d37e:	6838      	ldr	r0, [r7, #0]
 800d380:	f000 ff6e 	bl	800e260 <ipv4MapMulticastAddrToMac>
   //Add the corresponding address to the MAC filter table
   error = ethAcceptMacAddr(interface, &macAddr);
 800d384:	f107 030c 	add.w	r3, r7, #12
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7f4 fc86 	bl	8001c9c <ethAcceptMacAddr>
 800d390:	4603      	mov	r3, r0
 800d392:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800d394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d396:	2b00      	cmp	r3, #0
 800d398:	d114      	bne.n	800d3c4 <ipv4JoinMulticastGroup+0xd0>
   {
      //Virtual interface?
      if(interface != physicalInterface)
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d010      	beq.n	800d3c4 <ipv4JoinMulticastGroup+0xd0>
      {
         //Configure the physical interface to accept the MAC address
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 800d3a2:	f107 030c 	add.w	r3, r7, #12
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	69b8      	ldr	r0, [r7, #24]
 800d3aa:	f7f4 fc77 	bl	8001c9c <ethAcceptMacAddr>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	84fb      	strh	r3, [r7, #38]	; 0x26

         //Any error to report?
         if(error)
 800d3b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d005      	beq.n	800d3c4 <ipv4JoinMulticastGroup+0xd0>
         {
            //Clean up side effects
            ethDropMacAddr(interface, &macAddr);
 800d3b8:	f107 030c 	add.w	r3, r7, #12
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7f4 fcbe 	bl	8001d40 <ethDropMacAddr>
      }
   }
#endif

   //MAC filter table successfully updated?
   if(!error)
 800d3c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d105      	bne.n	800d3d6 <ipv4JoinMulticastGroup+0xe2>
   {
      //Now we can safely add a new entry to the table
      firstFreeEntry->addr = groupAddr;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	683a      	ldr	r2, [r7, #0]
 800d3ce:	601a      	str	r2, [r3, #0]
      //Initialize the reference count
      firstFreeEntry->refCount = 1;
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	605a      	str	r2, [r3, #4]
      igmpHostJoinGroup(interface, firstFreeEntry);
#endif
   }

   //Return status code
   return error;
 800d3d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3728      	adds	r7, #40	; 0x28
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <ipv4StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv4 address
 * @return Error code
 **/

error_t ipv4StringToAddr(const char_t *str, Ipv4Addr *ipAddr)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 800d3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3f2:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Decimal digit found?
      if(osIsdigit(*str))
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	4a2d      	ldr	r2, [pc, #180]	; (800d4b0 <ipv4StringToAddr+0xd0>)
 800d3fc:	4413      	add	r3, r2
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	f003 0304 	and.w	r3, r3, #4
 800d404:	2b00      	cmp	r3, #0
 800d406:	d015      	beq.n	800d434 <ipv4StringToAddr+0x54>
      {
         //First digit to be decoded?
         if(value < 0)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	da01      	bge.n	800d412 <ipv4StringToAddr+0x32>
            value = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         value = (value * 10) + (*str - '0');
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4613      	mov	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4413      	add	r3, r2
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	461a      	mov	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	3b30      	subs	r3, #48	; 0x30
 800d424:	4413      	add	r3, r2
 800d426:	60fb      	str	r3, [r7, #12]

         //The resulting value shall be in range 0 to 255
         if(value > 255)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2bff      	cmp	r3, #255	; 0xff
 800d42c:	dd35      	ble.n	800d49a <ipv4StringToAddr+0xba>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800d42e:	2369      	movs	r3, #105	; 0x69
 800d430:	82fb      	strh	r3, [r7, #22]
            break;
 800d432:	e036      	b.n	800d4a2 <ipv4StringToAddr+0xc2>
         }
      }
      //Dot separator found?
      else if(*str == '.' && i < 4)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	2b2e      	cmp	r3, #46	; 0x2e
 800d43a:	d115      	bne.n	800d468 <ipv4StringToAddr+0x88>
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b03      	cmp	r3, #3
 800d440:	dc12      	bgt.n	800d468 <ipv4StringToAddr+0x88>
      {
         //Each dot must be preceded by a valid number
         if(value < 0)
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	da02      	bge.n	800d44e <ipv4StringToAddr+0x6e>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800d448:	2369      	movs	r3, #105	; 0x69
 800d44a:	82fb      	strh	r3, [r7, #22]
            break;
 800d44c:	e029      	b.n	800d4a2 <ipv4StringToAddr+0xc2>
         }

         //Save the current byte
         ((uint8_t *) ipAddr)[i++] = value;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	613a      	str	r2, [r7, #16]
 800d454:	461a      	mov	r2, r3
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	4413      	add	r3, r2
 800d45a:	68fa      	ldr	r2, [r7, #12]
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
         //Prepare to decode the next byte
         value = -1;
 800d460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	e018      	b.n	800d49a <ipv4StringToAddr+0xba>
      }
      //End of string detected?
      else if(*str == '\0' && i == 3)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d111      	bne.n	800d494 <ipv4StringToAddr+0xb4>
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	2b03      	cmp	r3, #3
 800d474:	d10e      	bne.n	800d494 <ipv4StringToAddr+0xb4>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	da02      	bge.n	800d482 <ipv4StringToAddr+0xa2>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800d47c:	2369      	movs	r3, #105	; 0x69
 800d47e:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 800d480:	e00f      	b.n	800d4a2 <ipv4StringToAddr+0xc2>
            ((uint8_t *) ipAddr)[i] = value;
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	4413      	add	r3, r2
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 800d48e:	2300      	movs	r3, #0
 800d490:	82fb      	strh	r3, [r7, #22]
         break;
 800d492:	e006      	b.n	800d4a2 <ipv4StringToAddr+0xc2>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 800d494:	2369      	movs	r3, #105	; 0x69
 800d496:	82fb      	strh	r3, [r7, #22]
         break;
 800d498:	e003      	b.n	800d4a2 <ipv4StringToAddr+0xc2>
      }

      //Point to the next character
      str++;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3301      	adds	r3, #1
 800d49e:	607b      	str	r3, [r7, #4]
      if(osIsdigit(*str))
 800d4a0:	e7a8      	b.n	800d3f4 <ipv4StringToAddr+0x14>
   }

   //Return status code
   return error;
 800d4a2:	8afb      	ldrh	r3, [r7, #22]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	371c      	adds	r7, #28
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	080145d4 	.word	0x080145d4

0800d4b4 <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d101      	bne.n	800d4c8 <ipv4AddrToString+0x14>
      str = buffer;
 800d4c4:	4b0f      	ldr	r3, [pc, #60]	; (800d504 <ipv4AddrToString+0x50>)
 800d4c6:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 800d4c8:	1d3b      	adds	r3, r7, #4
 800d4ca:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   osSprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3302      	adds	r3, #2
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	3303      	adds	r3, #3
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	9200      	str	r2, [sp, #0]
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	460a      	mov	r2, r1
 800d4f0:	4905      	ldr	r1, [pc, #20]	; (800d508 <ipv4AddrToString+0x54>)
 800d4f2:	6838      	ldr	r0, [r7, #0]
 800d4f4:	f005 fe8a 	bl	801320c <siprintf>

   //Return a pointer to the formatted string
   return str;
 800d4f8:	683b      	ldr	r3, [r7, #0]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	2000093c 	.word	0x2000093c
 800d508:	080144b4 	.word	0x080144b4

0800d50c <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 800d514:	bf00      	nop
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, NetTxAncillary *ancillary)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b090      	sub	sp, #64	; 0x40
 800d524:	af04      	add	r7, sp, #16
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	603b      	str	r3, [r7, #0]
 800d52c:	4613      	mov	r3, r2
 800d52e:	80fb      	strh	r3, [r7, #6]
   //transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 800d530:	6838      	ldr	r0, [r7, #0]
 800d532:	f7f5 fc23 	bl	8002d7c <netBufferGetLength>
 800d536:	4602      	mov	r2, r0
 800d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 800d53e:	f107 0314 	add.w	r3, r7, #20
 800d542:	4619      	mov	r1, r3
 800d544:	2000      	movs	r0, #0
 800d546:	f7f5 f8b1 	bl	80026ac <ipAllocBuffer>
 800d54a:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 800d552:	2364      	movs	r3, #100	; 0x64
 800d554:	e06b      	b.n	800d62e <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d55c:	3b14      	subs	r3, #20
 800d55e:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	f023 0307 	bic.w	r3, r3, #7
 800d566:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 800d568:	2300      	movs	r3, #0
 800d56a:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 800d56c:	2300      	movs	r3, #0
 800d56e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d570:	e051      	b.n	800d616 <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	4619      	mov	r1, r3
 800d576:	69f8      	ldr	r0, [r7, #28]
 800d578:	f7f5 fc22 	bl	8002dc0 <netBufferSetLength>
 800d57c:	4603      	mov	r3, r0
 800d57e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 800d580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d582:	2b00      	cmp	r3, #0
 800d584:	d14c      	bne.n	800d620 <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 800d586:	6a3a      	ldr	r2, [r7, #32]
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d31d      	bcc.n	800d5ce <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800d592:	6a3a      	ldr	r2, [r7, #32]
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	1ad3      	subs	r3, r2, r3
 800d598:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800d59a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	441a      	add	r2, r3
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	6839      	ldr	r1, [r7, #0]
 800d5a4:	69f8      	ldr	r0, [r7, #28]
 800d5a6:	f7f5 fce4 	bl	8002f72 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id, offset / 8,
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	08d8      	lsrs	r0, r3, #3
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	88f9      	ldrh	r1, [r7, #6]
 800d5b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5b4:	9202      	str	r2, [sp, #8]
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	4603      	mov	r3, r0
 800d5be:	460a      	mov	r2, r1
 800d5c0:	68b9      	ldr	r1, [r7, #8]
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7ff fd20 	bl	800d008 <ipv4SendPacket>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d5cc:	e01c      	b.n	800d608 <ipv4FragmentDatagram+0xe8>
            fragment, fragmentOffset, ancillary);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800d5d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d6:	441a      	add	r2, r3
 800d5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	69f8      	ldr	r0, [r7, #28]
 800d5de:	f7f5 fcc8 	bl	8002f72 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
            (offset / 8), fragment, fragmentOffset, ancillary);
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
 800d5e6:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	88f9      	ldrh	r1, [r7, #6]
 800d5ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d5f0:	9202      	str	r2, [sp, #8]
 800d5f2:	9301      	str	r3, [sp, #4]
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	460a      	mov	r2, r1
 800d5fc:	68b9      	ldr	r1, [r7, #8]
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f7ff fd02 	bl	800d008 <ipv4SendPacket>
 800d604:	4603      	mov	r3, r0
 800d606:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 800d608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d10a      	bne.n	800d624 <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 800d60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	4413      	add	r3, r2
 800d614:	62bb      	str	r3, [r7, #40]	; 0x28
 800d616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d618:	6a3b      	ldr	r3, [r7, #32]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d3a9      	bcc.n	800d572 <ipv4FragmentDatagram+0x52>
 800d61e:	e002      	b.n	800d626 <ipv4FragmentDatagram+0x106>
         break;
 800d620:	bf00      	nop
 800d622:	e000      	b.n	800d626 <ipv4FragmentDatagram+0x106>
         break;
 800d624:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 800d626:	69f8      	ldr	r0, [r7, #28]
 800d628:	f7f5 fb96 	bl	8002d58 <netBufferFree>
   //Return status code
   return error;
 800d62c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3730      	adds	r7, #48	; 0x30
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <ipv4ReassembleDatagram>:
 *   the packet
 **/

void ipv4ReassembleDatagram(NetInterface *interface, const Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b08c      	sub	sp, #48	; 0x30
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	60b9      	str	r1, [r7, #8]
 800d640:	607a      	str	r2, [r7, #4]
 800d642:	603b      	str	r3, [r7, #0]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	461a      	mov	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	1a9b      	subs	r3, r3, r2
 800d656:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	88db      	ldrh	r3, [r3, #6]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4618      	mov	r0, r3
 800d660:	f7f3 fd6b 	bl	800113a <swapInt16>
 800d664:	4603      	mov	r3, r0
 800d666:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 800d668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d66a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d005      	beq.n	800d67e <ipv4ReassembleDatagram+0x48>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f003 0307 	and.w	r3, r3, #7
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f040 8170 	bne.w	800d95e <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 800d67e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d684:	b29b      	uxth	r3, r3
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d690:	4413      	add	r3, r2
 800d692:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 f9c9 	bl	800da2e <ipv4SearchFragQueue>
 800d69c:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 815e 	beq.w	800d962 <ipv4ReassembleDatagram+0x32c>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 800d6a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d6a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d132      	bne.n	800d716 <ipv4ReassembleDatagram+0xe0>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	461a      	mov	r2, r3
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	685a      	ldr	r2, [r3, #4]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	689b      	ldr	r3, [r3, #8]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6d0:	d906      	bls.n	800d6e0 <ipv4ReassembleDatagram+0xaa>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	3310      	adds	r3, #16
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7f5 fb71 	bl	8002dc0 <netBufferSetLength>
         //Exit immediately
         return;
 800d6de:	e141      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	69fa      	ldr	r2, [r7, #28]
 800d6e6:	8bd2      	ldrh	r2, [r2, #30]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d906      	bls.n	800d6fa <ipv4ReassembleDatagram+0xc4>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	3310      	adds	r3, #16
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7f5 fb64 	bl	8002dc0 <netBufferSetLength>
         //Exit immediately
         return;
 800d6f8:	e134      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	f103 0010 	add.w	r0, r3, #16
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	68ba      	ldr	r2, [r7, #8]
 800d710:	2100      	movs	r1, #0
 800d712:	f7f5 fdc6 	bl	80032a2 <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 800d716:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d927      	bls.n	800d770 <ipv4ReassembleDatagram+0x13a>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d726:	4413      	add	r3, r2
 800d728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d72c:	d906      	bls.n	800d73c <ipv4ReassembleDatagram+0x106>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	3310      	adds	r3, #16
 800d732:	2100      	movs	r1, #0
 800d734:	4618      	mov	r0, r3
 800d736:	f7f5 fb43 	bl	8002dc0 <netBufferSetLength>
         //Exit immediately
         return;
 800d73a:	e113      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d748:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d74a:	3306      	adds	r3, #6
 800d74c:	4619      	mov	r1, r3
 800d74e:	f7f5 fb37 	bl	8002dc0 <netBufferSetLength>
 800d752:	4603      	mov	r3, r0
 800d754:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 800d756:	8b7b      	ldrh	r3, [r7, #26]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d006      	beq.n	800d76a <ipv4ReassembleDatagram+0x134>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	3310      	adds	r3, #16
 800d760:	2100      	movs	r1, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f7f5 fb2c 	bl	8002dc0 <netBufferSetLength>
         //Exit immediately
         return;
 800d768:	e0fc      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 800d76a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d76c:	69fb      	ldr	r3, [r7, #28]
 800d76e:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	899b      	ldrh	r3, [r3, #12]
 800d774:	4619      	mov	r1, r3
 800d776:	69f8      	ldr	r0, [r7, #28]
 800d778:	f000 fa35 	bl	800dbe6 <ipv4FindHole>
 800d77c:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 800d77e:	2300      	movs	r3, #0
 800d780:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 800d782:	e08b      	b.n	800d89c <ipv4ReassembleDatagram+0x266>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 800d784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d786:	781a      	ldrb	r2, [r3, #0]
 800d788:	785b      	ldrb	r3, [r3, #1]
 800d78a:	021b      	lsls	r3, r3, #8
 800d78c:	4313      	orrs	r3, r2
 800d78e:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	789a      	ldrb	r2, [r3, #2]
 800d794:	78db      	ldrb	r3, [r3, #3]
 800d796:	021b      	lsls	r3, r3, #8
 800d798:	4313      	orrs	r3, r2
 800d79a:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole in
      //some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 800d79c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d79e:	8a3b      	ldrh	r3, [r7, #16]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d269      	bcs.n	800d878 <ipv4ReassembleDatagram+0x242>
 800d7a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d7a6:	8a7b      	ldrh	r3, [r7, #18]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d965      	bls.n	800d878 <ipv4ReassembleDatagram+0x242>
      {
         //The current descriptor is no longer valid. We will destroy it, and
         //in the next two steps, we will determine whether or not it is
         //necessary to create any new hole descriptors
         if(prevHole != NULL)
 800d7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d005      	beq.n	800d7be <ipv4ReassembleDatagram+0x188>
            prevHole->next = hole->next;
 800d7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b4:	889b      	ldrh	r3, [r3, #4]
 800d7b6:	b29a      	uxth	r2, r3
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	809a      	strh	r2, [r3, #4]
 800d7bc:	e004      	b.n	800d7c8 <ipv4ReassembleDatagram+0x192>
         else
            frag->firstHole = hole->next;
 800d7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c0:	889b      	ldrh	r3, [r3, #4]
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 800d7c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7ca:	8a7b      	ldrh	r3, [r7, #18]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d924      	bls.n	800d81a <ipv4ReassembleDatagram+0x1e4>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 800d7d0:	8a7b      	ldrh	r3, [r7, #18]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	69f8      	ldr	r0, [r7, #28]
 800d7d6:	f000 fa06 	bl	800dbe6 <ipv4FindHole>
 800d7da:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	8a7a      	ldrh	r2, [r7, #18]
 800d7e0:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7e6:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <ipv4ReassembleDatagram+0x1ce>
            {
               hole->next = prevHole->next;
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	889b      	ldrh	r3, [r3, #4]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f6:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	b29a      	uxth	r2, r3
 800d7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d800:	809a      	strh	r2, [r3, #4]
 800d802:	e008      	b.n	800d816 <ipv4ReassembleDatagram+0x1e0>
            }
            else
            {
               hole->next = frag->firstHole;
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	899a      	ldrh	r2, [r3, #12]
 800d808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80a:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	881b      	ldrh	r3, [r3, #0]
 800d810:	b29a      	uxth	r2, r3
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d818:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800d81a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d81c:	8a3b      	ldrh	r3, [r7, #16]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d22d      	bcs.n	800d87e <ipv4ReassembleDatagram+0x248>
 800d822:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d028      	beq.n	800d87e <ipv4ReassembleDatagram+0x248>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 800d82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d82e:	4619      	mov	r1, r3
 800d830:	69f8      	ldr	r0, [r7, #28]
 800d832:	f000 f9d8 	bl	800dbe6 <ipv4FindHole>
 800d836:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 800d838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d83c:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 800d83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d840:	8a3a      	ldrh	r2, [r7, #16]
 800d842:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00a      	beq.n	800d860 <ipv4ReassembleDatagram+0x22a>
            {
               hole->next = prevHole->next;
 800d84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84c:	889b      	ldrh	r3, [r3, #4]
 800d84e:	b29a      	uxth	r2, r3
 800d850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d852:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800d854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	b29a      	uxth	r2, r3
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	809a      	strh	r2, [r3, #4]
 800d85e:	e008      	b.n	800d872 <ipv4ReassembleDatagram+0x23c>
            }
            else
            {
               hole->next = frag->firstHole;
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	899a      	ldrh	r2, [r3, #12]
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800d876:	e002      	b.n	800d87e <ipv4ReassembleDatagram+0x248>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 800d878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d87c:	e000      	b.n	800d880 <ipv4ReassembleDatagram+0x24a>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800d87e:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 800d880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d882:	2b00      	cmp	r3, #0
 800d884:	d003      	beq.n	800d88e <ipv4ReassembleDatagram+0x258>
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	889b      	ldrh	r3, [r3, #4]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	e001      	b.n	800d892 <ipv4ReassembleDatagram+0x25c>
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	899b      	ldrh	r3, [r3, #12]
 800d892:	4619      	mov	r1, r3
 800d894:	69f8      	ldr	r0, [r7, #28]
 800d896:	f000 f9a6 	bl	800dbe6 <ipv4FindHole>
 800d89a:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f47f af70 	bne.w	800d784 <ipv4ReassembleDatagram+0x14e>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 800d8ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8b0:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	441a      	add	r2, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f7f5 fcec 	bl	80032a2 <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 800d8ca:	69f8      	ldr	r0, [r7, #28]
 800d8cc:	f000 f9a0 	bl	800dc10 <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now
   //complete
   if(!ipv4FindHole(frag, frag->firstHole))
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	899b      	ldrh	r3, [r3, #12]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	69f8      	ldr	r0, [r7, #28]
 800d8d8:	f000 f985 	bl	800dbe6 <ipv4FindHole>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d140      	bne.n	800d964 <ipv4ReassembleDatagram+0x32e>
   {
      //Discard the extra hole descriptor that follows the reconstructed
      //datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	685a      	ldr	r2, [r3, #4]
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d8f0:	4413      	add	r3, r2
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	f7f5 fa64 	bl	8002dc0 <netBufferSetLength>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 800d8fc:	8b7b      	ldrh	r3, [r7, #26]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d126      	bne.n	800d950 <ipv4ReassembleDatagram+0x31a>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	3310      	adds	r3, #16
 800d906:	2100      	movs	r1, #0
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f5 faff 	bl	8002f0c <netBufferAt>
 800d90e:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	b29a      	uxth	r2, r3
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4413      	add	r3, r2
 800d91e:	b29b      	uxth	r3, r3
 800d920:	4618      	mov	r0, r3
 800d922:	f7f3 fc0a 	bl	800113a <swapInt16>
 800d926:	4603      	mov	r3, r0
 800d928:	461a      	mov	r2, r3
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2200      	movs	r2, #0
 800d932:	719a      	strb	r2, [r3, #6]
 800d934:	2200      	movs	r2, #0
 800d936:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	2200      	movs	r2, #0
 800d93c:	729a      	strb	r2, [r3, #10]
 800d93e:	2200      	movs	r2, #0
 800d940:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer, ancillary);
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	3310      	adds	r3, #16
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	4619      	mov	r1, r3
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f7ff fa77 	bl	800ce3e <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	3310      	adds	r3, #16
 800d954:	2100      	movs	r1, #0
 800d956:	4618      	mov	r0, r3
 800d958:	f7f5 fa32 	bl	8002dc0 <netBufferSetLength>
 800d95c:	e002      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      return;
 800d95e:	bf00      	nop
 800d960:	e000      	b.n	800d964 <ipv4ReassembleDatagram+0x32e>
      return;
 800d962:	bf00      	nop
   }
}
 800d964:	3730      	adds	r7, #48	; 0x30
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b08a      	sub	sp, #40	; 0x28
 800d96e:	af02      	add	r7, sp, #8
 800d970:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 800d972:	f7f3 fd7d 	bl	8001470 <osGetSystemTime>
 800d976:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800d978:	2300      	movs	r3, #0
 800d97a:	61fb      	str	r3, [r7, #28]
 800d97c:	e04f      	b.n	800da1e <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 800d97e:	69fa      	ldr	r2, [r7, #28]
 800d980:	4613      	mov	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	011b      	lsls	r3, r3, #4
 800d988:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	4413      	add	r3, r2
 800d990:	3308      	adds	r3, #8
 800d992:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d03d      	beq.n	800da18 <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	f643 2297 	movw	r2, #14999	; 0x3a97
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d935      	bls.n	800da18 <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff fdab 	bl	800d50c <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	899b      	ldrh	r3, [r3, #12]
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6978      	ldr	r0, [r7, #20]
 800d9be:	f000 f912 	bl	800dbe6 <ipv4FindHole>
 800d9c2:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received before sending an
            //ICMP message
            if(hole != NULL && hole->first > 0)
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d020      	beq.n	800da0c <ipv4FragTick+0xa2>
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01b      	beq.n	800da0c <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	8812      	ldrh	r2, [r2, #0]
 800d9e2:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800d9e4:	4413      	add	r3, r2
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f7f5 f9ea 	bl	8002dc0 <netBufferSetLength>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 800d9f0:	89fb      	ldrh	r3, [r7, #14]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d10a      	bne.n	800da0c <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	9201      	str	r2, [sp, #4]
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	2300      	movs	r3, #0
 800da02:	2201      	movs	r2, #1
 800da04:	210b      	movs	r1, #11
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7fe fef0 	bl	800c7ec <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	3310      	adds	r3, #16
 800da10:	2100      	movs	r1, #0
 800da12:	4618      	mov	r0, r3
 800da14:	f7f5 f9d4 	bl	8002dc0 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	3301      	adds	r3, #1
 800da1c:	61fb      	str	r3, [r7, #28]
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	2b03      	cmp	r3, #3
 800da22:	d9ac      	bls.n	800d97e <ipv4FragTick+0x14>
         }
      }
   }
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	3720      	adds	r7, #32
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b088      	sub	sp, #32
 800da32:	af00      	add	r7, sp, #0
 800da34:	6078      	str	r0, [r7, #4]
 800da36:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800da38:	2300      	movs	r3, #0
 800da3a:	61fb      	str	r3, [r7, #28]
 800da3c:	e03b      	b.n	800dab6 <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 800da3e:	69fa      	ldr	r2, [r7, #28]
 800da40:	4613      	mov	r3, r2
 800da42:	009b      	lsls	r3, r3, #2
 800da44:	4413      	add	r3, r2
 800da46:	011b      	lsls	r3, r3, #4
 800da48:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	4413      	add	r3, r2
 800da50:	3308      	adds	r3, #8
 800da52:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	691b      	ldr	r3, [r3, #16]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d029      	beq.n	800dab0 <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	3310      	adds	r3, #16
 800da60:	2100      	movs	r1, #0
 800da62:	4618      	mov	r0, r3
 800da64:	f7f5 fa52 	bl	8002f0c <netBufferAt>
 800da68:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68da      	ldr	r2, [r3, #12]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	429a      	cmp	r2, r3
 800da74:	d115      	bne.n	800daa2 <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	691a      	ldr	r2, [r3, #16]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d111      	bne.n	800daa6 <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	889b      	ldrh	r3, [r3, #4]
 800da86:	b29a      	uxth	r2, r3
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	889b      	ldrh	r3, [r3, #4]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	429a      	cmp	r2, r3
 800da90:	d10b      	bne.n	800daaa <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	7a5a      	ldrb	r2, [r3, #9]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	7a5b      	ldrb	r3, [r3, #9]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d107      	bne.n	800daae <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	e07d      	b.n	800db9e <ipv4SearchFragQueue+0x170>
            continue;
 800daa2:	bf00      	nop
 800daa4:	e004      	b.n	800dab0 <ipv4SearchFragQueue+0x82>
            continue;
 800daa6:	bf00      	nop
 800daa8:	e002      	b.n	800dab0 <ipv4SearchFragQueue+0x82>
            continue;
 800daaa:	bf00      	nop
 800daac:	e000      	b.n	800dab0 <ipv4SearchFragQueue+0x82>
            continue;
 800daae:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	3301      	adds	r3, #1
 800dab4:	61fb      	str	r3, [r7, #28]
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d9c0      	bls.n	800da3e <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry in the reassembly
   //queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800dabc:	2300      	movs	r3, #0
 800dabe:	61fb      	str	r3, [r7, #28]
 800dac0:	e069      	b.n	800db96 <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 800dac2:	69fa      	ldr	r2, [r7, #28]
 800dac4:	4613      	mov	r3, r2
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	4413      	add	r3, r2
 800daca:	011b      	lsls	r3, r3, #4
 800dacc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	4413      	add	r3, r2
 800dad4:	3308      	adds	r3, #8
 800dad6:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d157      	bne.n	800db90 <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	2207      	movs	r2, #7
 800dae4:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	3310      	adds	r3, #16
 800daea:	f240 6106 	movw	r1, #1542	; 0x606
 800daee:	4618      	mov	r0, r3
 800daf0:	f7f5 f966 	bl	8002dc0 <netBufferSetLength>
 800daf4:	4603      	mov	r3, r0
 800daf6:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 800daf8:	8afb      	ldrh	r3, [r7, #22]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d007      	beq.n	800db0e <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	3310      	adds	r3, #16
 800db02:	2100      	movs	r1, #0
 800db04:	4618      	mov	r0, r3
 800db06:	f7f5 f95b 	bl	8002dc0 <netBufferSetLength>
            //Exit immediately
            return NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	e047      	b.n	800db9e <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	781b      	ldrb	r3, [r3, #0]
 800db12:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800db16:	b2db      	uxtb	r3, r3
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	461a      	mov	r2, r3
 800db1c:	69bb      	ldr	r3, [r7, #24]
 800db1e:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	2200      	movs	r2, #0
 800db24:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	f103 0010 	add.w	r0, r3, #16
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	2100      	movs	r1, #0
 800db3e:	f7f5 fbb0 	bl	80032a2 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 800db42:	f7f3 fc95 	bl	8001470 <osGetSystemTime>
 800db46:	4602      	mov	r2, r0
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2200      	movs	r2, #0
 800db50:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	899b      	ldrh	r3, [r3, #12]
 800db56:	4619      	mov	r1, r3
 800db58:	69b8      	ldr	r0, [r7, #24]
 800db5a:	f000 f844 	bl	800dbe6 <ipv4FindHole>
 800db5e:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	2200      	movs	r2, #0
 800db64:	701a      	strb	r2, [r3, #0]
 800db66:	2200      	movs	r2, #0
 800db68:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db70:	709a      	strb	r2, [r3, #2]
 800db72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db76:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db7e:	711a      	strb	r2, [r3, #4]
 800db80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db84:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 800db86:	69b8      	ldr	r0, [r7, #24]
 800db88:	f000 f842 	bl	800dc10 <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 800db8c:	69bb      	ldr	r3, [r7, #24]
 800db8e:	e006      	b.n	800db9e <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	3301      	adds	r3, #1
 800db94:	61fb      	str	r3, [r7, #28]
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d992      	bls.n	800dac2 <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3720      	adds	r7, #32
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60fb      	str	r3, [r7, #12]
 800dbb2:	e010      	b.n	800dbd6 <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	011b      	lsls	r3, r3, #4
 800dbbe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7f5 f8f8 	bl	8002dc0 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	60fb      	str	r3, [r7, #12]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b03      	cmp	r3, #3
 800dbda:	d9eb      	bls.n	800dbb4 <ipv4FlushFragQueue+0xe>
   }
}
 800dbdc:	bf00      	nop
 800dbde:	bf00      	nop
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the specified
 *   offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b082      	sub	sp, #8
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f103 0010 	add.w	r0, r3, #16
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	887b      	ldrh	r3, [r7, #2]
 800dbfe:	4413      	add	r3, r2
 800dc00:	4619      	mov	r1, r3
 800dc02:	f7f5 f983 	bl	8002f0c <netBufferAt>
 800dc06:	4603      	mov	r3, r0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 800dc18:	bf00      	nop
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <ipv4AddRouterAlertOption>:
 * @param[in,out] offset Offset to the first payload byte
 * @return Error code
 **/

error_t ipv4AddRouterAlertOption(NetBuffer *buffer, size_t *offset)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
   error_t error;
   Ipv4Option *option;

   //Make sure there is enough room to add the option
   if(*offset >= sizeof(uint32_t))
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	d91a      	bls.n	800dc6c <ipv4AddRouterAlertOption+0x48>
   {
      //Make room for the IPv4 option
      *offset -= sizeof(uint32_t);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	1f1a      	subs	r2, r3, #4
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	601a      	str	r2, [r3, #0]
      //Point to the IPv4 option
      option = netBufferAt(buffer, *offset);
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7f5 f960 	bl	8002f0c <netBufferAt>
 800dc4c:	60b8      	str	r0, [r7, #8]

      //Format Router Alert option
      option->type = IPV4_OPTION_RTRALT;
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2294      	movs	r2, #148	; 0x94
 800dc52:	701a      	strb	r2, [r3, #0]
      option->length = sizeof(uint32_t);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2204      	movs	r2, #4
 800dc58:	705a      	strb	r2, [r3, #1]
      option->value[0] = 0;
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	709a      	strb	r2, [r3, #2]
      option->value[1] = 0;
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	2200      	movs	r2, #0
 800dc64:	70da      	strb	r2, [r3, #3]

      //Successful processing
      error = NO_ERROR;
 800dc66:	2300      	movs	r3, #0
 800dc68:	81fb      	strh	r3, [r7, #14]
 800dc6a:	e001      	b.n	800dc70 <ipv4AddRouterAlertOption+0x4c>
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800dc70:	89fb      	ldrh	r3, [r7, #14]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
 800dc82:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f9dc 	bl	800e044 <ipv4IsBroadcastAddr>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d104      	bne.n	800dc9c <ipv4CheckSourceAddr+0x22>
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc98:	2be0      	cmp	r3, #224	; 0xe0
 800dc9a:	d101      	bne.n	800dca0 <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 800dc9c:	23e4      	movs	r3, #228	; 0xe4
 800dc9e:	e000      	b.n	800dca2 <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800dcaa:	b580      	push	{r7, lr}
 800dcac:	b086      	sub	sp, #24
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 800dcb4:	23e4      	movs	r3, #228	; 0xe4
 800dcb6:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f9c2 	bl	800e044 <ipv4IsBroadcastAddr>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	82fb      	strh	r3, [r7, #22]
 800dcca:	e045      	b.n	800dd58 <ipv4CheckDestAddr+0xae>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcd2:	2be0      	cmp	r3, #224	; 0xe0
 800dcd4:	d120      	bne.n	800dd18 <ipv4CheckDestAddr+0x6e>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	613b      	str	r3, [r7, #16]
 800dcda:	e019      	b.n	800dd10 <ipv4CheckDestAddr+0x66>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	4613      	mov	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	4413      	add	r3, r2
 800dce4:	009b      	lsls	r3, r3, #2
 800dce6:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	4413      	add	r3, r2
 800dcee:	3308      	adds	r3, #8
 800dcf0:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d007      	beq.n	800dd0a <ipv4CheckDestAddr+0x60>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d102      	bne.n	800dd0a <ipv4CheckDestAddr+0x60>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 800dd04:	2300      	movs	r3, #0
 800dd06:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 800dd08:	e026      	b.n	800dd58 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	613b      	str	r3, [r7, #16]
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	2b03      	cmp	r3, #3
 800dd14:	d9e2      	bls.n	800dcdc <ipv4CheckDestAddr+0x32>
 800dd16:	e01f      	b.n	800dd58 <ipv4CheckDestAddr+0xae>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	613b      	str	r3, [r7, #16]
 800dd1c:	e019      	b.n	800dd52 <ipv4CheckDestAddr+0xa8>
      {
         Ipv4AddrEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 800dd1e:	693a      	ldr	r2, [r7, #16]
 800dd20:	4613      	mov	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	4413      	add	r3, r2
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	4413      	add	r3, r2
 800dd30:	3304      	adds	r3, #4
 800dd32:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	791b      	ldrb	r3, [r3, #4]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d007      	beq.n	800dd4c <ipv4CheckDestAddr+0xa2>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	683a      	ldr	r2, [r7, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d102      	bne.n	800dd4c <ipv4CheckDestAddr+0xa2>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 800dd46:	2300      	movs	r3, #0
 800dd48:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 800dd4a:	e005      	b.n	800dd58 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d0e2      	beq.n	800dd1e <ipv4CheckDestAddr+0x74>
         }
      }
   }

   //Return status code
   return error;
 800dd58:	8afb      	ldrh	r3, [r7, #22]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
	...

0800dd64 <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 800dd64:	b590      	push	{r4, r7, lr}
 800dd66:	b08d      	sub	sp, #52	; 0x34
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 800dd74:	2300      	movs	r3, #0
 800dd76:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800dd78:	2300      	movs	r3, #0
 800dd7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd7c:	e0e2      	b.n	800df44 <ipv4SelectSourceAddr+0x1e0>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 800dd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd80:	f240 628c 	movw	r2, #1676	; 0x68c
 800dd84:	fb02 f303 	mul.w	r3, r2, r3
 800dd88:	33e0      	adds	r3, #224	; 0xe0
 800dd8a:	4a7b      	ldr	r2, [pc, #492]	; (800df78 <ipv4SelectSourceAddr+0x214>)
 800dd8c:	4413      	add	r3, r2
 800dd8e:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	69ba      	ldr	r2, [r7, #24]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d004      	beq.n	800dda4 <ipv4SelectSourceAddr+0x40>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	f040 80cc 	bne.w	800df3c <ipv4SelectSourceAddr+0x1d8>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 800dda4:	2300      	movs	r3, #0
 800dda6:	627b      	str	r3, [r7, #36]	; 0x24
 800dda8:	e0c3      	b.n	800df32 <ipv4SelectSourceAddr+0x1ce>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 800ddaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddac:	4613      	mov	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800ddb8:	69ba      	ldr	r2, [r7, #24]
 800ddba:	4413      	add	r3, r2
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	791b      	ldrb	r3, [r3, #4]
 800ddc4:	2b02      	cmp	r3, #2
 800ddc6:	f040 80b1 	bne.w	800df2c <ipv4SelectSourceAddr+0x1c8>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d104      	bne.n	800ddda <ipv4SelectSourceAddr+0x76>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800ddd0:	69bb      	ldr	r3, [r7, #24]
 800ddd2:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800ddd8:	e0a8      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	f000 8098 	beq.w	800df16 <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	68ba      	ldr	r2, [r7, #8]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d104      	bne.n	800ddfa <ipv4SelectSourceAddr+0x96>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800ddf0:	69bb      	ldr	r3, [r7, #24]
 800ddf2:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800ddf8:	e098      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 800ddfa:	69fb      	ldr	r3, [r7, #28]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	429a      	cmp	r2, r3
 800de02:	f000 808a 	beq.w	800df1a <ipv4SelectSourceAddr+0x1b6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d104      	bne.n	800de1a <ipv4SelectSourceAddr+0xb6>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800de10:	69bb      	ldr	r3, [r7, #24]
 800de12:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800de18:	e088      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 f9ca 	bl	800e1b8 <ipv4GetAddrScope>
 800de24:	4604      	mov	r4, r0
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 f9c4 	bl	800e1b8 <ipv4GetAddrScope>
 800de30:	4603      	mov	r3, r0
 800de32:	429c      	cmp	r4, r3
 800de34:	d210      	bcs.n	800de58 <ipv4SelectSourceAddr+0xf4>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 f9bc 	bl	800e1b8 <ipv4GetAddrScope>
 800de40:	4604      	mov	r4, r0
 800de42:	68b8      	ldr	r0, [r7, #8]
 800de44:	f000 f9b8 	bl	800e1b8 <ipv4GetAddrScope>
 800de48:	4603      	mov	r3, r0
 800de4a:	429c      	cmp	r4, r3
 800de4c:	d367      	bcc.n	800df1e <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800de4e:	69bb      	ldr	r3, [r7, #24]
 800de50:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800de56:	e062      	b.n	800df1e <ipv4SelectSourceAddr+0x1ba>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 f9ab 	bl	800e1b8 <ipv4GetAddrScope>
 800de62:	4604      	mov	r4, r0
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f000 f9a5 	bl	800e1b8 <ipv4GetAddrScope>
 800de6e:	4603      	mov	r3, r0
 800de70:	429c      	cmp	r4, r3
 800de72:	d210      	bcs.n	800de96 <ipv4SelectSourceAddr+0x132>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 f99d 	bl	800e1b8 <ipv4GetAddrScope>
 800de7e:	4604      	mov	r4, r0
 800de80:	68b8      	ldr	r0, [r7, #8]
 800de82:	f000 f999 	bl	800e1b8 <ipv4GetAddrScope>
 800de86:	4603      	mov	r3, r0
 800de88:	429c      	cmp	r4, r3
 800de8a:	d24a      	bcs.n	800df22 <ipv4SelectSourceAddr+0x1be>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800de94:	e045      	b.n	800df22 <ipv4SelectSourceAddr+0x1be>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	405a      	eors	r2, r3
 800de9e:	69fb      	ldr	r3, [r7, #28]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	4013      	ands	r3, r2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d11b      	bne.n	800dee0 <ipv4SelectSourceAddr+0x17c>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	405a      	eors	r2, r3
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	68db      	ldr	r3, [r3, #12]
 800deb4:	4013      	ands	r3, r2
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d135      	bne.n	800df26 <ipv4SelectSourceAddr+0x1c2>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 f9ae 	bl	800e220 <ipv4GetPrefixLength>
 800dec4:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f9a8 	bl	800e220 <ipv4GetPrefixLength>
 800ded0:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d927      	bls.n	800df26 <ipv4SelectSourceAddr+0x1c2>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 800dede:	e022      	b.n	800df26 <ipv4SelectSourceAddr+0x1c2>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	405a      	eors	r2, r3
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	4013      	ands	r3, r2
 800deee:	2b00      	cmp	r3, #0
 800def0:	d104      	bne.n	800defc <ipv4SelectSourceAddr+0x198>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 800defa:	e017      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d112      	bne.n	800df2a <ipv4SelectSourceAddr+0x1c6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d00f      	beq.n	800df2c <ipv4SelectSourceAddr+0x1c8>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800df14:	e00a      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df16:	bf00      	nop
 800df18:	e008      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df1a:	bf00      	nop
 800df1c:	e006      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df1e:	bf00      	nop
 800df20:	e004      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df22:	bf00      	nop
 800df24:	e002      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df26:	bf00      	nop
 800df28:	e000      	b.n	800df2c <ipv4SelectSourceAddr+0x1c8>
               continue;
 800df2a:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	3301      	adds	r3, #1
 800df30:	627b      	str	r3, [r7, #36]	; 0x24
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2b00      	cmp	r3, #0
 800df36:	f43f af38 	beq.w	800ddaa <ipv4SelectSourceAddr+0x46>
 800df3a:	e000      	b.n	800df3e <ipv4SelectSourceAddr+0x1da>
         continue;
 800df3c:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	3301      	adds	r3, #1
 800df42:	62bb      	str	r3, [r7, #40]	; 0x28
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	f43f af19 	beq.w	800dd7e <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <ipv4SelectSourceAddr+0x202>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6a3a      	ldr	r2, [r7, #32]
 800df56:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	681a      	ldr	r2, [r3, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 800df60:	2300      	movs	r3, #0
 800df62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800df64:	e002      	b.n	800df6c <ipv4SelectSourceAddr+0x208>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 800df66:	f240 13f7 	movw	r3, #503	; 0x1f7
 800df6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 800df6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3734      	adds	r7, #52	; 0x34
 800df72:	46bd      	mov	sp, r7
 800df74:	bd90      	pop	{r4, r7, pc}
 800df76:	bf00      	nop
 800df78:	20009178 	.word	0x20009178

0800df7c <ipv4SelectDefaultGateway>:
 * @return Error code
 **/

error_t ipv4SelectDefaultGateway(NetInterface *interface, Ipv4Addr srcAddr,
   Ipv4Addr *defaultGatewayAddr)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b087      	sub	sp, #28
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of default gateways
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]
 800df8c:	e020      	b.n	800dfd0 <ipv4SelectDefaultGateway+0x54>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800df8e:	697a      	ldr	r2, [r7, #20]
 800df90:	4613      	mov	r3, r2
 800df92:	009b      	lsls	r3, r3, #2
 800df94:	4413      	add	r3, r2
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	4413      	add	r3, r2
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	613b      	str	r3, [r7, #16]

      //Check whether the gateway address is valid
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	791b      	ldrb	r3, [r3, #4]
 800dfa8:	2b02      	cmp	r3, #2
 800dfaa:	d10e      	bne.n	800dfca <ipv4SelectDefaultGateway+0x4e>
         entry->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	691b      	ldr	r3, [r3, #16]
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00a      	beq.n	800dfca <ipv4SelectDefaultGateway+0x4e>
      {
         //Under the strong ES model, the source address is included as a
         //parameter in order to select a gateway that is directly reachable
         //on the corresponding physical interface (refer to RFC 1122,
         //section 3.3.4.2)
         if(entry->addr == srcAddr)
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d105      	bne.n	800dfca <ipv4SelectDefaultGateway+0x4e>
         {
            //Return the IPv4 address of the default gateway
            *defaultGatewayAddr = entry->defaultGateway;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	691a      	ldr	r2, [r3, #16]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	601a      	str	r2, [r3, #0]
            //Successful default gateway selection
            return NO_ERROR;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e007      	b.n	800dfda <ipv4SelectDefaultGateway+0x5e>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	617b      	str	r3, [r7, #20]
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d0db      	beq.n	800df8e <ipv4SelectDefaultGateway+0x12>
         }
      }
   }

   //No default gateway found
   return ERROR_NO_ROUTE;
 800dfd6:	f44f 7302 	mov.w	r3, #520	; 0x208
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	371c      	adds	r7, #28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <ipv4IsOnLink>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is on-link, else FALSE
 **/

bool_t ipv4IsOnLink(NetInterface *interface, Ipv4Addr ipAddr)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b085      	sub	sp, #20
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800dff0:	2300      	movs	r3, #0
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	e01c      	b.n	800e030 <ipv4IsOnLink+0x4a>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	4613      	mov	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	4413      	add	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	4413      	add	r3, r2
 800e008:	3304      	adds	r3, #4
 800e00a:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	791b      	ldrb	r3, [r3, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00a      	beq.n	800e02a <ipv4IsOnLink+0x44>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	405a      	eors	r2, r3
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	4013      	ands	r3, r2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d101      	bne.n	800e02a <ipv4IsOnLink+0x44>
         {
            //The specified IPv4 address is on-link
            return TRUE;
 800e026:	2301      	movs	r3, #1
 800e028:	e006      	b.n	800e038 <ipv4IsOnLink+0x52>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3301      	adds	r3, #1
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d0df      	beq.n	800dff6 <ipv4IsOnLink+0x10>
         }
      }
   }

   //The specified IPv4 address is off-link
   return FALSE;
 800e036:	2300      	movs	r3, #0
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e054:	d101      	bne.n	800e05a <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 800e056:	2301      	movs	r3, #1
 800e058:	e02f      	b.n	800e0ba <ipv4IsBroadcastAddr+0x76>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800e05a:	2300      	movs	r3, #0
 800e05c:	60fb      	str	r3, [r7, #12]
 800e05e:	e028      	b.n	800e0b2 <ipv4IsBroadcastAddr+0x6e>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	4613      	mov	r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	4413      	add	r3, r2
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	4413      	add	r3, r2
 800e072:	3304      	adds	r3, #4
 800e074:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	791b      	ldrb	r3, [r3, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d016      	beq.n	800e0ac <ipv4IsBroadcastAddr+0x68>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	405a      	eors	r2, r3
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	68db      	ldr	r3, [r3, #12]
 800e08a:	4013      	ands	r3, r2
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10d      	bne.n	800e0ac <ipv4IsBroadcastAddr+0x68>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	68db      	ldr	r3, [r3, #12]
 800e094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e098:	d008      	beq.n	800e0ac <ipv4IsBroadcastAddr+0x68>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	68da      	ldr	r2, [r3, #12]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0a6:	d101      	bne.n	800e0ac <ipv4IsBroadcastAddr+0x68>
               {
                  return TRUE;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e006      	b.n	800e0ba <ipv4IsBroadcastAddr+0x76>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	60fb      	str	r3, [r7, #12]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d0d3      	beq.n	800e060 <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 800e0b8:	2300      	movs	r3, #0
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	60fb      	str	r3, [r7, #12]
 800e0d4:	e018      	b.n	800e108 <ipv4IsTentativeAddr+0x42>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	4413      	add	r3, r2
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	791b      	ldrb	r3, [r3, #4]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d106      	bne.n	800e102 <ipv4IsTentativeAddr+0x3c>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d101      	bne.n	800e102 <ipv4IsTentativeAddr+0x3c>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 800e0fe:	2301      	movs	r3, #1
 800e100:	e006      	b.n	800e110 <ipv4IsTentativeAddr+0x4a>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	60fb      	str	r3, [r7, #12]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0e3      	beq.n	800e0d6 <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 800e10e:	2300      	movs	r3, #0
}
 800e110:	4618      	mov	r0, r3
 800e112:	3714      	adds	r7, #20
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b089      	sub	sp, #36	; 0x24
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 800e124:	2300      	movs	r3, #0
 800e126:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b7f      	cmp	r3, #127	; 0x7f
 800e12e:	d102      	bne.n	800e136 <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 800e130:	2301      	movs	r3, #1
 800e132:	617b      	str	r3, [r7, #20]
 800e134:	e036      	b.n	800e1a4 <ipv4IsLocalHostAddr+0x88>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800e136:	2300      	movs	r3, #0
 800e138:	61fb      	str	r3, [r7, #28]
 800e13a:	e02d      	b.n	800e198 <ipv4IsLocalHostAddr+0x7c>
      {
         //Point to the current interface
         interface = &netInterface[i];
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	f240 628c 	movw	r2, #1676	; 0x68c
 800e142:	fb02 f303 	mul.w	r3, r2, r3
 800e146:	33e0      	adds	r3, #224	; 0xe0
 800e148:	4a1a      	ldr	r2, [pc, #104]	; (800e1b4 <ipv4IsLocalHostAddr+0x98>)
 800e14a:	4413      	add	r3, r2
 800e14c:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 800e14e:	2300      	movs	r3, #0
 800e150:	61bb      	str	r3, [r7, #24]
 800e152:	e018      	b.n	800e186 <ipv4IsLocalHostAddr+0x6a>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 800e154:	69ba      	ldr	r2, [r7, #24]
 800e156:	4613      	mov	r3, r2
 800e158:	009b      	lsls	r3, r3, #2
 800e15a:	4413      	add	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	4413      	add	r3, r2
 800e166:	3304      	adds	r3, #4
 800e168:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	791b      	ldrb	r3, [r3, #4]
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d106      	bne.n	800e180 <ipv4IsLocalHostAddr+0x64>
               entry->addr == ipAddr)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d101      	bne.n	800e180 <ipv4IsLocalHostAddr+0x64>
            {
               flag = TRUE;
 800e17c:	2301      	movs	r3, #1
 800e17e:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	3301      	adds	r3, #1
 800e184:	61bb      	str	r3, [r7, #24]
 800e186:	69bb      	ldr	r3, [r7, #24]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <ipv4IsLocalHostAddr+0x76>
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d0e0      	beq.n	800e154 <ipv4IsLocalHostAddr+0x38>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	3301      	adds	r3, #1
 800e196:	61fb      	str	r3, [r7, #28]
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d102      	bne.n	800e1a4 <ipv4IsLocalHostAddr+0x88>
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d0cb      	beq.n	800e13c <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 800e1a4:	697b      	ldr	r3, [r7, #20]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3724      	adds	r7, #36	; 0x24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20009178 	.word	0x20009178

0800e1b8 <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1c6:	d102      	bne.n	800e1ce <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	60fb      	str	r3, [r7, #12]
 800e1cc:	e021      	b.n	800e212 <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1d4:	2be0      	cmp	r3, #224	; 0xe0
 800e1d6:	d10a      	bne.n	800e1ee <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e1de:	2be0      	cmp	r3, #224	; 0xe0
 800e1e0:	d102      	bne.n	800e1e8 <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	60fb      	str	r3, [r7, #12]
 800e1e6:	e014      	b.n	800e212 <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	e011      	b.n	800e212 <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	2b7f      	cmp	r3, #127	; 0x7f
 800e1f4:	d102      	bne.n	800e1fc <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	60fb      	str	r3, [r7, #12]
 800e1fa:	e00a      	b.n	800e212 <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e204:	4293      	cmp	r3, r2
 800e206:	d102      	bne.n	800e20e <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800e208:	2302      	movs	r3, #2
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	e001      	b.n	800e212 <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800e20e:	2303      	movs	r3, #3
 800e210:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 800e212:	68fb      	ldr	r3, [r7, #12]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7f2 ff94 	bl	8001156 <swapInt32>
 800e22e:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 800e230:	2300      	movs	r3, #0
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	e00a      	b.n	800e24c <ipv4GetPrefixLength+0x2c>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 800e236:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	40da      	lsrs	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	4013      	ands	r3, r2
 800e242:	2b00      	cmp	r3, #0
 800e244:	d006      	beq.n	800e254 <ipv4GetPrefixLength+0x34>
   for(i = 0; i < 32; i++)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	3301      	adds	r3, #1
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2b1f      	cmp	r3, #31
 800e250:	d9f1      	bls.n	800e236 <ipv4GetPrefixLength+0x16>
 800e252:	e000      	b.n	800e256 <ipv4GetPrefixLength+0x36>
         break;
 800e254:	bf00      	nop
   }

   //Return prefix length
   return i;
 800e256:	68fb      	ldr	r3, [r7, #12]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <ipv4MapMulticastAddrToMac>:
 * @param[out] macAddr Corresponding MAC-layer multicast address
 * @return Error code
 **/

error_t ipv4MapMulticastAddrToMac(Ipv4Addr ipAddr, MacAddr *macAddr)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
   uint8_t *p;

   //Ensure the specified IPv4 address is a valid host group address
   if(!ipv4IsMulticastAddr(ipAddr))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e270:	2be0      	cmp	r3, #224	; 0xe0
 800e272:	d001      	beq.n	800e278 <ipv4MapMulticastAddrToMac+0x18>
      return ERROR_INVALID_ADDRESS;
 800e274:	23e4      	movs	r3, #228	; 0xe4
 800e276:	e01b      	b.n	800e2b0 <ipv4MapMulticastAddrToMac+0x50>

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 800e278:	1d3b      	adds	r3, r7, #4
 800e27a:	60fb      	str	r3, [r7, #12]

   //An IP host group address is mapped to an Ethernet multicast address
   //by placing the low-order 23-bits of the IP address into the low-order
   //23 bits of the Ethernet multicast address 01-00-5E-00-00-00
   macAddr->b[0] = 0x01;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2201      	movs	r2, #1
 800e280:	701a      	strb	r2, [r3, #0]
   macAddr->b[1] = 0x00;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	2200      	movs	r2, #0
 800e286:	705a      	strb	r2, [r3, #1]
   macAddr->b[2] = 0x5E;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	225e      	movs	r2, #94	; 0x5e
 800e28c:	709a      	strb	r2, [r3, #2]
   macAddr->b[3] = p[1] & 0x7F;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3301      	adds	r3, #1
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	70da      	strb	r2, [r3, #3]
   macAddr->b[4] = p[2];
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	789a      	ldrb	r2, [r3, #2]
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	711a      	strb	r2, [r3, #4]
   macAddr->b[5] = p[3];
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	78da      	ldrb	r2, [r3, #3]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	715a      	strb	r2, [r3, #5]

   //The specified host group address was successfully
   //mapped to a MAC-layer address
   return NO_ERROR;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3714      	adds	r7, #20
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800e2c8:	68b9      	ldr	r1, [r7, #8]
 800e2ca:	68f8      	ldr	r0, [r7, #12]
 800e2cc:	f7ff feba 	bl	800e044 <ipv4IsBroadcastAddr>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 800e2d4:	bf00      	nop
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800e2e8:	68b9      	ldr	r1, [r7, #8]
 800e2ea:	68f8      	ldr	r0, [r7, #12]
 800e2ec:	f7ff feaa 	bl	800e044 <ipv4IsBroadcastAddr>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 800e2f4:	bf00      	nop
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 800e308:	887b      	ldrh	r3, [r7, #2]
 800e30a:	3bd1      	subs	r3, #209	; 0xd1
 800e30c:	2b1b      	cmp	r3, #27
 800e30e:	d83b      	bhi.n	800e388 <ipv4UpdateErrorStats+0x8c>
 800e310:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <ipv4UpdateErrorStats+0x1c>)
 800e312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e316:	bf00      	nop
 800e318:	0800e389 	.word	0x0800e389
 800e31c:	0800e389 	.word	0x0800e389
 800e320:	0800e389 	.word	0x0800e389
 800e324:	0800e389 	.word	0x0800e389
 800e328:	0800e389 	.word	0x0800e389
 800e32c:	0800e389 	.word	0x0800e389
 800e330:	0800e389 	.word	0x0800e389
 800e334:	0800e389 	.word	0x0800e389
 800e338:	0800e389 	.word	0x0800e389
 800e33c:	0800e389 	.word	0x0800e389
 800e340:	0800e389 	.word	0x0800e389
 800e344:	0800e389 	.word	0x0800e389
 800e348:	0800e389 	.word	0x0800e389
 800e34c:	0800e389 	.word	0x0800e389
 800e350:	0800e389 	.word	0x0800e389
 800e354:	0800e389 	.word	0x0800e389
 800e358:	0800e389 	.word	0x0800e389
 800e35c:	0800e389 	.word	0x0800e389
 800e360:	0800e389 	.word	0x0800e389
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e389 	.word	0x0800e389
 800e36c:	0800e389 	.word	0x0800e389
 800e370:	0800e389 	.word	0x0800e389
 800e374:	0800e389 	.word	0x0800e389
 800e378:	0800e389 	.word	0x0800e389
 800e37c:	0800e389 	.word	0x0800e389
 800e380:	0800e389 	.word	0x0800e389
 800e384:	0800e389 	.word	0x0800e389
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 800e388:	bf00      	nop
   }
}
 800e38a:	bf00      	nop
 800e38c:	370c      	adds	r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop

0800e398 <llmnrResponderInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t llmnrResponderInit(NetInterface *interface)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Join the LLMNR IPv4 multicast group
   error = ipv4JoinMulticastGroup(interface, LLMNR_IPV4_MULTICAST_ADDR);
 800e3a0:	490e      	ldr	r1, [pc, #56]	; (800e3dc <llmnrResponderInit+0x44>)
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f7fe ffa6 	bl	800d2f4 <ipv4JoinMulticastGroup>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 800e3ac:	89fb      	ldrh	r3, [r7, #14]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d001      	beq.n	800e3b6 <llmnrResponderInit+0x1e>
      return error;
 800e3b2:	89fb      	ldrh	r3, [r7, #14]
 800e3b4:	e00e      	b.n	800e3d4 <llmnrResponderInit+0x3c>
   if(error)
      return error;
#endif

   //LLMNR responders must listen on UDP port 5355
   error = udpAttachRxCallback(interface, LLMNR_PORT, llmnrProcessQuery,
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	4a09      	ldr	r2, [pc, #36]	; (800e3e0 <llmnrResponderInit+0x48>)
 800e3ba:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7fb f81e 	bl	8009400 <udpAttachRxCallback>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	81fb      	strh	r3, [r7, #14]
      NULL);
   //Any error to report?
   if(error)
 800e3c8:	89fb      	ldrh	r3, [r7, #14]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d001      	beq.n	800e3d2 <llmnrResponderInit+0x3a>
      return error;
 800e3ce:	89fb      	ldrh	r3, [r7, #14]
 800e3d0:	e000      	b.n	800e3d4 <llmnrResponderInit+0x3c>

   //Successful initialization
   return NO_ERROR;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	fc0000e0 	.word	0xfc0000e0
 800e3e0:	0800e3e5 	.word	0x0800e3e5

0800e3e4 <llmnrProcessQuery>:

void llmnrProcessQuery(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 800e3e4:	b5b0      	push	{r4, r5, r7, lr}
 800e3e6:	b08e      	sub	sp, #56	; 0x38
 800e3e8:	af02      	add	r7, sp, #8
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	60b9      	str	r1, [r7, #8]
 800e3ee:	607a      	str	r2, [r7, #4]
 800e3f0:	603b      	str	r3, [r7, #0]
   IpAddr destIpAddr;
   LlmnrHeader *message;
   DnsQuestion *question;

   //Retrieve the length of the LLMNR message
   length = netBufferGetLength(buffer) - offset;
 800e3f2:	6838      	ldr	r0, [r7, #0]
 800e3f4:	f7f4 fcc2 	bl	8002d7c <netBufferGetLength>
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Ensure the LLMNR message is valid
   if(length < sizeof(LlmnrHeader))
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	2b0b      	cmp	r3, #11
 800e404:	f240 80ab 	bls.w	800e55e <llmnrProcessQuery+0x17a>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 800e408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e40e:	f200 80a8 	bhi.w	800e562 <llmnrProcessQuery+0x17e>
      return;

   //Point to the LLMNR message header
   message = netBufferAt(buffer, offset);
 800e412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e414:	6838      	ldr	r0, [r7, #0]
 800e416:	f7f4 fd79 	bl	8002f0c <netBufferAt>
 800e41a:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800e41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 80a1 	beq.w	800e566 <llmnrProcessQuery+0x182>
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 query received?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b0c      	cmp	r3, #12
 800e42a:	f040 809e 	bne.w	800e56a <llmnrProcessQuery+0x186>
   {
      //Unicast UDP queries must be silently discarded (refer to RFC 4795,
      //section 2.4)
      if(!ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e436:	2be0      	cmp	r3, #224	; 0xe0
 800e438:	f040 8099 	bne.w	800e56e <llmnrProcessQuery+0x18a>
         return;

      //A responder responds to a multicast query by sending a unicast UDP
      //response to the sender (refer to RFC 4795, section 2)
      destIpAddr.length = sizeof(Ipv4Addr);
 800e43c:	2304      	movs	r3, #4
 800e43e:	613b      	str	r3, [r7, #16]
      destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	617b      	str	r3, [r7, #20]
      //Discard the LLMNR query message
      return;
   }

   //Discard LLMNR responses received on port 5355
   if(message->qr)
 800e446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e448:	789b      	ldrb	r3, [r3, #2]
 800e44a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e44e:	b2db      	uxtb	r3, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	f040 808e 	bne.w	800e572 <llmnrProcessQuery+0x18e>
      return;

   //LLMNR messages received with an opcode other than zero must be silently
   //ignored
   if(message->opcode != DNS_OPCODE_QUERY)
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	789b      	ldrb	r3, [r3, #2]
 800e45a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b00      	cmp	r3, #0
 800e462:	f040 8088 	bne.w	800e576 <llmnrProcessQuery+0x192>
      return;

   //LLMNR messages received with non-zero response codes must be silently
   //ignored
   if(message->rcode != DNS_RCODE_NO_ERROR)
 800e466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e468:	78db      	ldrb	r3, [r3, #3]
 800e46a:	f003 030f 	and.w	r3, r3, #15
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b00      	cmp	r3, #0
 800e472:	f040 8082 	bne.w	800e57a <llmnrProcessQuery+0x196>
      return;

   //LLMNR responders must silently discard LLMNR queries with QDCOUNT not
   //equal to one (refer to RFC 4795, section 2.1.1)
   if(ntohs(message->qdcount) != 1)
 800e476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e478:	889b      	ldrh	r3, [r3, #4]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f2 fe5c 	bl	800113a <swapInt16>
 800e482:	4603      	mov	r3, r0
 800e484:	2b01      	cmp	r3, #1
 800e486:	d17a      	bne.n	800e57e <llmnrProcessQuery+0x19a>
      return;

   //LLMNR responders must silently discard LLMNR queries with ANCOUNT or
   //NSCOUNT not equal to zero
   if(ntohs(message->ancount) != 0 || ntohs(message->nscount) != 0)
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	88db      	ldrh	r3, [r3, #6]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	4618      	mov	r0, r3
 800e490:	f7f2 fe53 	bl	800113a <swapInt16>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d173      	bne.n	800e582 <llmnrProcessQuery+0x19e>
 800e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49c:	891b      	ldrh	r3, [r3, #8]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7f2 fe4a 	bl	800113a <swapInt16>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d16a      	bne.n	800e582 <llmnrProcessQuery+0x19e>
      return;

   //Point to the first question
   pos = sizeof(LlmnrHeader);
 800e4ac:	230c      	movs	r3, #12
 800e4ae:	627b      	str	r3, [r7, #36]	; 0x24

   //Parse resource record name
   n = dnsParseName((DnsHeader *) message, length, pos, NULL, 0);
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4bc:	f7fc fb65 	bl	800ab8a <dnsParseName>
 800e4c0:	6238      	str	r0, [r7, #32]
   //Invalid name?
   if(n == 0)
 800e4c2:	6a3b      	ldr	r3, [r7, #32]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d05e      	beq.n	800e586 <llmnrProcessQuery+0x1a2>
      return;

   //Malformed LLMNR message?
   if((n + sizeof(DnsQuestion)) > length)
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d35b      	bcc.n	800e58a <llmnrProcessQuery+0x1a6>
      return;

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, n);
 800e4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e4d4:	6a3b      	ldr	r3, [r7, #32]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	61fb      	str	r3, [r7, #28]

   //Check the class of the query
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	885b      	ldrh	r3, [r3, #2]
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7f2 fe2a 	bl	800113a <swapInt16>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d008      	beq.n	800e4fe <llmnrProcessQuery+0x11a>
      ntohs(question->qclass) == DNS_RR_CLASS_ANY)
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	885b      	ldrh	r3, [r3, #2]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7f2 fe21 	bl	800113a <swapInt16>
 800e4f8:	4603      	mov	r3, r0
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800e4fa:	2bff      	cmp	r3, #255	; 0xff
 800e4fc:	d146      	bne.n	800e58c <llmnrProcessQuery+0x1a8>
   {
      //Responders must respond to LLMNR queries for names and addresses for
      //which they are authoritative
      if(!dnsCompareName((DnsHeader *) message, length, pos,
         interface->hostname, 0))
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3319      	adds	r3, #25
      if(!dnsCompareName((DnsHeader *) message, length, pos,
 800e502:	2200      	movs	r2, #0
 800e504:	9200      	str	r2, [sp, #0]
 800e506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e50a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e50c:	f7fc fbdb 	bl	800acc6 <dnsCompareName>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d13a      	bne.n	800e58c <llmnrProcessQuery+0x1a8>
      {
         //Responders must direct responses to the port from which the query
         //was sent
         destPort = ntohs(udpHeader->srcPort);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7f2 fe0c 	bl	800113a <swapInt16>
 800e522:	4603      	mov	r3, r0
 800e524:	837b      	strh	r3, [r7, #26]

         //Send LLMNR response
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	b29c      	uxth	r4, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800e532:	4618      	mov	r0, r3
 800e534:	f7f2 fe01 	bl	800113a <swapInt16>
 800e538:	4603      	mov	r3, r0
 800e53a:	461d      	mov	r5, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	885b      	ldrh	r3, [r3, #2]
 800e540:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800e542:	4618      	mov	r0, r3
 800e544:	f7f2 fdf9 	bl	800113a <swapInt16>
 800e548:	4603      	mov	r3, r0
 800e54a:	8b7a      	ldrh	r2, [r7, #26]
 800e54c:	f107 0110 	add.w	r1, r7, #16
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	9500      	str	r5, [sp, #0]
 800e554:	4623      	mov	r3, r4
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 f81c 	bl	800e594 <llmnrSendResponse>
 800e55c:	e016      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e55e:	bf00      	nop
 800e560:	e014      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e562:	bf00      	nop
 800e564:	e012      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e566:	bf00      	nop
 800e568:	e010      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e56a:	bf00      	nop
 800e56c:	e00e      	b.n	800e58c <llmnrProcessQuery+0x1a8>
         return;
 800e56e:	bf00      	nop
 800e570:	e00c      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e572:	bf00      	nop
 800e574:	e00a      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e576:	bf00      	nop
 800e578:	e008      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e57a:	bf00      	nop
 800e57c:	e006      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e57e:	bf00      	nop
 800e580:	e004      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e582:	bf00      	nop
 800e584:	e002      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e586:	bf00      	nop
 800e588:	e000      	b.n	800e58c <llmnrProcessQuery+0x1a8>
      return;
 800e58a:	bf00      	nop
      }
   }
}
 800e58c:	3730      	adds	r7, #48	; 0x30
 800e58e:	46bd      	mov	sp, r7
 800e590:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e594 <llmnrSendResponse>:
 * @param[in] qclass Resource record class
 **/

error_t llmnrSendResponse(NetInterface *interface, const IpAddr *destIpAddr,
   uint16_t destPort, uint16_t id, uint16_t qtype, uint16_t qclass)
{
 800e594:	b5b0      	push	{r4, r5, r7, lr}
 800e596:	b096      	sub	sp, #88	; 0x58
 800e598:	af04      	add	r7, sp, #16
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	4611      	mov	r1, r2
 800e5a0:	461a      	mov	r2, r3
 800e5a2:	460b      	mov	r3, r1
 800e5a4:	80fb      	strh	r3, [r7, #6]
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	80bb      	strh	r3, [r7, #4]
   DnsQuestion *question;
   DnsResourceRecord *record;
   NetTxAncillary ancillary;

   //Initialize status code
   error = NO_ERROR;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Allocate a memory buffer to hold the LLMNR response message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800e5b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e5ba:	f7fa feb1 	bl	8009320 <udpAllocBuffer>
 800e5be:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Failed to allocate buffer?
   if(buffer == NULL)
 800e5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <llmnrSendResponse+0x36>
      return ERROR_OUT_OF_MEMORY;
 800e5c6:	2364      	movs	r3, #100	; 0x64
 800e5c8:	e0f4      	b.n	800e7b4 <llmnrSendResponse+0x220>

   //Point to the LLMNR header
   message = netBufferAt(buffer, offset);
 800e5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5d0:	f7f4 fc9c 	bl	8002f0c <netBufferAt>
 800e5d4:	63b8      	str	r0, [r7, #56]	; 0x38

   //Take the identifier from the query message
   message->id = id;
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	88ba      	ldrh	r2, [r7, #4]
 800e5da:	801a      	strh	r2, [r3, #0]

   //Format LLMNR response header
   message->qr = 1;
 800e5dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5de:	7893      	ldrb	r3, [r2, #2]
 800e5e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5e4:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800e5e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5e8:	7893      	ldrb	r3, [r2, #2]
 800e5ea:	f36f 03c6 	bfc	r3, #3, #4
 800e5ee:	7093      	strb	r3, [r2, #2]
   message->c = 0;
 800e5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5f2:	7893      	ldrb	r3, [r2, #2]
 800e5f4:	f36f 0382 	bfc	r3, #2, #1
 800e5f8:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800e5fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5fc:	7893      	ldrb	r3, [r2, #2]
 800e5fe:	f36f 0341 	bfc	r3, #1, #1
 800e602:	7093      	strb	r3, [r2, #2]
   message->t = 0;
 800e604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e606:	7893      	ldrb	r3, [r2, #2]
 800e608:	f36f 0300 	bfc	r3, #0, #1
 800e60c:	7093      	strb	r3, [r2, #2]
   message->z = 0;
 800e60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e610:	78d3      	ldrb	r3, [r2, #3]
 800e612:	f36f 1307 	bfc	r3, #4, #4
 800e616:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800e618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e61a:	78d3      	ldrb	r3, [r2, #3]
 800e61c:	f36f 0303 	bfc	r3, #0, #4
 800e620:	70d3      	strb	r3, [r2, #3]
   message->qdcount = HTONS(1);
 800e622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e624:	2200      	movs	r2, #0
 800e626:	711a      	strb	r2, [r3, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	f042 0201 	orr.w	r2, r2, #1
 800e62e:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	2200      	movs	r2, #0
 800e634:	719a      	strb	r2, [r3, #6]
 800e636:	2200      	movs	r2, #0
 800e638:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800e63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e63c:	2200      	movs	r2, #0
 800e63e:	721a      	strb	r2, [r3, #8]
 800e640:	2200      	movs	r2, #0
 800e642:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	2200      	movs	r2, #0
 800e648:	729a      	strb	r2, [r3, #10]
 800e64a:	2200      	movs	r2, #0
 800e64c:	72da      	strb	r2, [r3, #11]

   //Set the length of the LLMNR response message
   length = sizeof(DnsHeader);
 800e64e:	230c      	movs	r3, #12
 800e650:	643b      	str	r3, [r7, #64]	; 0x40

   //Encode the requested host name using the DNS name notation
   length += dnsEncodeName(interface->hostname,
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f103 0019 	add.w	r0, r3, #25
 800e658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e65a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e65c:	4413      	add	r3, r2
 800e65e:	4619      	mov	r1, r3
 800e660:	f7fc fa28 	bl	800aab4 <dnsEncodeName>
 800e664:	4602      	mov	r2, r0
 800e666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e668:	4413      	add	r3, r2
 800e66a:	643b      	str	r3, [r7, #64]	; 0x40
      (uint8_t *) message + length);

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, length);
 800e66c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e670:	4413      	add	r3, r2
 800e672:	637b      	str	r3, [r7, #52]	; 0x34

   //Fill in resource record
   question->qtype = htons(qtype);
 800e674:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800e678:	4618      	mov	r0, r3
 800e67a:	f7f2 fd5e 	bl	800113a <swapInt16>
 800e67e:	4603      	mov	r3, r0
 800e680:	461a      	mov	r2, r3
 800e682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e684:	801a      	strh	r2, [r3, #0]
   question->qclass = htons(qclass);
 800e686:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7f2 fd55 	bl	800113a <swapInt16>
 800e690:	4603      	mov	r3, r0
 800e692:	461a      	mov	r2, r3
 800e694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e696:	805a      	strh	r2, [r3, #2]

   //Update the length of the response message
   length += sizeof(DnsQuestion);
 800e698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e69a:	3304      	adds	r3, #4
 800e69c:	643b      	str	r3, [r7, #64]	; 0x40

#if (IPV4_SUPPORT == ENABLED)
   //A resource record requested?
   if(qtype == DNS_RR_TYPE_A || qtype == DNS_RR_TYPE_ANY)
 800e69e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d003      	beq.n	800e6ae <llmnrSendResponse+0x11a>
 800e6a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800e6aa:	2bff      	cmp	r3, #255	; 0xff
 800e6ac:	d146      	bne.n	800e73c <llmnrSendResponse+0x1a8>
   {
      //Valid IPv4 host address?
      if(interface->ipv4Context.addrList[0].state == IPV4_ADDR_STATE_VALID)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	d141      	bne.n	800e73c <llmnrSendResponse+0x1a8>
      {
         //Encode the host name using the DNS name notation
         length += dnsEncodeName(interface->hostname,
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f103 0019 	add.w	r0, r3, #25
 800e6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6c2:	4413      	add	r3, r2
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	f7fc f9f5 	bl	800aab4 <dnsEncodeName>
 800e6ca:	4602      	mov	r2, r0
 800e6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ce:	4413      	add	r3, r2
 800e6d0:	643b      	str	r3, [r7, #64]	; 0x40
            (uint8_t *) message + length);

         //Point to the corresponding resource record
         record = DNS_GET_RESOURCE_RECORD(message, length);
 800e6d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6d6:	4413      	add	r3, r2
 800e6d8:	633b      	str	r3, [r7, #48]	; 0x30

         //Fill in resource record
         record->rtype = HTONS(DNS_RR_TYPE_A);
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	2200      	movs	r2, #0
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f042 0201 	orr.w	r2, r2, #1
 800e6e6:	705a      	strb	r2, [r3, #1]
         record->rclass = HTONS(DNS_RR_CLASS_IN);
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	709a      	strb	r2, [r3, #2]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f042 0201 	orr.w	r2, r2, #1
 800e6f4:	70da      	strb	r2, [r3, #3]
         record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	711a      	strb	r2, [r3, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	715a      	strb	r2, [r3, #5]
 800e700:	2200      	movs	r2, #0
 800e702:	719a      	strb	r2, [r3, #6]
 800e704:	2200      	movs	r2, #0
 800e706:	f042 021e 	orr.w	r2, r2, #30
 800e70a:	71da      	strb	r2, [r3, #7]
         record->rdlength = HTONS(sizeof(Ipv4Addr));
 800e70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70e:	2200      	movs	r2, #0
 800e710:	721a      	strb	r2, [r3, #8]
 800e712:	2200      	movs	r2, #0
 800e714:	f042 0204 	orr.w	r2, r2, #4
 800e718:	725a      	strb	r2, [r3, #9]

         //Copy IPv4 address
         ipv4CopyAddr(record->rdata, &interface->ipv4Context.addrList[0].addr);
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	330a      	adds	r3, #10
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	f502 72ee 	add.w	r2, r2, #476	; 0x1dc
 800e724:	6812      	ldr	r2, [r2, #0]
 800e726:	601a      	str	r2, [r3, #0]

         //Number of resource records in the answer section
         message->ancount++;
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	88db      	ldrh	r3, [r3, #6]
 800e72c:	b29b      	uxth	r3, r3
 800e72e:	3301      	adds	r3, #1
 800e730:	b29a      	uxth	r2, r3
 800e732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e734:	80da      	strh	r2, [r3, #6]

         //Update the length of the response message
         length += sizeof(DnsResourceRecord) + sizeof(Ipv4Addr);
 800e736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e738:	330e      	adds	r3, #14
 800e73a:	643b      	str	r3, [r7, #64]	; 0x40
      }
   }
#endif

   //Valid LLMNR response?
   if(message->ancount > 0)
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	88db      	ldrh	r3, [r3, #6]
 800e740:	b29b      	uxth	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d031      	beq.n	800e7aa <llmnrSendResponse+0x216>
   {
      //The ANCOUNT field specifies the number of resource records in the
      //answer section
      message->ancount = htons(message->ancount);
 800e746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e748:	88db      	ldrh	r3, [r3, #6]
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7f2 fcf4 	bl	800113a <swapInt16>
 800e752:	4603      	mov	r3, r0
 800e754:	461a      	mov	r2, r3
 800e756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e758:	80da      	strh	r2, [r3, #6]

      //Adjust the length of the multi-part buffer
      netBufferSetLength(buffer, offset + length);
 800e75a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e75c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e75e:	4413      	add	r3, r2
 800e760:	4619      	mov	r1, r3
 800e762:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e764:	f7f4 fb2c 	bl	8002dc0 <netBufferSetLength>
      TRACE_INFO("Sending LLMNR message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message
      dnsDumpMessage((DnsHeader *) message, length);

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800e768:	4b14      	ldr	r3, [pc, #80]	; (800e7bc <llmnrSendResponse+0x228>)
 800e76a:	f107 0414 	add.w	r4, r7, #20
 800e76e:	461d      	mov	r5, r3
 800e770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e774:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e778:	e884 0003 	stmia.w	r4, {r0, r1}

      //For UDP responses, the Hop Limit field in the IPv6 header and the TTL
      //field in the IPV4 header MAY be set to any value. However, it is
      //recommended that the value 255 be used for compatibility with early
      //implementations (refer to RFC 4795, section 2.5)
      ancillary.ttl = LLMNR_DEFAULT_IP_TTL;
 800e77c:	23ff      	movs	r3, #255	; 0xff
 800e77e:	753b      	strb	r3, [r7, #20]

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      ancillary.dontRoute = TRUE;
 800e780:	2301      	movs	r3, #1
 800e782:	61bb      	str	r3, [r7, #24]

      //Send LLMNR response
      error = udpSendBuffer(interface, NULL, LLMNR_PORT, destIpAddr, destPort,
 800e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e786:	f107 0214 	add.w	r2, r7, #20
 800e78a:	9203      	str	r2, [sp, #12]
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e790:	9301      	str	r3, [sp, #4]
 800e792:	88fb      	ldrh	r3, [r7, #6]
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	f241 42eb 	movw	r2, #5355	; 0x14eb
 800e79c:	2100      	movs	r1, #0
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7fa fc88 	bl	80090b4 <udpSendBuffer>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 800e7aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e7ac:	f7f4 fad4 	bl	8002d58 <netBufferFree>

   //Return status code
   return error;
 800e7b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3748      	adds	r7, #72	; 0x48
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bdb0      	pop	{r4, r5, r7, pc}
 800e7bc:	08014540 	.word	0x08014540

0800e7c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e7c4:	4b0e      	ldr	r3, [pc, #56]	; (800e800 <HAL_Init+0x40>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	4a0d      	ldr	r2, [pc, #52]	; (800e800 <HAL_Init+0x40>)
 800e7ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e7d0:	4b0b      	ldr	r3, [pc, #44]	; (800e800 <HAL_Init+0x40>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	4a0a      	ldr	r2, [pc, #40]	; (800e800 <HAL_Init+0x40>)
 800e7d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e7da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e7dc:	4b08      	ldr	r3, [pc, #32]	; (800e800 <HAL_Init+0x40>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4a07      	ldr	r2, [pc, #28]	; (800e800 <HAL_Init+0x40>)
 800e7e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e7e8:	2003      	movs	r0, #3
 800e7ea:	f000 f8fc 	bl	800e9e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e7ee:	200f      	movs	r0, #15
 800e7f0:	f7f2 fb42 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e7f4:	f7f2 fb14 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	40023c00 	.word	0x40023c00

0800e804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e804:	b480      	push	{r7}
 800e806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e808:	4b06      	ldr	r3, [pc, #24]	; (800e824 <HAL_IncTick+0x20>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	4b06      	ldr	r3, [pc, #24]	; (800e828 <HAL_IncTick+0x24>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4413      	add	r3, r2
 800e814:	4a04      	ldr	r2, [pc, #16]	; (800e828 <HAL_IncTick+0x24>)
 800e816:	6013      	str	r3, [r2, #0]
}
 800e818:	bf00      	nop
 800e81a:	46bd      	mov	sp, r7
 800e81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	2000002c 	.word	0x2000002c
 800e828:	2000b65c 	.word	0x2000b65c

0800e82c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
  return uwTick;
 800e830:	4b03      	ldr	r3, [pc, #12]	; (800e840 <HAL_GetTick+0x14>)
 800e832:	681b      	ldr	r3, [r3, #0]
}
 800e834:	4618      	mov	r0, r3
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	2000b65c 	.word	0x2000b65c

0800e844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e84c:	f7ff ffee 	bl	800e82c <HAL_GetTick>
 800e850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e85c:	d005      	beq.n	800e86a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e85e:	4b0a      	ldr	r3, [pc, #40]	; (800e888 <HAL_Delay+0x44>)
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	461a      	mov	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	4413      	add	r3, r2
 800e868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e86a:	bf00      	nop
 800e86c:	f7ff ffde 	bl	800e82c <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d8f7      	bhi.n	800e86c <HAL_Delay+0x28>
  {
  }
}
 800e87c:	bf00      	nop
 800e87e:	bf00      	nop
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	2000002c 	.word	0x2000002c

0800e88c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f003 0307 	and.w	r3, r3, #7
 800e89a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e89c:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <__NVIC_SetPriorityGrouping+0x44>)
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e8b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800e8b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e8be:	4a04      	ldr	r2, [pc, #16]	; (800e8d0 <__NVIC_SetPriorityGrouping+0x44>)
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	60d3      	str	r3, [r2, #12]
}
 800e8c4:	bf00      	nop
 800e8c6:	3714      	adds	r7, #20
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr
 800e8d0:	e000ed00 	.word	0xe000ed00

0800e8d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e8d8:	4b04      	ldr	r3, [pc, #16]	; (800e8ec <__NVIC_GetPriorityGrouping+0x18>)
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	0a1b      	lsrs	r3, r3, #8
 800e8de:	f003 0307 	and.w	r3, r3, #7
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	e000ed00 	.word	0xe000ed00

0800e8f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e8fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	db0b      	blt.n	800e91a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	f003 021f 	and.w	r2, r3, #31
 800e908:	4907      	ldr	r1, [pc, #28]	; (800e928 <__NVIC_EnableIRQ+0x38>)
 800e90a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e90e:	095b      	lsrs	r3, r3, #5
 800e910:	2001      	movs	r0, #1
 800e912:	fa00 f202 	lsl.w	r2, r0, r2
 800e916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800e91a:	bf00      	nop
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	e000e100 	.word	0xe000e100

0800e92c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	4603      	mov	r3, r0
 800e934:	6039      	str	r1, [r7, #0]
 800e936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	db0a      	blt.n	800e956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	b2da      	uxtb	r2, r3
 800e944:	490c      	ldr	r1, [pc, #48]	; (800e978 <__NVIC_SetPriority+0x4c>)
 800e946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e94a:	0112      	lsls	r2, r2, #4
 800e94c:	b2d2      	uxtb	r2, r2
 800e94e:	440b      	add	r3, r1
 800e950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e954:	e00a      	b.n	800e96c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	4908      	ldr	r1, [pc, #32]	; (800e97c <__NVIC_SetPriority+0x50>)
 800e95c:	79fb      	ldrb	r3, [r7, #7]
 800e95e:	f003 030f 	and.w	r3, r3, #15
 800e962:	3b04      	subs	r3, #4
 800e964:	0112      	lsls	r2, r2, #4
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	440b      	add	r3, r1
 800e96a:	761a      	strb	r2, [r3, #24]
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	e000e100 	.word	0xe000e100
 800e97c:	e000ed00 	.word	0xe000ed00

0800e980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e980:	b480      	push	{r7}
 800e982:	b089      	sub	sp, #36	; 0x24
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f1c3 0307 	rsb	r3, r3, #7
 800e99a:	2b04      	cmp	r3, #4
 800e99c:	bf28      	it	cs
 800e99e:	2304      	movcs	r3, #4
 800e9a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	2b06      	cmp	r3, #6
 800e9a8:	d902      	bls.n	800e9b0 <NVIC_EncodePriority+0x30>
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	3b03      	subs	r3, #3
 800e9ae:	e000      	b.n	800e9b2 <NVIC_EncodePriority+0x32>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800e9be:	43da      	mvns	r2, r3
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	401a      	ands	r2, r3
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e9c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800e9d2:	43d9      	mvns	r1, r3
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e9d8:	4313      	orrs	r3, r2
         );
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3724      	adds	r7, #36	; 0x24
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff ff4c 	bl	800e88c <__NVIC_SetPriorityGrouping>
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	4603      	mov	r3, r0
 800ea04:	60b9      	str	r1, [r7, #8]
 800ea06:	607a      	str	r2, [r7, #4]
 800ea08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ea0e:	f7ff ff61 	bl	800e8d4 <__NVIC_GetPriorityGrouping>
 800ea12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	68b9      	ldr	r1, [r7, #8]
 800ea18:	6978      	ldr	r0, [r7, #20]
 800ea1a:	f7ff ffb1 	bl	800e980 <NVIC_EncodePriority>
 800ea1e:	4602      	mov	r2, r0
 800ea20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea24:	4611      	mov	r1, r2
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7ff ff80 	bl	800e92c <__NVIC_SetPriority>
}
 800ea2c:	bf00      	nop
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ea3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff ff54 	bl	800e8f0 <__NVIC_EnableIRQ>
}
 800ea48:	bf00      	nop
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b089      	sub	sp, #36	; 0x24
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ea62:	2300      	movs	r3, #0
 800ea64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea66:	2300      	movs	r3, #0
 800ea68:	61fb      	str	r3, [r7, #28]
 800ea6a:	e16b      	b.n	800ed44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	69fb      	ldr	r3, [r7, #28]
 800ea70:	fa02 f303 	lsl.w	r3, r2, r3
 800ea74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	4013      	ands	r3, r2
 800ea7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ea80:	693a      	ldr	r2, [r7, #16]
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	f040 815a 	bne.w	800ed3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	f003 0303 	and.w	r3, r3, #3
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d005      	beq.n	800eaa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d130      	bne.n	800eb04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	2203      	movs	r2, #3
 800eaae:	fa02 f303 	lsl.w	r3, r2, r3
 800eab2:	43db      	mvns	r3, r3
 800eab4:	69ba      	ldr	r2, [r7, #24]
 800eab6:	4013      	ands	r3, r2
 800eab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	68da      	ldr	r2, [r3, #12]
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	005b      	lsls	r3, r3, #1
 800eac2:	fa02 f303 	lsl.w	r3, r2, r3
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	69ba      	ldr	r2, [r7, #24]
 800ead0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ead8:	2201      	movs	r2, #1
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	fa02 f303 	lsl.w	r3, r2, r3
 800eae0:	43db      	mvns	r3, r3
 800eae2:	69ba      	ldr	r2, [r7, #24]
 800eae4:	4013      	ands	r3, r2
 800eae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	091b      	lsrs	r3, r3, #4
 800eaee:	f003 0201 	and.w	r2, r3, #1
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf8:	69ba      	ldr	r2, [r7, #24]
 800eafa:	4313      	orrs	r3, r2
 800eafc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	69ba      	ldr	r2, [r7, #24]
 800eb02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	f003 0303 	and.w	r3, r3, #3
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d017      	beq.n	800eb40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	005b      	lsls	r3, r3, #1
 800eb1a:	2203      	movs	r2, #3
 800eb1c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb20:	43db      	mvns	r3, r3
 800eb22:	69ba      	ldr	r2, [r7, #24]
 800eb24:	4013      	ands	r3, r2
 800eb26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	689a      	ldr	r2, [r3, #8]
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	005b      	lsls	r3, r3, #1
 800eb30:	fa02 f303 	lsl.w	r3, r2, r3
 800eb34:	69ba      	ldr	r2, [r7, #24]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	69ba      	ldr	r2, [r7, #24]
 800eb3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	f003 0303 	and.w	r3, r3, #3
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d123      	bne.n	800eb94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	08da      	lsrs	r2, r3, #3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	3208      	adds	r2, #8
 800eb54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	f003 0307 	and.w	r3, r3, #7
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	220f      	movs	r2, #15
 800eb64:	fa02 f303 	lsl.w	r3, r2, r3
 800eb68:	43db      	mvns	r3, r3
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	4013      	ands	r3, r2
 800eb6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	691a      	ldr	r2, [r3, #16]
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	f003 0307 	and.w	r3, r3, #7
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb80:	69ba      	ldr	r2, [r7, #24]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	08da      	lsrs	r2, r3, #3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	3208      	adds	r2, #8
 800eb8e:	69b9      	ldr	r1, [r7, #24]
 800eb90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	2203      	movs	r2, #3
 800eba0:	fa02 f303 	lsl.w	r3, r2, r3
 800eba4:	43db      	mvns	r3, r3
 800eba6:	69ba      	ldr	r2, [r7, #24]
 800eba8:	4013      	ands	r3, r2
 800ebaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	f003 0203 	and.w	r2, r3, #3
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	005b      	lsls	r3, r3, #1
 800ebb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebbc:	69ba      	ldr	r2, [r7, #24]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f000 80b4 	beq.w	800ed3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60fb      	str	r3, [r7, #12]
 800ebda:	4b60      	ldr	r3, [pc, #384]	; (800ed5c <HAL_GPIO_Init+0x30c>)
 800ebdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebde:	4a5f      	ldr	r2, [pc, #380]	; (800ed5c <HAL_GPIO_Init+0x30c>)
 800ebe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ebe4:	6453      	str	r3, [r2, #68]	; 0x44
 800ebe6:	4b5d      	ldr	r3, [pc, #372]	; (800ed5c <HAL_GPIO_Init+0x30c>)
 800ebe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebee:	60fb      	str	r3, [r7, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ebf2:	4a5b      	ldr	r2, [pc, #364]	; (800ed60 <HAL_GPIO_Init+0x310>)
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	089b      	lsrs	r3, r3, #2
 800ebf8:	3302      	adds	r3, #2
 800ebfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	f003 0303 	and.w	r3, r3, #3
 800ec06:	009b      	lsls	r3, r3, #2
 800ec08:	220f      	movs	r2, #15
 800ec0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec0e:	43db      	mvns	r3, r3
 800ec10:	69ba      	ldr	r2, [r7, #24]
 800ec12:	4013      	ands	r3, r2
 800ec14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	4a52      	ldr	r2, [pc, #328]	; (800ed64 <HAL_GPIO_Init+0x314>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d02b      	beq.n	800ec76 <HAL_GPIO_Init+0x226>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	4a51      	ldr	r2, [pc, #324]	; (800ed68 <HAL_GPIO_Init+0x318>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d025      	beq.n	800ec72 <HAL_GPIO_Init+0x222>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4a50      	ldr	r2, [pc, #320]	; (800ed6c <HAL_GPIO_Init+0x31c>)
 800ec2a:	4293      	cmp	r3, r2
 800ec2c:	d01f      	beq.n	800ec6e <HAL_GPIO_Init+0x21e>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	4a4f      	ldr	r2, [pc, #316]	; (800ed70 <HAL_GPIO_Init+0x320>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d019      	beq.n	800ec6a <HAL_GPIO_Init+0x21a>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	4a4e      	ldr	r2, [pc, #312]	; (800ed74 <HAL_GPIO_Init+0x324>)
 800ec3a:	4293      	cmp	r3, r2
 800ec3c:	d013      	beq.n	800ec66 <HAL_GPIO_Init+0x216>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4a4d      	ldr	r2, [pc, #308]	; (800ed78 <HAL_GPIO_Init+0x328>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d00d      	beq.n	800ec62 <HAL_GPIO_Init+0x212>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	4a4c      	ldr	r2, [pc, #304]	; (800ed7c <HAL_GPIO_Init+0x32c>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d007      	beq.n	800ec5e <HAL_GPIO_Init+0x20e>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4a4b      	ldr	r2, [pc, #300]	; (800ed80 <HAL_GPIO_Init+0x330>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d101      	bne.n	800ec5a <HAL_GPIO_Init+0x20a>
 800ec56:	2307      	movs	r3, #7
 800ec58:	e00e      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec5a:	2308      	movs	r3, #8
 800ec5c:	e00c      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec5e:	2306      	movs	r3, #6
 800ec60:	e00a      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec62:	2305      	movs	r3, #5
 800ec64:	e008      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec66:	2304      	movs	r3, #4
 800ec68:	e006      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec6a:	2303      	movs	r3, #3
 800ec6c:	e004      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e002      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec72:	2301      	movs	r3, #1
 800ec74:	e000      	b.n	800ec78 <HAL_GPIO_Init+0x228>
 800ec76:	2300      	movs	r3, #0
 800ec78:	69fa      	ldr	r2, [r7, #28]
 800ec7a:	f002 0203 	and.w	r2, r2, #3
 800ec7e:	0092      	lsls	r2, r2, #2
 800ec80:	4093      	lsls	r3, r2
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	4313      	orrs	r3, r2
 800ec86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ec88:	4935      	ldr	r1, [pc, #212]	; (800ed60 <HAL_GPIO_Init+0x310>)
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	089b      	lsrs	r3, r3, #2
 800ec8e:	3302      	adds	r3, #2
 800ec90:	69ba      	ldr	r2, [r7, #24]
 800ec92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ec96:	4b3b      	ldr	r3, [pc, #236]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	43db      	mvns	r3, r3
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	4013      	ands	r3, r2
 800eca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ecba:	4a32      	ldr	r2, [pc, #200]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ecbc:	69bb      	ldr	r3, [r7, #24]
 800ecbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ecc0:	4b30      	ldr	r3, [pc, #192]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	43db      	mvns	r3, r3
 800ecca:	69ba      	ldr	r2, [r7, #24]
 800eccc:	4013      	ands	r3, r2
 800ecce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d003      	beq.n	800ece4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ecdc:	69ba      	ldr	r2, [r7, #24]
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ece4:	4a27      	ldr	r2, [pc, #156]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ecea:	4b26      	ldr	r3, [pc, #152]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ecec:	689b      	ldr	r3, [r3, #8]
 800ecee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	43db      	mvns	r3, r3
 800ecf4:	69ba      	ldr	r2, [r7, #24]
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d003      	beq.n	800ed0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ed0e:	4a1d      	ldr	r2, [pc, #116]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ed10:	69bb      	ldr	r3, [r7, #24]
 800ed12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ed14:	4b1b      	ldr	r3, [pc, #108]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	43db      	mvns	r3, r3
 800ed1e:	69ba      	ldr	r2, [r7, #24]
 800ed20:	4013      	ands	r3, r2
 800ed22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ed30:	69ba      	ldr	r2, [r7, #24]
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	4313      	orrs	r3, r2
 800ed36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ed38:	4a12      	ldr	r2, [pc, #72]	; (800ed84 <HAL_GPIO_Init+0x334>)
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	3301      	adds	r3, #1
 800ed42:	61fb      	str	r3, [r7, #28]
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	2b0f      	cmp	r3, #15
 800ed48:	f67f ae90 	bls.w	800ea6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ed4c:	bf00      	nop
 800ed4e:	bf00      	nop
 800ed50:	3724      	adds	r7, #36	; 0x24
 800ed52:	46bd      	mov	sp, r7
 800ed54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	40023800 	.word	0x40023800
 800ed60:	40013800 	.word	0x40013800
 800ed64:	40020000 	.word	0x40020000
 800ed68:	40020400 	.word	0x40020400
 800ed6c:	40020800 	.word	0x40020800
 800ed70:	40020c00 	.word	0x40020c00
 800ed74:	40021000 	.word	0x40021000
 800ed78:	40021400 	.word	0x40021400
 800ed7c:	40021800 	.word	0x40021800
 800ed80:	40021c00 	.word	0x40021c00
 800ed84:	40013c00 	.word	0x40013c00

0800ed88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	460b      	mov	r3, r1
 800ed92:	807b      	strh	r3, [r7, #2]
 800ed94:	4613      	mov	r3, r2
 800ed96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ed98:	787b      	ldrb	r3, [r7, #1]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d003      	beq.n	800eda6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ed9e:	887a      	ldrh	r2, [r7, #2]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800eda4:	e003      	b.n	800edae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800eda6:	887b      	ldrh	r3, [r7, #2]
 800eda8:	041a      	lsls	r2, r3, #16
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	619a      	str	r2, [r3, #24]
}
 800edae:	bf00      	nop
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800edba:	b480      	push	{r7}
 800edbc:	b085      	sub	sp, #20
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	460b      	mov	r3, r1
 800edc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	695b      	ldr	r3, [r3, #20]
 800edca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800edcc:	887a      	ldrh	r2, [r7, #2]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	4013      	ands	r3, r2
 800edd2:	041a      	lsls	r2, r3, #16
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	43d9      	mvns	r1, r3
 800edd8:	887b      	ldrh	r3, [r7, #2]
 800edda:	400b      	ands	r3, r1
 800eddc:	431a      	orrs	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	619a      	str	r2, [r3, #24]
}
 800ede2:	bf00      	nop
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	4603      	mov	r3, r0
 800edf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800edfa:	4b08      	ldr	r3, [pc, #32]	; (800ee1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800edfc:	695a      	ldr	r2, [r3, #20]
 800edfe:	88fb      	ldrh	r3, [r7, #6]
 800ee00:	4013      	ands	r3, r2
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d006      	beq.n	800ee14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ee06:	4a05      	ldr	r2, [pc, #20]	; (800ee1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ee08:	88fb      	ldrh	r3, [r7, #6]
 800ee0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ee0c:	88fb      	ldrh	r3, [r7, #6]
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f003 fd14 	bl	801283c <HAL_GPIO_EXTI_Callback>
  }
}
 800ee14:	bf00      	nop
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	40013c00 	.word	0x40013c00

0800ee20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d101      	bne.n	800ee32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e264      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f003 0301 	and.w	r3, r3, #1
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d075      	beq.n	800ef2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee3e:	4ba3      	ldr	r3, [pc, #652]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	f003 030c 	and.w	r3, r3, #12
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	d00c      	beq.n	800ee64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee4a:	4ba0      	ldr	r3, [pc, #640]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee52:	2b08      	cmp	r3, #8
 800ee54:	d112      	bne.n	800ee7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee56:	4b9d      	ldr	r3, [pc, #628]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee62:	d10b      	bne.n	800ee7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee64:	4b99      	ldr	r3, [pc, #612]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d05b      	beq.n	800ef28 <HAL_RCC_OscConfig+0x108>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d157      	bne.n	800ef28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ee78:	2301      	movs	r3, #1
 800ee7a:	e23f      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee84:	d106      	bne.n	800ee94 <HAL_RCC_OscConfig+0x74>
 800ee86:	4b91      	ldr	r3, [pc, #580]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a90      	ldr	r2, [pc, #576]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ee8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ee90:	6013      	str	r3, [r2, #0]
 800ee92:	e01d      	b.n	800eed0 <HAL_RCC_OscConfig+0xb0>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ee9c:	d10c      	bne.n	800eeb8 <HAL_RCC_OscConfig+0x98>
 800ee9e:	4b8b      	ldr	r3, [pc, #556]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a8a      	ldr	r2, [pc, #552]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eea8:	6013      	str	r3, [r2, #0]
 800eeaa:	4b88      	ldr	r3, [pc, #544]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4a87      	ldr	r2, [pc, #540]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eeb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eeb4:	6013      	str	r3, [r2, #0]
 800eeb6:	e00b      	b.n	800eed0 <HAL_RCC_OscConfig+0xb0>
 800eeb8:	4b84      	ldr	r3, [pc, #528]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a83      	ldr	r2, [pc, #524]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	4b81      	ldr	r3, [pc, #516]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a80      	ldr	r2, [pc, #512]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eeca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800eece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d013      	beq.n	800ef00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eed8:	f7ff fca8 	bl	800e82c <HAL_GetTick>
 800eedc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eede:	e008      	b.n	800eef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eee0:	f7ff fca4 	bl	800e82c <HAL_GetTick>
 800eee4:	4602      	mov	r2, r0
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	1ad3      	subs	r3, r2, r3
 800eeea:	2b64      	cmp	r3, #100	; 0x64
 800eeec:	d901      	bls.n	800eef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eeee:	2303      	movs	r3, #3
 800eef0:	e204      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eef2:	4b76      	ldr	r3, [pc, #472]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d0f0      	beq.n	800eee0 <HAL_RCC_OscConfig+0xc0>
 800eefe:	e014      	b.n	800ef2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef00:	f7ff fc94 	bl	800e82c <HAL_GetTick>
 800ef04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef06:	e008      	b.n	800ef1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef08:	f7ff fc90 	bl	800e82c <HAL_GetTick>
 800ef0c:	4602      	mov	r2, r0
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	2b64      	cmp	r3, #100	; 0x64
 800ef14:	d901      	bls.n	800ef1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ef16:	2303      	movs	r3, #3
 800ef18:	e1f0      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef1a:	4b6c      	ldr	r3, [pc, #432]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d1f0      	bne.n	800ef08 <HAL_RCC_OscConfig+0xe8>
 800ef26:	e000      	b.n	800ef2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ef28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f003 0302 	and.w	r3, r3, #2
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d063      	beq.n	800effe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef36:	4b65      	ldr	r3, [pc, #404]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f003 030c 	and.w	r3, r3, #12
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00b      	beq.n	800ef5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef42:	4b62      	ldr	r3, [pc, #392]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ef4a:	2b08      	cmp	r3, #8
 800ef4c:	d11c      	bne.n	800ef88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef4e:	4b5f      	ldr	r3, [pc, #380]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d116      	bne.n	800ef88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef5a:	4b5c      	ldr	r3, [pc, #368]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f003 0302 	and.w	r3, r3, #2
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d005      	beq.n	800ef72 <HAL_RCC_OscConfig+0x152>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d001      	beq.n	800ef72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	e1c4      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef72:	4b56      	ldr	r3, [pc, #344]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	00db      	lsls	r3, r3, #3
 800ef80:	4952      	ldr	r1, [pc, #328]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800ef82:	4313      	orrs	r3, r2
 800ef84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef86:	e03a      	b.n	800effe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	68db      	ldr	r3, [r3, #12]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d020      	beq.n	800efd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef90:	4b4f      	ldr	r3, [pc, #316]	; (800f0d0 <HAL_RCC_OscConfig+0x2b0>)
 800ef92:	2201      	movs	r2, #1
 800ef94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef96:	f7ff fc49 	bl	800e82c <HAL_GetTick>
 800ef9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef9c:	e008      	b.n	800efb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef9e:	f7ff fc45 	bl	800e82c <HAL_GetTick>
 800efa2:	4602      	mov	r2, r0
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d901      	bls.n	800efb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800efac:	2303      	movs	r3, #3
 800efae:	e1a5      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800efb0:	4b46      	ldr	r3, [pc, #280]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f003 0302 	and.w	r3, r3, #2
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d0f0      	beq.n	800ef9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800efbc:	4b43      	ldr	r3, [pc, #268]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	691b      	ldr	r3, [r3, #16]
 800efc8:	00db      	lsls	r3, r3, #3
 800efca:	4940      	ldr	r1, [pc, #256]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800efcc:	4313      	orrs	r3, r2
 800efce:	600b      	str	r3, [r1, #0]
 800efd0:	e015      	b.n	800effe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800efd2:	4b3f      	ldr	r3, [pc, #252]	; (800f0d0 <HAL_RCC_OscConfig+0x2b0>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efd8:	f7ff fc28 	bl	800e82c <HAL_GetTick>
 800efdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800efde:	e008      	b.n	800eff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800efe0:	f7ff fc24 	bl	800e82c <HAL_GetTick>
 800efe4:	4602      	mov	r2, r0
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	2b02      	cmp	r3, #2
 800efec:	d901      	bls.n	800eff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800efee:	2303      	movs	r3, #3
 800eff0:	e184      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eff2:	4b36      	ldr	r3, [pc, #216]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f003 0302 	and.w	r3, r3, #2
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f0      	bne.n	800efe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 0308 	and.w	r3, r3, #8
 800f006:	2b00      	cmp	r3, #0
 800f008:	d030      	beq.n	800f06c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d016      	beq.n	800f040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f012:	4b30      	ldr	r3, [pc, #192]	; (800f0d4 <HAL_RCC_OscConfig+0x2b4>)
 800f014:	2201      	movs	r2, #1
 800f016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f018:	f7ff fc08 	bl	800e82c <HAL_GetTick>
 800f01c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f01e:	e008      	b.n	800f032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f020:	f7ff fc04 	bl	800e82c <HAL_GetTick>
 800f024:	4602      	mov	r2, r0
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d901      	bls.n	800f032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e164      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f032:	4b26      	ldr	r3, [pc, #152]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f036:	f003 0302 	and.w	r3, r3, #2
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d0f0      	beq.n	800f020 <HAL_RCC_OscConfig+0x200>
 800f03e:	e015      	b.n	800f06c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f040:	4b24      	ldr	r3, [pc, #144]	; (800f0d4 <HAL_RCC_OscConfig+0x2b4>)
 800f042:	2200      	movs	r2, #0
 800f044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f046:	f7ff fbf1 	bl	800e82c <HAL_GetTick>
 800f04a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f04c:	e008      	b.n	800f060 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f04e:	f7ff fbed 	bl	800e82c <HAL_GetTick>
 800f052:	4602      	mov	r2, r0
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d901      	bls.n	800f060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e14d      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f060:	4b1a      	ldr	r3, [pc, #104]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f064:	f003 0302 	and.w	r3, r3, #2
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1f0      	bne.n	800f04e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	f003 0304 	and.w	r3, r3, #4
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 80a0 	beq.w	800f1ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f07e:	4b13      	ldr	r3, [pc, #76]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f086:	2b00      	cmp	r3, #0
 800f088:	d10f      	bne.n	800f0aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f08a:	2300      	movs	r3, #0
 800f08c:	60bb      	str	r3, [r7, #8]
 800f08e:	4b0f      	ldr	r3, [pc, #60]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f092:	4a0e      	ldr	r2, [pc, #56]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f098:	6413      	str	r3, [r2, #64]	; 0x40
 800f09a:	4b0c      	ldr	r3, [pc, #48]	; (800f0cc <HAL_RCC_OscConfig+0x2ac>)
 800f09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0a2:	60bb      	str	r3, [r7, #8]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0aa:	4b0b      	ldr	r3, [pc, #44]	; (800f0d8 <HAL_RCC_OscConfig+0x2b8>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d121      	bne.n	800f0fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f0b6:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <HAL_RCC_OscConfig+0x2b8>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	4a07      	ldr	r2, [pc, #28]	; (800f0d8 <HAL_RCC_OscConfig+0x2b8>)
 800f0bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f0c2:	f7ff fbb3 	bl	800e82c <HAL_GetTick>
 800f0c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0c8:	e011      	b.n	800f0ee <HAL_RCC_OscConfig+0x2ce>
 800f0ca:	bf00      	nop
 800f0cc:	40023800 	.word	0x40023800
 800f0d0:	42470000 	.word	0x42470000
 800f0d4:	42470e80 	.word	0x42470e80
 800f0d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f0dc:	f7ff fba6 	bl	800e82c <HAL_GetTick>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	2b02      	cmp	r3, #2
 800f0e8:	d901      	bls.n	800f0ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800f0ea:	2303      	movs	r3, #3
 800f0ec:	e106      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f0ee:	4b85      	ldr	r3, [pc, #532]	; (800f304 <HAL_RCC_OscConfig+0x4e4>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0f0      	beq.n	800f0dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	689b      	ldr	r3, [r3, #8]
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d106      	bne.n	800f110 <HAL_RCC_OscConfig+0x2f0>
 800f102:	4b81      	ldr	r3, [pc, #516]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f106:	4a80      	ldr	r2, [pc, #512]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f108:	f043 0301 	orr.w	r3, r3, #1
 800f10c:	6713      	str	r3, [r2, #112]	; 0x70
 800f10e:	e01c      	b.n	800f14a <HAL_RCC_OscConfig+0x32a>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	689b      	ldr	r3, [r3, #8]
 800f114:	2b05      	cmp	r3, #5
 800f116:	d10c      	bne.n	800f132 <HAL_RCC_OscConfig+0x312>
 800f118:	4b7b      	ldr	r3, [pc, #492]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f11c:	4a7a      	ldr	r2, [pc, #488]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f11e:	f043 0304 	orr.w	r3, r3, #4
 800f122:	6713      	str	r3, [r2, #112]	; 0x70
 800f124:	4b78      	ldr	r3, [pc, #480]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f128:	4a77      	ldr	r2, [pc, #476]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f12a:	f043 0301 	orr.w	r3, r3, #1
 800f12e:	6713      	str	r3, [r2, #112]	; 0x70
 800f130:	e00b      	b.n	800f14a <HAL_RCC_OscConfig+0x32a>
 800f132:	4b75      	ldr	r3, [pc, #468]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f136:	4a74      	ldr	r2, [pc, #464]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f138:	f023 0301 	bic.w	r3, r3, #1
 800f13c:	6713      	str	r3, [r2, #112]	; 0x70
 800f13e:	4b72      	ldr	r3, [pc, #456]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f142:	4a71      	ldr	r2, [pc, #452]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f144:	f023 0304 	bic.w	r3, r3, #4
 800f148:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d015      	beq.n	800f17e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f152:	f7ff fb6b 	bl	800e82c <HAL_GetTick>
 800f156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f158:	e00a      	b.n	800f170 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f15a:	f7ff fb67 	bl	800e82c <HAL_GetTick>
 800f15e:	4602      	mov	r2, r0
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	f241 3288 	movw	r2, #5000	; 0x1388
 800f168:	4293      	cmp	r3, r2
 800f16a:	d901      	bls.n	800f170 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800f16c:	2303      	movs	r3, #3
 800f16e:	e0c5      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f170:	4b65      	ldr	r3, [pc, #404]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f174:	f003 0302 	and.w	r3, r3, #2
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d0ee      	beq.n	800f15a <HAL_RCC_OscConfig+0x33a>
 800f17c:	e014      	b.n	800f1a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f17e:	f7ff fb55 	bl	800e82c <HAL_GetTick>
 800f182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f184:	e00a      	b.n	800f19c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f186:	f7ff fb51 	bl	800e82c <HAL_GetTick>
 800f18a:	4602      	mov	r2, r0
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	f241 3288 	movw	r2, #5000	; 0x1388
 800f194:	4293      	cmp	r3, r2
 800f196:	d901      	bls.n	800f19c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800f198:	2303      	movs	r3, #3
 800f19a:	e0af      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f19c:	4b5a      	ldr	r3, [pc, #360]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1a0:	f003 0302 	and.w	r3, r3, #2
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d1ee      	bne.n	800f186 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d105      	bne.n	800f1ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f1ae:	4b56      	ldr	r3, [pc, #344]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b2:	4a55      	ldr	r2, [pc, #340]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f1b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	699b      	ldr	r3, [r3, #24]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	f000 809b 	beq.w	800f2fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f1c4:	4b50      	ldr	r3, [pc, #320]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f1c6:	689b      	ldr	r3, [r3, #8]
 800f1c8:	f003 030c 	and.w	r3, r3, #12
 800f1cc:	2b08      	cmp	r3, #8
 800f1ce:	d05c      	beq.n	800f28a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	699b      	ldr	r3, [r3, #24]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d141      	bne.n	800f25c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f1d8:	4b4c      	ldr	r3, [pc, #304]	; (800f30c <HAL_RCC_OscConfig+0x4ec>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1de:	f7ff fb25 	bl	800e82c <HAL_GetTick>
 800f1e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1e4:	e008      	b.n	800f1f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f1e6:	f7ff fb21 	bl	800e82c <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d901      	bls.n	800f1f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800f1f4:	2303      	movs	r3, #3
 800f1f6:	e081      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1f8:	4b43      	ldr	r3, [pc, #268]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1f0      	bne.n	800f1e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	69da      	ldr	r2, [r3, #28]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6a1b      	ldr	r3, [r3, #32]
 800f20c:	431a      	orrs	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	019b      	lsls	r3, r3, #6
 800f214:	431a      	orrs	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21a:	085b      	lsrs	r3, r3, #1
 800f21c:	3b01      	subs	r3, #1
 800f21e:	041b      	lsls	r3, r3, #16
 800f220:	431a      	orrs	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f226:	061b      	lsls	r3, r3, #24
 800f228:	4937      	ldr	r1, [pc, #220]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f22a:	4313      	orrs	r3, r2
 800f22c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f22e:	4b37      	ldr	r3, [pc, #220]	; (800f30c <HAL_RCC_OscConfig+0x4ec>)
 800f230:	2201      	movs	r2, #1
 800f232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f234:	f7ff fafa 	bl	800e82c <HAL_GetTick>
 800f238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f23a:	e008      	b.n	800f24e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f23c:	f7ff faf6 	bl	800e82c <HAL_GetTick>
 800f240:	4602      	mov	r2, r0
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	1ad3      	subs	r3, r2, r3
 800f246:	2b02      	cmp	r3, #2
 800f248:	d901      	bls.n	800f24e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800f24a:	2303      	movs	r3, #3
 800f24c:	e056      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f24e:	4b2e      	ldr	r3, [pc, #184]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f256:	2b00      	cmp	r3, #0
 800f258:	d0f0      	beq.n	800f23c <HAL_RCC_OscConfig+0x41c>
 800f25a:	e04e      	b.n	800f2fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f25c:	4b2b      	ldr	r3, [pc, #172]	; (800f30c <HAL_RCC_OscConfig+0x4ec>)
 800f25e:	2200      	movs	r2, #0
 800f260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f262:	f7ff fae3 	bl	800e82c <HAL_GetTick>
 800f266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f268:	e008      	b.n	800f27c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f26a:	f7ff fadf 	bl	800e82c <HAL_GetTick>
 800f26e:	4602      	mov	r2, r0
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	2b02      	cmp	r3, #2
 800f276:	d901      	bls.n	800f27c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800f278:	2303      	movs	r3, #3
 800f27a:	e03f      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f27c:	4b22      	ldr	r3, [pc, #136]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1f0      	bne.n	800f26a <HAL_RCC_OscConfig+0x44a>
 800f288:	e037      	b.n	800f2fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	699b      	ldr	r3, [r3, #24]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800f292:	2301      	movs	r3, #1
 800f294:	e032      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f296:	4b1c      	ldr	r3, [pc, #112]	; (800f308 <HAL_RCC_OscConfig+0x4e8>)
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	699b      	ldr	r3, [r3, #24]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d028      	beq.n	800f2f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d121      	bne.n	800f2f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d11a      	bne.n	800f2f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f2cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d111      	bne.n	800f2f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2dc:	085b      	lsrs	r3, r3, #1
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d107      	bne.n	800f2f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d001      	beq.n	800f2fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e000      	b.n	800f2fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800f2fa:	2300      	movs	r3, #0
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3718      	adds	r7, #24
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	40007000 	.word	0x40007000
 800f308:	40023800 	.word	0x40023800
 800f30c:	42470060 	.word	0x42470060

0800f310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b084      	sub	sp, #16
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d101      	bne.n	800f324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f320:	2301      	movs	r3, #1
 800f322:	e0cc      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f324:	4b68      	ldr	r3, [pc, #416]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f003 0307 	and.w	r3, r3, #7
 800f32c:	683a      	ldr	r2, [r7, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d90c      	bls.n	800f34c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f332:	4b65      	ldr	r3, [pc, #404]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	b2d2      	uxtb	r2, r2
 800f338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f33a:	4b63      	ldr	r3, [pc, #396]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f003 0307 	and.w	r3, r3, #7
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d001      	beq.n	800f34c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f348:	2301      	movs	r3, #1
 800f34a:	e0b8      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f003 0302 	and.w	r3, r3, #2
 800f354:	2b00      	cmp	r3, #0
 800f356:	d020      	beq.n	800f39a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f003 0304 	and.w	r3, r3, #4
 800f360:	2b00      	cmp	r3, #0
 800f362:	d005      	beq.n	800f370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f364:	4b59      	ldr	r3, [pc, #356]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f366:	689b      	ldr	r3, [r3, #8]
 800f368:	4a58      	ldr	r2, [pc, #352]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f36a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800f36e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d005      	beq.n	800f388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f37c:	4b53      	ldr	r3, [pc, #332]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	4a52      	ldr	r2, [pc, #328]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800f386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f388:	4b50      	ldr	r3, [pc, #320]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	494d      	ldr	r1, [pc, #308]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f396:	4313      	orrs	r3, r2
 800f398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d044      	beq.n	800f430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d107      	bne.n	800f3be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f3ae:	4b47      	ldr	r3, [pc, #284]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d119      	bne.n	800f3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e07f      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d003      	beq.n	800f3ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d107      	bne.n	800f3de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f3ce:	4b3f      	ldr	r3, [pc, #252]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	e06f      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f3de:	4b3b      	ldr	r3, [pc, #236]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f003 0302 	and.w	r3, r3, #2
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	e067      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3ee:	4b37      	ldr	r3, [pc, #220]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	f023 0203 	bic.w	r2, r3, #3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	4934      	ldr	r1, [pc, #208]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f400:	f7ff fa14 	bl	800e82c <HAL_GetTick>
 800f404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f406:	e00a      	b.n	800f41e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f408:	f7ff fa10 	bl	800e82c <HAL_GetTick>
 800f40c:	4602      	mov	r2, r0
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	f241 3288 	movw	r2, #5000	; 0x1388
 800f416:	4293      	cmp	r3, r2
 800f418:	d901      	bls.n	800f41e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f41a:	2303      	movs	r3, #3
 800f41c:	e04f      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f41e:	4b2b      	ldr	r3, [pc, #172]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	f003 020c 	and.w	r2, r3, #12
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d1eb      	bne.n	800f408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f430:	4b25      	ldr	r3, [pc, #148]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f003 0307 	and.w	r3, r3, #7
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d20c      	bcs.n	800f458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f43e:	4b22      	ldr	r3, [pc, #136]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	b2d2      	uxtb	r2, r2
 800f444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f446:	4b20      	ldr	r3, [pc, #128]	; (800f4c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0307 	and.w	r3, r3, #7
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	429a      	cmp	r2, r3
 800f452:	d001      	beq.n	800f458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	e032      	b.n	800f4be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	f003 0304 	and.w	r3, r3, #4
 800f460:	2b00      	cmp	r3, #0
 800f462:	d008      	beq.n	800f476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f464:	4b19      	ldr	r3, [pc, #100]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	4916      	ldr	r1, [pc, #88]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f472:	4313      	orrs	r3, r2
 800f474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f003 0308 	and.w	r3, r3, #8
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d009      	beq.n	800f496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f482:	4b12      	ldr	r3, [pc, #72]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	490e      	ldr	r1, [pc, #56]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f492:	4313      	orrs	r3, r2
 800f494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f496:	f000 f821 	bl	800f4dc <HAL_RCC_GetSysClockFreq>
 800f49a:	4602      	mov	r2, r0
 800f49c:	4b0b      	ldr	r3, [pc, #44]	; (800f4cc <HAL_RCC_ClockConfig+0x1bc>)
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	091b      	lsrs	r3, r3, #4
 800f4a2:	f003 030f 	and.w	r3, r3, #15
 800f4a6:	490a      	ldr	r1, [pc, #40]	; (800f4d0 <HAL_RCC_ClockConfig+0x1c0>)
 800f4a8:	5ccb      	ldrb	r3, [r1, r3]
 800f4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f4ae:	4a09      	ldr	r2, [pc, #36]	; (800f4d4 <HAL_RCC_ClockConfig+0x1c4>)
 800f4b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f4b2:	4b09      	ldr	r3, [pc, #36]	; (800f4d8 <HAL_RCC_ClockConfig+0x1c8>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7f1 fcde 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	40023c00 	.word	0x40023c00
 800f4cc:	40023800 	.word	0x40023800
 800f4d0:	080144d0 	.word	0x080144d0
 800f4d4:	20000000 	.word	0x20000000
 800f4d8:	20000028 	.word	0x20000028

0800f4dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f4dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f4e0:	b084      	sub	sp, #16
 800f4e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	607b      	str	r3, [r7, #4]
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	60fb      	str	r3, [r7, #12]
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f4f4:	4b67      	ldr	r3, [pc, #412]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f4f6:	689b      	ldr	r3, [r3, #8]
 800f4f8:	f003 030c 	and.w	r3, r3, #12
 800f4fc:	2b08      	cmp	r3, #8
 800f4fe:	d00d      	beq.n	800f51c <HAL_RCC_GetSysClockFreq+0x40>
 800f500:	2b08      	cmp	r3, #8
 800f502:	f200 80bd 	bhi.w	800f680 <HAL_RCC_GetSysClockFreq+0x1a4>
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <HAL_RCC_GetSysClockFreq+0x34>
 800f50a:	2b04      	cmp	r3, #4
 800f50c:	d003      	beq.n	800f516 <HAL_RCC_GetSysClockFreq+0x3a>
 800f50e:	e0b7      	b.n	800f680 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f510:	4b61      	ldr	r3, [pc, #388]	; (800f698 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f512:	60bb      	str	r3, [r7, #8]
       break;
 800f514:	e0b7      	b.n	800f686 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f516:	4b61      	ldr	r3, [pc, #388]	; (800f69c <HAL_RCC_GetSysClockFreq+0x1c0>)
 800f518:	60bb      	str	r3, [r7, #8]
      break;
 800f51a:	e0b4      	b.n	800f686 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f51c:	4b5d      	ldr	r3, [pc, #372]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f524:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f526:	4b5b      	ldr	r3, [pc, #364]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d04d      	beq.n	800f5ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f532:	4b58      	ldr	r3, [pc, #352]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	099b      	lsrs	r3, r3, #6
 800f538:	461a      	mov	r2, r3
 800f53a:	f04f 0300 	mov.w	r3, #0
 800f53e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f542:	f04f 0100 	mov.w	r1, #0
 800f546:	ea02 0800 	and.w	r8, r2, r0
 800f54a:	ea03 0901 	and.w	r9, r3, r1
 800f54e:	4640      	mov	r0, r8
 800f550:	4649      	mov	r1, r9
 800f552:	f04f 0200 	mov.w	r2, #0
 800f556:	f04f 0300 	mov.w	r3, #0
 800f55a:	014b      	lsls	r3, r1, #5
 800f55c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f560:	0142      	lsls	r2, r0, #5
 800f562:	4610      	mov	r0, r2
 800f564:	4619      	mov	r1, r3
 800f566:	ebb0 0008 	subs.w	r0, r0, r8
 800f56a:	eb61 0109 	sbc.w	r1, r1, r9
 800f56e:	f04f 0200 	mov.w	r2, #0
 800f572:	f04f 0300 	mov.w	r3, #0
 800f576:	018b      	lsls	r3, r1, #6
 800f578:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f57c:	0182      	lsls	r2, r0, #6
 800f57e:	1a12      	subs	r2, r2, r0
 800f580:	eb63 0301 	sbc.w	r3, r3, r1
 800f584:	f04f 0000 	mov.w	r0, #0
 800f588:	f04f 0100 	mov.w	r1, #0
 800f58c:	00d9      	lsls	r1, r3, #3
 800f58e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f592:	00d0      	lsls	r0, r2, #3
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	eb12 0208 	adds.w	r2, r2, r8
 800f59c:	eb43 0309 	adc.w	r3, r3, r9
 800f5a0:	f04f 0000 	mov.w	r0, #0
 800f5a4:	f04f 0100 	mov.w	r1, #0
 800f5a8:	0259      	lsls	r1, r3, #9
 800f5aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800f5ae:	0250      	lsls	r0, r2, #9
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	f04f 0300 	mov.w	r3, #0
 800f5c0:	f7f0 fe5e 	bl	8000280 <__aeabi_uldivmod>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	60fb      	str	r3, [r7, #12]
 800f5cc:	e04a      	b.n	800f664 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5ce:	4b31      	ldr	r3, [pc, #196]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	099b      	lsrs	r3, r3, #6
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	f04f 0300 	mov.w	r3, #0
 800f5da:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f5de:	f04f 0100 	mov.w	r1, #0
 800f5e2:	ea02 0400 	and.w	r4, r2, r0
 800f5e6:	ea03 0501 	and.w	r5, r3, r1
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f04f 0200 	mov.w	r2, #0
 800f5f2:	f04f 0300 	mov.w	r3, #0
 800f5f6:	014b      	lsls	r3, r1, #5
 800f5f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800f5fc:	0142      	lsls	r2, r0, #5
 800f5fe:	4610      	mov	r0, r2
 800f600:	4619      	mov	r1, r3
 800f602:	1b00      	subs	r0, r0, r4
 800f604:	eb61 0105 	sbc.w	r1, r1, r5
 800f608:	f04f 0200 	mov.w	r2, #0
 800f60c:	f04f 0300 	mov.w	r3, #0
 800f610:	018b      	lsls	r3, r1, #6
 800f612:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800f616:	0182      	lsls	r2, r0, #6
 800f618:	1a12      	subs	r2, r2, r0
 800f61a:	eb63 0301 	sbc.w	r3, r3, r1
 800f61e:	f04f 0000 	mov.w	r0, #0
 800f622:	f04f 0100 	mov.w	r1, #0
 800f626:	00d9      	lsls	r1, r3, #3
 800f628:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800f62c:	00d0      	lsls	r0, r2, #3
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	1912      	adds	r2, r2, r4
 800f634:	eb45 0303 	adc.w	r3, r5, r3
 800f638:	f04f 0000 	mov.w	r0, #0
 800f63c:	f04f 0100 	mov.w	r1, #0
 800f640:	0299      	lsls	r1, r3, #10
 800f642:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800f646:	0290      	lsls	r0, r2, #10
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4610      	mov	r0, r2
 800f64e:	4619      	mov	r1, r3
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	461a      	mov	r2, r3
 800f654:	f04f 0300 	mov.w	r3, #0
 800f658:	f7f0 fe12 	bl	8000280 <__aeabi_uldivmod>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	4613      	mov	r3, r2
 800f662:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f664:	4b0b      	ldr	r3, [pc, #44]	; (800f694 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	0c1b      	lsrs	r3, r3, #16
 800f66a:	f003 0303 	and.w	r3, r3, #3
 800f66e:	3301      	adds	r3, #1
 800f670:	005b      	lsls	r3, r3, #1
 800f672:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	fbb2 f3f3 	udiv	r3, r2, r3
 800f67c:	60bb      	str	r3, [r7, #8]
      break;
 800f67e:	e002      	b.n	800f686 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f680:	4b05      	ldr	r3, [pc, #20]	; (800f698 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800f682:	60bb      	str	r3, [r7, #8]
      break;
 800f684:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f686:	68bb      	ldr	r3, [r7, #8]
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3710      	adds	r7, #16
 800f68c:	46bd      	mov	sp, r7
 800f68e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f692:	bf00      	nop
 800f694:	40023800 	.word	0x40023800
 800f698:	00f42400 	.word	0x00f42400
 800f69c:	007a1200 	.word	0x007a1200

0800f6a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f6a0:	b480      	push	{r7}
 800f6a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6a4:	4b03      	ldr	r3, [pc, #12]	; (800f6b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	20000000 	.word	0x20000000

0800f6b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f6bc:	f7ff fff0 	bl	800f6a0 <HAL_RCC_GetHCLKFreq>
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	4b05      	ldr	r3, [pc, #20]	; (800f6d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f6c4:	689b      	ldr	r3, [r3, #8]
 800f6c6:	0b5b      	lsrs	r3, r3, #13
 800f6c8:	f003 0307 	and.w	r3, r3, #7
 800f6cc:	4903      	ldr	r1, [pc, #12]	; (800f6dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800f6ce:	5ccb      	ldrb	r3, [r1, r3]
 800f6d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	40023800 	.word	0x40023800
 800f6dc:	080144e0 	.word	0x080144e0

0800f6e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	220f      	movs	r2, #15
 800f6ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f6f0:	4b12      	ldr	r3, [pc, #72]	; (800f73c <HAL_RCC_GetClockConfig+0x5c>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f003 0203 	and.w	r2, r3, #3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <HAL_RCC_GetClockConfig+0x5c>)
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800f708:	4b0c      	ldr	r3, [pc, #48]	; (800f73c <HAL_RCC_GetClockConfig+0x5c>)
 800f70a:	689b      	ldr	r3, [r3, #8]
 800f70c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f714:	4b09      	ldr	r3, [pc, #36]	; (800f73c <HAL_RCC_GetClockConfig+0x5c>)
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	08db      	lsrs	r3, r3, #3
 800f71a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f722:	4b07      	ldr	r3, [pc, #28]	; (800f740 <HAL_RCC_GetClockConfig+0x60>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0207 	and.w	r2, r3, #7
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	601a      	str	r2, [r3, #0]
}
 800f72e:	bf00      	nop
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr
 800f73a:	bf00      	nop
 800f73c:	40023800 	.word	0x40023800
 800f740:	40023c00 	.word	0x40023c00

0800f744 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f752:	2301      	movs	r3, #1
 800f754:	e07b      	b.n	800f84e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d108      	bne.n	800f770 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f766:	d009      	beq.n	800f77c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2200      	movs	r2, #0
 800f76c:	61da      	str	r2, [r3, #28]
 800f76e:	e005      	b.n	800f77c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2200      	movs	r2, #0
 800f774:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7f1 fac6 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f7b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f7c4:	431a      	orrs	r2, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f7ce:	431a      	orrs	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	f003 0302 	and.w	r3, r3, #2
 800f7d8:	431a      	orrs	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	695b      	ldr	r3, [r3, #20]
 800f7de:	f003 0301 	and.w	r3, r3, #1
 800f7e2:	431a      	orrs	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	699b      	ldr	r3, [r3, #24]
 800f7e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f7ec:	431a      	orrs	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	69db      	ldr	r3, [r3, #28]
 800f7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7f6:	431a      	orrs	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6a1b      	ldr	r3, [r3, #32]
 800f7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f800:	ea42 0103 	orr.w	r1, r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f808:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	430a      	orrs	r2, r1
 800f812:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	699b      	ldr	r3, [r3, #24]
 800f818:	0c1b      	lsrs	r3, r3, #16
 800f81a:	f003 0104 	and.w	r1, r3, #4
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	f003 0210 	and.w	r2, r3, #16
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	430a      	orrs	r2, r1
 800f82c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	69da      	ldr	r2, [r3, #28]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f83c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b08c      	sub	sp, #48	; 0x30
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	60f8      	str	r0, [r7, #12]
 800f85e:	60b9      	str	r1, [r7, #8]
 800f860:	607a      	str	r2, [r7, #4]
 800f862:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f864:	2301      	movs	r3, #1
 800f866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f868:	2300      	movs	r3, #0
 800f86a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800f874:	2b01      	cmp	r3, #1
 800f876:	d101      	bne.n	800f87c <HAL_SPI_TransmitReceive+0x26>
 800f878:	2302      	movs	r3, #2
 800f87a:	e18a      	b.n	800fb92 <HAL_SPI_TransmitReceive+0x33c>
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2201      	movs	r2, #1
 800f880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f884:	f7fe ffd2 	bl	800e82c <HAL_GetTick>
 800f888:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	685b      	ldr	r3, [r3, #4]
 800f898:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800f89a:	887b      	ldrh	r3, [r7, #2]
 800f89c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f89e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d00f      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x70>
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8ac:	d107      	bne.n	800f8be <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d103      	bne.n	800f8be <HAL_SPI_TransmitReceive+0x68>
 800f8b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f8ba:	2b04      	cmp	r3, #4
 800f8bc:	d003      	beq.n	800f8c6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800f8be:	2302      	movs	r3, #2
 800f8c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f8c4:	e15b      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d005      	beq.n	800f8d8 <HAL_SPI_TransmitReceive+0x82>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <HAL_SPI_TransmitReceive+0x82>
 800f8d2:	887b      	ldrh	r3, [r7, #2]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d103      	bne.n	800f8e0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800f8de:	e14e      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	2b04      	cmp	r3, #4
 800f8ea:	d003      	beq.n	800f8f4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2205      	movs	r2, #5
 800f8f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	887a      	ldrh	r2, [r7, #2]
 800f904:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	887a      	ldrh	r2, [r7, #2]
 800f90a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	887a      	ldrh	r2, [r7, #2]
 800f916:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	887a      	ldrh	r2, [r7, #2]
 800f91c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2200      	movs	r2, #0
 800f928:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f934:	2b40      	cmp	r3, #64	; 0x40
 800f936:	d007      	beq.n	800f948 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f946:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f950:	d178      	bne.n	800fa44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	685b      	ldr	r3, [r3, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d002      	beq.n	800f960 <HAL_SPI_TransmitReceive+0x10a>
 800f95a:	8b7b      	ldrh	r3, [r7, #26]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d166      	bne.n	800fa2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f964:	881a      	ldrh	r2, [r3, #0]
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f970:	1c9a      	adds	r2, r3, #2
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	3b01      	subs	r3, #1
 800f97e:	b29a      	uxth	r2, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f984:	e053      	b.n	800fa2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f003 0302 	and.w	r3, r3, #2
 800f990:	2b02      	cmp	r3, #2
 800f992:	d11b      	bne.n	800f9cc <HAL_SPI_TransmitReceive+0x176>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f998:	b29b      	uxth	r3, r3
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d016      	beq.n	800f9cc <HAL_SPI_TransmitReceive+0x176>
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	d113      	bne.n	800f9cc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9a8:	881a      	ldrh	r2, [r3, #0]
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9b4:	1c9a      	adds	r2, r3, #2
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800f9be:	b29b      	uxth	r3, r3
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	689b      	ldr	r3, [r3, #8]
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d119      	bne.n	800fa0e <HAL_SPI_TransmitReceive+0x1b8>
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d014      	beq.n	800fa0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68da      	ldr	r2, [r3, #12]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ee:	b292      	uxth	r2, r2
 800f9f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f6:	1c9a      	adds	r2, r3, #2
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	3b01      	subs	r3, #1
 800fa04:	b29a      	uxth	r2, r3
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fa0e:	f7fe ff0d 	bl	800e82c <HAL_GetTick>
 800fa12:	4602      	mov	r2, r0
 800fa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa16:	1ad3      	subs	r3, r2, r3
 800fa18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d807      	bhi.n	800fa2e <HAL_SPI_TransmitReceive+0x1d8>
 800fa1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa24:	d003      	beq.n	800fa2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800fa26:	2303      	movs	r3, #3
 800fa28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fa2c:	e0a7      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d1a6      	bne.n	800f986 <HAL_SPI_TransmitReceive+0x130>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d1a1      	bne.n	800f986 <HAL_SPI_TransmitReceive+0x130>
 800fa42:	e07c      	b.n	800fb3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d002      	beq.n	800fa52 <HAL_SPI_TransmitReceive+0x1fc>
 800fa4c:	8b7b      	ldrh	r3, [r7, #26]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d16b      	bne.n	800fb2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	330c      	adds	r3, #12
 800fa5c:	7812      	ldrb	r2, [r2, #0]
 800fa5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa64:	1c5a      	adds	r2, r3, #1
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	3b01      	subs	r3, #1
 800fa72:	b29a      	uxth	r2, r3
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa78:	e057      	b.n	800fb2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	f003 0302 	and.w	r3, r3, #2
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d11c      	bne.n	800fac2 <HAL_SPI_TransmitReceive+0x26c>
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d017      	beq.n	800fac2 <HAL_SPI_TransmitReceive+0x26c>
 800fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d114      	bne.n	800fac2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	330c      	adds	r3, #12
 800faa2:	7812      	ldrb	r2, [r2, #0]
 800faa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	3b01      	subs	r3, #1
 800fab8:	b29a      	uxth	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fabe:	2300      	movs	r3, #0
 800fac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	f003 0301 	and.w	r3, r3, #1
 800facc:	2b01      	cmp	r3, #1
 800face:	d119      	bne.n	800fb04 <HAL_SPI_TransmitReceive+0x2ae>
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d014      	beq.n	800fb04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68da      	ldr	r2, [r3, #12]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae4:	b2d2      	uxtb	r2, r2
 800fae6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faec:	1c5a      	adds	r2, r3, #1
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800faf6:	b29b      	uxth	r3, r3
 800faf8:	3b01      	subs	r3, #1
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb00:	2301      	movs	r3, #1
 800fb02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fb04:	f7fe fe92 	bl	800e82c <HAL_GetTick>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0c:	1ad3      	subs	r3, r2, r3
 800fb0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d803      	bhi.n	800fb1c <HAL_SPI_TransmitReceive+0x2c6>
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb1a:	d102      	bne.n	800fb22 <HAL_SPI_TransmitReceive+0x2cc>
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d103      	bne.n	800fb2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800fb28:	e029      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1a2      	bne.n	800fa7a <HAL_SPI_TransmitReceive+0x224>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d19d      	bne.n	800fa7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb42:	68f8      	ldr	r0, [r7, #12]
 800fb44:	f000 f8b2 	bl	800fcac <SPI_EndRxTxTransaction>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d006      	beq.n	800fb5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2220      	movs	r2, #32
 800fb58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800fb5a:	e010      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d10b      	bne.n	800fb7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb64:	2300      	movs	r3, #0
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	617b      	str	r3, [r7, #20]
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	617b      	str	r3, [r7, #20]
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	e000      	b.n	800fb7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800fb7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2201      	movs	r2, #1
 800fb82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800fb8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3730      	adds	r7, #48	; 0x30
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
	...

0800fb9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b088      	sub	sp, #32
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	603b      	str	r3, [r7, #0]
 800fba8:	4613      	mov	r3, r2
 800fbaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800fbac:	f7fe fe3e 	bl	800e82c <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb4:	1a9b      	subs	r3, r3, r2
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	4413      	add	r3, r2
 800fbba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800fbbc:	f7fe fe36 	bl	800e82c <HAL_GetTick>
 800fbc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800fbc2:	4b39      	ldr	r3, [pc, #228]	; (800fca8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	015b      	lsls	r3, r3, #5
 800fbc8:	0d1b      	lsrs	r3, r3, #20
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	fb02 f303 	mul.w	r3, r2, r3
 800fbd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fbd2:	e054      	b.n	800fc7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbda:	d050      	beq.n	800fc7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800fbdc:	f7fe fe26 	bl	800e82c <HAL_GetTick>
 800fbe0:	4602      	mov	r2, r0
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	69fa      	ldr	r2, [r7, #28]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d902      	bls.n	800fbf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d13d      	bne.n	800fc6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	685a      	ldr	r2, [r3, #4]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800fc00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fc0a:	d111      	bne.n	800fc30 <SPI_WaitFlagStateUntilTimeout+0x94>
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	689b      	ldr	r3, [r3, #8]
 800fc10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc14:	d004      	beq.n	800fc20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc1e:	d107      	bne.n	800fc30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc38:	d10f      	bne.n	800fc5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fc58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800fc6a:	2303      	movs	r3, #3
 800fc6c:	e017      	b.n	800fc9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d101      	bne.n	800fc78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	3b01      	subs	r3, #1
 800fc7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	689a      	ldr	r2, [r3, #8]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	4013      	ands	r3, r2
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	bf0c      	ite	eq
 800fc8e:	2301      	moveq	r3, #1
 800fc90:	2300      	movne	r3, #0
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	461a      	mov	r2, r3
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d19b      	bne.n	800fbd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3720      	adds	r7, #32
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20000000 	.word	0x20000000

0800fcac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b088      	sub	sp, #32
 800fcb0:	af02      	add	r7, sp, #8
 800fcb2:	60f8      	str	r0, [r7, #12]
 800fcb4:	60b9      	str	r1, [r7, #8]
 800fcb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fcb8:	4b1b      	ldr	r3, [pc, #108]	; (800fd28 <SPI_EndRxTxTransaction+0x7c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a1b      	ldr	r2, [pc, #108]	; (800fd2c <SPI_EndRxTxTransaction+0x80>)
 800fcbe:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc2:	0d5b      	lsrs	r3, r3, #21
 800fcc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fcc8:	fb02 f303 	mul.w	r3, r2, r3
 800fccc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800fcd6:	d112      	bne.n	800fcfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	2200      	movs	r2, #0
 800fce0:	2180      	movs	r1, #128	; 0x80
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f7ff ff5a 	bl	800fb9c <SPI_WaitFlagStateUntilTimeout>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d016      	beq.n	800fd1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcf2:	f043 0220 	orr.w	r2, r3, #32
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800fcfa:	2303      	movs	r3, #3
 800fcfc:	e00f      	b.n	800fd1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d00a      	beq.n	800fd1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	689b      	ldr	r3, [r3, #8]
 800fd10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd14:	2b80      	cmp	r3, #128	; 0x80
 800fd16:	d0f2      	beq.n	800fcfe <SPI_EndRxTxTransaction+0x52>
 800fd18:	e000      	b.n	800fd1c <SPI_EndRxTxTransaction+0x70>
        break;
 800fd1a:	bf00      	nop
  }

  return HAL_OK;
 800fd1c:	2300      	movs	r3, #0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3718      	adds	r7, #24
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	20000000 	.word	0x20000000
 800fd2c:	165e9f81 	.word	0x165e9f81

0800fd30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d101      	bne.n	800fd42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e041      	b.n	800fdc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d106      	bne.n	800fd5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 f839 	bl	800fdce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2202      	movs	r2, #2
 800fd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	3304      	adds	r3, #4
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4610      	mov	r0, r2
 800fd70:	f000 f9d8 	bl	8010124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2201      	movs	r2, #1
 800fd78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2201      	movs	r2, #1
 800fd80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2201      	movs	r2, #1
 800fd88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2201      	movs	r2, #1
 800fda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2201      	movs	r2, #1
 800fda8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2201      	movs	r2, #1
 800fdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fdc4:	2300      	movs	r3, #0
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3708      	adds	r7, #8
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fdce:	b480      	push	{r7}
 800fdd0:	b083      	sub	sp, #12
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fdd6:	bf00      	nop
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d001      	beq.n	800fdfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e04e      	b.n	800fe9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2202      	movs	r2, #2
 800fe00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68da      	ldr	r2, [r3, #12]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f042 0201 	orr.w	r2, r2, #1
 800fe12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a23      	ldr	r2, [pc, #140]	; (800fea8 <HAL_TIM_Base_Start_IT+0xc4>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d022      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe26:	d01d      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a1f      	ldr	r2, [pc, #124]	; (800feac <HAL_TIM_Base_Start_IT+0xc8>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d018      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a1e      	ldr	r2, [pc, #120]	; (800feb0 <HAL_TIM_Base_Start_IT+0xcc>)
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d013      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a1c      	ldr	r2, [pc, #112]	; (800feb4 <HAL_TIM_Base_Start_IT+0xd0>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d00e      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	4a1b      	ldr	r2, [pc, #108]	; (800feb8 <HAL_TIM_Base_Start_IT+0xd4>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d009      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	4a19      	ldr	r2, [pc, #100]	; (800febc <HAL_TIM_Base_Start_IT+0xd8>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d004      	beq.n	800fe64 <HAL_TIM_Base_Start_IT+0x80>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a18      	ldr	r2, [pc, #96]	; (800fec0 <HAL_TIM_Base_Start_IT+0xdc>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d111      	bne.n	800fe88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	689b      	ldr	r3, [r3, #8]
 800fe6a:	f003 0307 	and.w	r3, r3, #7
 800fe6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2b06      	cmp	r3, #6
 800fe74:	d010      	beq.n	800fe98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	681a      	ldr	r2, [r3, #0]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f042 0201 	orr.w	r2, r2, #1
 800fe84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe86:	e007      	b.n	800fe98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	f042 0201 	orr.w	r2, r2, #1
 800fe96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	40010000 	.word	0x40010000
 800feac:	40000400 	.word	0x40000400
 800feb0:	40000800 	.word	0x40000800
 800feb4:	40000c00 	.word	0x40000c00
 800feb8:	40010400 	.word	0x40010400
 800febc:	40014000 	.word	0x40014000
 800fec0:	40001800 	.word	0x40001800

0800fec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	691b      	ldr	r3, [r3, #16]
 800fed2:	f003 0302 	and.w	r3, r3, #2
 800fed6:	2b02      	cmp	r3, #2
 800fed8:	d122      	bne.n	800ff20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	f003 0302 	and.w	r3, r3, #2
 800fee4:	2b02      	cmp	r3, #2
 800fee6:	d11b      	bne.n	800ff20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	f06f 0202 	mvn.w	r2, #2
 800fef0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2201      	movs	r2, #1
 800fef6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	699b      	ldr	r3, [r3, #24]
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d003      	beq.n	800ff0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f8ee 	bl	80100e8 <HAL_TIM_IC_CaptureCallback>
 800ff0c:	e005      	b.n	800ff1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 f8e0 	bl	80100d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f8f1 	bl	80100fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	f003 0304 	and.w	r3, r3, #4
 800ff2a:	2b04      	cmp	r3, #4
 800ff2c:	d122      	bne.n	800ff74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	f003 0304 	and.w	r3, r3, #4
 800ff38:	2b04      	cmp	r3, #4
 800ff3a:	d11b      	bne.n	800ff74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f06f 0204 	mvn.w	r2, #4
 800ff44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2202      	movs	r2, #2
 800ff4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	699b      	ldr	r3, [r3, #24]
 800ff52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f8c4 	bl	80100e8 <HAL_TIM_IC_CaptureCallback>
 800ff60:	e005      	b.n	800ff6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f8b6 	bl	80100d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f8c7 	bl	80100fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	691b      	ldr	r3, [r3, #16]
 800ff7a:	f003 0308 	and.w	r3, r3, #8
 800ff7e:	2b08      	cmp	r3, #8
 800ff80:	d122      	bne.n	800ffc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	68db      	ldr	r3, [r3, #12]
 800ff88:	f003 0308 	and.w	r3, r3, #8
 800ff8c:	2b08      	cmp	r3, #8
 800ff8e:	d11b      	bne.n	800ffc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f06f 0208 	mvn.w	r2, #8
 800ff98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2204      	movs	r2, #4
 800ff9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	f003 0303 	and.w	r3, r3, #3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d003      	beq.n	800ffb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ffae:	6878      	ldr	r0, [r7, #4]
 800ffb0:	f000 f89a 	bl	80100e8 <HAL_TIM_IC_CaptureCallback>
 800ffb4:	e005      	b.n	800ffc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f88c 	bl	80100d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f000 f89d 	bl	80100fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	f003 0310 	and.w	r3, r3, #16
 800ffd2:	2b10      	cmp	r3, #16
 800ffd4:	d122      	bne.n	801001c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	f003 0310 	and.w	r3, r3, #16
 800ffe0:	2b10      	cmp	r3, #16
 800ffe2:	d11b      	bne.n	801001c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f06f 0210 	mvn.w	r2, #16
 800ffec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2208      	movs	r2, #8
 800fff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d003      	beq.n	801000a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f870 	bl	80100e8 <HAL_TIM_IC_CaptureCallback>
 8010008:	e005      	b.n	8010016 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 f862 	bl	80100d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f873 	bl	80100fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2200      	movs	r2, #0
 801001a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b01      	cmp	r3, #1
 8010028:	d10e      	bne.n	8010048 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	f003 0301 	and.w	r3, r3, #1
 8010034:	2b01      	cmp	r3, #1
 8010036:	d107      	bne.n	8010048 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f06f 0201 	mvn.w	r2, #1
 8010040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7f0 fdec 	bl	8000c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010052:	2b80      	cmp	r3, #128	; 0x80
 8010054:	d10e      	bne.n	8010074 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010060:	2b80      	cmp	r3, #128	; 0x80
 8010062:	d107      	bne.n	8010074 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801006c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f902 	bl	8010278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801007e:	2b40      	cmp	r3, #64	; 0x40
 8010080:	d10e      	bne.n	80100a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801008c:	2b40      	cmp	r3, #64	; 0x40
 801008e:	d107      	bne.n	80100a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 f838 	bl	8010110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	691b      	ldr	r3, [r3, #16]
 80100a6:	f003 0320 	and.w	r3, r3, #32
 80100aa:	2b20      	cmp	r3, #32
 80100ac:	d10e      	bne.n	80100cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	f003 0320 	and.w	r3, r3, #32
 80100b8:	2b20      	cmp	r3, #32
 80100ba:	d107      	bne.n	80100cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f06f 0220 	mvn.w	r2, #32
 80100c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f000 f8cc 	bl	8010264 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80100cc:	bf00      	nop
 80100ce:	3708      	adds	r7, #8
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80100dc:	bf00      	nop
 80100de:	370c      	adds	r7, #12
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr

080100e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b083      	sub	sp, #12
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100f0:	bf00      	nop
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	4a40      	ldr	r2, [pc, #256]	; (8010238 <TIM_Base_SetConfig+0x114>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d013      	beq.n	8010164 <TIM_Base_SetConfig+0x40>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010142:	d00f      	beq.n	8010164 <TIM_Base_SetConfig+0x40>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a3d      	ldr	r2, [pc, #244]	; (801023c <TIM_Base_SetConfig+0x118>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d00b      	beq.n	8010164 <TIM_Base_SetConfig+0x40>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a3c      	ldr	r2, [pc, #240]	; (8010240 <TIM_Base_SetConfig+0x11c>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d007      	beq.n	8010164 <TIM_Base_SetConfig+0x40>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a3b      	ldr	r2, [pc, #236]	; (8010244 <TIM_Base_SetConfig+0x120>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d003      	beq.n	8010164 <TIM_Base_SetConfig+0x40>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a3a      	ldr	r2, [pc, #232]	; (8010248 <TIM_Base_SetConfig+0x124>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d108      	bne.n	8010176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801016a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	685b      	ldr	r3, [r3, #4]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	4313      	orrs	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	4a2f      	ldr	r2, [pc, #188]	; (8010238 <TIM_Base_SetConfig+0x114>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d02b      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010184:	d027      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4a2c      	ldr	r2, [pc, #176]	; (801023c <TIM_Base_SetConfig+0x118>)
 801018a:	4293      	cmp	r3, r2
 801018c:	d023      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4a2b      	ldr	r2, [pc, #172]	; (8010240 <TIM_Base_SetConfig+0x11c>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d01f      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4a2a      	ldr	r2, [pc, #168]	; (8010244 <TIM_Base_SetConfig+0x120>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d01b      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4a29      	ldr	r2, [pc, #164]	; (8010248 <TIM_Base_SetConfig+0x124>)
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d017      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	4a28      	ldr	r2, [pc, #160]	; (801024c <TIM_Base_SetConfig+0x128>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d013      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4a27      	ldr	r2, [pc, #156]	; (8010250 <TIM_Base_SetConfig+0x12c>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d00f      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4a26      	ldr	r2, [pc, #152]	; (8010254 <TIM_Base_SetConfig+0x130>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d00b      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	4a25      	ldr	r2, [pc, #148]	; (8010258 <TIM_Base_SetConfig+0x134>)
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d007      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	4a24      	ldr	r2, [pc, #144]	; (801025c <TIM_Base_SetConfig+0x138>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d003      	beq.n	80101d6 <TIM_Base_SetConfig+0xb2>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	4a23      	ldr	r2, [pc, #140]	; (8010260 <TIM_Base_SetConfig+0x13c>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d108      	bne.n	80101e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	4313      	orrs	r3, r2
 80101e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	695b      	ldr	r3, [r3, #20]
 80101f2:	4313      	orrs	r3, r2
 80101f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	68fa      	ldr	r2, [r7, #12]
 80101fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a0a      	ldr	r2, [pc, #40]	; (8010238 <TIM_Base_SetConfig+0x114>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d003      	beq.n	801021c <TIM_Base_SetConfig+0xf8>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a0c      	ldr	r2, [pc, #48]	; (8010248 <TIM_Base_SetConfig+0x124>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d103      	bne.n	8010224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	691a      	ldr	r2, [r3, #16]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	615a      	str	r2, [r3, #20]
}
 801022a:	bf00      	nop
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop
 8010238:	40010000 	.word	0x40010000
 801023c:	40000400 	.word	0x40000400
 8010240:	40000800 	.word	0x40000800
 8010244:	40000c00 	.word	0x40000c00
 8010248:	40010400 	.word	0x40010400
 801024c:	40014000 	.word	0x40014000
 8010250:	40014400 	.word	0x40014400
 8010254:	40014800 	.word	0x40014800
 8010258:	40001800 	.word	0x40001800
 801025c:	40001c00 	.word	0x40001c00
 8010260:	40002000 	.word	0x40002000

08010264 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801026c:	bf00      	nop
 801026e:	370c      	adds	r7, #12
 8010270:	46bd      	mov	sp, r7
 8010272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010276:	4770      	bx	lr

08010278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010280:	bf00      	nop
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	4603      	mov	r3, r0
 8010294:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010296:	2300      	movs	r3, #0
 8010298:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801029a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801029e:	2b84      	cmp	r3, #132	; 0x84
 80102a0:	d005      	beq.n	80102ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80102a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	4413      	add	r3, r2
 80102aa:	3303      	adds	r3, #3
 80102ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80102ae:	68fb      	ldr	r3, [r7, #12]
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3714      	adds	r7, #20
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80102c0:	f000 fffc 	bl	80112bc <vTaskStartScheduler>
  
  return osOK;
 80102c4:	2300      	movs	r3, #0
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	bd80      	pop	{r7, pc}

080102ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80102ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102cc:	b089      	sub	sp, #36	; 0x24
 80102ce:	af04      	add	r7, sp, #16
 80102d0:	6078      	str	r0, [r7, #4]
 80102d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	695b      	ldr	r3, [r3, #20]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d020      	beq.n	801031e <osThreadCreate+0x54>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d01c      	beq.n	801031e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685c      	ldr	r4, [r3, #4]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681d      	ldr	r5, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	691e      	ldr	r6, [r3, #16]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7ff ffc8 	bl	801028c <makeFreeRtosPriority>
 80102fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010306:	9202      	str	r2, [sp, #8]
 8010308:	9301      	str	r3, [sp, #4]
 801030a:	9100      	str	r1, [sp, #0]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	4632      	mov	r2, r6
 8010310:	4629      	mov	r1, r5
 8010312:	4620      	mov	r0, r4
 8010314:	f000 fe0a 	bl	8010f2c <xTaskCreateStatic>
 8010318:	4603      	mov	r3, r0
 801031a:	60fb      	str	r3, [r7, #12]
 801031c:	e01c      	b.n	8010358 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	685c      	ldr	r4, [r3, #4]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801032a:	b29e      	uxth	r6, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010332:	4618      	mov	r0, r3
 8010334:	f7ff ffaa 	bl	801028c <makeFreeRtosPriority>
 8010338:	4602      	mov	r2, r0
 801033a:	f107 030c 	add.w	r3, r7, #12
 801033e:	9301      	str	r3, [sp, #4]
 8010340:	9200      	str	r2, [sp, #0]
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	4632      	mov	r2, r6
 8010346:	4629      	mov	r1, r5
 8010348:	4620      	mov	r0, r4
 801034a:	f000 fe4c 	bl	8010fe6 <xTaskCreate>
 801034e:	4603      	mov	r3, r0
 8010350:	2b01      	cmp	r3, #1
 8010352:	d001      	beq.n	8010358 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010354:	2300      	movs	r3, #0
 8010356:	e000      	b.n	801035a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010358:	68fb      	ldr	r3, [r7, #12]
}
 801035a:	4618      	mov	r0, r3
 801035c:	3714      	adds	r7, #20
 801035e:	46bd      	mov	sp, r7
 8010360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010362 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b084      	sub	sp, #16
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <osDelay+0x16>
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	e000      	b.n	801037a <osDelay+0x18>
 8010378:	2301      	movs	r3, #1
 801037a:	4618      	mov	r0, r3
 801037c:	f000 ff6a 	bl	8011254 <vTaskDelay>
  
  return osOK;
 8010380:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801038a:	b480      	push	{r7}
 801038c:	b083      	sub	sp, #12
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f103 0208 	add.w	r2, r3, #8
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f103 0208 	add.w	r2, r3, #8
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	f103 0208 	add.w	r2, r3, #8
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80103be:	bf00      	nop
 80103c0:	370c      	adds	r7, #12
 80103c2:	46bd      	mov	sp, r7
 80103c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c8:	4770      	bx	lr

080103ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80103ca:	b480      	push	{r7}
 80103cc:	b083      	sub	sp, #12
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80103d8:	bf00      	nop
 80103da:	370c      	adds	r7, #12
 80103dc:	46bd      	mov	sp, r7
 80103de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e2:	4770      	bx	lr

080103e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b085      	sub	sp, #20
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	68fa      	ldr	r2, [r7, #12]
 80103f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	689a      	ldr	r2, [r3, #8]
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	683a      	ldr	r2, [r7, #0]
 8010408:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	1c5a      	adds	r2, r3, #1
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	601a      	str	r2, [r3, #0]
}
 8010420:	bf00      	nop
 8010422:	3714      	adds	r7, #20
 8010424:	46bd      	mov	sp, r7
 8010426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042a:	4770      	bx	lr

0801042c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801042c:	b480      	push	{r7}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010442:	d103      	bne.n	801044c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	691b      	ldr	r3, [r3, #16]
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	e00c      	b.n	8010466 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	3308      	adds	r3, #8
 8010450:	60fb      	str	r3, [r7, #12]
 8010452:	e002      	b.n	801045a <vListInsert+0x2e>
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	685b      	ldr	r3, [r3, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	429a      	cmp	r2, r3
 8010464:	d2f6      	bcs.n	8010454 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	685a      	ldr	r2, [r3, #4]
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	683a      	ldr	r2, [r7, #0]
 8010474:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	68fa      	ldr	r2, [r7, #12]
 801047a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	683a      	ldr	r2, [r7, #0]
 8010480:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	687a      	ldr	r2, [r7, #4]
 8010486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	601a      	str	r2, [r3, #0]
}
 8010492:	bf00      	nop
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801049e:	b480      	push	{r7}
 80104a0:	b085      	sub	sp, #20
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	691b      	ldr	r3, [r3, #16]
 80104aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	6892      	ldr	r2, [r2, #8]
 80104b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	689b      	ldr	r3, [r3, #8]
 80104ba:	687a      	ldr	r2, [r7, #4]
 80104bc:	6852      	ldr	r2, [r2, #4]
 80104be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d103      	bne.n	80104d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	689a      	ldr	r2, [r3, #8]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2200      	movs	r2, #0
 80104d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	1e5a      	subs	r2, r3, #1
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
	...

080104f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d10a      	bne.n	801051e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801050c:	f383 8811 	msr	BASEPRI, r3
 8010510:	f3bf 8f6f 	isb	sy
 8010514:	f3bf 8f4f 	dsb	sy
 8010518:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801051a:	bf00      	nop
 801051c:	e7fe      	b.n	801051c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801051e:	f001 fe29 	bl	8012174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801052a:	68f9      	ldr	r1, [r7, #12]
 801052c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801052e:	fb01 f303 	mul.w	r3, r1, r3
 8010532:	441a      	add	r2, r3
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681a      	ldr	r2, [r3, #0]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801054e:	3b01      	subs	r3, #1
 8010550:	68f9      	ldr	r1, [r7, #12]
 8010552:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010554:	fb01 f303 	mul.w	r3, r1, r3
 8010558:	441a      	add	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	22ff      	movs	r2, #255	; 0xff
 8010562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	22ff      	movs	r2, #255	; 0xff
 801056a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d114      	bne.n	801059e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	691b      	ldr	r3, [r3, #16]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01a      	beq.n	80105b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3310      	adds	r3, #16
 8010580:	4618      	mov	r0, r3
 8010582:	f001 f8ed 	bl	8011760 <xTaskRemoveFromEventList>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d012      	beq.n	80105b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801058c:	4b0c      	ldr	r3, [pc, #48]	; (80105c0 <xQueueGenericReset+0xcc>)
 801058e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	f3bf 8f4f 	dsb	sy
 8010598:	f3bf 8f6f 	isb	sy
 801059c:	e009      	b.n	80105b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	3310      	adds	r3, #16
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff fef1 	bl	801038a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3324      	adds	r3, #36	; 0x24
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7ff feec 	bl	801038a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80105b2:	f001 fe0f 	bl	80121d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80105b6:	2301      	movs	r3, #1
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	e000ed04 	.word	0xe000ed04

080105c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	; 0x38
 80105c8:	af02      	add	r7, sp, #8
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	607a      	str	r2, [r7, #4]
 80105d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10a      	bne.n	80105ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80105d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105dc:	f383 8811 	msr	BASEPRI, r3
 80105e0:	f3bf 8f6f 	isb	sy
 80105e4:	f3bf 8f4f 	dsb	sy
 80105e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105ea:	bf00      	nop
 80105ec:	e7fe      	b.n	80105ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d10a      	bne.n	801060a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80105f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105f8:	f383 8811 	msr	BASEPRI, r3
 80105fc:	f3bf 8f6f 	isb	sy
 8010600:	f3bf 8f4f 	dsb	sy
 8010604:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010606:	bf00      	nop
 8010608:	e7fe      	b.n	8010608 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d002      	beq.n	8010616 <xQueueGenericCreateStatic+0x52>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d001      	beq.n	801061a <xQueueGenericCreateStatic+0x56>
 8010616:	2301      	movs	r3, #1
 8010618:	e000      	b.n	801061c <xQueueGenericCreateStatic+0x58>
 801061a:	2300      	movs	r3, #0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d10a      	bne.n	8010636 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010624:	f383 8811 	msr	BASEPRI, r3
 8010628:	f3bf 8f6f 	isb	sy
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	623b      	str	r3, [r7, #32]
}
 8010632:	bf00      	nop
 8010634:	e7fe      	b.n	8010634 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <xQueueGenericCreateStatic+0x7e>
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d101      	bne.n	8010646 <xQueueGenericCreateStatic+0x82>
 8010642:	2301      	movs	r3, #1
 8010644:	e000      	b.n	8010648 <xQueueGenericCreateStatic+0x84>
 8010646:	2300      	movs	r3, #0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10a      	bne.n	8010662 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	61fb      	str	r3, [r7, #28]
}
 801065e:	bf00      	nop
 8010660:	e7fe      	b.n	8010660 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010662:	2348      	movs	r3, #72	; 0x48
 8010664:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	2b48      	cmp	r3, #72	; 0x48
 801066a:	d00a      	beq.n	8010682 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010670:	f383 8811 	msr	BASEPRI, r3
 8010674:	f3bf 8f6f 	isb	sy
 8010678:	f3bf 8f4f 	dsb	sy
 801067c:	61bb      	str	r3, [r7, #24]
}
 801067e:	bf00      	nop
 8010680:	e7fe      	b.n	8010680 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010682:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	2b00      	cmp	r3, #0
 801068c:	d00d      	beq.n	80106aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010690:	2201      	movs	r2, #1
 8010692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010696:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	4613      	mov	r3, r2
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	68b9      	ldr	r1, [r7, #8]
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f000 f805 	bl	80106b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3730      	adds	r7, #48	; 0x30
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d103      	bne.n	80106d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	69ba      	ldr	r2, [r7, #24]
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	e002      	b.n	80106d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	68ba      	ldr	r2, [r7, #8]
 80106e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80106e2:	2101      	movs	r1, #1
 80106e4:	69b8      	ldr	r0, [r7, #24]
 80106e6:	f7ff ff05 	bl	80104f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80106ea:	bf00      	nop
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}

080106f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00e      	beq.n	801071e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2200      	movs	r2, #0
 8010704:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010712:	2300      	movs	r3, #0
 8010714:	2200      	movs	r2, #0
 8010716:	2100      	movs	r1, #0
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f000 f81f 	bl	801075c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801071e:	bf00      	nop
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010726:	b580      	push	{r7, lr}
 8010728:	b088      	sub	sp, #32
 801072a:	af02      	add	r7, sp, #8
 801072c:	4603      	mov	r3, r0
 801072e:	6039      	str	r1, [r7, #0]
 8010730:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010732:	2301      	movs	r3, #1
 8010734:	617b      	str	r3, [r7, #20]
 8010736:	2300      	movs	r3, #0
 8010738:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	2200      	movs	r2, #0
 8010742:	6939      	ldr	r1, [r7, #16]
 8010744:	6978      	ldr	r0, [r7, #20]
 8010746:	f7ff ff3d 	bl	80105c4 <xQueueGenericCreateStatic>
 801074a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f7ff ffd0 	bl	80106f2 <prvInitialiseMutex>

		return xNewQueue;
 8010752:	68fb      	ldr	r3, [r7, #12]
	}
 8010754:	4618      	mov	r0, r3
 8010756:	3718      	adds	r7, #24
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b08e      	sub	sp, #56	; 0x38
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	607a      	str	r2, [r7, #4]
 8010768:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801076a:	2300      	movs	r3, #0
 801076c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10a      	bne.n	801078e <xQueueGenericSend+0x32>
	__asm volatile
 8010778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801078a:	bf00      	nop
 801078c:	e7fe      	b.n	801078c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d103      	bne.n	801079c <xQueueGenericSend+0x40>
 8010794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <xQueueGenericSend+0x44>
 801079c:	2301      	movs	r3, #1
 801079e:	e000      	b.n	80107a2 <xQueueGenericSend+0x46>
 80107a0:	2300      	movs	r3, #0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10a      	bne.n	80107bc <xQueueGenericSend+0x60>
	__asm volatile
 80107a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107aa:	f383 8811 	msr	BASEPRI, r3
 80107ae:	f3bf 8f6f 	isb	sy
 80107b2:	f3bf 8f4f 	dsb	sy
 80107b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107b8:	bf00      	nop
 80107ba:	e7fe      	b.n	80107ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2b02      	cmp	r3, #2
 80107c0:	d103      	bne.n	80107ca <xQueueGenericSend+0x6e>
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d101      	bne.n	80107ce <xQueueGenericSend+0x72>
 80107ca:	2301      	movs	r3, #1
 80107cc:	e000      	b.n	80107d0 <xQueueGenericSend+0x74>
 80107ce:	2300      	movs	r3, #0
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d10a      	bne.n	80107ea <xQueueGenericSend+0x8e>
	__asm volatile
 80107d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d8:	f383 8811 	msr	BASEPRI, r3
 80107dc:	f3bf 8f6f 	isb	sy
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	623b      	str	r3, [r7, #32]
}
 80107e6:	bf00      	nop
 80107e8:	e7fe      	b.n	80107e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107ea:	f001 f975 	bl	8011ad8 <xTaskGetSchedulerState>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d102      	bne.n	80107fa <xQueueGenericSend+0x9e>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <xQueueGenericSend+0xa2>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e000      	b.n	8010800 <xQueueGenericSend+0xa4>
 80107fe:	2300      	movs	r3, #0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10a      	bne.n	801081a <xQueueGenericSend+0xbe>
	__asm volatile
 8010804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	61fb      	str	r3, [r7, #28]
}
 8010816:	bf00      	nop
 8010818:	e7fe      	b.n	8010818 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801081a:	f001 fcab 	bl	8012174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010826:	429a      	cmp	r2, r3
 8010828:	d302      	bcc.n	8010830 <xQueueGenericSend+0xd4>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	2b02      	cmp	r3, #2
 801082e:	d129      	bne.n	8010884 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010830:	683a      	ldr	r2, [r7, #0]
 8010832:	68b9      	ldr	r1, [r7, #8]
 8010834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010836:	f000 fa64 	bl	8010d02 <prvCopyDataToQueue>
 801083a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010840:	2b00      	cmp	r3, #0
 8010842:	d010      	beq.n	8010866 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	3324      	adds	r3, #36	; 0x24
 8010848:	4618      	mov	r0, r3
 801084a:	f000 ff89 	bl	8011760 <xTaskRemoveFromEventList>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d013      	beq.n	801087c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010854:	4b3f      	ldr	r3, [pc, #252]	; (8010954 <xQueueGenericSend+0x1f8>)
 8010856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801085a:	601a      	str	r2, [r3, #0]
 801085c:	f3bf 8f4f 	dsb	sy
 8010860:	f3bf 8f6f 	isb	sy
 8010864:	e00a      	b.n	801087c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010868:	2b00      	cmp	r3, #0
 801086a:	d007      	beq.n	801087c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801086c:	4b39      	ldr	r3, [pc, #228]	; (8010954 <xQueueGenericSend+0x1f8>)
 801086e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010872:	601a      	str	r2, [r3, #0]
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801087c:	f001 fcaa 	bl	80121d4 <vPortExitCritical>
				return pdPASS;
 8010880:	2301      	movs	r3, #1
 8010882:	e063      	b.n	801094c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d103      	bne.n	8010892 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801088a:	f001 fca3 	bl	80121d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801088e:	2300      	movs	r3, #0
 8010890:	e05c      	b.n	801094c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010898:	f107 0314 	add.w	r3, r7, #20
 801089c:	4618      	mov	r0, r3
 801089e:	f000 ffc1 	bl	8011824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108a2:	2301      	movs	r3, #1
 80108a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108a6:	f001 fc95 	bl	80121d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108aa:	f000 fd67 	bl	801137c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108ae:	f001 fc61 	bl	8012174 <vPortEnterCritical>
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108b8:	b25b      	sxtb	r3, r3
 80108ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108be:	d103      	bne.n	80108c8 <xQueueGenericSend+0x16c>
 80108c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108c2:	2200      	movs	r2, #0
 80108c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ce:	b25b      	sxtb	r3, r3
 80108d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108d4:	d103      	bne.n	80108de <xQueueGenericSend+0x182>
 80108d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d8:	2200      	movs	r2, #0
 80108da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108de:	f001 fc79 	bl	80121d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108e2:	1d3a      	adds	r2, r7, #4
 80108e4:	f107 0314 	add.w	r3, r7, #20
 80108e8:	4611      	mov	r1, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	f000 ffb0 	bl	8011850 <xTaskCheckForTimeOut>
 80108f0:	4603      	mov	r3, r0
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d124      	bne.n	8010940 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80108f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108f8:	f000 fad5 	bl	8010ea6 <prvIsQueueFull>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d018      	beq.n	8010934 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	3310      	adds	r3, #16
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	4611      	mov	r1, r2
 801090a:	4618      	mov	r0, r3
 801090c:	f000 ff04 	bl	8011718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010912:	f000 fa60 	bl	8010dd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010916:	f000 fd3f 	bl	8011398 <xTaskResumeAll>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	f47f af7c 	bne.w	801081a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010922:	4b0c      	ldr	r3, [pc, #48]	; (8010954 <xQueueGenericSend+0x1f8>)
 8010924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010928:	601a      	str	r2, [r3, #0]
 801092a:	f3bf 8f4f 	dsb	sy
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	e772      	b.n	801081a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010936:	f000 fa4e 	bl	8010dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801093a:	f000 fd2d 	bl	8011398 <xTaskResumeAll>
 801093e:	e76c      	b.n	801081a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010942:	f000 fa48 	bl	8010dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010946:	f000 fd27 	bl	8011398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801094a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801094c:	4618      	mov	r0, r3
 801094e:	3738      	adds	r7, #56	; 0x38
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	e000ed04 	.word	0xe000ed04

08010958 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b08e      	sub	sp, #56	; 0x38
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10a      	bne.n	8010982 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010970:	f383 8811 	msr	BASEPRI, r3
 8010974:	f3bf 8f6f 	isb	sy
 8010978:	f3bf 8f4f 	dsb	sy
 801097c:	623b      	str	r3, [r7, #32]
}
 801097e:	bf00      	nop
 8010980:	e7fe      	b.n	8010980 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <xQueueGiveFromISR+0x48>
	__asm volatile
 801098a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098e:	f383 8811 	msr	BASEPRI, r3
 8010992:	f3bf 8f6f 	isb	sy
 8010996:	f3bf 8f4f 	dsb	sy
 801099a:	61fb      	str	r3, [r7, #28]
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80109a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d103      	bne.n	80109b0 <xQueueGiveFromISR+0x58>
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	689b      	ldr	r3, [r3, #8]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <xQueueGiveFromISR+0x5c>
 80109b0:	2301      	movs	r3, #1
 80109b2:	e000      	b.n	80109b6 <xQueueGiveFromISR+0x5e>
 80109b4:	2300      	movs	r3, #0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d10a      	bne.n	80109d0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80109ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109be:	f383 8811 	msr	BASEPRI, r3
 80109c2:	f3bf 8f6f 	isb	sy
 80109c6:	f3bf 8f4f 	dsb	sy
 80109ca:	61bb      	str	r3, [r7, #24]
}
 80109cc:	bf00      	nop
 80109ce:	e7fe      	b.n	80109ce <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109d0:	f001 fcb2 	bl	8012338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80109d4:	f3ef 8211 	mrs	r2, BASEPRI
 80109d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109dc:	f383 8811 	msr	BASEPRI, r3
 80109e0:	f3bf 8f6f 	isb	sy
 80109e4:	f3bf 8f4f 	dsb	sy
 80109e8:	617a      	str	r2, [r7, #20]
 80109ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80109ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80109f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d22b      	bcs.n	8010a58 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a1a:	d112      	bne.n	8010a42 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d016      	beq.n	8010a52 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	3324      	adds	r3, #36	; 0x24
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 fe99 	bl	8011760 <xTaskRemoveFromEventList>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d00e      	beq.n	8010a52 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d00b      	beq.n	8010a52 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	2201      	movs	r2, #1
 8010a3e:	601a      	str	r2, [r3, #0]
 8010a40:	e007      	b.n	8010a52 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a46:	3301      	adds	r3, #1
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	b25a      	sxtb	r2, r3
 8010a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a52:	2301      	movs	r3, #1
 8010a54:	637b      	str	r3, [r7, #52]	; 0x34
 8010a56:	e001      	b.n	8010a5c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8010a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010a66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3738      	adds	r7, #56	; 0x38
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
	...

08010a74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b08e      	sub	sp, #56	; 0x38
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a86:	2300      	movs	r3, #0
 8010a88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10a      	bne.n	8010aa6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a94:	f383 8811 	msr	BASEPRI, r3
 8010a98:	f3bf 8f6f 	isb	sy
 8010a9c:	f3bf 8f4f 	dsb	sy
 8010aa0:	623b      	str	r3, [r7, #32]
}
 8010aa2:	bf00      	nop
 8010aa4:	e7fe      	b.n	8010aa4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	f383 8811 	msr	BASEPRI, r3
 8010ab6:	f3bf 8f6f 	isb	sy
 8010aba:	f3bf 8f4f 	dsb	sy
 8010abe:	61fb      	str	r3, [r7, #28]
}
 8010ac0:	bf00      	nop
 8010ac2:	e7fe      	b.n	8010ac2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ac4:	f001 f808 	bl	8011ad8 <xTaskGetSchedulerState>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d102      	bne.n	8010ad4 <xQueueSemaphoreTake+0x60>
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d101      	bne.n	8010ad8 <xQueueSemaphoreTake+0x64>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e000      	b.n	8010ada <xQueueSemaphoreTake+0x66>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10a      	bne.n	8010af4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	61bb      	str	r3, [r7, #24]
}
 8010af0:	bf00      	nop
 8010af2:	e7fe      	b.n	8010af2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010af4:	f001 fb3e 	bl	8012174 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010afc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d024      	beq.n	8010b4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b06:	1e5a      	subs	r2, r3, #1
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d104      	bne.n	8010b1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010b14:	f001 f988 	bl	8011e28 <pvTaskIncrementMutexHeldCount>
 8010b18:	4602      	mov	r2, r0
 8010b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	691b      	ldr	r3, [r3, #16]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d00f      	beq.n	8010b46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b28:	3310      	adds	r3, #16
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 fe18 	bl	8011760 <xTaskRemoveFromEventList>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d007      	beq.n	8010b46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b36:	4b54      	ldr	r3, [pc, #336]	; (8010c88 <xQueueSemaphoreTake+0x214>)
 8010b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b3c:	601a      	str	r2, [r3, #0]
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b46:	f001 fb45 	bl	80121d4 <vPortExitCritical>
				return pdPASS;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e097      	b.n	8010c7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d111      	bne.n	8010b78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00a      	beq.n	8010b70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5e:	f383 8811 	msr	BASEPRI, r3
 8010b62:	f3bf 8f6f 	isb	sy
 8010b66:	f3bf 8f4f 	dsb	sy
 8010b6a:	617b      	str	r3, [r7, #20]
}
 8010b6c:	bf00      	nop
 8010b6e:	e7fe      	b.n	8010b6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010b70:	f001 fb30 	bl	80121d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b74:	2300      	movs	r3, #0
 8010b76:	e082      	b.n	8010c7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b7e:	f107 030c 	add.w	r3, r7, #12
 8010b82:	4618      	mov	r0, r3
 8010b84:	f000 fe4e 	bl	8011824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b88:	2301      	movs	r3, #1
 8010b8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b8c:	f001 fb22 	bl	80121d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b90:	f000 fbf4 	bl	801137c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b94:	f001 faee 	bl	8012174 <vPortEnterCritical>
 8010b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b9e:	b25b      	sxtb	r3, r3
 8010ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ba4:	d103      	bne.n	8010bae <xQueueSemaphoreTake+0x13a>
 8010ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bb4:	b25b      	sxtb	r3, r3
 8010bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bba:	d103      	bne.n	8010bc4 <xQueueSemaphoreTake+0x150>
 8010bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bc4:	f001 fb06 	bl	80121d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bc8:	463a      	mov	r2, r7
 8010bca:	f107 030c 	add.w	r3, r7, #12
 8010bce:	4611      	mov	r1, r2
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f000 fe3d 	bl	8011850 <xTaskCheckForTimeOut>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d132      	bne.n	8010c42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010bde:	f000 f94c 	bl	8010e7a <prvIsQueueEmpty>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d026      	beq.n	8010c36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d109      	bne.n	8010c04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010bf0:	f001 fac0 	bl	8012174 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf6:	689b      	ldr	r3, [r3, #8]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 ff8b 	bl	8011b14 <xTaskPriorityInherit>
 8010bfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010c00:	f001 fae8 	bl	80121d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c06:	3324      	adds	r3, #36	; 0x24
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	4611      	mov	r1, r2
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f000 fd83 	bl	8011718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c14:	f000 f8df 	bl	8010dd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c18:	f000 fbbe 	bl	8011398 <xTaskResumeAll>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f47f af68 	bne.w	8010af4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010c24:	4b18      	ldr	r3, [pc, #96]	; (8010c88 <xQueueSemaphoreTake+0x214>)
 8010c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c2a:	601a      	str	r2, [r3, #0]
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	e75e      	b.n	8010af4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c38:	f000 f8cd 	bl	8010dd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c3c:	f000 fbac 	bl	8011398 <xTaskResumeAll>
 8010c40:	e758      	b.n	8010af4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010c42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c44:	f000 f8c7 	bl	8010dd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c48:	f000 fba6 	bl	8011398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c4e:	f000 f914 	bl	8010e7a <prvIsQueueEmpty>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f43f af4d 	beq.w	8010af4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00d      	beq.n	8010c7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010c60:	f001 fa88 	bl	8012174 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c66:	f000 f834 	bl	8010cd2 <prvGetDisinheritPriorityAfterTimeout>
 8010c6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6e:	689b      	ldr	r3, [r3, #8]
 8010c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010c72:	4618      	mov	r0, r3
 8010c74:	f001 f84a 	bl	8011d0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010c78:	f001 faac 	bl	80121d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3738      	adds	r7, #56	; 0x38
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	e000ed04 	.word	0xe000ed04

08010c8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10a      	bne.n	8010cb4 <vQueueDelete+0x28>
	__asm volatile
 8010c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	60bb      	str	r3, [r7, #8]
}
 8010cb0:	bf00      	nop
 8010cb2:	e7fe      	b.n	8010cb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010cb4:	68f8      	ldr	r0, [r7, #12]
 8010cb6:	f000 f90f 	bl	8010ed8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d102      	bne.n	8010cca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f001 fc43 	bl	8012550 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010cca:	bf00      	nop
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010cd2:	b480      	push	{r7}
 8010cd4:	b085      	sub	sp, #20
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d006      	beq.n	8010cf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f1c3 0307 	rsb	r3, r3, #7
 8010cec:	60fb      	str	r3, [r7, #12]
 8010cee:	e001      	b.n	8010cf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b086      	sub	sp, #24
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	60f8      	str	r0, [r7, #12]
 8010d0a:	60b9      	str	r1, [r7, #8]
 8010d0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d10d      	bne.n	8010d3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d14d      	bne.n	8010dc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	689b      	ldr	r3, [r3, #8]
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 ff67 	bl	8011c00 <xTaskPriorityDisinherit>
 8010d32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	2200      	movs	r2, #0
 8010d38:	609a      	str	r2, [r3, #8]
 8010d3a:	e043      	b.n	8010dc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d119      	bne.n	8010d76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	6858      	ldr	r0, [r3, #4]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	68b9      	ldr	r1, [r7, #8]
 8010d4e:	f001 feb2 	bl	8012ab6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5a:	441a      	add	r2, r3
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	685a      	ldr	r2, [r3, #4]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d32b      	bcc.n	8010dc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	605a      	str	r2, [r3, #4]
 8010d74:	e026      	b.n	8010dc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	68d8      	ldr	r0, [r3, #12]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7e:	461a      	mov	r2, r3
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	f001 fe98 	bl	8012ab6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d8e:	425b      	negs	r3, r3
 8010d90:	441a      	add	r2, r3
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	68da      	ldr	r2, [r3, #12]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d207      	bcs.n	8010db2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	689a      	ldr	r2, [r3, #8]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010daa:	425b      	negs	r3, r3
 8010dac:	441a      	add	r2, r3
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2b02      	cmp	r3, #2
 8010db6:	d105      	bne.n	8010dc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d002      	beq.n	8010dc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	1c5a      	adds	r2, r3, #1
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010dcc:	697b      	ldr	r3, [r7, #20]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3718      	adds	r7, #24
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b084      	sub	sp, #16
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010dde:	f001 f9c9 	bl	8012174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010de8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dea:	e011      	b.n	8010e10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d012      	beq.n	8010e1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	3324      	adds	r3, #36	; 0x24
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 fcb1 	bl	8011760 <xTaskRemoveFromEventList>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d001      	beq.n	8010e08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010e04:	f000 fd86 	bl	8011914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010e08:	7bfb      	ldrb	r3, [r7, #15]
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	b2db      	uxtb	r3, r3
 8010e0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	dce9      	bgt.n	8010dec <prvUnlockQueue+0x16>
 8010e18:	e000      	b.n	8010e1c <prvUnlockQueue+0x46>
					break;
 8010e1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	22ff      	movs	r2, #255	; 0xff
 8010e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010e24:	f001 f9d6 	bl	80121d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010e28:	f001 f9a4 	bl	8012174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e34:	e011      	b.n	8010e5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	691b      	ldr	r3, [r3, #16]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d012      	beq.n	8010e64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3310      	adds	r3, #16
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 fc8c 	bl	8011760 <xTaskRemoveFromEventList>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d001      	beq.n	8010e52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010e4e:	f000 fd61 	bl	8011914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010e52:	7bbb      	ldrb	r3, [r7, #14]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	dce9      	bgt.n	8010e36 <prvUnlockQueue+0x60>
 8010e62:	e000      	b.n	8010e66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010e64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	22ff      	movs	r2, #255	; 0xff
 8010e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010e6e:	f001 f9b1 	bl	80121d4 <vPortExitCritical>
}
 8010e72:	bf00      	nop
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}

08010e7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010e7a:	b580      	push	{r7, lr}
 8010e7c:	b084      	sub	sp, #16
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e82:	f001 f977 	bl	8012174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d102      	bne.n	8010e94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	60fb      	str	r3, [r7, #12]
 8010e92:	e001      	b.n	8010e98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e98:	f001 f99c 	bl	80121d4 <vPortExitCritical>

	return xReturn;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b084      	sub	sp, #16
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010eae:	f001 f961 	bl	8012174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d102      	bne.n	8010ec4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	60fb      	str	r3, [r7, #12]
 8010ec2:	e001      	b.n	8010ec8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ec8:	f001 f984 	bl	80121d4 <vPortExitCritical>

	return xReturn;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
	...

08010ed8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010ed8:	b480      	push	{r7}
 8010eda:	b085      	sub	sp, #20
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	60fb      	str	r3, [r7, #12]
 8010ee4:	e016      	b.n	8010f14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010ee6:	4a10      	ldr	r2, [pc, #64]	; (8010f28 <vQueueUnregisterQueue+0x50>)
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	00db      	lsls	r3, r3, #3
 8010eec:	4413      	add	r3, r2
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d10b      	bne.n	8010f0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ef6:	4a0c      	ldr	r2, [pc, #48]	; (8010f28 <vQueueUnregisterQueue+0x50>)
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	2100      	movs	r1, #0
 8010efc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010f00:	4a09      	ldr	r2, [pc, #36]	; (8010f28 <vQueueUnregisterQueue+0x50>)
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	00db      	lsls	r3, r3, #3
 8010f06:	4413      	add	r3, r2
 8010f08:	2200      	movs	r2, #0
 8010f0a:	605a      	str	r2, [r3, #4]
				break;
 8010f0c:	e006      	b.n	8010f1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3301      	adds	r3, #1
 8010f12:	60fb      	str	r3, [r7, #12]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2b07      	cmp	r3, #7
 8010f18:	d9e5      	bls.n	8010ee6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010f1a:	bf00      	nop
 8010f1c:	bf00      	nop
 8010f1e:	3714      	adds	r7, #20
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	2000b660 	.word	0x2000b660

08010f2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b08e      	sub	sp, #56	; 0x38
 8010f30:	af04      	add	r7, sp, #16
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	60b9      	str	r1, [r7, #8]
 8010f36:	607a      	str	r2, [r7, #4]
 8010f38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d10a      	bne.n	8010f56 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f44:	f383 8811 	msr	BASEPRI, r3
 8010f48:	f3bf 8f6f 	isb	sy
 8010f4c:	f3bf 8f4f 	dsb	sy
 8010f50:	623b      	str	r3, [r7, #32]
}
 8010f52:	bf00      	nop
 8010f54:	e7fe      	b.n	8010f54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d10a      	bne.n	8010f72 <xTaskCreateStatic+0x46>
	__asm volatile
 8010f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f60:	f383 8811 	msr	BASEPRI, r3
 8010f64:	f3bf 8f6f 	isb	sy
 8010f68:	f3bf 8f4f 	dsb	sy
 8010f6c:	61fb      	str	r3, [r7, #28]
}
 8010f6e:	bf00      	nop
 8010f70:	e7fe      	b.n	8010f70 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010f72:	2354      	movs	r3, #84	; 0x54
 8010f74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2b54      	cmp	r3, #84	; 0x54
 8010f7a:	d00a      	beq.n	8010f92 <xTaskCreateStatic+0x66>
	__asm volatile
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	f383 8811 	msr	BASEPRI, r3
 8010f84:	f3bf 8f6f 	isb	sy
 8010f88:	f3bf 8f4f 	dsb	sy
 8010f8c:	61bb      	str	r3, [r7, #24]
}
 8010f8e:	bf00      	nop
 8010f90:	e7fe      	b.n	8010f90 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010f92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d01e      	beq.n	8010fd8 <xTaskCreateStatic+0xac>
 8010f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d01b      	beq.n	8010fd8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	2202      	movs	r2, #2
 8010fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	9303      	str	r3, [sp, #12]
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	9302      	str	r3, [sp, #8]
 8010fba:	f107 0314 	add.w	r3, r7, #20
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	68b9      	ldr	r1, [r7, #8]
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f000 f850 	bl	8011070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010fd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fd2:	f000 f8d5 	bl	8011180 <prvAddNewTaskToReadyList>
 8010fd6:	e001      	b.n	8010fdc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010fdc:	697b      	ldr	r3, [r7, #20]
	}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3728      	adds	r7, #40	; 0x28
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}

08010fe6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b08c      	sub	sp, #48	; 0x30
 8010fea:	af04      	add	r7, sp, #16
 8010fec:	60f8      	str	r0, [r7, #12]
 8010fee:	60b9      	str	r1, [r7, #8]
 8010ff0:	603b      	str	r3, [r7, #0]
 8010ff2:	4613      	mov	r3, r2
 8010ff4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ff6:	88fb      	ldrh	r3, [r7, #6]
 8010ff8:	009b      	lsls	r3, r3, #2
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f001 f9dc 	bl	80123b8 <pvPortMalloc>
 8011000:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d00e      	beq.n	8011026 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011008:	2054      	movs	r0, #84	; 0x54
 801100a:	f001 f9d5 	bl	80123b8 <pvPortMalloc>
 801100e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d003      	beq.n	801101e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	697a      	ldr	r2, [r7, #20]
 801101a:	631a      	str	r2, [r3, #48]	; 0x30
 801101c:	e005      	b.n	801102a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801101e:	6978      	ldr	r0, [r7, #20]
 8011020:	f001 fa96 	bl	8012550 <vPortFree>
 8011024:	e001      	b.n	801102a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d017      	beq.n	8011060 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	2200      	movs	r2, #0
 8011034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011038:	88fa      	ldrh	r2, [r7, #6]
 801103a:	2300      	movs	r3, #0
 801103c:	9303      	str	r3, [sp, #12]
 801103e:	69fb      	ldr	r3, [r7, #28]
 8011040:	9302      	str	r3, [sp, #8]
 8011042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	68b9      	ldr	r1, [r7, #8]
 801104e:	68f8      	ldr	r0, [r7, #12]
 8011050:	f000 f80e 	bl	8011070 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011054:	69f8      	ldr	r0, [r7, #28]
 8011056:	f000 f893 	bl	8011180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801105a:	2301      	movs	r3, #1
 801105c:	61bb      	str	r3, [r7, #24]
 801105e:	e002      	b.n	8011066 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011060:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011064:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011066:	69bb      	ldr	r3, [r7, #24]
	}
 8011068:	4618      	mov	r0, r3
 801106a:	3720      	adds	r7, #32
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b088      	sub	sp, #32
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
 801107c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011088:	3b01      	subs	r3, #1
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011090:	69bb      	ldr	r3, [r7, #24]
 8011092:	f023 0307 	bic.w	r3, r3, #7
 8011096:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011098:	69bb      	ldr	r3, [r7, #24]
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00a      	beq.n	80110b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a6:	f383 8811 	msr	BASEPRI, r3
 80110aa:	f3bf 8f6f 	isb	sy
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	617b      	str	r3, [r7, #20]
}
 80110b4:	bf00      	nop
 80110b6:	e7fe      	b.n	80110b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d01f      	beq.n	80110fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80110be:	2300      	movs	r3, #0
 80110c0:	61fb      	str	r3, [r7, #28]
 80110c2:	e012      	b.n	80110ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80110c4:	68ba      	ldr	r2, [r7, #8]
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	4413      	add	r3, r2
 80110ca:	7819      	ldrb	r1, [r3, #0]
 80110cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	4413      	add	r3, r2
 80110d2:	3334      	adds	r3, #52	; 0x34
 80110d4:	460a      	mov	r2, r1
 80110d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	4413      	add	r3, r2
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d006      	beq.n	80110f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	3301      	adds	r3, #1
 80110e8:	61fb      	str	r3, [r7, #28]
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	2b0f      	cmp	r3, #15
 80110ee:	d9e9      	bls.n	80110c4 <prvInitialiseNewTask+0x54>
 80110f0:	e000      	b.n	80110f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80110f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80110f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f6:	2200      	movs	r2, #0
 80110f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110fc:	e003      	b.n	8011106 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011108:	2b06      	cmp	r3, #6
 801110a:	d901      	bls.n	8011110 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801110c:	2306      	movs	r3, #6
 801110e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011114:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801111a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801111e:	2200      	movs	r2, #0
 8011120:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011124:	3304      	adds	r3, #4
 8011126:	4618      	mov	r0, r3
 8011128:	f7ff f94f 	bl	80103ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112e:	3318      	adds	r3, #24
 8011130:	4618      	mov	r0, r3
 8011132:	f7ff f94a 	bl	80103ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801113a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113e:	f1c3 0207 	rsb	r2, r3, #7
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801114a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114e:	2200      	movs	r2, #0
 8011150:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011154:	2200      	movs	r2, #0
 8011156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801115a:	683a      	ldr	r2, [r7, #0]
 801115c:	68f9      	ldr	r1, [r7, #12]
 801115e:	69b8      	ldr	r0, [r7, #24]
 8011160:	f000 fedc 	bl	8011f1c <pxPortInitialiseStack>
 8011164:	4602      	mov	r2, r0
 8011166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011168:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011176:	bf00      	nop
 8011178:	3720      	adds	r7, #32
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
	...

08011180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011188:	f000 fff4 	bl	8012174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801118c:	4b2a      	ldr	r3, [pc, #168]	; (8011238 <prvAddNewTaskToReadyList+0xb8>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	3301      	adds	r3, #1
 8011192:	4a29      	ldr	r2, [pc, #164]	; (8011238 <prvAddNewTaskToReadyList+0xb8>)
 8011194:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011196:	4b29      	ldr	r3, [pc, #164]	; (801123c <prvAddNewTaskToReadyList+0xbc>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d109      	bne.n	80111b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801119e:	4a27      	ldr	r2, [pc, #156]	; (801123c <prvAddNewTaskToReadyList+0xbc>)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80111a4:	4b24      	ldr	r3, [pc, #144]	; (8011238 <prvAddNewTaskToReadyList+0xb8>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d110      	bne.n	80111ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80111ac:	f000 fbd6 	bl	801195c <prvInitialiseTaskLists>
 80111b0:	e00d      	b.n	80111ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80111b2:	4b23      	ldr	r3, [pc, #140]	; (8011240 <prvAddNewTaskToReadyList+0xc0>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d109      	bne.n	80111ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80111ba:	4b20      	ldr	r3, [pc, #128]	; (801123c <prvAddNewTaskToReadyList+0xbc>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d802      	bhi.n	80111ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80111c8:	4a1c      	ldr	r2, [pc, #112]	; (801123c <prvAddNewTaskToReadyList+0xbc>)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80111ce:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <prvAddNewTaskToReadyList+0xc4>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	3301      	adds	r3, #1
 80111d4:	4a1b      	ldr	r2, [pc, #108]	; (8011244 <prvAddNewTaskToReadyList+0xc4>)
 80111d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111dc:	2201      	movs	r2, #1
 80111de:	409a      	lsls	r2, r3
 80111e0:	4b19      	ldr	r3, [pc, #100]	; (8011248 <prvAddNewTaskToReadyList+0xc8>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	4313      	orrs	r3, r2
 80111e6:	4a18      	ldr	r2, [pc, #96]	; (8011248 <prvAddNewTaskToReadyList+0xc8>)
 80111e8:	6013      	str	r3, [r2, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ee:	4613      	mov	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	4413      	add	r3, r2
 80111f4:	009b      	lsls	r3, r3, #2
 80111f6:	4a15      	ldr	r2, [pc, #84]	; (801124c <prvAddNewTaskToReadyList+0xcc>)
 80111f8:	441a      	add	r2, r3
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	3304      	adds	r3, #4
 80111fe:	4619      	mov	r1, r3
 8011200:	4610      	mov	r0, r2
 8011202:	f7ff f8ef 	bl	80103e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011206:	f000 ffe5 	bl	80121d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801120a:	4b0d      	ldr	r3, [pc, #52]	; (8011240 <prvAddNewTaskToReadyList+0xc0>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00e      	beq.n	8011230 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011212:	4b0a      	ldr	r3, [pc, #40]	; (801123c <prvAddNewTaskToReadyList+0xbc>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801121c:	429a      	cmp	r2, r3
 801121e:	d207      	bcs.n	8011230 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011220:	4b0b      	ldr	r3, [pc, #44]	; (8011250 <prvAddNewTaskToReadyList+0xd0>)
 8011222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011226:	601a      	str	r2, [r3, #0]
 8011228:	f3bf 8f4f 	dsb	sy
 801122c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	20000a4c 	.word	0x20000a4c
 801123c:	2000094c 	.word	0x2000094c
 8011240:	20000a58 	.word	0x20000a58
 8011244:	20000a68 	.word	0x20000a68
 8011248:	20000a54 	.word	0x20000a54
 801124c:	20000950 	.word	0x20000950
 8011250:	e000ed04 	.word	0xe000ed04

08011254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801125c:	2300      	movs	r3, #0
 801125e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d017      	beq.n	8011296 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011266:	4b13      	ldr	r3, [pc, #76]	; (80112b4 <vTaskDelay+0x60>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00a      	beq.n	8011284 <vTaskDelay+0x30>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	60bb      	str	r3, [r7, #8]
}
 8011280:	bf00      	nop
 8011282:	e7fe      	b.n	8011282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011284:	f000 f87a 	bl	801137c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011288:	2100      	movs	r1, #0
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f000 fde0 	bl	8011e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011290:	f000 f882 	bl	8011398 <xTaskResumeAll>
 8011294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d107      	bne.n	80112ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801129c:	4b06      	ldr	r3, [pc, #24]	; (80112b8 <vTaskDelay+0x64>)
 801129e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112a2:	601a      	str	r2, [r3, #0]
 80112a4:	f3bf 8f4f 	dsb	sy
 80112a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80112ac:	bf00      	nop
 80112ae:	3710      	adds	r7, #16
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	20000a74 	.word	0x20000a74
 80112b8:	e000ed04 	.word	0xe000ed04

080112bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b08a      	sub	sp, #40	; 0x28
 80112c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80112c2:	2300      	movs	r3, #0
 80112c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80112c6:	2300      	movs	r3, #0
 80112c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80112ca:	463a      	mov	r2, r7
 80112cc:	1d39      	adds	r1, r7, #4
 80112ce:	f107 0308 	add.w	r3, r7, #8
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ef f950 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80112d8:	6839      	ldr	r1, [r7, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	68ba      	ldr	r2, [r7, #8]
 80112de:	9202      	str	r2, [sp, #8]
 80112e0:	9301      	str	r3, [sp, #4]
 80112e2:	2300      	movs	r3, #0
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	2300      	movs	r3, #0
 80112e8:	460a      	mov	r2, r1
 80112ea:	491e      	ldr	r1, [pc, #120]	; (8011364 <vTaskStartScheduler+0xa8>)
 80112ec:	481e      	ldr	r0, [pc, #120]	; (8011368 <vTaskStartScheduler+0xac>)
 80112ee:	f7ff fe1d 	bl	8010f2c <xTaskCreateStatic>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a1d      	ldr	r2, [pc, #116]	; (801136c <vTaskStartScheduler+0xb0>)
 80112f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80112f8:	4b1c      	ldr	r3, [pc, #112]	; (801136c <vTaskStartScheduler+0xb0>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d002      	beq.n	8011306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011300:	2301      	movs	r3, #1
 8011302:	617b      	str	r3, [r7, #20]
 8011304:	e001      	b.n	801130a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011306:	2300      	movs	r3, #0
 8011308:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2b01      	cmp	r3, #1
 801130e:	d116      	bne.n	801133e <vTaskStartScheduler+0x82>
	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	f383 8811 	msr	BASEPRI, r3
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	f3bf 8f4f 	dsb	sy
 8011320:	613b      	str	r3, [r7, #16]
}
 8011322:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011324:	4b12      	ldr	r3, [pc, #72]	; (8011370 <vTaskStartScheduler+0xb4>)
 8011326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801132a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801132c:	4b11      	ldr	r3, [pc, #68]	; (8011374 <vTaskStartScheduler+0xb8>)
 801132e:	2201      	movs	r2, #1
 8011330:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011332:	4b11      	ldr	r3, [pc, #68]	; (8011378 <vTaskStartScheduler+0xbc>)
 8011334:	2200      	movs	r2, #0
 8011336:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011338:	f000 fe7a 	bl	8012030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801133c:	e00e      	b.n	801135c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011344:	d10a      	bne.n	801135c <vTaskStartScheduler+0xa0>
	__asm volatile
 8011346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134a:	f383 8811 	msr	BASEPRI, r3
 801134e:	f3bf 8f6f 	isb	sy
 8011352:	f3bf 8f4f 	dsb	sy
 8011356:	60fb      	str	r3, [r7, #12]
}
 8011358:	bf00      	nop
 801135a:	e7fe      	b.n	801135a <vTaskStartScheduler+0x9e>
}
 801135c:	bf00      	nop
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	080144c8 	.word	0x080144c8
 8011368:	0801192d 	.word	0x0801192d
 801136c:	20000a70 	.word	0x20000a70
 8011370:	20000a6c 	.word	0x20000a6c
 8011374:	20000a58 	.word	0x20000a58
 8011378:	20000a50 	.word	0x20000a50

0801137c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801137c:	b480      	push	{r7}
 801137e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011380:	4b04      	ldr	r3, [pc, #16]	; (8011394 <vTaskSuspendAll+0x18>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	4a03      	ldr	r2, [pc, #12]	; (8011394 <vTaskSuspendAll+0x18>)
 8011388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801138a:	bf00      	nop
 801138c:	46bd      	mov	sp, r7
 801138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011392:	4770      	bx	lr
 8011394:	20000a74 	.word	0x20000a74

08011398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b084      	sub	sp, #16
 801139c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801139e:	2300      	movs	r3, #0
 80113a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80113a2:	2300      	movs	r3, #0
 80113a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80113a6:	4b41      	ldr	r3, [pc, #260]	; (80114ac <xTaskResumeAll+0x114>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10a      	bne.n	80113c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80113ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b2:	f383 8811 	msr	BASEPRI, r3
 80113b6:	f3bf 8f6f 	isb	sy
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	603b      	str	r3, [r7, #0]
}
 80113c0:	bf00      	nop
 80113c2:	e7fe      	b.n	80113c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80113c4:	f000 fed6 	bl	8012174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80113c8:	4b38      	ldr	r3, [pc, #224]	; (80114ac <xTaskResumeAll+0x114>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	3b01      	subs	r3, #1
 80113ce:	4a37      	ldr	r2, [pc, #220]	; (80114ac <xTaskResumeAll+0x114>)
 80113d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113d2:	4b36      	ldr	r3, [pc, #216]	; (80114ac <xTaskResumeAll+0x114>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d161      	bne.n	801149e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80113da:	4b35      	ldr	r3, [pc, #212]	; (80114b0 <xTaskResumeAll+0x118>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d05d      	beq.n	801149e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80113e2:	e02e      	b.n	8011442 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113e4:	4b33      	ldr	r3, [pc, #204]	; (80114b4 <xTaskResumeAll+0x11c>)
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	3318      	adds	r3, #24
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7ff f854 	bl	801049e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	3304      	adds	r3, #4
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7ff f84f 	bl	801049e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011404:	2201      	movs	r2, #1
 8011406:	409a      	lsls	r2, r3
 8011408:	4b2b      	ldr	r3, [pc, #172]	; (80114b8 <xTaskResumeAll+0x120>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	4313      	orrs	r3, r2
 801140e:	4a2a      	ldr	r2, [pc, #168]	; (80114b8 <xTaskResumeAll+0x120>)
 8011410:	6013      	str	r3, [r2, #0]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011416:	4613      	mov	r3, r2
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	4413      	add	r3, r2
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	4a27      	ldr	r2, [pc, #156]	; (80114bc <xTaskResumeAll+0x124>)
 8011420:	441a      	add	r2, r3
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	3304      	adds	r3, #4
 8011426:	4619      	mov	r1, r3
 8011428:	4610      	mov	r0, r2
 801142a:	f7fe ffdb 	bl	80103e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011432:	4b23      	ldr	r3, [pc, #140]	; (80114c0 <xTaskResumeAll+0x128>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011438:	429a      	cmp	r2, r3
 801143a:	d302      	bcc.n	8011442 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801143c:	4b21      	ldr	r3, [pc, #132]	; (80114c4 <xTaskResumeAll+0x12c>)
 801143e:	2201      	movs	r2, #1
 8011440:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011442:	4b1c      	ldr	r3, [pc, #112]	; (80114b4 <xTaskResumeAll+0x11c>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1cc      	bne.n	80113e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d001      	beq.n	8011454 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011450:	f000 fb22 	bl	8011a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011454:	4b1c      	ldr	r3, [pc, #112]	; (80114c8 <xTaskResumeAll+0x130>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d010      	beq.n	8011482 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011460:	f000 f846 	bl	80114f0 <xTaskIncrementTick>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d002      	beq.n	8011470 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801146a:	4b16      	ldr	r3, [pc, #88]	; (80114c4 <xTaskResumeAll+0x12c>)
 801146c:	2201      	movs	r2, #1
 801146e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	3b01      	subs	r3, #1
 8011474:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d1f1      	bne.n	8011460 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 801147c:	4b12      	ldr	r3, [pc, #72]	; (80114c8 <xTaskResumeAll+0x130>)
 801147e:	2200      	movs	r2, #0
 8011480:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011482:	4b10      	ldr	r3, [pc, #64]	; (80114c4 <xTaskResumeAll+0x12c>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d009      	beq.n	801149e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801148a:	2301      	movs	r3, #1
 801148c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801148e:	4b0f      	ldr	r3, [pc, #60]	; (80114cc <xTaskResumeAll+0x134>)
 8011490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011494:	601a      	str	r2, [r3, #0]
 8011496:	f3bf 8f4f 	dsb	sy
 801149a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801149e:	f000 fe99 	bl	80121d4 <vPortExitCritical>

	return xAlreadyYielded;
 80114a2:	68bb      	ldr	r3, [r7, #8]
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3710      	adds	r7, #16
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	20000a74 	.word	0x20000a74
 80114b0:	20000a4c 	.word	0x20000a4c
 80114b4:	20000a0c 	.word	0x20000a0c
 80114b8:	20000a54 	.word	0x20000a54
 80114bc:	20000950 	.word	0x20000950
 80114c0:	2000094c 	.word	0x2000094c
 80114c4:	20000a60 	.word	0x20000a60
 80114c8:	20000a5c 	.word	0x20000a5c
 80114cc:	e000ed04 	.word	0xe000ed04

080114d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80114d6:	4b05      	ldr	r3, [pc, #20]	; (80114ec <xTaskGetTickCount+0x1c>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80114dc:	687b      	ldr	r3, [r7, #4]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	370c      	adds	r7, #12
 80114e2:	46bd      	mov	sp, r7
 80114e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e8:	4770      	bx	lr
 80114ea:	bf00      	nop
 80114ec:	20000a50 	.word	0x20000a50

080114f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80114f6:	2300      	movs	r3, #0
 80114f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114fa:	4b4e      	ldr	r3, [pc, #312]	; (8011634 <xTaskIncrementTick+0x144>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f040 808e 	bne.w	8011620 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011504:	4b4c      	ldr	r3, [pc, #304]	; (8011638 <xTaskIncrementTick+0x148>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	3301      	adds	r3, #1
 801150a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801150c:	4a4a      	ldr	r2, [pc, #296]	; (8011638 <xTaskIncrementTick+0x148>)
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d120      	bne.n	801155a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011518:	4b48      	ldr	r3, [pc, #288]	; (801163c <xTaskIncrementTick+0x14c>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00a      	beq.n	8011538 <xTaskIncrementTick+0x48>
	__asm volatile
 8011522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011526:	f383 8811 	msr	BASEPRI, r3
 801152a:	f3bf 8f6f 	isb	sy
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	603b      	str	r3, [r7, #0]
}
 8011534:	bf00      	nop
 8011536:	e7fe      	b.n	8011536 <xTaskIncrementTick+0x46>
 8011538:	4b40      	ldr	r3, [pc, #256]	; (801163c <xTaskIncrementTick+0x14c>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	60fb      	str	r3, [r7, #12]
 801153e:	4b40      	ldr	r3, [pc, #256]	; (8011640 <xTaskIncrementTick+0x150>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4a3e      	ldr	r2, [pc, #248]	; (801163c <xTaskIncrementTick+0x14c>)
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	4a3e      	ldr	r2, [pc, #248]	; (8011640 <xTaskIncrementTick+0x150>)
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	6013      	str	r3, [r2, #0]
 801154c:	4b3d      	ldr	r3, [pc, #244]	; (8011644 <xTaskIncrementTick+0x154>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	3301      	adds	r3, #1
 8011552:	4a3c      	ldr	r2, [pc, #240]	; (8011644 <xTaskIncrementTick+0x154>)
 8011554:	6013      	str	r3, [r2, #0]
 8011556:	f000 fa9f 	bl	8011a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801155a:	4b3b      	ldr	r3, [pc, #236]	; (8011648 <xTaskIncrementTick+0x158>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	693a      	ldr	r2, [r7, #16]
 8011560:	429a      	cmp	r2, r3
 8011562:	d348      	bcc.n	80115f6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011564:	4b35      	ldr	r3, [pc, #212]	; (801163c <xTaskIncrementTick+0x14c>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d104      	bne.n	8011578 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801156e:	4b36      	ldr	r3, [pc, #216]	; (8011648 <xTaskIncrementTick+0x158>)
 8011570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011574:	601a      	str	r2, [r3, #0]
					break;
 8011576:	e03e      	b.n	80115f6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011578:	4b30      	ldr	r3, [pc, #192]	; (801163c <xTaskIncrementTick+0x14c>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	68db      	ldr	r3, [r3, #12]
 8011580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011588:	693a      	ldr	r2, [r7, #16]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	429a      	cmp	r2, r3
 801158e:	d203      	bcs.n	8011598 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011590:	4a2d      	ldr	r2, [pc, #180]	; (8011648 <xTaskIncrementTick+0x158>)
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011596:	e02e      	b.n	80115f6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	3304      	adds	r3, #4
 801159c:	4618      	mov	r0, r3
 801159e:	f7fe ff7e 	bl	801049e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d004      	beq.n	80115b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	3318      	adds	r3, #24
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fe ff75 	bl	801049e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b8:	2201      	movs	r2, #1
 80115ba:	409a      	lsls	r2, r3
 80115bc:	4b23      	ldr	r3, [pc, #140]	; (801164c <xTaskIncrementTick+0x15c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	4313      	orrs	r3, r2
 80115c2:	4a22      	ldr	r2, [pc, #136]	; (801164c <xTaskIncrementTick+0x15c>)
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ca:	4613      	mov	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	4413      	add	r3, r2
 80115d0:	009b      	lsls	r3, r3, #2
 80115d2:	4a1f      	ldr	r2, [pc, #124]	; (8011650 <xTaskIncrementTick+0x160>)
 80115d4:	441a      	add	r2, r3
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	3304      	adds	r3, #4
 80115da:	4619      	mov	r1, r3
 80115dc:	4610      	mov	r0, r2
 80115de:	f7fe ff01 	bl	80103e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e6:	4b1b      	ldr	r3, [pc, #108]	; (8011654 <xTaskIncrementTick+0x164>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d3b9      	bcc.n	8011564 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80115f0:	2301      	movs	r3, #1
 80115f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115f4:	e7b6      	b.n	8011564 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115f6:	4b17      	ldr	r3, [pc, #92]	; (8011654 <xTaskIncrementTick+0x164>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115fc:	4914      	ldr	r1, [pc, #80]	; (8011650 <xTaskIncrementTick+0x160>)
 80115fe:	4613      	mov	r3, r2
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	4413      	add	r3, r2
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	440b      	add	r3, r1
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2b01      	cmp	r3, #1
 801160c:	d901      	bls.n	8011612 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801160e:	2301      	movs	r3, #1
 8011610:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011612:	4b11      	ldr	r3, [pc, #68]	; (8011658 <xTaskIncrementTick+0x168>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d007      	beq.n	801162a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801161a:	2301      	movs	r3, #1
 801161c:	617b      	str	r3, [r7, #20]
 801161e:	e004      	b.n	801162a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011620:	4b0e      	ldr	r3, [pc, #56]	; (801165c <xTaskIncrementTick+0x16c>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	3301      	adds	r3, #1
 8011626:	4a0d      	ldr	r2, [pc, #52]	; (801165c <xTaskIncrementTick+0x16c>)
 8011628:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801162a:	697b      	ldr	r3, [r7, #20]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3718      	adds	r7, #24
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	20000a74 	.word	0x20000a74
 8011638:	20000a50 	.word	0x20000a50
 801163c:	20000a04 	.word	0x20000a04
 8011640:	20000a08 	.word	0x20000a08
 8011644:	20000a64 	.word	0x20000a64
 8011648:	20000a6c 	.word	0x20000a6c
 801164c:	20000a54 	.word	0x20000a54
 8011650:	20000950 	.word	0x20000950
 8011654:	2000094c 	.word	0x2000094c
 8011658:	20000a60 	.word	0x20000a60
 801165c:	20000a5c 	.word	0x20000a5c

08011660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011660:	b480      	push	{r7}
 8011662:	b087      	sub	sp, #28
 8011664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011666:	4b27      	ldr	r3, [pc, #156]	; (8011704 <vTaskSwitchContext+0xa4>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801166e:	4b26      	ldr	r3, [pc, #152]	; (8011708 <vTaskSwitchContext+0xa8>)
 8011670:	2201      	movs	r2, #1
 8011672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011674:	e03f      	b.n	80116f6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011676:	4b24      	ldr	r3, [pc, #144]	; (8011708 <vTaskSwitchContext+0xa8>)
 8011678:	2200      	movs	r2, #0
 801167a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801167c:	4b23      	ldr	r3, [pc, #140]	; (801170c <vTaskSwitchContext+0xac>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	fab3 f383 	clz	r3, r3
 8011688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801168a:	7afb      	ldrb	r3, [r7, #11]
 801168c:	f1c3 031f 	rsb	r3, r3, #31
 8011690:	617b      	str	r3, [r7, #20]
 8011692:	491f      	ldr	r1, [pc, #124]	; (8011710 <vTaskSwitchContext+0xb0>)
 8011694:	697a      	ldr	r2, [r7, #20]
 8011696:	4613      	mov	r3, r2
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	4413      	add	r3, r2
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	440b      	add	r3, r1
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d10a      	bne.n	80116bc <vTaskSwitchContext+0x5c>
	__asm volatile
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	607b      	str	r3, [r7, #4]
}
 80116b8:	bf00      	nop
 80116ba:	e7fe      	b.n	80116ba <vTaskSwitchContext+0x5a>
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	4613      	mov	r3, r2
 80116c0:	009b      	lsls	r3, r3, #2
 80116c2:	4413      	add	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4a12      	ldr	r2, [pc, #72]	; (8011710 <vTaskSwitchContext+0xb0>)
 80116c8:	4413      	add	r3, r2
 80116ca:	613b      	str	r3, [r7, #16]
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	605a      	str	r2, [r3, #4]
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	685a      	ldr	r2, [r3, #4]
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	3308      	adds	r3, #8
 80116de:	429a      	cmp	r2, r3
 80116e0:	d104      	bne.n	80116ec <vTaskSwitchContext+0x8c>
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	685a      	ldr	r2, [r3, #4]
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	605a      	str	r2, [r3, #4]
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	4a08      	ldr	r2, [pc, #32]	; (8011714 <vTaskSwitchContext+0xb4>)
 80116f4:	6013      	str	r3, [r2, #0]
}
 80116f6:	bf00      	nop
 80116f8:	371c      	adds	r7, #28
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	20000a74 	.word	0x20000a74
 8011708:	20000a60 	.word	0x20000a60
 801170c:	20000a54 	.word	0x20000a54
 8011710:	20000950 	.word	0x20000950
 8011714:	2000094c 	.word	0x2000094c

08011718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b084      	sub	sp, #16
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10a      	bne.n	801173e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172c:	f383 8811 	msr	BASEPRI, r3
 8011730:	f3bf 8f6f 	isb	sy
 8011734:	f3bf 8f4f 	dsb	sy
 8011738:	60fb      	str	r3, [r7, #12]
}
 801173a:	bf00      	nop
 801173c:	e7fe      	b.n	801173c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801173e:	4b07      	ldr	r3, [pc, #28]	; (801175c <vTaskPlaceOnEventList+0x44>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	3318      	adds	r3, #24
 8011744:	4619      	mov	r1, r3
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7fe fe70 	bl	801042c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801174c:	2101      	movs	r1, #1
 801174e:	6838      	ldr	r0, [r7, #0]
 8011750:	f000 fb7e 	bl	8011e50 <prvAddCurrentTaskToDelayedList>
}
 8011754:	bf00      	nop
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}
 801175c:	2000094c 	.word	0x2000094c

08011760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b086      	sub	sp, #24
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	68db      	ldr	r3, [r3, #12]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011770:	693b      	ldr	r3, [r7, #16]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d10a      	bne.n	801178c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177a:	f383 8811 	msr	BASEPRI, r3
 801177e:	f3bf 8f6f 	isb	sy
 8011782:	f3bf 8f4f 	dsb	sy
 8011786:	60fb      	str	r3, [r7, #12]
}
 8011788:	bf00      	nop
 801178a:	e7fe      	b.n	801178a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	3318      	adds	r3, #24
 8011790:	4618      	mov	r0, r3
 8011792:	f7fe fe84 	bl	801049e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011796:	4b1d      	ldr	r3, [pc, #116]	; (801180c <xTaskRemoveFromEventList+0xac>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d11c      	bne.n	80117d8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	3304      	adds	r3, #4
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fe fe7b 	bl	801049e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ac:	2201      	movs	r2, #1
 80117ae:	409a      	lsls	r2, r3
 80117b0:	4b17      	ldr	r3, [pc, #92]	; (8011810 <xTaskRemoveFromEventList+0xb0>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	4313      	orrs	r3, r2
 80117b6:	4a16      	ldr	r2, [pc, #88]	; (8011810 <xTaskRemoveFromEventList+0xb0>)
 80117b8:	6013      	str	r3, [r2, #0]
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117be:	4613      	mov	r3, r2
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	4413      	add	r3, r2
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	4a13      	ldr	r2, [pc, #76]	; (8011814 <xTaskRemoveFromEventList+0xb4>)
 80117c8:	441a      	add	r2, r3
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	3304      	adds	r3, #4
 80117ce:	4619      	mov	r1, r3
 80117d0:	4610      	mov	r0, r2
 80117d2:	f7fe fe07 	bl	80103e4 <vListInsertEnd>
 80117d6:	e005      	b.n	80117e4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	3318      	adds	r3, #24
 80117dc:	4619      	mov	r1, r3
 80117de:	480e      	ldr	r0, [pc, #56]	; (8011818 <xTaskRemoveFromEventList+0xb8>)
 80117e0:	f7fe fe00 	bl	80103e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117e4:	693b      	ldr	r3, [r7, #16]
 80117e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117e8:	4b0c      	ldr	r3, [pc, #48]	; (801181c <xTaskRemoveFromEventList+0xbc>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d905      	bls.n	80117fe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80117f2:	2301      	movs	r3, #1
 80117f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80117f6:	4b0a      	ldr	r3, [pc, #40]	; (8011820 <xTaskRemoveFromEventList+0xc0>)
 80117f8:	2201      	movs	r2, #1
 80117fa:	601a      	str	r2, [r3, #0]
 80117fc:	e001      	b.n	8011802 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80117fe:	2300      	movs	r3, #0
 8011800:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011802:	697b      	ldr	r3, [r7, #20]
}
 8011804:	4618      	mov	r0, r3
 8011806:	3718      	adds	r7, #24
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	20000a74 	.word	0x20000a74
 8011810:	20000a54 	.word	0x20000a54
 8011814:	20000950 	.word	0x20000950
 8011818:	20000a0c 	.word	0x20000a0c
 801181c:	2000094c 	.word	0x2000094c
 8011820:	20000a60 	.word	0x20000a60

08011824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801182c:	4b06      	ldr	r3, [pc, #24]	; (8011848 <vTaskInternalSetTimeOutState+0x24>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011834:	4b05      	ldr	r3, [pc, #20]	; (801184c <vTaskInternalSetTimeOutState+0x28>)
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	605a      	str	r2, [r3, #4]
}
 801183c:	bf00      	nop
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011846:	4770      	bx	lr
 8011848:	20000a64 	.word	0x20000a64
 801184c:	20000a50 	.word	0x20000a50

08011850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b088      	sub	sp, #32
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d10a      	bne.n	8011876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011864:	f383 8811 	msr	BASEPRI, r3
 8011868:	f3bf 8f6f 	isb	sy
 801186c:	f3bf 8f4f 	dsb	sy
 8011870:	613b      	str	r3, [r7, #16]
}
 8011872:	bf00      	nop
 8011874:	e7fe      	b.n	8011874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d10a      	bne.n	8011892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801187c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011880:	f383 8811 	msr	BASEPRI, r3
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	60fb      	str	r3, [r7, #12]
}
 801188e:	bf00      	nop
 8011890:	e7fe      	b.n	8011890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011892:	f000 fc6f 	bl	8012174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011896:	4b1d      	ldr	r3, [pc, #116]	; (801190c <xTaskCheckForTimeOut+0xbc>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	69ba      	ldr	r2, [r7, #24]
 80118a2:	1ad3      	subs	r3, r2, r3
 80118a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118ae:	d102      	bne.n	80118b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80118b0:	2300      	movs	r3, #0
 80118b2:	61fb      	str	r3, [r7, #28]
 80118b4:	e023      	b.n	80118fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681a      	ldr	r2, [r3, #0]
 80118ba:	4b15      	ldr	r3, [pc, #84]	; (8011910 <xTaskCheckForTimeOut+0xc0>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d007      	beq.n	80118d2 <xTaskCheckForTimeOut+0x82>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	69ba      	ldr	r2, [r7, #24]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d302      	bcc.n	80118d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80118cc:	2301      	movs	r3, #1
 80118ce:	61fb      	str	r3, [r7, #28]
 80118d0:	e015      	b.n	80118fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d20b      	bcs.n	80118f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	681a      	ldr	r2, [r3, #0]
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	1ad2      	subs	r2, r2, r3
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f7ff ff9b 	bl	8011824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	61fb      	str	r3, [r7, #28]
 80118f2:	e004      	b.n	80118fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	2200      	movs	r2, #0
 80118f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80118fa:	2301      	movs	r3, #1
 80118fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80118fe:	f000 fc69 	bl	80121d4 <vPortExitCritical>

	return xReturn;
 8011902:	69fb      	ldr	r3, [r7, #28]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3720      	adds	r7, #32
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}
 801190c:	20000a50 	.word	0x20000a50
 8011910:	20000a64 	.word	0x20000a64

08011914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011914:	b480      	push	{r7}
 8011916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011918:	4b03      	ldr	r3, [pc, #12]	; (8011928 <vTaskMissedYield+0x14>)
 801191a:	2201      	movs	r2, #1
 801191c:	601a      	str	r2, [r3, #0]
}
 801191e:	bf00      	nop
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	20000a60 	.word	0x20000a60

0801192c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011934:	f000 f852 	bl	80119dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011938:	4b06      	ldr	r3, [pc, #24]	; (8011954 <prvIdleTask+0x28>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2b01      	cmp	r3, #1
 801193e:	d9f9      	bls.n	8011934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011940:	4b05      	ldr	r3, [pc, #20]	; (8011958 <prvIdleTask+0x2c>)
 8011942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011950:	e7f0      	b.n	8011934 <prvIdleTask+0x8>
 8011952:	bf00      	nop
 8011954:	20000950 	.word	0x20000950
 8011958:	e000ed04 	.word	0xe000ed04

0801195c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011962:	2300      	movs	r3, #0
 8011964:	607b      	str	r3, [r7, #4]
 8011966:	e00c      	b.n	8011982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	4613      	mov	r3, r2
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	4413      	add	r3, r2
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4a12      	ldr	r2, [pc, #72]	; (80119bc <prvInitialiseTaskLists+0x60>)
 8011974:	4413      	add	r3, r2
 8011976:	4618      	mov	r0, r3
 8011978:	f7fe fd07 	bl	801038a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3301      	adds	r3, #1
 8011980:	607b      	str	r3, [r7, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b06      	cmp	r3, #6
 8011986:	d9ef      	bls.n	8011968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011988:	480d      	ldr	r0, [pc, #52]	; (80119c0 <prvInitialiseTaskLists+0x64>)
 801198a:	f7fe fcfe 	bl	801038a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801198e:	480d      	ldr	r0, [pc, #52]	; (80119c4 <prvInitialiseTaskLists+0x68>)
 8011990:	f7fe fcfb 	bl	801038a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011994:	480c      	ldr	r0, [pc, #48]	; (80119c8 <prvInitialiseTaskLists+0x6c>)
 8011996:	f7fe fcf8 	bl	801038a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801199a:	480c      	ldr	r0, [pc, #48]	; (80119cc <prvInitialiseTaskLists+0x70>)
 801199c:	f7fe fcf5 	bl	801038a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80119a0:	480b      	ldr	r0, [pc, #44]	; (80119d0 <prvInitialiseTaskLists+0x74>)
 80119a2:	f7fe fcf2 	bl	801038a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <prvInitialiseTaskLists+0x78>)
 80119a8:	4a05      	ldr	r2, [pc, #20]	; (80119c0 <prvInitialiseTaskLists+0x64>)
 80119aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80119ac:	4b0a      	ldr	r3, [pc, #40]	; (80119d8 <prvInitialiseTaskLists+0x7c>)
 80119ae:	4a05      	ldr	r2, [pc, #20]	; (80119c4 <prvInitialiseTaskLists+0x68>)
 80119b0:	601a      	str	r2, [r3, #0]
}
 80119b2:	bf00      	nop
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	20000950 	.word	0x20000950
 80119c0:	200009dc 	.word	0x200009dc
 80119c4:	200009f0 	.word	0x200009f0
 80119c8:	20000a0c 	.word	0x20000a0c
 80119cc:	20000a20 	.word	0x20000a20
 80119d0:	20000a38 	.word	0x20000a38
 80119d4:	20000a04 	.word	0x20000a04
 80119d8:	20000a08 	.word	0x20000a08

080119dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b082      	sub	sp, #8
 80119e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119e2:	e019      	b.n	8011a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80119e4:	f000 fbc6 	bl	8012174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119e8:	4b10      	ldr	r3, [pc, #64]	; (8011a2c <prvCheckTasksWaitingTermination+0x50>)
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	3304      	adds	r3, #4
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fe fd52 	bl	801049e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80119fa:	4b0d      	ldr	r3, [pc, #52]	; (8011a30 <prvCheckTasksWaitingTermination+0x54>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	3b01      	subs	r3, #1
 8011a00:	4a0b      	ldr	r2, [pc, #44]	; (8011a30 <prvCheckTasksWaitingTermination+0x54>)
 8011a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011a04:	4b0b      	ldr	r3, [pc, #44]	; (8011a34 <prvCheckTasksWaitingTermination+0x58>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	4a0a      	ldr	r2, [pc, #40]	; (8011a34 <prvCheckTasksWaitingTermination+0x58>)
 8011a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011a0e:	f000 fbe1 	bl	80121d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f000 f810 	bl	8011a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011a18:	4b06      	ldr	r3, [pc, #24]	; (8011a34 <prvCheckTasksWaitingTermination+0x58>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1e1      	bne.n	80119e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011a20:	bf00      	nop
 8011a22:	bf00      	nop
 8011a24:	3708      	adds	r7, #8
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}
 8011a2a:	bf00      	nop
 8011a2c:	20000a20 	.word	0x20000a20
 8011a30:	20000a4c 	.word	0x20000a4c
 8011a34:	20000a34 	.word	0x20000a34

08011a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d108      	bne.n	8011a5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fd7e 	bl	8012550 <vPortFree>
				vPortFree( pxTCB );
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f000 fd7b 	bl	8012550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a5a:	e018      	b.n	8011a8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d103      	bne.n	8011a6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fd72 	bl	8012550 <vPortFree>
	}
 8011a6c:	e00f      	b.n	8011a8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d00a      	beq.n	8011a8e <prvDeleteTCB+0x56>
	__asm volatile
 8011a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7c:	f383 8811 	msr	BASEPRI, r3
 8011a80:	f3bf 8f6f 	isb	sy
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	60fb      	str	r3, [r7, #12]
}
 8011a8a:	bf00      	nop
 8011a8c:	e7fe      	b.n	8011a8c <prvDeleteTCB+0x54>
	}
 8011a8e:	bf00      	nop
 8011a90:	3710      	adds	r7, #16
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
	...

08011a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a9e:	4b0c      	ldr	r3, [pc, #48]	; (8011ad0 <prvResetNextTaskUnblockTime+0x38>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d104      	bne.n	8011ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011aa8:	4b0a      	ldr	r3, [pc, #40]	; (8011ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8011aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011ab0:	e008      	b.n	8011ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ab2:	4b07      	ldr	r3, [pc, #28]	; (8011ad0 <prvResetNextTaskUnblockTime+0x38>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	68db      	ldr	r3, [r3, #12]
 8011aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	4a04      	ldr	r2, [pc, #16]	; (8011ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8011ac2:	6013      	str	r3, [r2, #0]
}
 8011ac4:	bf00      	nop
 8011ac6:	370c      	adds	r7, #12
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr
 8011ad0:	20000a04 	.word	0x20000a04
 8011ad4:	20000a6c 	.word	0x20000a6c

08011ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011ade:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <xTaskGetSchedulerState+0x34>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d102      	bne.n	8011aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	607b      	str	r3, [r7, #4]
 8011aea:	e008      	b.n	8011afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011aec:	4b08      	ldr	r3, [pc, #32]	; (8011b10 <xTaskGetSchedulerState+0x38>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d102      	bne.n	8011afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011af4:	2302      	movs	r3, #2
 8011af6:	607b      	str	r3, [r7, #4]
 8011af8:	e001      	b.n	8011afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011afa:	2300      	movs	r3, #0
 8011afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011afe:	687b      	ldr	r3, [r7, #4]
	}
 8011b00:	4618      	mov	r0, r3
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	20000a58 	.word	0x20000a58
 8011b10:	20000a74 	.word	0x20000a74

08011b14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011b20:	2300      	movs	r3, #0
 8011b22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d05e      	beq.n	8011be8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b2e:	4b31      	ldr	r3, [pc, #196]	; (8011bf4 <xTaskPriorityInherit+0xe0>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d24e      	bcs.n	8011bd6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	db06      	blt.n	8011b4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b40:	4b2c      	ldr	r3, [pc, #176]	; (8011bf4 <xTaskPriorityInherit+0xe0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	f1c3 0207 	rsb	r2, r3, #7
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	6959      	ldr	r1, [r3, #20]
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b56:	4613      	mov	r3, r2
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	4a26      	ldr	r2, [pc, #152]	; (8011bf8 <xTaskPriorityInherit+0xe4>)
 8011b60:	4413      	add	r3, r2
 8011b62:	4299      	cmp	r1, r3
 8011b64:	d12f      	bne.n	8011bc6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b66:	68bb      	ldr	r3, [r7, #8]
 8011b68:	3304      	adds	r3, #4
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fe fc97 	bl	801049e <uxListRemove>
 8011b70:	4603      	mov	r3, r0
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d10a      	bne.n	8011b8c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b80:	43da      	mvns	r2, r3
 8011b82:	4b1e      	ldr	r3, [pc, #120]	; (8011bfc <xTaskPriorityInherit+0xe8>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4013      	ands	r3, r2
 8011b88:	4a1c      	ldr	r2, [pc, #112]	; (8011bfc <xTaskPriorityInherit+0xe8>)
 8011b8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b8c:	4b19      	ldr	r3, [pc, #100]	; (8011bf4 <xTaskPriorityInherit+0xe0>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	409a      	lsls	r2, r3
 8011b9e:	4b17      	ldr	r3, [pc, #92]	; (8011bfc <xTaskPriorityInherit+0xe8>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	4a15      	ldr	r2, [pc, #84]	; (8011bfc <xTaskPriorityInherit+0xe8>)
 8011ba6:	6013      	str	r3, [r2, #0]
 8011ba8:	68bb      	ldr	r3, [r7, #8]
 8011baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bac:	4613      	mov	r3, r2
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	4a10      	ldr	r2, [pc, #64]	; (8011bf8 <xTaskPriorityInherit+0xe4>)
 8011bb6:	441a      	add	r2, r3
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	3304      	adds	r3, #4
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	4610      	mov	r0, r2
 8011bc0:	f7fe fc10 	bl	80103e4 <vListInsertEnd>
 8011bc4:	e004      	b.n	8011bd0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011bc6:	4b0b      	ldr	r3, [pc, #44]	; (8011bf4 <xTaskPriorityInherit+0xe0>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	60fb      	str	r3, [r7, #12]
 8011bd4:	e008      	b.n	8011be8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011bda:	4b06      	ldr	r3, [pc, #24]	; (8011bf4 <xTaskPriorityInherit+0xe0>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	429a      	cmp	r2, r3
 8011be2:	d201      	bcs.n	8011be8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011be4:	2301      	movs	r3, #1
 8011be6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011be8:	68fb      	ldr	r3, [r7, #12]
	}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	2000094c 	.word	0x2000094c
 8011bf8:	20000950 	.word	0x20000950
 8011bfc:	20000a54 	.word	0x20000a54

08011c00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b086      	sub	sp, #24
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d06e      	beq.n	8011cf4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011c16:	4b3a      	ldr	r3, [pc, #232]	; (8011d00 <xTaskPriorityDisinherit+0x100>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	693a      	ldr	r2, [r7, #16]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d00a      	beq.n	8011c36 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c24:	f383 8811 	msr	BASEPRI, r3
 8011c28:	f3bf 8f6f 	isb	sy
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	60fb      	str	r3, [r7, #12]
}
 8011c32:	bf00      	nop
 8011c34:	e7fe      	b.n	8011c34 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d10a      	bne.n	8011c54 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	60bb      	str	r3, [r7, #8]
}
 8011c50:	bf00      	nop
 8011c52:	e7fe      	b.n	8011c52 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c58:	1e5a      	subs	r2, r3, #1
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d044      	beq.n	8011cf4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d140      	bne.n	8011cf4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	3304      	adds	r3, #4
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7fe fc11 	bl	801049e <uxListRemove>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d115      	bne.n	8011cae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c86:	491f      	ldr	r1, [pc, #124]	; (8011d04 <xTaskPriorityDisinherit+0x104>)
 8011c88:	4613      	mov	r3, r2
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	4413      	add	r3, r2
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	440b      	add	r3, r1
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d10a      	bne.n	8011cae <xTaskPriorityDisinherit+0xae>
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8011ca2:	43da      	mvns	r2, r3
 8011ca4:	4b18      	ldr	r3, [pc, #96]	; (8011d08 <xTaskPriorityDisinherit+0x108>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4013      	ands	r3, r2
 8011caa:	4a17      	ldr	r2, [pc, #92]	; (8011d08 <xTaskPriorityDisinherit+0x108>)
 8011cac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cb2:	693b      	ldr	r3, [r7, #16]
 8011cb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cba:	f1c3 0207 	rsb	r2, r3, #7
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011cc2:	693b      	ldr	r3, [r7, #16]
 8011cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	409a      	lsls	r2, r3
 8011cca:	4b0f      	ldr	r3, [pc, #60]	; (8011d08 <xTaskPriorityDisinherit+0x108>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	4a0d      	ldr	r2, [pc, #52]	; (8011d08 <xTaskPriorityDisinherit+0x108>)
 8011cd2:	6013      	str	r3, [r2, #0]
 8011cd4:	693b      	ldr	r3, [r7, #16]
 8011cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd8:	4613      	mov	r3, r2
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4413      	add	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4a08      	ldr	r2, [pc, #32]	; (8011d04 <xTaskPriorityDisinherit+0x104>)
 8011ce2:	441a      	add	r2, r3
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	3304      	adds	r3, #4
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4610      	mov	r0, r2
 8011cec:	f7fe fb7a 	bl	80103e4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cf4:	697b      	ldr	r3, [r7, #20]
	}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3718      	adds	r7, #24
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	2000094c 	.word	0x2000094c
 8011d04:	20000950 	.word	0x20000950
 8011d08:	20000a54 	.word	0x20000a54

08011d0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b088      	sub	sp, #32
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
 8011d14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d077      	beq.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d10a      	bne.n	8011d42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d30:	f383 8811 	msr	BASEPRI, r3
 8011d34:	f3bf 8f6f 	isb	sy
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	60fb      	str	r3, [r7, #12]
}
 8011d3e:	bf00      	nop
 8011d40:	e7fe      	b.n	8011d40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011d42:	69bb      	ldr	r3, [r7, #24]
 8011d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d902      	bls.n	8011d52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	61fb      	str	r3, [r7, #28]
 8011d50:	e002      	b.n	8011d58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d5c:	69fa      	ldr	r2, [r7, #28]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d058      	beq.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d66:	697a      	ldr	r2, [r7, #20]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d153      	bne.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d6c:	4b2b      	ldr	r3, [pc, #172]	; (8011e1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	69ba      	ldr	r2, [r7, #24]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d10a      	bne.n	8011d8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	60bb      	str	r3, [r7, #8]
}
 8011d88:	bf00      	nop
 8011d8a:	e7fe      	b.n	8011d8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d92:	69bb      	ldr	r3, [r7, #24]
 8011d94:	69fa      	ldr	r2, [r7, #28]
 8011d96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	699b      	ldr	r3, [r3, #24]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	db04      	blt.n	8011daa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	f1c3 0207 	rsb	r2, r3, #7
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	6959      	ldr	r1, [r3, #20]
 8011dae:	693a      	ldr	r2, [r7, #16]
 8011db0:	4613      	mov	r3, r2
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	4a19      	ldr	r2, [pc, #100]	; (8011e20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011dba:	4413      	add	r3, r2
 8011dbc:	4299      	cmp	r1, r3
 8011dbe:	d129      	bne.n	8011e14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7fe fb6a 	bl	801049e <uxListRemove>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10a      	bne.n	8011de6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd4:	2201      	movs	r2, #1
 8011dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8011dda:	43da      	mvns	r2, r3
 8011ddc:	4b11      	ldr	r3, [pc, #68]	; (8011e24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	4013      	ands	r3, r2
 8011de2:	4a10      	ldr	r2, [pc, #64]	; (8011e24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011de4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011de6:	69bb      	ldr	r3, [r7, #24]
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	2201      	movs	r2, #1
 8011dec:	409a      	lsls	r2, r3
 8011dee:	4b0d      	ldr	r3, [pc, #52]	; (8011e24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	4313      	orrs	r3, r2
 8011df4:	4a0b      	ldr	r2, [pc, #44]	; (8011e24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011df6:	6013      	str	r3, [r2, #0]
 8011df8:	69bb      	ldr	r3, [r7, #24]
 8011dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	4413      	add	r3, r2
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	4a06      	ldr	r2, [pc, #24]	; (8011e20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011e06:	441a      	add	r2, r3
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	f7fe fae8 	bl	80103e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011e14:	bf00      	nop
 8011e16:	3720      	adds	r7, #32
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	2000094c 	.word	0x2000094c
 8011e20:	20000950 	.word	0x20000950
 8011e24:	20000a54 	.word	0x20000a54

08011e28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011e28:	b480      	push	{r7}
 8011e2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011e2c:	4b07      	ldr	r3, [pc, #28]	; (8011e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d004      	beq.n	8011e3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011e34:	4b05      	ldr	r3, [pc, #20]	; (8011e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e3a:	3201      	adds	r2, #1
 8011e3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011e3e:	4b03      	ldr	r3, [pc, #12]	; (8011e4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011e40:	681b      	ldr	r3, [r3, #0]
	}
 8011e42:	4618      	mov	r0, r3
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr
 8011e4c:	2000094c 	.word	0x2000094c

08011e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e5a:	4b29      	ldr	r3, [pc, #164]	; (8011f00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e60:	4b28      	ldr	r3, [pc, #160]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	3304      	adds	r3, #4
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe fb19 	bl	801049e <uxListRemove>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d10b      	bne.n	8011e8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011e72:	4b24      	ldr	r3, [pc, #144]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e78:	2201      	movs	r2, #1
 8011e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e7e:	43da      	mvns	r2, r3
 8011e80:	4b21      	ldr	r3, [pc, #132]	; (8011f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4013      	ands	r3, r2
 8011e86:	4a20      	ldr	r2, [pc, #128]	; (8011f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e90:	d10a      	bne.n	8011ea8 <prvAddCurrentTaskToDelayedList+0x58>
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d007      	beq.n	8011ea8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e98:	4b1a      	ldr	r3, [pc, #104]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	481a      	ldr	r0, [pc, #104]	; (8011f0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011ea2:	f7fe fa9f 	bl	80103e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ea6:	e026      	b.n	8011ef6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011ea8:	68fa      	ldr	r2, [r7, #12]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	4413      	add	r3, r2
 8011eae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011eb0:	4b14      	ldr	r3, [pc, #80]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	68ba      	ldr	r2, [r7, #8]
 8011eb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	d209      	bcs.n	8011ed4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ec0:	4b13      	ldr	r3, [pc, #76]	; (8011f10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	4b0f      	ldr	r3, [pc, #60]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	3304      	adds	r3, #4
 8011eca:	4619      	mov	r1, r3
 8011ecc:	4610      	mov	r0, r2
 8011ece:	f7fe faad 	bl	801042c <vListInsert>
}
 8011ed2:	e010      	b.n	8011ef6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ed4:	4b0f      	ldr	r3, [pc, #60]	; (8011f14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	4b0a      	ldr	r3, [pc, #40]	; (8011f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	3304      	adds	r3, #4
 8011ede:	4619      	mov	r1, r3
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f7fe faa3 	bl	801042c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ee6:	4b0c      	ldr	r3, [pc, #48]	; (8011f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d202      	bcs.n	8011ef6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ef0:	4a09      	ldr	r2, [pc, #36]	; (8011f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	6013      	str	r3, [r2, #0]
}
 8011ef6:	bf00      	nop
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	20000a50 	.word	0x20000a50
 8011f04:	2000094c 	.word	0x2000094c
 8011f08:	20000a54 	.word	0x20000a54
 8011f0c:	20000a38 	.word	0x20000a38
 8011f10:	20000a08 	.word	0x20000a08
 8011f14:	20000a04 	.word	0x20000a04
 8011f18:	20000a6c 	.word	0x20000a6c

08011f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b085      	sub	sp, #20
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	60f8      	str	r0, [r7, #12]
 8011f24:	60b9      	str	r1, [r7, #8]
 8011f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	3b04      	subs	r3, #4
 8011f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	3b04      	subs	r3, #4
 8011f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	f023 0201 	bic.w	r2, r3, #1
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	3b04      	subs	r3, #4
 8011f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f4c:	4a0c      	ldr	r2, [pc, #48]	; (8011f80 <pxPortInitialiseStack+0x64>)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	3b14      	subs	r3, #20
 8011f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	3b04      	subs	r3, #4
 8011f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	f06f 0202 	mvn.w	r2, #2
 8011f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	3b20      	subs	r3, #32
 8011f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f72:	68fb      	ldr	r3, [r7, #12]
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	3714      	adds	r7, #20
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr
 8011f80:	08011f85 	.word	0x08011f85

08011f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f84:	b480      	push	{r7}
 8011f86:	b085      	sub	sp, #20
 8011f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f8e:	4b12      	ldr	r3, [pc, #72]	; (8011fd8 <prvTaskExitError+0x54>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011f96:	d00a      	beq.n	8011fae <prvTaskExitError+0x2a>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	60fb      	str	r3, [r7, #12]
}
 8011faa:	bf00      	nop
 8011fac:	e7fe      	b.n	8011fac <prvTaskExitError+0x28>
	__asm volatile
 8011fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb2:	f383 8811 	msr	BASEPRI, r3
 8011fb6:	f3bf 8f6f 	isb	sy
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	60bb      	str	r3, [r7, #8]
}
 8011fc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011fc2:	bf00      	nop
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d0fc      	beq.n	8011fc4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011fca:	bf00      	nop
 8011fcc:	bf00      	nop
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr
 8011fd8:	20000030 	.word	0x20000030
 8011fdc:	00000000 	.word	0x00000000

08011fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011fe0:	4b07      	ldr	r3, [pc, #28]	; (8012000 <pxCurrentTCBConst2>)
 8011fe2:	6819      	ldr	r1, [r3, #0]
 8011fe4:	6808      	ldr	r0, [r1, #0]
 8011fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fea:	f380 8809 	msr	PSP, r0
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f04f 0000 	mov.w	r0, #0
 8011ff6:	f380 8811 	msr	BASEPRI, r0
 8011ffa:	4770      	bx	lr
 8011ffc:	f3af 8000 	nop.w

08012000 <pxCurrentTCBConst2>:
 8012000:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012004:	bf00      	nop
 8012006:	bf00      	nop

08012008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012008:	4808      	ldr	r0, [pc, #32]	; (801202c <prvPortStartFirstTask+0x24>)
 801200a:	6800      	ldr	r0, [r0, #0]
 801200c:	6800      	ldr	r0, [r0, #0]
 801200e:	f380 8808 	msr	MSP, r0
 8012012:	f04f 0000 	mov.w	r0, #0
 8012016:	f380 8814 	msr	CONTROL, r0
 801201a:	b662      	cpsie	i
 801201c:	b661      	cpsie	f
 801201e:	f3bf 8f4f 	dsb	sy
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	df00      	svc	0
 8012028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801202a:	bf00      	nop
 801202c:	e000ed08 	.word	0xe000ed08

08012030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012036:	4b46      	ldr	r3, [pc, #280]	; (8012150 <xPortStartScheduler+0x120>)
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	4a46      	ldr	r2, [pc, #280]	; (8012154 <xPortStartScheduler+0x124>)
 801203c:	4293      	cmp	r3, r2
 801203e:	d10a      	bne.n	8012056 <xPortStartScheduler+0x26>
	__asm volatile
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	613b      	str	r3, [r7, #16]
}
 8012052:	bf00      	nop
 8012054:	e7fe      	b.n	8012054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012056:	4b3e      	ldr	r3, [pc, #248]	; (8012150 <xPortStartScheduler+0x120>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	4a3f      	ldr	r2, [pc, #252]	; (8012158 <xPortStartScheduler+0x128>)
 801205c:	4293      	cmp	r3, r2
 801205e:	d10a      	bne.n	8012076 <xPortStartScheduler+0x46>
	__asm volatile
 8012060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012064:	f383 8811 	msr	BASEPRI, r3
 8012068:	f3bf 8f6f 	isb	sy
 801206c:	f3bf 8f4f 	dsb	sy
 8012070:	60fb      	str	r3, [r7, #12]
}
 8012072:	bf00      	nop
 8012074:	e7fe      	b.n	8012074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012076:	4b39      	ldr	r3, [pc, #228]	; (801215c <xPortStartScheduler+0x12c>)
 8012078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	b2db      	uxtb	r3, r3
 8012080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	22ff      	movs	r2, #255	; 0xff
 8012086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	b2db      	uxtb	r3, r3
 801208e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012090:	78fb      	ldrb	r3, [r7, #3]
 8012092:	b2db      	uxtb	r3, r3
 8012094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012098:	b2da      	uxtb	r2, r3
 801209a:	4b31      	ldr	r3, [pc, #196]	; (8012160 <xPortStartScheduler+0x130>)
 801209c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801209e:	4b31      	ldr	r3, [pc, #196]	; (8012164 <xPortStartScheduler+0x134>)
 80120a0:	2207      	movs	r2, #7
 80120a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120a4:	e009      	b.n	80120ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80120a6:	4b2f      	ldr	r3, [pc, #188]	; (8012164 <xPortStartScheduler+0x134>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	4a2d      	ldr	r2, [pc, #180]	; (8012164 <xPortStartScheduler+0x134>)
 80120ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80120b0:	78fb      	ldrb	r3, [r7, #3]
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80120ba:	78fb      	ldrb	r3, [r7, #3]
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120c2:	2b80      	cmp	r3, #128	; 0x80
 80120c4:	d0ef      	beq.n	80120a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80120c6:	4b27      	ldr	r3, [pc, #156]	; (8012164 <xPortStartScheduler+0x134>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f1c3 0307 	rsb	r3, r3, #7
 80120ce:	2b04      	cmp	r3, #4
 80120d0:	d00a      	beq.n	80120e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80120d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d6:	f383 8811 	msr	BASEPRI, r3
 80120da:	f3bf 8f6f 	isb	sy
 80120de:	f3bf 8f4f 	dsb	sy
 80120e2:	60bb      	str	r3, [r7, #8]
}
 80120e4:	bf00      	nop
 80120e6:	e7fe      	b.n	80120e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120e8:	4b1e      	ldr	r3, [pc, #120]	; (8012164 <xPortStartScheduler+0x134>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	021b      	lsls	r3, r3, #8
 80120ee:	4a1d      	ldr	r2, [pc, #116]	; (8012164 <xPortStartScheduler+0x134>)
 80120f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120f2:	4b1c      	ldr	r3, [pc, #112]	; (8012164 <xPortStartScheduler+0x134>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120fa:	4a1a      	ldr	r2, [pc, #104]	; (8012164 <xPortStartScheduler+0x134>)
 80120fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	b2da      	uxtb	r2, r3
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012106:	4b18      	ldr	r3, [pc, #96]	; (8012168 <xPortStartScheduler+0x138>)
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	4a17      	ldr	r2, [pc, #92]	; (8012168 <xPortStartScheduler+0x138>)
 801210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012112:	4b15      	ldr	r3, [pc, #84]	; (8012168 <xPortStartScheduler+0x138>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	4a14      	ldr	r2, [pc, #80]	; (8012168 <xPortStartScheduler+0x138>)
 8012118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801211c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801211e:	f000 f8dd 	bl	80122dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012122:	4b12      	ldr	r3, [pc, #72]	; (801216c <xPortStartScheduler+0x13c>)
 8012124:	2200      	movs	r2, #0
 8012126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012128:	f000 f8fc 	bl	8012324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801212c:	4b10      	ldr	r3, [pc, #64]	; (8012170 <xPortStartScheduler+0x140>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	4a0f      	ldr	r2, [pc, #60]	; (8012170 <xPortStartScheduler+0x140>)
 8012132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012138:	f7ff ff66 	bl	8012008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801213c:	f7ff fa90 	bl	8011660 <vTaskSwitchContext>
	prvTaskExitError();
 8012140:	f7ff ff20 	bl	8011f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012144:	2300      	movs	r3, #0
}
 8012146:	4618      	mov	r0, r3
 8012148:	3718      	adds	r7, #24
 801214a:	46bd      	mov	sp, r7
 801214c:	bd80      	pop	{r7, pc}
 801214e:	bf00      	nop
 8012150:	e000ed00 	.word	0xe000ed00
 8012154:	410fc271 	.word	0x410fc271
 8012158:	410fc270 	.word	0x410fc270
 801215c:	e000e400 	.word	0xe000e400
 8012160:	20000a78 	.word	0x20000a78
 8012164:	20000a7c 	.word	0x20000a7c
 8012168:	e000ed20 	.word	0xe000ed20
 801216c:	20000030 	.word	0x20000030
 8012170:	e000ef34 	.word	0xe000ef34

08012174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
	__asm volatile
 801217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217e:	f383 8811 	msr	BASEPRI, r3
 8012182:	f3bf 8f6f 	isb	sy
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	607b      	str	r3, [r7, #4]
}
 801218c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801218e:	4b0f      	ldr	r3, [pc, #60]	; (80121cc <vPortEnterCritical+0x58>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	4a0d      	ldr	r2, [pc, #52]	; (80121cc <vPortEnterCritical+0x58>)
 8012196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012198:	4b0c      	ldr	r3, [pc, #48]	; (80121cc <vPortEnterCritical+0x58>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	2b01      	cmp	r3, #1
 801219e:	d10f      	bne.n	80121c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80121a0:	4b0b      	ldr	r3, [pc, #44]	; (80121d0 <vPortEnterCritical+0x5c>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00a      	beq.n	80121c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80121aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ae:	f383 8811 	msr	BASEPRI, r3
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	603b      	str	r3, [r7, #0]
}
 80121bc:	bf00      	nop
 80121be:	e7fe      	b.n	80121be <vPortEnterCritical+0x4a>
	}
}
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr
 80121cc:	20000030 	.word	0x20000030
 80121d0:	e000ed04 	.word	0xe000ed04

080121d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80121d4:	b480      	push	{r7}
 80121d6:	b083      	sub	sp, #12
 80121d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80121da:	4b12      	ldr	r3, [pc, #72]	; (8012224 <vPortExitCritical+0x50>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d10a      	bne.n	80121f8 <vPortExitCritical+0x24>
	__asm volatile
 80121e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e6:	f383 8811 	msr	BASEPRI, r3
 80121ea:	f3bf 8f6f 	isb	sy
 80121ee:	f3bf 8f4f 	dsb	sy
 80121f2:	607b      	str	r3, [r7, #4]
}
 80121f4:	bf00      	nop
 80121f6:	e7fe      	b.n	80121f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80121f8:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <vPortExitCritical+0x50>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3b01      	subs	r3, #1
 80121fe:	4a09      	ldr	r2, [pc, #36]	; (8012224 <vPortExitCritical+0x50>)
 8012200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012202:	4b08      	ldr	r3, [pc, #32]	; (8012224 <vPortExitCritical+0x50>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d105      	bne.n	8012216 <vPortExitCritical+0x42>
 801220a:	2300      	movs	r3, #0
 801220c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	f383 8811 	msr	BASEPRI, r3
}
 8012214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012216:	bf00      	nop
 8012218:	370c      	adds	r7, #12
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop
 8012224:	20000030 	.word	0x20000030
	...

08012230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012230:	f3ef 8009 	mrs	r0, PSP
 8012234:	f3bf 8f6f 	isb	sy
 8012238:	4b15      	ldr	r3, [pc, #84]	; (8012290 <pxCurrentTCBConst>)
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	f01e 0f10 	tst.w	lr, #16
 8012240:	bf08      	it	eq
 8012242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	6010      	str	r0, [r2, #0]
 801224c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012254:	f380 8811 	msr	BASEPRI, r0
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	f3bf 8f6f 	isb	sy
 8012260:	f7ff f9fe 	bl	8011660 <vTaskSwitchContext>
 8012264:	f04f 0000 	mov.w	r0, #0
 8012268:	f380 8811 	msr	BASEPRI, r0
 801226c:	bc09      	pop	{r0, r3}
 801226e:	6819      	ldr	r1, [r3, #0]
 8012270:	6808      	ldr	r0, [r1, #0]
 8012272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012276:	f01e 0f10 	tst.w	lr, #16
 801227a:	bf08      	it	eq
 801227c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012280:	f380 8809 	msr	PSP, r0
 8012284:	f3bf 8f6f 	isb	sy
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	f3af 8000 	nop.w

08012290 <pxCurrentTCBConst>:
 8012290:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012294:	bf00      	nop
 8012296:	bf00      	nop

08012298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
	__asm volatile
 801229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a2:	f383 8811 	msr	BASEPRI, r3
 80122a6:	f3bf 8f6f 	isb	sy
 80122aa:	f3bf 8f4f 	dsb	sy
 80122ae:	607b      	str	r3, [r7, #4]
}
 80122b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80122b2:	f7ff f91d 	bl	80114f0 <xTaskIncrementTick>
 80122b6:	4603      	mov	r3, r0
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d003      	beq.n	80122c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80122bc:	4b06      	ldr	r3, [pc, #24]	; (80122d8 <SysTick_Handler+0x40>)
 80122be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122c2:	601a      	str	r2, [r3, #0]
 80122c4:	2300      	movs	r3, #0
 80122c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	f383 8811 	msr	BASEPRI, r3
}
 80122ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80122d0:	bf00      	nop
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	e000ed04 	.word	0xe000ed04

080122dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80122dc:	b480      	push	{r7}
 80122de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122e0:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <vPortSetupTimerInterrupt+0x34>)
 80122e2:	2200      	movs	r2, #0
 80122e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122e6:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <vPortSetupTimerInterrupt+0x38>)
 80122e8:	2200      	movs	r2, #0
 80122ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122ec:	4b0a      	ldr	r3, [pc, #40]	; (8012318 <vPortSetupTimerInterrupt+0x3c>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a0a      	ldr	r2, [pc, #40]	; (801231c <vPortSetupTimerInterrupt+0x40>)
 80122f2:	fba2 2303 	umull	r2, r3, r2, r3
 80122f6:	099b      	lsrs	r3, r3, #6
 80122f8:	4a09      	ldr	r2, [pc, #36]	; (8012320 <vPortSetupTimerInterrupt+0x44>)
 80122fa:	3b01      	subs	r3, #1
 80122fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122fe:	4b04      	ldr	r3, [pc, #16]	; (8012310 <vPortSetupTimerInterrupt+0x34>)
 8012300:	2207      	movs	r2, #7
 8012302:	601a      	str	r2, [r3, #0]
}
 8012304:	bf00      	nop
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr
 801230e:	bf00      	nop
 8012310:	e000e010 	.word	0xe000e010
 8012314:	e000e018 	.word	0xe000e018
 8012318:	20000000 	.word	0x20000000
 801231c:	10624dd3 	.word	0x10624dd3
 8012320:	e000e014 	.word	0xe000e014

08012324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012334 <vPortEnableVFP+0x10>
 8012328:	6801      	ldr	r1, [r0, #0]
 801232a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801232e:	6001      	str	r1, [r0, #0]
 8012330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012332:	bf00      	nop
 8012334:	e000ed88 	.word	0xe000ed88

08012338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012338:	b480      	push	{r7}
 801233a:	b085      	sub	sp, #20
 801233c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801233e:	f3ef 8305 	mrs	r3, IPSR
 8012342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2b0f      	cmp	r3, #15
 8012348:	d914      	bls.n	8012374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801234a:	4a17      	ldr	r2, [pc, #92]	; (80123a8 <vPortValidateInterruptPriority+0x70>)
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	4413      	add	r3, r2
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012354:	4b15      	ldr	r3, [pc, #84]	; (80123ac <vPortValidateInterruptPriority+0x74>)
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	7afa      	ldrb	r2, [r7, #11]
 801235a:	429a      	cmp	r2, r3
 801235c:	d20a      	bcs.n	8012374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012362:	f383 8811 	msr	BASEPRI, r3
 8012366:	f3bf 8f6f 	isb	sy
 801236a:	f3bf 8f4f 	dsb	sy
 801236e:	607b      	str	r3, [r7, #4]
}
 8012370:	bf00      	nop
 8012372:	e7fe      	b.n	8012372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012374:	4b0e      	ldr	r3, [pc, #56]	; (80123b0 <vPortValidateInterruptPriority+0x78>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801237c:	4b0d      	ldr	r3, [pc, #52]	; (80123b4 <vPortValidateInterruptPriority+0x7c>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	429a      	cmp	r2, r3
 8012382:	d90a      	bls.n	801239a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012388:	f383 8811 	msr	BASEPRI, r3
 801238c:	f3bf 8f6f 	isb	sy
 8012390:	f3bf 8f4f 	dsb	sy
 8012394:	603b      	str	r3, [r7, #0]
}
 8012396:	bf00      	nop
 8012398:	e7fe      	b.n	8012398 <vPortValidateInterruptPriority+0x60>
	}
 801239a:	bf00      	nop
 801239c:	3714      	adds	r7, #20
 801239e:	46bd      	mov	sp, r7
 80123a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a4:	4770      	bx	lr
 80123a6:	bf00      	nop
 80123a8:	e000e3f0 	.word	0xe000e3f0
 80123ac:	20000a78 	.word	0x20000a78
 80123b0:	e000ed0c 	.word	0xe000ed0c
 80123b4:	20000a7c 	.word	0x20000a7c

080123b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b08a      	sub	sp, #40	; 0x28
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80123c0:	2300      	movs	r3, #0
 80123c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80123c4:	f7fe ffda 	bl	801137c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80123c8:	4b5b      	ldr	r3, [pc, #364]	; (8012538 <pvPortMalloc+0x180>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d101      	bne.n	80123d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80123d0:	f000 f920 	bl	8012614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80123d4:	4b59      	ldr	r3, [pc, #356]	; (801253c <pvPortMalloc+0x184>)
 80123d6:	681a      	ldr	r2, [r3, #0]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	4013      	ands	r3, r2
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f040 8093 	bne.w	8012508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d01d      	beq.n	8012424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80123e8:	2208      	movs	r2, #8
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	4413      	add	r3, r2
 80123ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f003 0307 	and.w	r3, r3, #7
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d014      	beq.n	8012424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f023 0307 	bic.w	r3, r3, #7
 8012400:	3308      	adds	r3, #8
 8012402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f003 0307 	and.w	r3, r3, #7
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00a      	beq.n	8012424 <pvPortMalloc+0x6c>
	__asm volatile
 801240e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	617b      	str	r3, [r7, #20]
}
 8012420:	bf00      	nop
 8012422:	e7fe      	b.n	8012422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d06e      	beq.n	8012508 <pvPortMalloc+0x150>
 801242a:	4b45      	ldr	r3, [pc, #276]	; (8012540 <pvPortMalloc+0x188>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	687a      	ldr	r2, [r7, #4]
 8012430:	429a      	cmp	r2, r3
 8012432:	d869      	bhi.n	8012508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012434:	4b43      	ldr	r3, [pc, #268]	; (8012544 <pvPortMalloc+0x18c>)
 8012436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012438:	4b42      	ldr	r3, [pc, #264]	; (8012544 <pvPortMalloc+0x18c>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801243e:	e004      	b.n	801244a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	429a      	cmp	r2, r3
 8012452:	d903      	bls.n	801245c <pvPortMalloc+0xa4>
 8012454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d1f1      	bne.n	8012440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801245c:	4b36      	ldr	r3, [pc, #216]	; (8012538 <pvPortMalloc+0x180>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012462:	429a      	cmp	r2, r3
 8012464:	d050      	beq.n	8012508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012466:	6a3b      	ldr	r3, [r7, #32]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2208      	movs	r2, #8
 801246c:	4413      	add	r3, r2
 801246e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	6a3b      	ldr	r3, [r7, #32]
 8012476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247a:	685a      	ldr	r2, [r3, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	1ad2      	subs	r2, r2, r3
 8012480:	2308      	movs	r3, #8
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	429a      	cmp	r2, r3
 8012486:	d91f      	bls.n	80124c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	4413      	add	r3, r2
 801248e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	f003 0307 	and.w	r3, r3, #7
 8012496:	2b00      	cmp	r3, #0
 8012498:	d00a      	beq.n	80124b0 <pvPortMalloc+0xf8>
	__asm volatile
 801249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801249e:	f383 8811 	msr	BASEPRI, r3
 80124a2:	f3bf 8f6f 	isb	sy
 80124a6:	f3bf 8f4f 	dsb	sy
 80124aa:	613b      	str	r3, [r7, #16]
}
 80124ac:	bf00      	nop
 80124ae:	e7fe      	b.n	80124ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80124b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b2:	685a      	ldr	r2, [r3, #4]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	1ad2      	subs	r2, r2, r3
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80124bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80124c2:	69b8      	ldr	r0, [r7, #24]
 80124c4:	f000 f908 	bl	80126d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80124c8:	4b1d      	ldr	r3, [pc, #116]	; (8012540 <pvPortMalloc+0x188>)
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	685b      	ldr	r3, [r3, #4]
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	4a1b      	ldr	r2, [pc, #108]	; (8012540 <pvPortMalloc+0x188>)
 80124d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80124d6:	4b1a      	ldr	r3, [pc, #104]	; (8012540 <pvPortMalloc+0x188>)
 80124d8:	681a      	ldr	r2, [r3, #0]
 80124da:	4b1b      	ldr	r3, [pc, #108]	; (8012548 <pvPortMalloc+0x190>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d203      	bcs.n	80124ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124e2:	4b17      	ldr	r3, [pc, #92]	; (8012540 <pvPortMalloc+0x188>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	4a18      	ldr	r2, [pc, #96]	; (8012548 <pvPortMalloc+0x190>)
 80124e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	685a      	ldr	r2, [r3, #4]
 80124ee:	4b13      	ldr	r3, [pc, #76]	; (801253c <pvPortMalloc+0x184>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	431a      	orrs	r2, r3
 80124f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fa:	2200      	movs	r2, #0
 80124fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124fe:	4b13      	ldr	r3, [pc, #76]	; (801254c <pvPortMalloc+0x194>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	3301      	adds	r3, #1
 8012504:	4a11      	ldr	r2, [pc, #68]	; (801254c <pvPortMalloc+0x194>)
 8012506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012508:	f7fe ff46 	bl	8011398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	f003 0307 	and.w	r3, r3, #7
 8012512:	2b00      	cmp	r3, #0
 8012514:	d00a      	beq.n	801252c <pvPortMalloc+0x174>
	__asm volatile
 8012516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801251a:	f383 8811 	msr	BASEPRI, r3
 801251e:	f3bf 8f6f 	isb	sy
 8012522:	f3bf 8f4f 	dsb	sy
 8012526:	60fb      	str	r3, [r7, #12]
}
 8012528:	bf00      	nop
 801252a:	e7fe      	b.n	801252a <pvPortMalloc+0x172>
	return pvReturn;
 801252c:	69fb      	ldr	r3, [r7, #28]
}
 801252e:	4618      	mov	r0, r3
 8012530:	3728      	adds	r7, #40	; 0x28
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	20008788 	.word	0x20008788
 801253c:	2000879c 	.word	0x2000879c
 8012540:	2000878c 	.word	0x2000878c
 8012544:	20008780 	.word	0x20008780
 8012548:	20008790 	.word	0x20008790
 801254c:	20008794 	.word	0x20008794

08012550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b086      	sub	sp, #24
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d04d      	beq.n	80125fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012562:	2308      	movs	r3, #8
 8012564:	425b      	negs	r3, r3
 8012566:	697a      	ldr	r2, [r7, #20]
 8012568:	4413      	add	r3, r2
 801256a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	685a      	ldr	r2, [r3, #4]
 8012574:	4b24      	ldr	r3, [pc, #144]	; (8012608 <vPortFree+0xb8>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4013      	ands	r3, r2
 801257a:	2b00      	cmp	r3, #0
 801257c:	d10a      	bne.n	8012594 <vPortFree+0x44>
	__asm volatile
 801257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012582:	f383 8811 	msr	BASEPRI, r3
 8012586:	f3bf 8f6f 	isb	sy
 801258a:	f3bf 8f4f 	dsb	sy
 801258e:	60fb      	str	r3, [r7, #12]
}
 8012590:	bf00      	nop
 8012592:	e7fe      	b.n	8012592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d00a      	beq.n	80125b2 <vPortFree+0x62>
	__asm volatile
 801259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	60bb      	str	r3, [r7, #8]
}
 80125ae:	bf00      	nop
 80125b0:	e7fe      	b.n	80125b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80125b2:	693b      	ldr	r3, [r7, #16]
 80125b4:	685a      	ldr	r2, [r3, #4]
 80125b6:	4b14      	ldr	r3, [pc, #80]	; (8012608 <vPortFree+0xb8>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4013      	ands	r3, r2
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d01e      	beq.n	80125fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d11a      	bne.n	80125fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	4b0e      	ldr	r3, [pc, #56]	; (8012608 <vPortFree+0xb8>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	43db      	mvns	r3, r3
 80125d2:	401a      	ands	r2, r3
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80125d8:	f7fe fed0 	bl	801137c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	685a      	ldr	r2, [r3, #4]
 80125e0:	4b0a      	ldr	r3, [pc, #40]	; (801260c <vPortFree+0xbc>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4413      	add	r3, r2
 80125e6:	4a09      	ldr	r2, [pc, #36]	; (801260c <vPortFree+0xbc>)
 80125e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125ea:	6938      	ldr	r0, [r7, #16]
 80125ec:	f000 f874 	bl	80126d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125f0:	4b07      	ldr	r3, [pc, #28]	; (8012610 <vPortFree+0xc0>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	3301      	adds	r3, #1
 80125f6:	4a06      	ldr	r2, [pc, #24]	; (8012610 <vPortFree+0xc0>)
 80125f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80125fa:	f7fe fecd 	bl	8011398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125fe:	bf00      	nop
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	2000879c 	.word	0x2000879c
 801260c:	2000878c 	.word	0x2000878c
 8012610:	20008798 	.word	0x20008798

08012614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801261a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801261e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012620:	4b27      	ldr	r3, [pc, #156]	; (80126c0 <prvHeapInit+0xac>)
 8012622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	f003 0307 	and.w	r3, r3, #7
 801262a:	2b00      	cmp	r3, #0
 801262c:	d00c      	beq.n	8012648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3307      	adds	r3, #7
 8012632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f023 0307 	bic.w	r3, r3, #7
 801263a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	1ad3      	subs	r3, r2, r3
 8012642:	4a1f      	ldr	r2, [pc, #124]	; (80126c0 <prvHeapInit+0xac>)
 8012644:	4413      	add	r3, r2
 8012646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801264c:	4a1d      	ldr	r2, [pc, #116]	; (80126c4 <prvHeapInit+0xb0>)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012652:	4b1c      	ldr	r3, [pc, #112]	; (80126c4 <prvHeapInit+0xb0>)
 8012654:	2200      	movs	r2, #0
 8012656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	68ba      	ldr	r2, [r7, #8]
 801265c:	4413      	add	r3, r2
 801265e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012660:	2208      	movs	r2, #8
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	1a9b      	subs	r3, r3, r2
 8012666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f023 0307 	bic.w	r3, r3, #7
 801266e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	4a15      	ldr	r2, [pc, #84]	; (80126c8 <prvHeapInit+0xb4>)
 8012674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012676:	4b14      	ldr	r3, [pc, #80]	; (80126c8 <prvHeapInit+0xb4>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2200      	movs	r2, #0
 801267c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801267e:	4b12      	ldr	r3, [pc, #72]	; (80126c8 <prvHeapInit+0xb4>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	2200      	movs	r2, #0
 8012684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	68fa      	ldr	r2, [r7, #12]
 801268e:	1ad2      	subs	r2, r2, r3
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012694:	4b0c      	ldr	r3, [pc, #48]	; (80126c8 <prvHeapInit+0xb4>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	4a0a      	ldr	r2, [pc, #40]	; (80126cc <prvHeapInit+0xb8>)
 80126a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	4a09      	ldr	r2, [pc, #36]	; (80126d0 <prvHeapInit+0xbc>)
 80126aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80126ac:	4b09      	ldr	r3, [pc, #36]	; (80126d4 <prvHeapInit+0xc0>)
 80126ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80126b2:	601a      	str	r2, [r3, #0]
}
 80126b4:	bf00      	nop
 80126b6:	3714      	adds	r7, #20
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr
 80126c0:	20000a80 	.word	0x20000a80
 80126c4:	20008780 	.word	0x20008780
 80126c8:	20008788 	.word	0x20008788
 80126cc:	20008790 	.word	0x20008790
 80126d0:	2000878c 	.word	0x2000878c
 80126d4:	2000879c 	.word	0x2000879c

080126d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126e0:	4b28      	ldr	r3, [pc, #160]	; (8012784 <prvInsertBlockIntoFreeList+0xac>)
 80126e2:	60fb      	str	r3, [r7, #12]
 80126e4:	e002      	b.n	80126ec <prvInsertBlockIntoFreeList+0x14>
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	687a      	ldr	r2, [r7, #4]
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d8f7      	bhi.n	80126e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	4413      	add	r3, r2
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	429a      	cmp	r2, r3
 8012706:	d108      	bne.n	801271a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	441a      	add	r2, r3
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	441a      	add	r2, r3
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	429a      	cmp	r2, r3
 801272c:	d118      	bne.n	8012760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	4b15      	ldr	r3, [pc, #84]	; (8012788 <prvInsertBlockIntoFreeList+0xb0>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	429a      	cmp	r2, r3
 8012738:	d00d      	beq.n	8012756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	685a      	ldr	r2, [r3, #4]
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	441a      	add	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	601a      	str	r2, [r3, #0]
 8012754:	e008      	b.n	8012768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012756:	4b0c      	ldr	r3, [pc, #48]	; (8012788 <prvInsertBlockIntoFreeList+0xb0>)
 8012758:	681a      	ldr	r2, [r3, #0]
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	601a      	str	r2, [r3, #0]
 801275e:	e003      	b.n	8012768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	429a      	cmp	r2, r3
 801276e:	d002      	beq.n	8012776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012776:	bf00      	nop
 8012778:	3714      	adds	r7, #20
 801277a:	46bd      	mov	sp, r7
 801277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012780:	4770      	bx	lr
 8012782:	bf00      	nop
 8012784:	20008780 	.word	0x20008780
 8012788:	20008788 	.word	0x20008788

0801278c <__NVIC_EnableIRQ>:
{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	4603      	mov	r3, r0
 8012794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801279a:	2b00      	cmp	r3, #0
 801279c:	db0b      	blt.n	80127b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801279e:	79fb      	ldrb	r3, [r7, #7]
 80127a0:	f003 021f 	and.w	r2, r3, #31
 80127a4:	4907      	ldr	r1, [pc, #28]	; (80127c4 <__NVIC_EnableIRQ+0x38>)
 80127a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127aa:	095b      	lsrs	r3, r3, #5
 80127ac:	2001      	movs	r0, #1
 80127ae:	fa00 f202 	lsl.w	r2, r0, r2
 80127b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80127b6:	bf00      	nop
 80127b8:	370c      	adds	r7, #12
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr
 80127c2:	bf00      	nop
 80127c4:	e000e100 	.word	0xe000e100

080127c8 <__NVIC_DisableIRQ>:
{
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	4603      	mov	r3, r0
 80127d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80127d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	db12      	blt.n	8012800 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80127da:	79fb      	ldrb	r3, [r7, #7]
 80127dc:	f003 021f 	and.w	r2, r3, #31
 80127e0:	490a      	ldr	r1, [pc, #40]	; (801280c <__NVIC_DisableIRQ+0x44>)
 80127e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80127e6:	095b      	lsrs	r3, r3, #5
 80127e8:	2001      	movs	r0, #1
 80127ea:	fa00 f202 	lsl.w	r2, r0, r2
 80127ee:	3320      	adds	r3, #32
 80127f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80127f4:	f3bf 8f4f 	dsb	sy
}
 80127f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80127fa:	f3bf 8f6f 	isb	sy
}
 80127fe:	bf00      	nop
}
 8012800:	bf00      	nop
 8012802:	370c      	adds	r7, #12
 8012804:	46bd      	mov	sp, r7
 8012806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280a:	4770      	bx	lr
 801280c:	e000e100 	.word	0xe000e100

08012810 <extIntInit>:
 * @brief EXTI configuration
 * @return Error code
 **/

error_t extIntInit(void)
{
 8012810:	b480      	push	{r7}
 8012812:	af00      	add	r7, sp, #0
  
   //Successful processing
   return NO_ERROR;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	46bd      	mov	sp, r7
 801281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281e:	4770      	bx	lr

08012820 <extIntEnableIrq>:
/**
 * @brief Enable external interrupts
 **/

void extIntEnableIrq(void)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	af00      	add	r7, sp, #0
   //Enable EXTI15_10 interrupt
   NVIC_EnableIRQ(_ENC28J60_EXT);
 8012824:	200a      	movs	r0, #10
 8012826:	f7ff ffb1 	bl	801278c <__NVIC_EnableIRQ>
}
 801282a:	bf00      	nop
 801282c:	bd80      	pop	{r7, pc}

0801282e <extIntDisableIrq>:
/**
 * @brief Disable external interrupts
 **/

void extIntDisableIrq(void)
{
 801282e:	b580      	push	{r7, lr}
 8012830:	af00      	add	r7, sp, #0
   //Disable EXTI15_10 interrupt
   NVIC_DisableIRQ(_ENC28J60_EXT);
 8012832:	200a      	movs	r0, #10
 8012834:	f7ff ffc8 	bl	80127c8 <__NVIC_DisableIRQ>
}
 8012838:	bf00      	nop
 801283a:	bd80      	pop	{r7, pc}

0801283c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief External interrupt handler
 **/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b084      	sub	sp, #16
 8012840:	af00      	add	r7, sp, #0
 8012842:	4603      	mov	r3, r0
 8012844:	80fb      	strh	r3, [r7, #6]
  NetInterface *interface;
	if(GPIO_Pin == _ENC28J60_EXT_PIN)
 8012846:	88fb      	ldrh	r3, [r7, #6]
 8012848:	2b20      	cmp	r3, #32
 801284a:	d104      	bne.n	8012856 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		interface = &netInterface[0];
 801284c:	4b04      	ldr	r3, [pc, #16]	; (8012860 <HAL_GPIO_EXTI_Callback+0x24>)
 801284e:	60fb      	str	r3, [r7, #12]
		enc28j60IrqHandler(interface);
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f7f8 fc3b 	bl	800b0cc <enc28j60IrqHandler>
	}	
}
 8012856:	bf00      	nop
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}
 801285e:	bf00      	nop
 8012860:	20009258 	.word	0x20009258

08012864 <spiInit>:
 * @brief SPI initialization
 * @return Error code
 **/

error_t spiInit(void)
{
 8012864:	b480      	push	{r7}
 8012866:	af00      	add	r7, sp, #0
   //Successful processing
   return NO_ERROR;
 8012868:	2300      	movs	r3, #0
}
 801286a:	4618      	mov	r0, r3
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr

08012874 <spiSetMode>:
 * @brief Set SPI mode
 * @param mode SPI mode (0, 1, 2 or 3)
 **/

error_t spiSetMode(uint_t mode)
{
 8012874:	b480      	push	{r7}
 8012876:	b083      	sub	sp, #12
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
 801287c:	2367      	movs	r3, #103	; 0x67
}
 801287e:	4618      	mov	r0, r3
 8012880:	370c      	adds	r7, #12
 8012882:	46bd      	mov	sp, r7
 8012884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012888:	4770      	bx	lr

0801288a <spiSetBitrate>:
 * @brief Set SPI bitrate
 * @param bitrate Bitrate value
 **/

error_t spiSetBitrate(uint_t bitrate)
{
 801288a:	b480      	push	{r7}
 801288c:	b083      	sub	sp, #12
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
 8012892:	2367      	movs	r3, #103	; 0x67
}
 8012894:	4618      	mov	r0, r3
 8012896:	370c      	adds	r7, #12
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <spiAssertCs>:
/**
 * @brief Assert CS
 **/

void spiAssertCs(void)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(_ENC28J60_CS_GPIO,_ENC28J60_CS_PIN,GPIO_PIN_RESET);
 80128a6:	2200      	movs	r2, #0
 80128a8:	2110      	movs	r1, #16
 80128aa:	4808      	ldr	r0, [pc, #32]	; (80128cc <spiAssertCs+0x2c>)
 80128ac:	f7fc fa6c 	bl	800ed88 <HAL_GPIO_WritePin>
   //CS setup time
   usleep(25);
 80128b0:	2364      	movs	r3, #100	; 0x64
 80128b2:	607b      	str	r3, [r7, #4]
 80128b4:	e002      	b.n	80128bc <spiAssertCs+0x1c>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	3b01      	subs	r3, #1
 80128ba:	607b      	str	r3, [r7, #4]
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d1f9      	bne.n	80128b6 <spiAssertCs+0x16>
}
 80128c2:	bf00      	nop
 80128c4:	bf00      	nop
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	40020800 	.word	0x40020800

080128d0 <spiDeassertCs>:
/**
 * @brief Deassert CS
 **/

void spiDeassertCs(void)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
   //CS hold time
   usleep(25);
 80128d6:	2364      	movs	r3, #100	; 0x64
 80128d8:	607b      	str	r3, [r7, #4]
 80128da:	e002      	b.n	80128e2 <spiDeassertCs+0x12>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	3b01      	subs	r3, #1
 80128e0:	607b      	str	r3, [r7, #4]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d1f9      	bne.n	80128dc <spiDeassertCs+0xc>
   HAL_GPIO_WritePin(_ENC28J60_CS_GPIO,_ENC28J60_CS_PIN,GPIO_PIN_SET);
 80128e8:	2201      	movs	r2, #1
 80128ea:	2110      	movs	r1, #16
 80128ec:	4808      	ldr	r0, [pc, #32]	; (8012910 <spiDeassertCs+0x40>)
 80128ee:	f7fc fa4b 	bl	800ed88 <HAL_GPIO_WritePin>
   //CS disable time
   usleep(25);
 80128f2:	2364      	movs	r3, #100	; 0x64
 80128f4:	603b      	str	r3, [r7, #0]
 80128f6:	e002      	b.n	80128fe <spiDeassertCs+0x2e>
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	3b01      	subs	r3, #1
 80128fc:	603b      	str	r3, [r7, #0]
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d1f9      	bne.n	80128f8 <spiDeassertCs+0x28>
}
 8012904:	bf00      	nop
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	40020800 	.word	0x40020800

08012914 <spiTransfer>:
 * @param[in] data The data to be written
 * @return The data received from the slave device
 **/

uint8_t spiTransfer(uint8_t data)
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af02      	add	r7, sp, #8
 801291a:	4603      	mov	r3, r0
 801291c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_ENC28J60_SPI,&data,&ret,1,50);
 801291e:	f107 020f 	add.w	r2, r7, #15
 8012922:	1df9      	adds	r1, r7, #7
 8012924:	2332      	movs	r3, #50	; 0x32
 8012926:	9300      	str	r3, [sp, #0]
 8012928:	2301      	movs	r3, #1
 801292a:	4804      	ldr	r0, [pc, #16]	; (801293c <spiTransfer+0x28>)
 801292c:	f7fc ff93 	bl	800f856 <HAL_SPI_TransmitReceive>
	return ret;   
 8012930:	7bfb      	ldrb	r3, [r7, #15]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	20009080 	.word	0x20009080

08012940 <__errno>:
 8012940:	4b01      	ldr	r3, [pc, #4]	; (8012948 <__errno+0x8>)
 8012942:	6818      	ldr	r0, [r3, #0]
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	20000034 	.word	0x20000034

0801294c <fiprintf>:
 801294c:	b40e      	push	{r1, r2, r3}
 801294e:	b503      	push	{r0, r1, lr}
 8012950:	4601      	mov	r1, r0
 8012952:	ab03      	add	r3, sp, #12
 8012954:	4805      	ldr	r0, [pc, #20]	; (801296c <fiprintf+0x20>)
 8012956:	f853 2b04 	ldr.w	r2, [r3], #4
 801295a:	6800      	ldr	r0, [r0, #0]
 801295c:	9301      	str	r3, [sp, #4]
 801295e:	f000 f903 	bl	8012b68 <_vfiprintf_r>
 8012962:	b002      	add	sp, #8
 8012964:	f85d eb04 	ldr.w	lr, [sp], #4
 8012968:	b003      	add	sp, #12
 801296a:	4770      	bx	lr
 801296c:	20000034 	.word	0x20000034

08012970 <_fwrite_r>:
 8012970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012974:	9c08      	ldr	r4, [sp, #32]
 8012976:	4689      	mov	r9, r1
 8012978:	4617      	mov	r7, r2
 801297a:	fb02 f803 	mul.w	r8, r2, r3
 801297e:	4605      	mov	r5, r0
 8012980:	b118      	cbz	r0, 801298a <_fwrite_r+0x1a>
 8012982:	6983      	ldr	r3, [r0, #24]
 8012984:	b90b      	cbnz	r3, 801298a <_fwrite_r+0x1a>
 8012986:	f000 fe71 	bl	801366c <__sinit>
 801298a:	4b26      	ldr	r3, [pc, #152]	; (8012a24 <_fwrite_r+0xb4>)
 801298c:	429c      	cmp	r4, r3
 801298e:	d123      	bne.n	80129d8 <_fwrite_r+0x68>
 8012990:	686c      	ldr	r4, [r5, #4]
 8012992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012994:	07de      	lsls	r6, r3, #31
 8012996:	d405      	bmi.n	80129a4 <_fwrite_r+0x34>
 8012998:	89a3      	ldrh	r3, [r4, #12]
 801299a:	0598      	lsls	r0, r3, #22
 801299c:	d402      	bmi.n	80129a4 <_fwrite_r+0x34>
 801299e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80129a0:	f000 f879 	bl	8012a96 <__retarget_lock_acquire_recursive>
 80129a4:	89a3      	ldrh	r3, [r4, #12]
 80129a6:	0719      	lsls	r1, r3, #28
 80129a8:	d520      	bpl.n	80129ec <_fwrite_r+0x7c>
 80129aa:	6923      	ldr	r3, [r4, #16]
 80129ac:	b1f3      	cbz	r3, 80129ec <_fwrite_r+0x7c>
 80129ae:	2600      	movs	r6, #0
 80129b0:	4546      	cmp	r6, r8
 80129b2:	d029      	beq.n	8012a08 <_fwrite_r+0x98>
 80129b4:	68a0      	ldr	r0, [r4, #8]
 80129b6:	f819 1006 	ldrb.w	r1, [r9, r6]
 80129ba:	3801      	subs	r0, #1
 80129bc:	2800      	cmp	r0, #0
 80129be:	60a0      	str	r0, [r4, #8]
 80129c0:	da04      	bge.n	80129cc <_fwrite_r+0x5c>
 80129c2:	69a3      	ldr	r3, [r4, #24]
 80129c4:	4298      	cmp	r0, r3
 80129c6:	db19      	blt.n	80129fc <_fwrite_r+0x8c>
 80129c8:	290a      	cmp	r1, #10
 80129ca:	d017      	beq.n	80129fc <_fwrite_r+0x8c>
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	1c5a      	adds	r2, r3, #1
 80129d0:	6022      	str	r2, [r4, #0]
 80129d2:	7019      	strb	r1, [r3, #0]
 80129d4:	3601      	adds	r6, #1
 80129d6:	e7eb      	b.n	80129b0 <_fwrite_r+0x40>
 80129d8:	4b13      	ldr	r3, [pc, #76]	; (8012a28 <_fwrite_r+0xb8>)
 80129da:	429c      	cmp	r4, r3
 80129dc:	d101      	bne.n	80129e2 <_fwrite_r+0x72>
 80129de:	68ac      	ldr	r4, [r5, #8]
 80129e0:	e7d7      	b.n	8012992 <_fwrite_r+0x22>
 80129e2:	4b12      	ldr	r3, [pc, #72]	; (8012a2c <_fwrite_r+0xbc>)
 80129e4:	429c      	cmp	r4, r3
 80129e6:	bf08      	it	eq
 80129e8:	68ec      	ldreq	r4, [r5, #12]
 80129ea:	e7d2      	b.n	8012992 <_fwrite_r+0x22>
 80129ec:	4621      	mov	r1, r4
 80129ee:	4628      	mov	r0, r5
 80129f0:	f000 fcb4 	bl	801335c <__swsetup_r>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d0da      	beq.n	80129ae <_fwrite_r+0x3e>
 80129f8:	2600      	movs	r6, #0
 80129fa:	e005      	b.n	8012a08 <_fwrite_r+0x98>
 80129fc:	4622      	mov	r2, r4
 80129fe:	4628      	mov	r0, r5
 8012a00:	f000 fc5a 	bl	80132b8 <__swbuf_r>
 8012a04:	3001      	adds	r0, #1
 8012a06:	d1e5      	bne.n	80129d4 <_fwrite_r+0x64>
 8012a08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a0a:	07da      	lsls	r2, r3, #31
 8012a0c:	d405      	bmi.n	8012a1a <_fwrite_r+0xaa>
 8012a0e:	89a3      	ldrh	r3, [r4, #12]
 8012a10:	059b      	lsls	r3, r3, #22
 8012a12:	d402      	bmi.n	8012a1a <_fwrite_r+0xaa>
 8012a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a16:	f000 f83f 	bl	8012a98 <__retarget_lock_release_recursive>
 8012a1a:	fbb6 f0f7 	udiv	r0, r6, r7
 8012a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a22:	bf00      	nop
 8012a24:	08014730 	.word	0x08014730
 8012a28:	08014750 	.word	0x08014750
 8012a2c:	08014710 	.word	0x08014710

08012a30 <fwrite>:
 8012a30:	b507      	push	{r0, r1, r2, lr}
 8012a32:	9300      	str	r3, [sp, #0]
 8012a34:	4613      	mov	r3, r2
 8012a36:	460a      	mov	r2, r1
 8012a38:	4601      	mov	r1, r0
 8012a3a:	4803      	ldr	r0, [pc, #12]	; (8012a48 <fwrite+0x18>)
 8012a3c:	6800      	ldr	r0, [r0, #0]
 8012a3e:	f7ff ff97 	bl	8012970 <_fwrite_r>
 8012a42:	b003      	add	sp, #12
 8012a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a48:	20000034 	.word	0x20000034

08012a4c <__libc_init_array>:
 8012a4c:	b570      	push	{r4, r5, r6, lr}
 8012a4e:	4d0d      	ldr	r5, [pc, #52]	; (8012a84 <__libc_init_array+0x38>)
 8012a50:	4c0d      	ldr	r4, [pc, #52]	; (8012a88 <__libc_init_array+0x3c>)
 8012a52:	1b64      	subs	r4, r4, r5
 8012a54:	10a4      	asrs	r4, r4, #2
 8012a56:	2600      	movs	r6, #0
 8012a58:	42a6      	cmp	r6, r4
 8012a5a:	d109      	bne.n	8012a70 <__libc_init_array+0x24>
 8012a5c:	4d0b      	ldr	r5, [pc, #44]	; (8012a8c <__libc_init_array+0x40>)
 8012a5e:	4c0c      	ldr	r4, [pc, #48]	; (8012a90 <__libc_init_array+0x44>)
 8012a60:	f001 fa02 	bl	8013e68 <_init>
 8012a64:	1b64      	subs	r4, r4, r5
 8012a66:	10a4      	asrs	r4, r4, #2
 8012a68:	2600      	movs	r6, #0
 8012a6a:	42a6      	cmp	r6, r4
 8012a6c:	d105      	bne.n	8012a7a <__libc_init_array+0x2e>
 8012a6e:	bd70      	pop	{r4, r5, r6, pc}
 8012a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a74:	4798      	blx	r3
 8012a76:	3601      	adds	r6, #1
 8012a78:	e7ee      	b.n	8012a58 <__libc_init_array+0xc>
 8012a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012a7e:	4798      	blx	r3
 8012a80:	3601      	adds	r6, #1
 8012a82:	e7f2      	b.n	8012a6a <__libc_init_array+0x1e>
 8012a84:	08014778 	.word	0x08014778
 8012a88:	08014778 	.word	0x08014778
 8012a8c:	08014778 	.word	0x08014778
 8012a90:	0801477c 	.word	0x0801477c

08012a94 <__retarget_lock_init_recursive>:
 8012a94:	4770      	bx	lr

08012a96 <__retarget_lock_acquire_recursive>:
 8012a96:	4770      	bx	lr

08012a98 <__retarget_lock_release_recursive>:
 8012a98:	4770      	bx	lr

08012a9a <memcmp>:
 8012a9a:	b530      	push	{r4, r5, lr}
 8012a9c:	3901      	subs	r1, #1
 8012a9e:	2400      	movs	r4, #0
 8012aa0:	42a2      	cmp	r2, r4
 8012aa2:	d101      	bne.n	8012aa8 <memcmp+0xe>
 8012aa4:	2000      	movs	r0, #0
 8012aa6:	e005      	b.n	8012ab4 <memcmp+0x1a>
 8012aa8:	5d03      	ldrb	r3, [r0, r4]
 8012aaa:	3401      	adds	r4, #1
 8012aac:	5d0d      	ldrb	r5, [r1, r4]
 8012aae:	42ab      	cmp	r3, r5
 8012ab0:	d0f6      	beq.n	8012aa0 <memcmp+0x6>
 8012ab2:	1b58      	subs	r0, r3, r5
 8012ab4:	bd30      	pop	{r4, r5, pc}

08012ab6 <memcpy>:
 8012ab6:	440a      	add	r2, r1
 8012ab8:	4291      	cmp	r1, r2
 8012aba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012abe:	d100      	bne.n	8012ac2 <memcpy+0xc>
 8012ac0:	4770      	bx	lr
 8012ac2:	b510      	push	{r4, lr}
 8012ac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012acc:	4291      	cmp	r1, r2
 8012ace:	d1f9      	bne.n	8012ac4 <memcpy+0xe>
 8012ad0:	bd10      	pop	{r4, pc}

08012ad2 <memmove>:
 8012ad2:	4288      	cmp	r0, r1
 8012ad4:	b510      	push	{r4, lr}
 8012ad6:	eb01 0402 	add.w	r4, r1, r2
 8012ada:	d902      	bls.n	8012ae2 <memmove+0x10>
 8012adc:	4284      	cmp	r4, r0
 8012ade:	4623      	mov	r3, r4
 8012ae0:	d807      	bhi.n	8012af2 <memmove+0x20>
 8012ae2:	1e43      	subs	r3, r0, #1
 8012ae4:	42a1      	cmp	r1, r4
 8012ae6:	d008      	beq.n	8012afa <memmove+0x28>
 8012ae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012aec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012af0:	e7f8      	b.n	8012ae4 <memmove+0x12>
 8012af2:	4402      	add	r2, r0
 8012af4:	4601      	mov	r1, r0
 8012af6:	428a      	cmp	r2, r1
 8012af8:	d100      	bne.n	8012afc <memmove+0x2a>
 8012afa:	bd10      	pop	{r4, pc}
 8012afc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b04:	e7f7      	b.n	8012af6 <memmove+0x24>

08012b06 <memset>:
 8012b06:	4402      	add	r2, r0
 8012b08:	4603      	mov	r3, r0
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d100      	bne.n	8012b10 <memset+0xa>
 8012b0e:	4770      	bx	lr
 8012b10:	f803 1b01 	strb.w	r1, [r3], #1
 8012b14:	e7f9      	b.n	8012b0a <memset+0x4>

08012b16 <__sfputc_r>:
 8012b16:	6893      	ldr	r3, [r2, #8]
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	b410      	push	{r4}
 8012b1e:	6093      	str	r3, [r2, #8]
 8012b20:	da08      	bge.n	8012b34 <__sfputc_r+0x1e>
 8012b22:	6994      	ldr	r4, [r2, #24]
 8012b24:	42a3      	cmp	r3, r4
 8012b26:	db01      	blt.n	8012b2c <__sfputc_r+0x16>
 8012b28:	290a      	cmp	r1, #10
 8012b2a:	d103      	bne.n	8012b34 <__sfputc_r+0x1e>
 8012b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b30:	f000 bbc2 	b.w	80132b8 <__swbuf_r>
 8012b34:	6813      	ldr	r3, [r2, #0]
 8012b36:	1c58      	adds	r0, r3, #1
 8012b38:	6010      	str	r0, [r2, #0]
 8012b3a:	7019      	strb	r1, [r3, #0]
 8012b3c:	4608      	mov	r0, r1
 8012b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <__sfputs_r>:
 8012b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b46:	4606      	mov	r6, r0
 8012b48:	460f      	mov	r7, r1
 8012b4a:	4614      	mov	r4, r2
 8012b4c:	18d5      	adds	r5, r2, r3
 8012b4e:	42ac      	cmp	r4, r5
 8012b50:	d101      	bne.n	8012b56 <__sfputs_r+0x12>
 8012b52:	2000      	movs	r0, #0
 8012b54:	e007      	b.n	8012b66 <__sfputs_r+0x22>
 8012b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b5a:	463a      	mov	r2, r7
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f7ff ffda 	bl	8012b16 <__sfputc_r>
 8012b62:	1c43      	adds	r3, r0, #1
 8012b64:	d1f3      	bne.n	8012b4e <__sfputs_r+0xa>
 8012b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012b68 <_vfiprintf_r>:
 8012b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6c:	460d      	mov	r5, r1
 8012b6e:	b09d      	sub	sp, #116	; 0x74
 8012b70:	4614      	mov	r4, r2
 8012b72:	4698      	mov	r8, r3
 8012b74:	4606      	mov	r6, r0
 8012b76:	b118      	cbz	r0, 8012b80 <_vfiprintf_r+0x18>
 8012b78:	6983      	ldr	r3, [r0, #24]
 8012b7a:	b90b      	cbnz	r3, 8012b80 <_vfiprintf_r+0x18>
 8012b7c:	f000 fd76 	bl	801366c <__sinit>
 8012b80:	4b89      	ldr	r3, [pc, #548]	; (8012da8 <_vfiprintf_r+0x240>)
 8012b82:	429d      	cmp	r5, r3
 8012b84:	d11b      	bne.n	8012bbe <_vfiprintf_r+0x56>
 8012b86:	6875      	ldr	r5, [r6, #4]
 8012b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012b8a:	07d9      	lsls	r1, r3, #31
 8012b8c:	d405      	bmi.n	8012b9a <_vfiprintf_r+0x32>
 8012b8e:	89ab      	ldrh	r3, [r5, #12]
 8012b90:	059a      	lsls	r2, r3, #22
 8012b92:	d402      	bmi.n	8012b9a <_vfiprintf_r+0x32>
 8012b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b96:	f7ff ff7e 	bl	8012a96 <__retarget_lock_acquire_recursive>
 8012b9a:	89ab      	ldrh	r3, [r5, #12]
 8012b9c:	071b      	lsls	r3, r3, #28
 8012b9e:	d501      	bpl.n	8012ba4 <_vfiprintf_r+0x3c>
 8012ba0:	692b      	ldr	r3, [r5, #16]
 8012ba2:	b9eb      	cbnz	r3, 8012be0 <_vfiprintf_r+0x78>
 8012ba4:	4629      	mov	r1, r5
 8012ba6:	4630      	mov	r0, r6
 8012ba8:	f000 fbd8 	bl	801335c <__swsetup_r>
 8012bac:	b1c0      	cbz	r0, 8012be0 <_vfiprintf_r+0x78>
 8012bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bb0:	07dc      	lsls	r4, r3, #31
 8012bb2:	d50e      	bpl.n	8012bd2 <_vfiprintf_r+0x6a>
 8012bb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bb8:	b01d      	add	sp, #116	; 0x74
 8012bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bbe:	4b7b      	ldr	r3, [pc, #492]	; (8012dac <_vfiprintf_r+0x244>)
 8012bc0:	429d      	cmp	r5, r3
 8012bc2:	d101      	bne.n	8012bc8 <_vfiprintf_r+0x60>
 8012bc4:	68b5      	ldr	r5, [r6, #8]
 8012bc6:	e7df      	b.n	8012b88 <_vfiprintf_r+0x20>
 8012bc8:	4b79      	ldr	r3, [pc, #484]	; (8012db0 <_vfiprintf_r+0x248>)
 8012bca:	429d      	cmp	r5, r3
 8012bcc:	bf08      	it	eq
 8012bce:	68f5      	ldreq	r5, [r6, #12]
 8012bd0:	e7da      	b.n	8012b88 <_vfiprintf_r+0x20>
 8012bd2:	89ab      	ldrh	r3, [r5, #12]
 8012bd4:	0598      	lsls	r0, r3, #22
 8012bd6:	d4ed      	bmi.n	8012bb4 <_vfiprintf_r+0x4c>
 8012bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012bda:	f7ff ff5d 	bl	8012a98 <__retarget_lock_release_recursive>
 8012bde:	e7e9      	b.n	8012bb4 <_vfiprintf_r+0x4c>
 8012be0:	2300      	movs	r3, #0
 8012be2:	9309      	str	r3, [sp, #36]	; 0x24
 8012be4:	2320      	movs	r3, #32
 8012be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bee:	2330      	movs	r3, #48	; 0x30
 8012bf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012db4 <_vfiprintf_r+0x24c>
 8012bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012bf8:	f04f 0901 	mov.w	r9, #1
 8012bfc:	4623      	mov	r3, r4
 8012bfe:	469a      	mov	sl, r3
 8012c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c04:	b10a      	cbz	r2, 8012c0a <_vfiprintf_r+0xa2>
 8012c06:	2a25      	cmp	r2, #37	; 0x25
 8012c08:	d1f9      	bne.n	8012bfe <_vfiprintf_r+0x96>
 8012c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8012c0e:	d00b      	beq.n	8012c28 <_vfiprintf_r+0xc0>
 8012c10:	465b      	mov	r3, fp
 8012c12:	4622      	mov	r2, r4
 8012c14:	4629      	mov	r1, r5
 8012c16:	4630      	mov	r0, r6
 8012c18:	f7ff ff94 	bl	8012b44 <__sfputs_r>
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	f000 80aa 	beq.w	8012d76 <_vfiprintf_r+0x20e>
 8012c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c24:	445a      	add	r2, fp
 8012c26:	9209      	str	r2, [sp, #36]	; 0x24
 8012c28:	f89a 3000 	ldrb.w	r3, [sl]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f000 80a2 	beq.w	8012d76 <_vfiprintf_r+0x20e>
 8012c32:	2300      	movs	r3, #0
 8012c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c3c:	f10a 0a01 	add.w	sl, sl, #1
 8012c40:	9304      	str	r3, [sp, #16]
 8012c42:	9307      	str	r3, [sp, #28]
 8012c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c48:	931a      	str	r3, [sp, #104]	; 0x68
 8012c4a:	4654      	mov	r4, sl
 8012c4c:	2205      	movs	r2, #5
 8012c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c52:	4858      	ldr	r0, [pc, #352]	; (8012db4 <_vfiprintf_r+0x24c>)
 8012c54:	f7ed fac4 	bl	80001e0 <memchr>
 8012c58:	9a04      	ldr	r2, [sp, #16]
 8012c5a:	b9d8      	cbnz	r0, 8012c94 <_vfiprintf_r+0x12c>
 8012c5c:	06d1      	lsls	r1, r2, #27
 8012c5e:	bf44      	itt	mi
 8012c60:	2320      	movmi	r3, #32
 8012c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c66:	0713      	lsls	r3, r2, #28
 8012c68:	bf44      	itt	mi
 8012c6a:	232b      	movmi	r3, #43	; 0x2b
 8012c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c70:	f89a 3000 	ldrb.w	r3, [sl]
 8012c74:	2b2a      	cmp	r3, #42	; 0x2a
 8012c76:	d015      	beq.n	8012ca4 <_vfiprintf_r+0x13c>
 8012c78:	9a07      	ldr	r2, [sp, #28]
 8012c7a:	4654      	mov	r4, sl
 8012c7c:	2000      	movs	r0, #0
 8012c7e:	f04f 0c0a 	mov.w	ip, #10
 8012c82:	4621      	mov	r1, r4
 8012c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c88:	3b30      	subs	r3, #48	; 0x30
 8012c8a:	2b09      	cmp	r3, #9
 8012c8c:	d94e      	bls.n	8012d2c <_vfiprintf_r+0x1c4>
 8012c8e:	b1b0      	cbz	r0, 8012cbe <_vfiprintf_r+0x156>
 8012c90:	9207      	str	r2, [sp, #28]
 8012c92:	e014      	b.n	8012cbe <_vfiprintf_r+0x156>
 8012c94:	eba0 0308 	sub.w	r3, r0, r8
 8012c98:	fa09 f303 	lsl.w	r3, r9, r3
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	9304      	str	r3, [sp, #16]
 8012ca0:	46a2      	mov	sl, r4
 8012ca2:	e7d2      	b.n	8012c4a <_vfiprintf_r+0xe2>
 8012ca4:	9b03      	ldr	r3, [sp, #12]
 8012ca6:	1d19      	adds	r1, r3, #4
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	9103      	str	r1, [sp, #12]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	bfbb      	ittet	lt
 8012cb0:	425b      	neglt	r3, r3
 8012cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8012cb6:	9307      	strge	r3, [sp, #28]
 8012cb8:	9307      	strlt	r3, [sp, #28]
 8012cba:	bfb8      	it	lt
 8012cbc:	9204      	strlt	r2, [sp, #16]
 8012cbe:	7823      	ldrb	r3, [r4, #0]
 8012cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8012cc2:	d10c      	bne.n	8012cde <_vfiprintf_r+0x176>
 8012cc4:	7863      	ldrb	r3, [r4, #1]
 8012cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8012cc8:	d135      	bne.n	8012d36 <_vfiprintf_r+0x1ce>
 8012cca:	9b03      	ldr	r3, [sp, #12]
 8012ccc:	1d1a      	adds	r2, r3, #4
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	9203      	str	r2, [sp, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	bfb8      	it	lt
 8012cd6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012cda:	3402      	adds	r4, #2
 8012cdc:	9305      	str	r3, [sp, #20]
 8012cde:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012dc4 <_vfiprintf_r+0x25c>
 8012ce2:	7821      	ldrb	r1, [r4, #0]
 8012ce4:	2203      	movs	r2, #3
 8012ce6:	4650      	mov	r0, sl
 8012ce8:	f7ed fa7a 	bl	80001e0 <memchr>
 8012cec:	b140      	cbz	r0, 8012d00 <_vfiprintf_r+0x198>
 8012cee:	2340      	movs	r3, #64	; 0x40
 8012cf0:	eba0 000a 	sub.w	r0, r0, sl
 8012cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8012cf8:	9b04      	ldr	r3, [sp, #16]
 8012cfa:	4303      	orrs	r3, r0
 8012cfc:	3401      	adds	r4, #1
 8012cfe:	9304      	str	r3, [sp, #16]
 8012d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d04:	482c      	ldr	r0, [pc, #176]	; (8012db8 <_vfiprintf_r+0x250>)
 8012d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d0a:	2206      	movs	r2, #6
 8012d0c:	f7ed fa68 	bl	80001e0 <memchr>
 8012d10:	2800      	cmp	r0, #0
 8012d12:	d03f      	beq.n	8012d94 <_vfiprintf_r+0x22c>
 8012d14:	4b29      	ldr	r3, [pc, #164]	; (8012dbc <_vfiprintf_r+0x254>)
 8012d16:	bb1b      	cbnz	r3, 8012d60 <_vfiprintf_r+0x1f8>
 8012d18:	9b03      	ldr	r3, [sp, #12]
 8012d1a:	3307      	adds	r3, #7
 8012d1c:	f023 0307 	bic.w	r3, r3, #7
 8012d20:	3308      	adds	r3, #8
 8012d22:	9303      	str	r3, [sp, #12]
 8012d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d26:	443b      	add	r3, r7
 8012d28:	9309      	str	r3, [sp, #36]	; 0x24
 8012d2a:	e767      	b.n	8012bfc <_vfiprintf_r+0x94>
 8012d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d30:	460c      	mov	r4, r1
 8012d32:	2001      	movs	r0, #1
 8012d34:	e7a5      	b.n	8012c82 <_vfiprintf_r+0x11a>
 8012d36:	2300      	movs	r3, #0
 8012d38:	3401      	adds	r4, #1
 8012d3a:	9305      	str	r3, [sp, #20]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	f04f 0c0a 	mov.w	ip, #10
 8012d42:	4620      	mov	r0, r4
 8012d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d48:	3a30      	subs	r2, #48	; 0x30
 8012d4a:	2a09      	cmp	r2, #9
 8012d4c:	d903      	bls.n	8012d56 <_vfiprintf_r+0x1ee>
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d0c5      	beq.n	8012cde <_vfiprintf_r+0x176>
 8012d52:	9105      	str	r1, [sp, #20]
 8012d54:	e7c3      	b.n	8012cde <_vfiprintf_r+0x176>
 8012d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e7f0      	b.n	8012d42 <_vfiprintf_r+0x1da>
 8012d60:	ab03      	add	r3, sp, #12
 8012d62:	9300      	str	r3, [sp, #0]
 8012d64:	462a      	mov	r2, r5
 8012d66:	4b16      	ldr	r3, [pc, #88]	; (8012dc0 <_vfiprintf_r+0x258>)
 8012d68:	a904      	add	r1, sp, #16
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f3af 8000 	nop.w
 8012d70:	4607      	mov	r7, r0
 8012d72:	1c78      	adds	r0, r7, #1
 8012d74:	d1d6      	bne.n	8012d24 <_vfiprintf_r+0x1bc>
 8012d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d78:	07d9      	lsls	r1, r3, #31
 8012d7a:	d405      	bmi.n	8012d88 <_vfiprintf_r+0x220>
 8012d7c:	89ab      	ldrh	r3, [r5, #12]
 8012d7e:	059a      	lsls	r2, r3, #22
 8012d80:	d402      	bmi.n	8012d88 <_vfiprintf_r+0x220>
 8012d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d84:	f7ff fe88 	bl	8012a98 <__retarget_lock_release_recursive>
 8012d88:	89ab      	ldrh	r3, [r5, #12]
 8012d8a:	065b      	lsls	r3, r3, #25
 8012d8c:	f53f af12 	bmi.w	8012bb4 <_vfiprintf_r+0x4c>
 8012d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d92:	e711      	b.n	8012bb8 <_vfiprintf_r+0x50>
 8012d94:	ab03      	add	r3, sp, #12
 8012d96:	9300      	str	r3, [sp, #0]
 8012d98:	462a      	mov	r2, r5
 8012d9a:	4b09      	ldr	r3, [pc, #36]	; (8012dc0 <_vfiprintf_r+0x258>)
 8012d9c:	a904      	add	r1, sp, #16
 8012d9e:	4630      	mov	r0, r6
 8012da0:	f000 f880 	bl	8012ea4 <_printf_i>
 8012da4:	e7e4      	b.n	8012d70 <_vfiprintf_r+0x208>
 8012da6:	bf00      	nop
 8012da8:	08014730 	.word	0x08014730
 8012dac:	08014750 	.word	0x08014750
 8012db0:	08014710 	.word	0x08014710
 8012db4:	080146dc 	.word	0x080146dc
 8012db8:	080146e6 	.word	0x080146e6
 8012dbc:	00000000 	.word	0x00000000
 8012dc0:	08012b45 	.word	0x08012b45
 8012dc4:	080146e2 	.word	0x080146e2

08012dc8 <_printf_common>:
 8012dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dcc:	4616      	mov	r6, r2
 8012dce:	4699      	mov	r9, r3
 8012dd0:	688a      	ldr	r2, [r1, #8]
 8012dd2:	690b      	ldr	r3, [r1, #16]
 8012dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	bfb8      	it	lt
 8012ddc:	4613      	movlt	r3, r2
 8012dde:	6033      	str	r3, [r6, #0]
 8012de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012de4:	4607      	mov	r7, r0
 8012de6:	460c      	mov	r4, r1
 8012de8:	b10a      	cbz	r2, 8012dee <_printf_common+0x26>
 8012dea:	3301      	adds	r3, #1
 8012dec:	6033      	str	r3, [r6, #0]
 8012dee:	6823      	ldr	r3, [r4, #0]
 8012df0:	0699      	lsls	r1, r3, #26
 8012df2:	bf42      	ittt	mi
 8012df4:	6833      	ldrmi	r3, [r6, #0]
 8012df6:	3302      	addmi	r3, #2
 8012df8:	6033      	strmi	r3, [r6, #0]
 8012dfa:	6825      	ldr	r5, [r4, #0]
 8012dfc:	f015 0506 	ands.w	r5, r5, #6
 8012e00:	d106      	bne.n	8012e10 <_printf_common+0x48>
 8012e02:	f104 0a19 	add.w	sl, r4, #25
 8012e06:	68e3      	ldr	r3, [r4, #12]
 8012e08:	6832      	ldr	r2, [r6, #0]
 8012e0a:	1a9b      	subs	r3, r3, r2
 8012e0c:	42ab      	cmp	r3, r5
 8012e0e:	dc26      	bgt.n	8012e5e <_printf_common+0x96>
 8012e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e14:	1e13      	subs	r3, r2, #0
 8012e16:	6822      	ldr	r2, [r4, #0]
 8012e18:	bf18      	it	ne
 8012e1a:	2301      	movne	r3, #1
 8012e1c:	0692      	lsls	r2, r2, #26
 8012e1e:	d42b      	bmi.n	8012e78 <_printf_common+0xb0>
 8012e20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e24:	4649      	mov	r1, r9
 8012e26:	4638      	mov	r0, r7
 8012e28:	47c0      	blx	r8
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	d01e      	beq.n	8012e6c <_printf_common+0xa4>
 8012e2e:	6823      	ldr	r3, [r4, #0]
 8012e30:	68e5      	ldr	r5, [r4, #12]
 8012e32:	6832      	ldr	r2, [r6, #0]
 8012e34:	f003 0306 	and.w	r3, r3, #6
 8012e38:	2b04      	cmp	r3, #4
 8012e3a:	bf08      	it	eq
 8012e3c:	1aad      	subeq	r5, r5, r2
 8012e3e:	68a3      	ldr	r3, [r4, #8]
 8012e40:	6922      	ldr	r2, [r4, #16]
 8012e42:	bf0c      	ite	eq
 8012e44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e48:	2500      	movne	r5, #0
 8012e4a:	4293      	cmp	r3, r2
 8012e4c:	bfc4      	itt	gt
 8012e4e:	1a9b      	subgt	r3, r3, r2
 8012e50:	18ed      	addgt	r5, r5, r3
 8012e52:	2600      	movs	r6, #0
 8012e54:	341a      	adds	r4, #26
 8012e56:	42b5      	cmp	r5, r6
 8012e58:	d11a      	bne.n	8012e90 <_printf_common+0xc8>
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	e008      	b.n	8012e70 <_printf_common+0xa8>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	4652      	mov	r2, sl
 8012e62:	4649      	mov	r1, r9
 8012e64:	4638      	mov	r0, r7
 8012e66:	47c0      	blx	r8
 8012e68:	3001      	adds	r0, #1
 8012e6a:	d103      	bne.n	8012e74 <_printf_common+0xac>
 8012e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e74:	3501      	adds	r5, #1
 8012e76:	e7c6      	b.n	8012e06 <_printf_common+0x3e>
 8012e78:	18e1      	adds	r1, r4, r3
 8012e7a:	1c5a      	adds	r2, r3, #1
 8012e7c:	2030      	movs	r0, #48	; 0x30
 8012e7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012e82:	4422      	add	r2, r4
 8012e84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012e88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012e8c:	3302      	adds	r3, #2
 8012e8e:	e7c7      	b.n	8012e20 <_printf_common+0x58>
 8012e90:	2301      	movs	r3, #1
 8012e92:	4622      	mov	r2, r4
 8012e94:	4649      	mov	r1, r9
 8012e96:	4638      	mov	r0, r7
 8012e98:	47c0      	blx	r8
 8012e9a:	3001      	adds	r0, #1
 8012e9c:	d0e6      	beq.n	8012e6c <_printf_common+0xa4>
 8012e9e:	3601      	adds	r6, #1
 8012ea0:	e7d9      	b.n	8012e56 <_printf_common+0x8e>
	...

08012ea4 <_printf_i>:
 8012ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	4691      	mov	r9, r2
 8012eac:	7e27      	ldrb	r7, [r4, #24]
 8012eae:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012eb0:	2f78      	cmp	r7, #120	; 0x78
 8012eb2:	4680      	mov	r8, r0
 8012eb4:	469a      	mov	sl, r3
 8012eb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012eba:	d807      	bhi.n	8012ecc <_printf_i+0x28>
 8012ebc:	2f62      	cmp	r7, #98	; 0x62
 8012ebe:	d80a      	bhi.n	8012ed6 <_printf_i+0x32>
 8012ec0:	2f00      	cmp	r7, #0
 8012ec2:	f000 80d8 	beq.w	8013076 <_printf_i+0x1d2>
 8012ec6:	2f58      	cmp	r7, #88	; 0x58
 8012ec8:	f000 80a3 	beq.w	8013012 <_printf_i+0x16e>
 8012ecc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ed4:	e03a      	b.n	8012f4c <_printf_i+0xa8>
 8012ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012eda:	2b15      	cmp	r3, #21
 8012edc:	d8f6      	bhi.n	8012ecc <_printf_i+0x28>
 8012ede:	a001      	add	r0, pc, #4	; (adr r0, 8012ee4 <_printf_i+0x40>)
 8012ee0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012ee4:	08012f3d 	.word	0x08012f3d
 8012ee8:	08012f51 	.word	0x08012f51
 8012eec:	08012ecd 	.word	0x08012ecd
 8012ef0:	08012ecd 	.word	0x08012ecd
 8012ef4:	08012ecd 	.word	0x08012ecd
 8012ef8:	08012ecd 	.word	0x08012ecd
 8012efc:	08012f51 	.word	0x08012f51
 8012f00:	08012ecd 	.word	0x08012ecd
 8012f04:	08012ecd 	.word	0x08012ecd
 8012f08:	08012ecd 	.word	0x08012ecd
 8012f0c:	08012ecd 	.word	0x08012ecd
 8012f10:	0801305d 	.word	0x0801305d
 8012f14:	08012f81 	.word	0x08012f81
 8012f18:	0801303f 	.word	0x0801303f
 8012f1c:	08012ecd 	.word	0x08012ecd
 8012f20:	08012ecd 	.word	0x08012ecd
 8012f24:	0801307f 	.word	0x0801307f
 8012f28:	08012ecd 	.word	0x08012ecd
 8012f2c:	08012f81 	.word	0x08012f81
 8012f30:	08012ecd 	.word	0x08012ecd
 8012f34:	08012ecd 	.word	0x08012ecd
 8012f38:	08013047 	.word	0x08013047
 8012f3c:	680b      	ldr	r3, [r1, #0]
 8012f3e:	1d1a      	adds	r2, r3, #4
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	600a      	str	r2, [r1, #0]
 8012f44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e0a3      	b.n	8013098 <_printf_i+0x1f4>
 8012f50:	6825      	ldr	r5, [r4, #0]
 8012f52:	6808      	ldr	r0, [r1, #0]
 8012f54:	062e      	lsls	r6, r5, #24
 8012f56:	f100 0304 	add.w	r3, r0, #4
 8012f5a:	d50a      	bpl.n	8012f72 <_printf_i+0xce>
 8012f5c:	6805      	ldr	r5, [r0, #0]
 8012f5e:	600b      	str	r3, [r1, #0]
 8012f60:	2d00      	cmp	r5, #0
 8012f62:	da03      	bge.n	8012f6c <_printf_i+0xc8>
 8012f64:	232d      	movs	r3, #45	; 0x2d
 8012f66:	426d      	negs	r5, r5
 8012f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f6c:	485e      	ldr	r0, [pc, #376]	; (80130e8 <_printf_i+0x244>)
 8012f6e:	230a      	movs	r3, #10
 8012f70:	e019      	b.n	8012fa6 <_printf_i+0x102>
 8012f72:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012f76:	6805      	ldr	r5, [r0, #0]
 8012f78:	600b      	str	r3, [r1, #0]
 8012f7a:	bf18      	it	ne
 8012f7c:	b22d      	sxthne	r5, r5
 8012f7e:	e7ef      	b.n	8012f60 <_printf_i+0xbc>
 8012f80:	680b      	ldr	r3, [r1, #0]
 8012f82:	6825      	ldr	r5, [r4, #0]
 8012f84:	1d18      	adds	r0, r3, #4
 8012f86:	6008      	str	r0, [r1, #0]
 8012f88:	0628      	lsls	r0, r5, #24
 8012f8a:	d501      	bpl.n	8012f90 <_printf_i+0xec>
 8012f8c:	681d      	ldr	r5, [r3, #0]
 8012f8e:	e002      	b.n	8012f96 <_printf_i+0xf2>
 8012f90:	0669      	lsls	r1, r5, #25
 8012f92:	d5fb      	bpl.n	8012f8c <_printf_i+0xe8>
 8012f94:	881d      	ldrh	r5, [r3, #0]
 8012f96:	4854      	ldr	r0, [pc, #336]	; (80130e8 <_printf_i+0x244>)
 8012f98:	2f6f      	cmp	r7, #111	; 0x6f
 8012f9a:	bf0c      	ite	eq
 8012f9c:	2308      	moveq	r3, #8
 8012f9e:	230a      	movne	r3, #10
 8012fa0:	2100      	movs	r1, #0
 8012fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012fa6:	6866      	ldr	r6, [r4, #4]
 8012fa8:	60a6      	str	r6, [r4, #8]
 8012faa:	2e00      	cmp	r6, #0
 8012fac:	bfa2      	ittt	ge
 8012fae:	6821      	ldrge	r1, [r4, #0]
 8012fb0:	f021 0104 	bicge.w	r1, r1, #4
 8012fb4:	6021      	strge	r1, [r4, #0]
 8012fb6:	b90d      	cbnz	r5, 8012fbc <_printf_i+0x118>
 8012fb8:	2e00      	cmp	r6, #0
 8012fba:	d04d      	beq.n	8013058 <_printf_i+0x1b4>
 8012fbc:	4616      	mov	r6, r2
 8012fbe:	fbb5 f1f3 	udiv	r1, r5, r3
 8012fc2:	fb03 5711 	mls	r7, r3, r1, r5
 8012fc6:	5dc7      	ldrb	r7, [r0, r7]
 8012fc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012fcc:	462f      	mov	r7, r5
 8012fce:	42bb      	cmp	r3, r7
 8012fd0:	460d      	mov	r5, r1
 8012fd2:	d9f4      	bls.n	8012fbe <_printf_i+0x11a>
 8012fd4:	2b08      	cmp	r3, #8
 8012fd6:	d10b      	bne.n	8012ff0 <_printf_i+0x14c>
 8012fd8:	6823      	ldr	r3, [r4, #0]
 8012fda:	07df      	lsls	r7, r3, #31
 8012fdc:	d508      	bpl.n	8012ff0 <_printf_i+0x14c>
 8012fde:	6923      	ldr	r3, [r4, #16]
 8012fe0:	6861      	ldr	r1, [r4, #4]
 8012fe2:	4299      	cmp	r1, r3
 8012fe4:	bfde      	ittt	le
 8012fe6:	2330      	movle	r3, #48	; 0x30
 8012fe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012fec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012ff0:	1b92      	subs	r2, r2, r6
 8012ff2:	6122      	str	r2, [r4, #16]
 8012ff4:	f8cd a000 	str.w	sl, [sp]
 8012ff8:	464b      	mov	r3, r9
 8012ffa:	aa03      	add	r2, sp, #12
 8012ffc:	4621      	mov	r1, r4
 8012ffe:	4640      	mov	r0, r8
 8013000:	f7ff fee2 	bl	8012dc8 <_printf_common>
 8013004:	3001      	adds	r0, #1
 8013006:	d14c      	bne.n	80130a2 <_printf_i+0x1fe>
 8013008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801300c:	b004      	add	sp, #16
 801300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013012:	4835      	ldr	r0, [pc, #212]	; (80130e8 <_printf_i+0x244>)
 8013014:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	680e      	ldr	r6, [r1, #0]
 801301c:	061f      	lsls	r7, r3, #24
 801301e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013022:	600e      	str	r6, [r1, #0]
 8013024:	d514      	bpl.n	8013050 <_printf_i+0x1ac>
 8013026:	07d9      	lsls	r1, r3, #31
 8013028:	bf44      	itt	mi
 801302a:	f043 0320 	orrmi.w	r3, r3, #32
 801302e:	6023      	strmi	r3, [r4, #0]
 8013030:	b91d      	cbnz	r5, 801303a <_printf_i+0x196>
 8013032:	6823      	ldr	r3, [r4, #0]
 8013034:	f023 0320 	bic.w	r3, r3, #32
 8013038:	6023      	str	r3, [r4, #0]
 801303a:	2310      	movs	r3, #16
 801303c:	e7b0      	b.n	8012fa0 <_printf_i+0xfc>
 801303e:	6823      	ldr	r3, [r4, #0]
 8013040:	f043 0320 	orr.w	r3, r3, #32
 8013044:	6023      	str	r3, [r4, #0]
 8013046:	2378      	movs	r3, #120	; 0x78
 8013048:	4828      	ldr	r0, [pc, #160]	; (80130ec <_printf_i+0x248>)
 801304a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801304e:	e7e3      	b.n	8013018 <_printf_i+0x174>
 8013050:	065e      	lsls	r6, r3, #25
 8013052:	bf48      	it	mi
 8013054:	b2ad      	uxthmi	r5, r5
 8013056:	e7e6      	b.n	8013026 <_printf_i+0x182>
 8013058:	4616      	mov	r6, r2
 801305a:	e7bb      	b.n	8012fd4 <_printf_i+0x130>
 801305c:	680b      	ldr	r3, [r1, #0]
 801305e:	6826      	ldr	r6, [r4, #0]
 8013060:	6960      	ldr	r0, [r4, #20]
 8013062:	1d1d      	adds	r5, r3, #4
 8013064:	600d      	str	r5, [r1, #0]
 8013066:	0635      	lsls	r5, r6, #24
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	d501      	bpl.n	8013070 <_printf_i+0x1cc>
 801306c:	6018      	str	r0, [r3, #0]
 801306e:	e002      	b.n	8013076 <_printf_i+0x1d2>
 8013070:	0671      	lsls	r1, r6, #25
 8013072:	d5fb      	bpl.n	801306c <_printf_i+0x1c8>
 8013074:	8018      	strh	r0, [r3, #0]
 8013076:	2300      	movs	r3, #0
 8013078:	6123      	str	r3, [r4, #16]
 801307a:	4616      	mov	r6, r2
 801307c:	e7ba      	b.n	8012ff4 <_printf_i+0x150>
 801307e:	680b      	ldr	r3, [r1, #0]
 8013080:	1d1a      	adds	r2, r3, #4
 8013082:	600a      	str	r2, [r1, #0]
 8013084:	681e      	ldr	r6, [r3, #0]
 8013086:	6862      	ldr	r2, [r4, #4]
 8013088:	2100      	movs	r1, #0
 801308a:	4630      	mov	r0, r6
 801308c:	f7ed f8a8 	bl	80001e0 <memchr>
 8013090:	b108      	cbz	r0, 8013096 <_printf_i+0x1f2>
 8013092:	1b80      	subs	r0, r0, r6
 8013094:	6060      	str	r0, [r4, #4]
 8013096:	6863      	ldr	r3, [r4, #4]
 8013098:	6123      	str	r3, [r4, #16]
 801309a:	2300      	movs	r3, #0
 801309c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130a0:	e7a8      	b.n	8012ff4 <_printf_i+0x150>
 80130a2:	6923      	ldr	r3, [r4, #16]
 80130a4:	4632      	mov	r2, r6
 80130a6:	4649      	mov	r1, r9
 80130a8:	4640      	mov	r0, r8
 80130aa:	47d0      	blx	sl
 80130ac:	3001      	adds	r0, #1
 80130ae:	d0ab      	beq.n	8013008 <_printf_i+0x164>
 80130b0:	6823      	ldr	r3, [r4, #0]
 80130b2:	079b      	lsls	r3, r3, #30
 80130b4:	d413      	bmi.n	80130de <_printf_i+0x23a>
 80130b6:	68e0      	ldr	r0, [r4, #12]
 80130b8:	9b03      	ldr	r3, [sp, #12]
 80130ba:	4298      	cmp	r0, r3
 80130bc:	bfb8      	it	lt
 80130be:	4618      	movlt	r0, r3
 80130c0:	e7a4      	b.n	801300c <_printf_i+0x168>
 80130c2:	2301      	movs	r3, #1
 80130c4:	4632      	mov	r2, r6
 80130c6:	4649      	mov	r1, r9
 80130c8:	4640      	mov	r0, r8
 80130ca:	47d0      	blx	sl
 80130cc:	3001      	adds	r0, #1
 80130ce:	d09b      	beq.n	8013008 <_printf_i+0x164>
 80130d0:	3501      	adds	r5, #1
 80130d2:	68e3      	ldr	r3, [r4, #12]
 80130d4:	9903      	ldr	r1, [sp, #12]
 80130d6:	1a5b      	subs	r3, r3, r1
 80130d8:	42ab      	cmp	r3, r5
 80130da:	dcf2      	bgt.n	80130c2 <_printf_i+0x21e>
 80130dc:	e7eb      	b.n	80130b6 <_printf_i+0x212>
 80130de:	2500      	movs	r5, #0
 80130e0:	f104 0619 	add.w	r6, r4, #25
 80130e4:	e7f5      	b.n	80130d2 <_printf_i+0x22e>
 80130e6:	bf00      	nop
 80130e8:	080146ed 	.word	0x080146ed
 80130ec:	080146fe 	.word	0x080146fe

080130f0 <iprintf>:
 80130f0:	b40f      	push	{r0, r1, r2, r3}
 80130f2:	4b0a      	ldr	r3, [pc, #40]	; (801311c <iprintf+0x2c>)
 80130f4:	b513      	push	{r0, r1, r4, lr}
 80130f6:	681c      	ldr	r4, [r3, #0]
 80130f8:	b124      	cbz	r4, 8013104 <iprintf+0x14>
 80130fa:	69a3      	ldr	r3, [r4, #24]
 80130fc:	b913      	cbnz	r3, 8013104 <iprintf+0x14>
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fab4 	bl	801366c <__sinit>
 8013104:	ab05      	add	r3, sp, #20
 8013106:	9a04      	ldr	r2, [sp, #16]
 8013108:	68a1      	ldr	r1, [r4, #8]
 801310a:	9301      	str	r3, [sp, #4]
 801310c:	4620      	mov	r0, r4
 801310e:	f7ff fd2b 	bl	8012b68 <_vfiprintf_r>
 8013112:	b002      	add	sp, #8
 8013114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013118:	b004      	add	sp, #16
 801311a:	4770      	bx	lr
 801311c:	20000034 	.word	0x20000034

08013120 <_puts_r>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	460e      	mov	r6, r1
 8013124:	4605      	mov	r5, r0
 8013126:	b118      	cbz	r0, 8013130 <_puts_r+0x10>
 8013128:	6983      	ldr	r3, [r0, #24]
 801312a:	b90b      	cbnz	r3, 8013130 <_puts_r+0x10>
 801312c:	f000 fa9e 	bl	801366c <__sinit>
 8013130:	69ab      	ldr	r3, [r5, #24]
 8013132:	68ac      	ldr	r4, [r5, #8]
 8013134:	b913      	cbnz	r3, 801313c <_puts_r+0x1c>
 8013136:	4628      	mov	r0, r5
 8013138:	f000 fa98 	bl	801366c <__sinit>
 801313c:	4b2c      	ldr	r3, [pc, #176]	; (80131f0 <_puts_r+0xd0>)
 801313e:	429c      	cmp	r4, r3
 8013140:	d120      	bne.n	8013184 <_puts_r+0x64>
 8013142:	686c      	ldr	r4, [r5, #4]
 8013144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013146:	07db      	lsls	r3, r3, #31
 8013148:	d405      	bmi.n	8013156 <_puts_r+0x36>
 801314a:	89a3      	ldrh	r3, [r4, #12]
 801314c:	0598      	lsls	r0, r3, #22
 801314e:	d402      	bmi.n	8013156 <_puts_r+0x36>
 8013150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013152:	f7ff fca0 	bl	8012a96 <__retarget_lock_acquire_recursive>
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	0719      	lsls	r1, r3, #28
 801315a:	d51d      	bpl.n	8013198 <_puts_r+0x78>
 801315c:	6923      	ldr	r3, [r4, #16]
 801315e:	b1db      	cbz	r3, 8013198 <_puts_r+0x78>
 8013160:	3e01      	subs	r6, #1
 8013162:	68a3      	ldr	r3, [r4, #8]
 8013164:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013168:	3b01      	subs	r3, #1
 801316a:	60a3      	str	r3, [r4, #8]
 801316c:	bb39      	cbnz	r1, 80131be <_puts_r+0x9e>
 801316e:	2b00      	cmp	r3, #0
 8013170:	da38      	bge.n	80131e4 <_puts_r+0xc4>
 8013172:	4622      	mov	r2, r4
 8013174:	210a      	movs	r1, #10
 8013176:	4628      	mov	r0, r5
 8013178:	f000 f89e 	bl	80132b8 <__swbuf_r>
 801317c:	3001      	adds	r0, #1
 801317e:	d011      	beq.n	80131a4 <_puts_r+0x84>
 8013180:	250a      	movs	r5, #10
 8013182:	e011      	b.n	80131a8 <_puts_r+0x88>
 8013184:	4b1b      	ldr	r3, [pc, #108]	; (80131f4 <_puts_r+0xd4>)
 8013186:	429c      	cmp	r4, r3
 8013188:	d101      	bne.n	801318e <_puts_r+0x6e>
 801318a:	68ac      	ldr	r4, [r5, #8]
 801318c:	e7da      	b.n	8013144 <_puts_r+0x24>
 801318e:	4b1a      	ldr	r3, [pc, #104]	; (80131f8 <_puts_r+0xd8>)
 8013190:	429c      	cmp	r4, r3
 8013192:	bf08      	it	eq
 8013194:	68ec      	ldreq	r4, [r5, #12]
 8013196:	e7d5      	b.n	8013144 <_puts_r+0x24>
 8013198:	4621      	mov	r1, r4
 801319a:	4628      	mov	r0, r5
 801319c:	f000 f8de 	bl	801335c <__swsetup_r>
 80131a0:	2800      	cmp	r0, #0
 80131a2:	d0dd      	beq.n	8013160 <_puts_r+0x40>
 80131a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80131a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131aa:	07da      	lsls	r2, r3, #31
 80131ac:	d405      	bmi.n	80131ba <_puts_r+0x9a>
 80131ae:	89a3      	ldrh	r3, [r4, #12]
 80131b0:	059b      	lsls	r3, r3, #22
 80131b2:	d402      	bmi.n	80131ba <_puts_r+0x9a>
 80131b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131b6:	f7ff fc6f 	bl	8012a98 <__retarget_lock_release_recursive>
 80131ba:	4628      	mov	r0, r5
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
 80131be:	2b00      	cmp	r3, #0
 80131c0:	da04      	bge.n	80131cc <_puts_r+0xac>
 80131c2:	69a2      	ldr	r2, [r4, #24]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	dc06      	bgt.n	80131d6 <_puts_r+0xb6>
 80131c8:	290a      	cmp	r1, #10
 80131ca:	d004      	beq.n	80131d6 <_puts_r+0xb6>
 80131cc:	6823      	ldr	r3, [r4, #0]
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	6022      	str	r2, [r4, #0]
 80131d2:	7019      	strb	r1, [r3, #0]
 80131d4:	e7c5      	b.n	8013162 <_puts_r+0x42>
 80131d6:	4622      	mov	r2, r4
 80131d8:	4628      	mov	r0, r5
 80131da:	f000 f86d 	bl	80132b8 <__swbuf_r>
 80131de:	3001      	adds	r0, #1
 80131e0:	d1bf      	bne.n	8013162 <_puts_r+0x42>
 80131e2:	e7df      	b.n	80131a4 <_puts_r+0x84>
 80131e4:	6823      	ldr	r3, [r4, #0]
 80131e6:	250a      	movs	r5, #10
 80131e8:	1c5a      	adds	r2, r3, #1
 80131ea:	6022      	str	r2, [r4, #0]
 80131ec:	701d      	strb	r5, [r3, #0]
 80131ee:	e7db      	b.n	80131a8 <_puts_r+0x88>
 80131f0:	08014730 	.word	0x08014730
 80131f4:	08014750 	.word	0x08014750
 80131f8:	08014710 	.word	0x08014710

080131fc <puts>:
 80131fc:	4b02      	ldr	r3, [pc, #8]	; (8013208 <puts+0xc>)
 80131fe:	4601      	mov	r1, r0
 8013200:	6818      	ldr	r0, [r3, #0]
 8013202:	f7ff bf8d 	b.w	8013120 <_puts_r>
 8013206:	bf00      	nop
 8013208:	20000034 	.word	0x20000034

0801320c <siprintf>:
 801320c:	b40e      	push	{r1, r2, r3}
 801320e:	b500      	push	{lr}
 8013210:	b09c      	sub	sp, #112	; 0x70
 8013212:	ab1d      	add	r3, sp, #116	; 0x74
 8013214:	9002      	str	r0, [sp, #8]
 8013216:	9006      	str	r0, [sp, #24]
 8013218:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801321c:	4809      	ldr	r0, [pc, #36]	; (8013244 <siprintf+0x38>)
 801321e:	9107      	str	r1, [sp, #28]
 8013220:	9104      	str	r1, [sp, #16]
 8013222:	4909      	ldr	r1, [pc, #36]	; (8013248 <siprintf+0x3c>)
 8013224:	f853 2b04 	ldr.w	r2, [r3], #4
 8013228:	9105      	str	r1, [sp, #20]
 801322a:	6800      	ldr	r0, [r0, #0]
 801322c:	9301      	str	r3, [sp, #4]
 801322e:	a902      	add	r1, sp, #8
 8013230:	f000 fc4a 	bl	8013ac8 <_svfiprintf_r>
 8013234:	9b02      	ldr	r3, [sp, #8]
 8013236:	2200      	movs	r2, #0
 8013238:	701a      	strb	r2, [r3, #0]
 801323a:	b01c      	add	sp, #112	; 0x70
 801323c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013240:	b003      	add	sp, #12
 8013242:	4770      	bx	lr
 8013244:	20000034 	.word	0x20000034
 8013248:	ffff0208 	.word	0xffff0208

0801324c <strncasecmp>:
 801324c:	b570      	push	{r4, r5, r6, lr}
 801324e:	4e0f      	ldr	r6, [pc, #60]	; (801328c <strncasecmp+0x40>)
 8013250:	4604      	mov	r4, r0
 8013252:	440a      	add	r2, r1
 8013254:	428a      	cmp	r2, r1
 8013256:	d101      	bne.n	801325c <strncasecmp+0x10>
 8013258:	2000      	movs	r0, #0
 801325a:	e013      	b.n	8013284 <strncasecmp+0x38>
 801325c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013260:	5d98      	ldrb	r0, [r3, r6]
 8013262:	f000 0003 	and.w	r0, r0, #3
 8013266:	2801      	cmp	r0, #1
 8013268:	f811 0b01 	ldrb.w	r0, [r1], #1
 801326c:	5c35      	ldrb	r5, [r6, r0]
 801326e:	f005 0503 	and.w	r5, r5, #3
 8013272:	bf08      	it	eq
 8013274:	3320      	addeq	r3, #32
 8013276:	2d01      	cmp	r5, #1
 8013278:	bf08      	it	eq
 801327a:	3020      	addeq	r0, #32
 801327c:	1a1b      	subs	r3, r3, r0
 801327e:	d102      	bne.n	8013286 <strncasecmp+0x3a>
 8013280:	2800      	cmp	r0, #0
 8013282:	d1e7      	bne.n	8013254 <strncasecmp+0x8>
 8013284:	bd70      	pop	{r4, r5, r6, pc}
 8013286:	4618      	mov	r0, r3
 8013288:	e7fc      	b.n	8013284 <strncasecmp+0x38>
 801328a:	bf00      	nop
 801328c:	080145d5 	.word	0x080145d5

08013290 <strncpy>:
 8013290:	b510      	push	{r4, lr}
 8013292:	3901      	subs	r1, #1
 8013294:	4603      	mov	r3, r0
 8013296:	b132      	cbz	r2, 80132a6 <strncpy+0x16>
 8013298:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801329c:	f803 4b01 	strb.w	r4, [r3], #1
 80132a0:	3a01      	subs	r2, #1
 80132a2:	2c00      	cmp	r4, #0
 80132a4:	d1f7      	bne.n	8013296 <strncpy+0x6>
 80132a6:	441a      	add	r2, r3
 80132a8:	2100      	movs	r1, #0
 80132aa:	4293      	cmp	r3, r2
 80132ac:	d100      	bne.n	80132b0 <strncpy+0x20>
 80132ae:	bd10      	pop	{r4, pc}
 80132b0:	f803 1b01 	strb.w	r1, [r3], #1
 80132b4:	e7f9      	b.n	80132aa <strncpy+0x1a>
	...

080132b8 <__swbuf_r>:
 80132b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ba:	460e      	mov	r6, r1
 80132bc:	4614      	mov	r4, r2
 80132be:	4605      	mov	r5, r0
 80132c0:	b118      	cbz	r0, 80132ca <__swbuf_r+0x12>
 80132c2:	6983      	ldr	r3, [r0, #24]
 80132c4:	b90b      	cbnz	r3, 80132ca <__swbuf_r+0x12>
 80132c6:	f000 f9d1 	bl	801366c <__sinit>
 80132ca:	4b21      	ldr	r3, [pc, #132]	; (8013350 <__swbuf_r+0x98>)
 80132cc:	429c      	cmp	r4, r3
 80132ce:	d12b      	bne.n	8013328 <__swbuf_r+0x70>
 80132d0:	686c      	ldr	r4, [r5, #4]
 80132d2:	69a3      	ldr	r3, [r4, #24]
 80132d4:	60a3      	str	r3, [r4, #8]
 80132d6:	89a3      	ldrh	r3, [r4, #12]
 80132d8:	071a      	lsls	r2, r3, #28
 80132da:	d52f      	bpl.n	801333c <__swbuf_r+0x84>
 80132dc:	6923      	ldr	r3, [r4, #16]
 80132de:	b36b      	cbz	r3, 801333c <__swbuf_r+0x84>
 80132e0:	6923      	ldr	r3, [r4, #16]
 80132e2:	6820      	ldr	r0, [r4, #0]
 80132e4:	1ac0      	subs	r0, r0, r3
 80132e6:	6963      	ldr	r3, [r4, #20]
 80132e8:	b2f6      	uxtb	r6, r6
 80132ea:	4283      	cmp	r3, r0
 80132ec:	4637      	mov	r7, r6
 80132ee:	dc04      	bgt.n	80132fa <__swbuf_r+0x42>
 80132f0:	4621      	mov	r1, r4
 80132f2:	4628      	mov	r0, r5
 80132f4:	f000 f926 	bl	8013544 <_fflush_r>
 80132f8:	bb30      	cbnz	r0, 8013348 <__swbuf_r+0x90>
 80132fa:	68a3      	ldr	r3, [r4, #8]
 80132fc:	3b01      	subs	r3, #1
 80132fe:	60a3      	str	r3, [r4, #8]
 8013300:	6823      	ldr	r3, [r4, #0]
 8013302:	1c5a      	adds	r2, r3, #1
 8013304:	6022      	str	r2, [r4, #0]
 8013306:	701e      	strb	r6, [r3, #0]
 8013308:	6963      	ldr	r3, [r4, #20]
 801330a:	3001      	adds	r0, #1
 801330c:	4283      	cmp	r3, r0
 801330e:	d004      	beq.n	801331a <__swbuf_r+0x62>
 8013310:	89a3      	ldrh	r3, [r4, #12]
 8013312:	07db      	lsls	r3, r3, #31
 8013314:	d506      	bpl.n	8013324 <__swbuf_r+0x6c>
 8013316:	2e0a      	cmp	r6, #10
 8013318:	d104      	bne.n	8013324 <__swbuf_r+0x6c>
 801331a:	4621      	mov	r1, r4
 801331c:	4628      	mov	r0, r5
 801331e:	f000 f911 	bl	8013544 <_fflush_r>
 8013322:	b988      	cbnz	r0, 8013348 <__swbuf_r+0x90>
 8013324:	4638      	mov	r0, r7
 8013326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013328:	4b0a      	ldr	r3, [pc, #40]	; (8013354 <__swbuf_r+0x9c>)
 801332a:	429c      	cmp	r4, r3
 801332c:	d101      	bne.n	8013332 <__swbuf_r+0x7a>
 801332e:	68ac      	ldr	r4, [r5, #8]
 8013330:	e7cf      	b.n	80132d2 <__swbuf_r+0x1a>
 8013332:	4b09      	ldr	r3, [pc, #36]	; (8013358 <__swbuf_r+0xa0>)
 8013334:	429c      	cmp	r4, r3
 8013336:	bf08      	it	eq
 8013338:	68ec      	ldreq	r4, [r5, #12]
 801333a:	e7ca      	b.n	80132d2 <__swbuf_r+0x1a>
 801333c:	4621      	mov	r1, r4
 801333e:	4628      	mov	r0, r5
 8013340:	f000 f80c 	bl	801335c <__swsetup_r>
 8013344:	2800      	cmp	r0, #0
 8013346:	d0cb      	beq.n	80132e0 <__swbuf_r+0x28>
 8013348:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801334c:	e7ea      	b.n	8013324 <__swbuf_r+0x6c>
 801334e:	bf00      	nop
 8013350:	08014730 	.word	0x08014730
 8013354:	08014750 	.word	0x08014750
 8013358:	08014710 	.word	0x08014710

0801335c <__swsetup_r>:
 801335c:	4b32      	ldr	r3, [pc, #200]	; (8013428 <__swsetup_r+0xcc>)
 801335e:	b570      	push	{r4, r5, r6, lr}
 8013360:	681d      	ldr	r5, [r3, #0]
 8013362:	4606      	mov	r6, r0
 8013364:	460c      	mov	r4, r1
 8013366:	b125      	cbz	r5, 8013372 <__swsetup_r+0x16>
 8013368:	69ab      	ldr	r3, [r5, #24]
 801336a:	b913      	cbnz	r3, 8013372 <__swsetup_r+0x16>
 801336c:	4628      	mov	r0, r5
 801336e:	f000 f97d 	bl	801366c <__sinit>
 8013372:	4b2e      	ldr	r3, [pc, #184]	; (801342c <__swsetup_r+0xd0>)
 8013374:	429c      	cmp	r4, r3
 8013376:	d10f      	bne.n	8013398 <__swsetup_r+0x3c>
 8013378:	686c      	ldr	r4, [r5, #4]
 801337a:	89a3      	ldrh	r3, [r4, #12]
 801337c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013380:	0719      	lsls	r1, r3, #28
 8013382:	d42c      	bmi.n	80133de <__swsetup_r+0x82>
 8013384:	06dd      	lsls	r5, r3, #27
 8013386:	d411      	bmi.n	80133ac <__swsetup_r+0x50>
 8013388:	2309      	movs	r3, #9
 801338a:	6033      	str	r3, [r6, #0]
 801338c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013390:	81a3      	strh	r3, [r4, #12]
 8013392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013396:	e03e      	b.n	8013416 <__swsetup_r+0xba>
 8013398:	4b25      	ldr	r3, [pc, #148]	; (8013430 <__swsetup_r+0xd4>)
 801339a:	429c      	cmp	r4, r3
 801339c:	d101      	bne.n	80133a2 <__swsetup_r+0x46>
 801339e:	68ac      	ldr	r4, [r5, #8]
 80133a0:	e7eb      	b.n	801337a <__swsetup_r+0x1e>
 80133a2:	4b24      	ldr	r3, [pc, #144]	; (8013434 <__swsetup_r+0xd8>)
 80133a4:	429c      	cmp	r4, r3
 80133a6:	bf08      	it	eq
 80133a8:	68ec      	ldreq	r4, [r5, #12]
 80133aa:	e7e6      	b.n	801337a <__swsetup_r+0x1e>
 80133ac:	0758      	lsls	r0, r3, #29
 80133ae:	d512      	bpl.n	80133d6 <__swsetup_r+0x7a>
 80133b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80133b2:	b141      	cbz	r1, 80133c6 <__swsetup_r+0x6a>
 80133b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80133b8:	4299      	cmp	r1, r3
 80133ba:	d002      	beq.n	80133c2 <__swsetup_r+0x66>
 80133bc:	4630      	mov	r0, r6
 80133be:	f000 fa57 	bl	8013870 <_free_r>
 80133c2:	2300      	movs	r3, #0
 80133c4:	6363      	str	r3, [r4, #52]	; 0x34
 80133c6:	89a3      	ldrh	r3, [r4, #12]
 80133c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80133cc:	81a3      	strh	r3, [r4, #12]
 80133ce:	2300      	movs	r3, #0
 80133d0:	6063      	str	r3, [r4, #4]
 80133d2:	6923      	ldr	r3, [r4, #16]
 80133d4:	6023      	str	r3, [r4, #0]
 80133d6:	89a3      	ldrh	r3, [r4, #12]
 80133d8:	f043 0308 	orr.w	r3, r3, #8
 80133dc:	81a3      	strh	r3, [r4, #12]
 80133de:	6923      	ldr	r3, [r4, #16]
 80133e0:	b94b      	cbnz	r3, 80133f6 <__swsetup_r+0x9a>
 80133e2:	89a3      	ldrh	r3, [r4, #12]
 80133e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80133e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80133ec:	d003      	beq.n	80133f6 <__swsetup_r+0x9a>
 80133ee:	4621      	mov	r1, r4
 80133f0:	4630      	mov	r0, r6
 80133f2:	f000 f9fd 	bl	80137f0 <__smakebuf_r>
 80133f6:	89a0      	ldrh	r0, [r4, #12]
 80133f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80133fc:	f010 0301 	ands.w	r3, r0, #1
 8013400:	d00a      	beq.n	8013418 <__swsetup_r+0xbc>
 8013402:	2300      	movs	r3, #0
 8013404:	60a3      	str	r3, [r4, #8]
 8013406:	6963      	ldr	r3, [r4, #20]
 8013408:	425b      	negs	r3, r3
 801340a:	61a3      	str	r3, [r4, #24]
 801340c:	6923      	ldr	r3, [r4, #16]
 801340e:	b943      	cbnz	r3, 8013422 <__swsetup_r+0xc6>
 8013410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013414:	d1ba      	bne.n	801338c <__swsetup_r+0x30>
 8013416:	bd70      	pop	{r4, r5, r6, pc}
 8013418:	0781      	lsls	r1, r0, #30
 801341a:	bf58      	it	pl
 801341c:	6963      	ldrpl	r3, [r4, #20]
 801341e:	60a3      	str	r3, [r4, #8]
 8013420:	e7f4      	b.n	801340c <__swsetup_r+0xb0>
 8013422:	2000      	movs	r0, #0
 8013424:	e7f7      	b.n	8013416 <__swsetup_r+0xba>
 8013426:	bf00      	nop
 8013428:	20000034 	.word	0x20000034
 801342c:	08014730 	.word	0x08014730
 8013430:	08014750 	.word	0x08014750
 8013434:	08014710 	.word	0x08014710

08013438 <__sflush_r>:
 8013438:	898a      	ldrh	r2, [r1, #12]
 801343a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801343e:	4605      	mov	r5, r0
 8013440:	0710      	lsls	r0, r2, #28
 8013442:	460c      	mov	r4, r1
 8013444:	d458      	bmi.n	80134f8 <__sflush_r+0xc0>
 8013446:	684b      	ldr	r3, [r1, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	dc05      	bgt.n	8013458 <__sflush_r+0x20>
 801344c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801344e:	2b00      	cmp	r3, #0
 8013450:	dc02      	bgt.n	8013458 <__sflush_r+0x20>
 8013452:	2000      	movs	r0, #0
 8013454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801345a:	2e00      	cmp	r6, #0
 801345c:	d0f9      	beq.n	8013452 <__sflush_r+0x1a>
 801345e:	2300      	movs	r3, #0
 8013460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013464:	682f      	ldr	r7, [r5, #0]
 8013466:	602b      	str	r3, [r5, #0]
 8013468:	d032      	beq.n	80134d0 <__sflush_r+0x98>
 801346a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801346c:	89a3      	ldrh	r3, [r4, #12]
 801346e:	075a      	lsls	r2, r3, #29
 8013470:	d505      	bpl.n	801347e <__sflush_r+0x46>
 8013472:	6863      	ldr	r3, [r4, #4]
 8013474:	1ac0      	subs	r0, r0, r3
 8013476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013478:	b10b      	cbz	r3, 801347e <__sflush_r+0x46>
 801347a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801347c:	1ac0      	subs	r0, r0, r3
 801347e:	2300      	movs	r3, #0
 8013480:	4602      	mov	r2, r0
 8013482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013484:	6a21      	ldr	r1, [r4, #32]
 8013486:	4628      	mov	r0, r5
 8013488:	47b0      	blx	r6
 801348a:	1c43      	adds	r3, r0, #1
 801348c:	89a3      	ldrh	r3, [r4, #12]
 801348e:	d106      	bne.n	801349e <__sflush_r+0x66>
 8013490:	6829      	ldr	r1, [r5, #0]
 8013492:	291d      	cmp	r1, #29
 8013494:	d82c      	bhi.n	80134f0 <__sflush_r+0xb8>
 8013496:	4a2a      	ldr	r2, [pc, #168]	; (8013540 <__sflush_r+0x108>)
 8013498:	40ca      	lsrs	r2, r1
 801349a:	07d6      	lsls	r6, r2, #31
 801349c:	d528      	bpl.n	80134f0 <__sflush_r+0xb8>
 801349e:	2200      	movs	r2, #0
 80134a0:	6062      	str	r2, [r4, #4]
 80134a2:	04d9      	lsls	r1, r3, #19
 80134a4:	6922      	ldr	r2, [r4, #16]
 80134a6:	6022      	str	r2, [r4, #0]
 80134a8:	d504      	bpl.n	80134b4 <__sflush_r+0x7c>
 80134aa:	1c42      	adds	r2, r0, #1
 80134ac:	d101      	bne.n	80134b2 <__sflush_r+0x7a>
 80134ae:	682b      	ldr	r3, [r5, #0]
 80134b0:	b903      	cbnz	r3, 80134b4 <__sflush_r+0x7c>
 80134b2:	6560      	str	r0, [r4, #84]	; 0x54
 80134b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134b6:	602f      	str	r7, [r5, #0]
 80134b8:	2900      	cmp	r1, #0
 80134ba:	d0ca      	beq.n	8013452 <__sflush_r+0x1a>
 80134bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134c0:	4299      	cmp	r1, r3
 80134c2:	d002      	beq.n	80134ca <__sflush_r+0x92>
 80134c4:	4628      	mov	r0, r5
 80134c6:	f000 f9d3 	bl	8013870 <_free_r>
 80134ca:	2000      	movs	r0, #0
 80134cc:	6360      	str	r0, [r4, #52]	; 0x34
 80134ce:	e7c1      	b.n	8013454 <__sflush_r+0x1c>
 80134d0:	6a21      	ldr	r1, [r4, #32]
 80134d2:	2301      	movs	r3, #1
 80134d4:	4628      	mov	r0, r5
 80134d6:	47b0      	blx	r6
 80134d8:	1c41      	adds	r1, r0, #1
 80134da:	d1c7      	bne.n	801346c <__sflush_r+0x34>
 80134dc:	682b      	ldr	r3, [r5, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d0c4      	beq.n	801346c <__sflush_r+0x34>
 80134e2:	2b1d      	cmp	r3, #29
 80134e4:	d001      	beq.n	80134ea <__sflush_r+0xb2>
 80134e6:	2b16      	cmp	r3, #22
 80134e8:	d101      	bne.n	80134ee <__sflush_r+0xb6>
 80134ea:	602f      	str	r7, [r5, #0]
 80134ec:	e7b1      	b.n	8013452 <__sflush_r+0x1a>
 80134ee:	89a3      	ldrh	r3, [r4, #12]
 80134f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134f4:	81a3      	strh	r3, [r4, #12]
 80134f6:	e7ad      	b.n	8013454 <__sflush_r+0x1c>
 80134f8:	690f      	ldr	r7, [r1, #16]
 80134fa:	2f00      	cmp	r7, #0
 80134fc:	d0a9      	beq.n	8013452 <__sflush_r+0x1a>
 80134fe:	0793      	lsls	r3, r2, #30
 8013500:	680e      	ldr	r6, [r1, #0]
 8013502:	bf08      	it	eq
 8013504:	694b      	ldreq	r3, [r1, #20]
 8013506:	600f      	str	r7, [r1, #0]
 8013508:	bf18      	it	ne
 801350a:	2300      	movne	r3, #0
 801350c:	eba6 0807 	sub.w	r8, r6, r7
 8013510:	608b      	str	r3, [r1, #8]
 8013512:	f1b8 0f00 	cmp.w	r8, #0
 8013516:	dd9c      	ble.n	8013452 <__sflush_r+0x1a>
 8013518:	6a21      	ldr	r1, [r4, #32]
 801351a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801351c:	4643      	mov	r3, r8
 801351e:	463a      	mov	r2, r7
 8013520:	4628      	mov	r0, r5
 8013522:	47b0      	blx	r6
 8013524:	2800      	cmp	r0, #0
 8013526:	dc06      	bgt.n	8013536 <__sflush_r+0xfe>
 8013528:	89a3      	ldrh	r3, [r4, #12]
 801352a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801352e:	81a3      	strh	r3, [r4, #12]
 8013530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013534:	e78e      	b.n	8013454 <__sflush_r+0x1c>
 8013536:	4407      	add	r7, r0
 8013538:	eba8 0800 	sub.w	r8, r8, r0
 801353c:	e7e9      	b.n	8013512 <__sflush_r+0xda>
 801353e:	bf00      	nop
 8013540:	20400001 	.word	0x20400001

08013544 <_fflush_r>:
 8013544:	b538      	push	{r3, r4, r5, lr}
 8013546:	690b      	ldr	r3, [r1, #16]
 8013548:	4605      	mov	r5, r0
 801354a:	460c      	mov	r4, r1
 801354c:	b913      	cbnz	r3, 8013554 <_fflush_r+0x10>
 801354e:	2500      	movs	r5, #0
 8013550:	4628      	mov	r0, r5
 8013552:	bd38      	pop	{r3, r4, r5, pc}
 8013554:	b118      	cbz	r0, 801355e <_fflush_r+0x1a>
 8013556:	6983      	ldr	r3, [r0, #24]
 8013558:	b90b      	cbnz	r3, 801355e <_fflush_r+0x1a>
 801355a:	f000 f887 	bl	801366c <__sinit>
 801355e:	4b14      	ldr	r3, [pc, #80]	; (80135b0 <_fflush_r+0x6c>)
 8013560:	429c      	cmp	r4, r3
 8013562:	d11b      	bne.n	801359c <_fflush_r+0x58>
 8013564:	686c      	ldr	r4, [r5, #4]
 8013566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d0ef      	beq.n	801354e <_fflush_r+0xa>
 801356e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013570:	07d0      	lsls	r0, r2, #31
 8013572:	d404      	bmi.n	801357e <_fflush_r+0x3a>
 8013574:	0599      	lsls	r1, r3, #22
 8013576:	d402      	bmi.n	801357e <_fflush_r+0x3a>
 8013578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801357a:	f7ff fa8c 	bl	8012a96 <__retarget_lock_acquire_recursive>
 801357e:	4628      	mov	r0, r5
 8013580:	4621      	mov	r1, r4
 8013582:	f7ff ff59 	bl	8013438 <__sflush_r>
 8013586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013588:	07da      	lsls	r2, r3, #31
 801358a:	4605      	mov	r5, r0
 801358c:	d4e0      	bmi.n	8013550 <_fflush_r+0xc>
 801358e:	89a3      	ldrh	r3, [r4, #12]
 8013590:	059b      	lsls	r3, r3, #22
 8013592:	d4dd      	bmi.n	8013550 <_fflush_r+0xc>
 8013594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013596:	f7ff fa7f 	bl	8012a98 <__retarget_lock_release_recursive>
 801359a:	e7d9      	b.n	8013550 <_fflush_r+0xc>
 801359c:	4b05      	ldr	r3, [pc, #20]	; (80135b4 <_fflush_r+0x70>)
 801359e:	429c      	cmp	r4, r3
 80135a0:	d101      	bne.n	80135a6 <_fflush_r+0x62>
 80135a2:	68ac      	ldr	r4, [r5, #8]
 80135a4:	e7df      	b.n	8013566 <_fflush_r+0x22>
 80135a6:	4b04      	ldr	r3, [pc, #16]	; (80135b8 <_fflush_r+0x74>)
 80135a8:	429c      	cmp	r4, r3
 80135aa:	bf08      	it	eq
 80135ac:	68ec      	ldreq	r4, [r5, #12]
 80135ae:	e7da      	b.n	8013566 <_fflush_r+0x22>
 80135b0:	08014730 	.word	0x08014730
 80135b4:	08014750 	.word	0x08014750
 80135b8:	08014710 	.word	0x08014710

080135bc <std>:
 80135bc:	2300      	movs	r3, #0
 80135be:	b510      	push	{r4, lr}
 80135c0:	4604      	mov	r4, r0
 80135c2:	e9c0 3300 	strd	r3, r3, [r0]
 80135c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135ca:	6083      	str	r3, [r0, #8]
 80135cc:	8181      	strh	r1, [r0, #12]
 80135ce:	6643      	str	r3, [r0, #100]	; 0x64
 80135d0:	81c2      	strh	r2, [r0, #14]
 80135d2:	6183      	str	r3, [r0, #24]
 80135d4:	4619      	mov	r1, r3
 80135d6:	2208      	movs	r2, #8
 80135d8:	305c      	adds	r0, #92	; 0x5c
 80135da:	f7ff fa94 	bl	8012b06 <memset>
 80135de:	4b05      	ldr	r3, [pc, #20]	; (80135f4 <std+0x38>)
 80135e0:	6263      	str	r3, [r4, #36]	; 0x24
 80135e2:	4b05      	ldr	r3, [pc, #20]	; (80135f8 <std+0x3c>)
 80135e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80135e6:	4b05      	ldr	r3, [pc, #20]	; (80135fc <std+0x40>)
 80135e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80135ea:	4b05      	ldr	r3, [pc, #20]	; (8013600 <std+0x44>)
 80135ec:	6224      	str	r4, [r4, #32]
 80135ee:	6323      	str	r3, [r4, #48]	; 0x30
 80135f0:	bd10      	pop	{r4, pc}
 80135f2:	bf00      	nop
 80135f4:	08013ce9 	.word	0x08013ce9
 80135f8:	08013d0b 	.word	0x08013d0b
 80135fc:	08013d43 	.word	0x08013d43
 8013600:	08013d67 	.word	0x08013d67

08013604 <_cleanup_r>:
 8013604:	4901      	ldr	r1, [pc, #4]	; (801360c <_cleanup_r+0x8>)
 8013606:	f000 b8af 	b.w	8013768 <_fwalk_reent>
 801360a:	bf00      	nop
 801360c:	08013545 	.word	0x08013545

08013610 <__sfmoreglue>:
 8013610:	b570      	push	{r4, r5, r6, lr}
 8013612:	1e4a      	subs	r2, r1, #1
 8013614:	2568      	movs	r5, #104	; 0x68
 8013616:	4355      	muls	r5, r2
 8013618:	460e      	mov	r6, r1
 801361a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801361e:	f000 f977 	bl	8013910 <_malloc_r>
 8013622:	4604      	mov	r4, r0
 8013624:	b140      	cbz	r0, 8013638 <__sfmoreglue+0x28>
 8013626:	2100      	movs	r1, #0
 8013628:	e9c0 1600 	strd	r1, r6, [r0]
 801362c:	300c      	adds	r0, #12
 801362e:	60a0      	str	r0, [r4, #8]
 8013630:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013634:	f7ff fa67 	bl	8012b06 <memset>
 8013638:	4620      	mov	r0, r4
 801363a:	bd70      	pop	{r4, r5, r6, pc}

0801363c <__sfp_lock_acquire>:
 801363c:	4801      	ldr	r0, [pc, #4]	; (8013644 <__sfp_lock_acquire+0x8>)
 801363e:	f7ff ba2a 	b.w	8012a96 <__retarget_lock_acquire_recursive>
 8013642:	bf00      	nop
 8013644:	2000b6a8 	.word	0x2000b6a8

08013648 <__sfp_lock_release>:
 8013648:	4801      	ldr	r0, [pc, #4]	; (8013650 <__sfp_lock_release+0x8>)
 801364a:	f7ff ba25 	b.w	8012a98 <__retarget_lock_release_recursive>
 801364e:	bf00      	nop
 8013650:	2000b6a8 	.word	0x2000b6a8

08013654 <__sinit_lock_acquire>:
 8013654:	4801      	ldr	r0, [pc, #4]	; (801365c <__sinit_lock_acquire+0x8>)
 8013656:	f7ff ba1e 	b.w	8012a96 <__retarget_lock_acquire_recursive>
 801365a:	bf00      	nop
 801365c:	2000b6a3 	.word	0x2000b6a3

08013660 <__sinit_lock_release>:
 8013660:	4801      	ldr	r0, [pc, #4]	; (8013668 <__sinit_lock_release+0x8>)
 8013662:	f7ff ba19 	b.w	8012a98 <__retarget_lock_release_recursive>
 8013666:	bf00      	nop
 8013668:	2000b6a3 	.word	0x2000b6a3

0801366c <__sinit>:
 801366c:	b510      	push	{r4, lr}
 801366e:	4604      	mov	r4, r0
 8013670:	f7ff fff0 	bl	8013654 <__sinit_lock_acquire>
 8013674:	69a3      	ldr	r3, [r4, #24]
 8013676:	b11b      	cbz	r3, 8013680 <__sinit+0x14>
 8013678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801367c:	f7ff bff0 	b.w	8013660 <__sinit_lock_release>
 8013680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013684:	6523      	str	r3, [r4, #80]	; 0x50
 8013686:	4b13      	ldr	r3, [pc, #76]	; (80136d4 <__sinit+0x68>)
 8013688:	4a13      	ldr	r2, [pc, #76]	; (80136d8 <__sinit+0x6c>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	62a2      	str	r2, [r4, #40]	; 0x28
 801368e:	42a3      	cmp	r3, r4
 8013690:	bf04      	itt	eq
 8013692:	2301      	moveq	r3, #1
 8013694:	61a3      	streq	r3, [r4, #24]
 8013696:	4620      	mov	r0, r4
 8013698:	f000 f820 	bl	80136dc <__sfp>
 801369c:	6060      	str	r0, [r4, #4]
 801369e:	4620      	mov	r0, r4
 80136a0:	f000 f81c 	bl	80136dc <__sfp>
 80136a4:	60a0      	str	r0, [r4, #8]
 80136a6:	4620      	mov	r0, r4
 80136a8:	f000 f818 	bl	80136dc <__sfp>
 80136ac:	2200      	movs	r2, #0
 80136ae:	60e0      	str	r0, [r4, #12]
 80136b0:	2104      	movs	r1, #4
 80136b2:	6860      	ldr	r0, [r4, #4]
 80136b4:	f7ff ff82 	bl	80135bc <std>
 80136b8:	68a0      	ldr	r0, [r4, #8]
 80136ba:	2201      	movs	r2, #1
 80136bc:	2109      	movs	r1, #9
 80136be:	f7ff ff7d 	bl	80135bc <std>
 80136c2:	68e0      	ldr	r0, [r4, #12]
 80136c4:	2202      	movs	r2, #2
 80136c6:	2112      	movs	r1, #18
 80136c8:	f7ff ff78 	bl	80135bc <std>
 80136cc:	2301      	movs	r3, #1
 80136ce:	61a3      	str	r3, [r4, #24]
 80136d0:	e7d2      	b.n	8013678 <__sinit+0xc>
 80136d2:	bf00      	nop
 80136d4:	080146d8 	.word	0x080146d8
 80136d8:	08013605 	.word	0x08013605

080136dc <__sfp>:
 80136dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136de:	4607      	mov	r7, r0
 80136e0:	f7ff ffac 	bl	801363c <__sfp_lock_acquire>
 80136e4:	4b1e      	ldr	r3, [pc, #120]	; (8013760 <__sfp+0x84>)
 80136e6:	681e      	ldr	r6, [r3, #0]
 80136e8:	69b3      	ldr	r3, [r6, #24]
 80136ea:	b913      	cbnz	r3, 80136f2 <__sfp+0x16>
 80136ec:	4630      	mov	r0, r6
 80136ee:	f7ff ffbd 	bl	801366c <__sinit>
 80136f2:	3648      	adds	r6, #72	; 0x48
 80136f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80136f8:	3b01      	subs	r3, #1
 80136fa:	d503      	bpl.n	8013704 <__sfp+0x28>
 80136fc:	6833      	ldr	r3, [r6, #0]
 80136fe:	b30b      	cbz	r3, 8013744 <__sfp+0x68>
 8013700:	6836      	ldr	r6, [r6, #0]
 8013702:	e7f7      	b.n	80136f4 <__sfp+0x18>
 8013704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013708:	b9d5      	cbnz	r5, 8013740 <__sfp+0x64>
 801370a:	4b16      	ldr	r3, [pc, #88]	; (8013764 <__sfp+0x88>)
 801370c:	60e3      	str	r3, [r4, #12]
 801370e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013712:	6665      	str	r5, [r4, #100]	; 0x64
 8013714:	f7ff f9be 	bl	8012a94 <__retarget_lock_init_recursive>
 8013718:	f7ff ff96 	bl	8013648 <__sfp_lock_release>
 801371c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013724:	6025      	str	r5, [r4, #0]
 8013726:	61a5      	str	r5, [r4, #24]
 8013728:	2208      	movs	r2, #8
 801372a:	4629      	mov	r1, r5
 801372c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013730:	f7ff f9e9 	bl	8012b06 <memset>
 8013734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801373c:	4620      	mov	r0, r4
 801373e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013740:	3468      	adds	r4, #104	; 0x68
 8013742:	e7d9      	b.n	80136f8 <__sfp+0x1c>
 8013744:	2104      	movs	r1, #4
 8013746:	4638      	mov	r0, r7
 8013748:	f7ff ff62 	bl	8013610 <__sfmoreglue>
 801374c:	4604      	mov	r4, r0
 801374e:	6030      	str	r0, [r6, #0]
 8013750:	2800      	cmp	r0, #0
 8013752:	d1d5      	bne.n	8013700 <__sfp+0x24>
 8013754:	f7ff ff78 	bl	8013648 <__sfp_lock_release>
 8013758:	230c      	movs	r3, #12
 801375a:	603b      	str	r3, [r7, #0]
 801375c:	e7ee      	b.n	801373c <__sfp+0x60>
 801375e:	bf00      	nop
 8013760:	080146d8 	.word	0x080146d8
 8013764:	ffff0001 	.word	0xffff0001

08013768 <_fwalk_reent>:
 8013768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801376c:	4606      	mov	r6, r0
 801376e:	4688      	mov	r8, r1
 8013770:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013774:	2700      	movs	r7, #0
 8013776:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801377a:	f1b9 0901 	subs.w	r9, r9, #1
 801377e:	d505      	bpl.n	801378c <_fwalk_reent+0x24>
 8013780:	6824      	ldr	r4, [r4, #0]
 8013782:	2c00      	cmp	r4, #0
 8013784:	d1f7      	bne.n	8013776 <_fwalk_reent+0xe>
 8013786:	4638      	mov	r0, r7
 8013788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801378c:	89ab      	ldrh	r3, [r5, #12]
 801378e:	2b01      	cmp	r3, #1
 8013790:	d907      	bls.n	80137a2 <_fwalk_reent+0x3a>
 8013792:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013796:	3301      	adds	r3, #1
 8013798:	d003      	beq.n	80137a2 <_fwalk_reent+0x3a>
 801379a:	4629      	mov	r1, r5
 801379c:	4630      	mov	r0, r6
 801379e:	47c0      	blx	r8
 80137a0:	4307      	orrs	r7, r0
 80137a2:	3568      	adds	r5, #104	; 0x68
 80137a4:	e7e9      	b.n	801377a <_fwalk_reent+0x12>

080137a6 <__swhatbuf_r>:
 80137a6:	b570      	push	{r4, r5, r6, lr}
 80137a8:	460e      	mov	r6, r1
 80137aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137ae:	2900      	cmp	r1, #0
 80137b0:	b096      	sub	sp, #88	; 0x58
 80137b2:	4614      	mov	r4, r2
 80137b4:	461d      	mov	r5, r3
 80137b6:	da07      	bge.n	80137c8 <__swhatbuf_r+0x22>
 80137b8:	2300      	movs	r3, #0
 80137ba:	602b      	str	r3, [r5, #0]
 80137bc:	89b3      	ldrh	r3, [r6, #12]
 80137be:	061a      	lsls	r2, r3, #24
 80137c0:	d410      	bmi.n	80137e4 <__swhatbuf_r+0x3e>
 80137c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137c6:	e00e      	b.n	80137e6 <__swhatbuf_r+0x40>
 80137c8:	466a      	mov	r2, sp
 80137ca:	f000 faf3 	bl	8013db4 <_fstat_r>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	dbf2      	blt.n	80137b8 <__swhatbuf_r+0x12>
 80137d2:	9a01      	ldr	r2, [sp, #4]
 80137d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80137d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80137dc:	425a      	negs	r2, r3
 80137de:	415a      	adcs	r2, r3
 80137e0:	602a      	str	r2, [r5, #0]
 80137e2:	e7ee      	b.n	80137c2 <__swhatbuf_r+0x1c>
 80137e4:	2340      	movs	r3, #64	; 0x40
 80137e6:	2000      	movs	r0, #0
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	b016      	add	sp, #88	; 0x58
 80137ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080137f0 <__smakebuf_r>:
 80137f0:	898b      	ldrh	r3, [r1, #12]
 80137f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80137f4:	079d      	lsls	r5, r3, #30
 80137f6:	4606      	mov	r6, r0
 80137f8:	460c      	mov	r4, r1
 80137fa:	d507      	bpl.n	801380c <__smakebuf_r+0x1c>
 80137fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013800:	6023      	str	r3, [r4, #0]
 8013802:	6123      	str	r3, [r4, #16]
 8013804:	2301      	movs	r3, #1
 8013806:	6163      	str	r3, [r4, #20]
 8013808:	b002      	add	sp, #8
 801380a:	bd70      	pop	{r4, r5, r6, pc}
 801380c:	ab01      	add	r3, sp, #4
 801380e:	466a      	mov	r2, sp
 8013810:	f7ff ffc9 	bl	80137a6 <__swhatbuf_r>
 8013814:	9900      	ldr	r1, [sp, #0]
 8013816:	4605      	mov	r5, r0
 8013818:	4630      	mov	r0, r6
 801381a:	f000 f879 	bl	8013910 <_malloc_r>
 801381e:	b948      	cbnz	r0, 8013834 <__smakebuf_r+0x44>
 8013820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013824:	059a      	lsls	r2, r3, #22
 8013826:	d4ef      	bmi.n	8013808 <__smakebuf_r+0x18>
 8013828:	f023 0303 	bic.w	r3, r3, #3
 801382c:	f043 0302 	orr.w	r3, r3, #2
 8013830:	81a3      	strh	r3, [r4, #12]
 8013832:	e7e3      	b.n	80137fc <__smakebuf_r+0xc>
 8013834:	4b0d      	ldr	r3, [pc, #52]	; (801386c <__smakebuf_r+0x7c>)
 8013836:	62b3      	str	r3, [r6, #40]	; 0x28
 8013838:	89a3      	ldrh	r3, [r4, #12]
 801383a:	6020      	str	r0, [r4, #0]
 801383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013840:	81a3      	strh	r3, [r4, #12]
 8013842:	9b00      	ldr	r3, [sp, #0]
 8013844:	6163      	str	r3, [r4, #20]
 8013846:	9b01      	ldr	r3, [sp, #4]
 8013848:	6120      	str	r0, [r4, #16]
 801384a:	b15b      	cbz	r3, 8013864 <__smakebuf_r+0x74>
 801384c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013850:	4630      	mov	r0, r6
 8013852:	f000 fac1 	bl	8013dd8 <_isatty_r>
 8013856:	b128      	cbz	r0, 8013864 <__smakebuf_r+0x74>
 8013858:	89a3      	ldrh	r3, [r4, #12]
 801385a:	f023 0303 	bic.w	r3, r3, #3
 801385e:	f043 0301 	orr.w	r3, r3, #1
 8013862:	81a3      	strh	r3, [r4, #12]
 8013864:	89a0      	ldrh	r0, [r4, #12]
 8013866:	4305      	orrs	r5, r0
 8013868:	81a5      	strh	r5, [r4, #12]
 801386a:	e7cd      	b.n	8013808 <__smakebuf_r+0x18>
 801386c:	08013605 	.word	0x08013605

08013870 <_free_r>:
 8013870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013872:	2900      	cmp	r1, #0
 8013874:	d048      	beq.n	8013908 <_free_r+0x98>
 8013876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801387a:	9001      	str	r0, [sp, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	f1a1 0404 	sub.w	r4, r1, #4
 8013882:	bfb8      	it	lt
 8013884:	18e4      	addlt	r4, r4, r3
 8013886:	f000 fac9 	bl	8013e1c <__malloc_lock>
 801388a:	4a20      	ldr	r2, [pc, #128]	; (801390c <_free_r+0x9c>)
 801388c:	9801      	ldr	r0, [sp, #4]
 801388e:	6813      	ldr	r3, [r2, #0]
 8013890:	4615      	mov	r5, r2
 8013892:	b933      	cbnz	r3, 80138a2 <_free_r+0x32>
 8013894:	6063      	str	r3, [r4, #4]
 8013896:	6014      	str	r4, [r2, #0]
 8013898:	b003      	add	sp, #12
 801389a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801389e:	f000 bac3 	b.w	8013e28 <__malloc_unlock>
 80138a2:	42a3      	cmp	r3, r4
 80138a4:	d90b      	bls.n	80138be <_free_r+0x4e>
 80138a6:	6821      	ldr	r1, [r4, #0]
 80138a8:	1862      	adds	r2, r4, r1
 80138aa:	4293      	cmp	r3, r2
 80138ac:	bf04      	itt	eq
 80138ae:	681a      	ldreq	r2, [r3, #0]
 80138b0:	685b      	ldreq	r3, [r3, #4]
 80138b2:	6063      	str	r3, [r4, #4]
 80138b4:	bf04      	itt	eq
 80138b6:	1852      	addeq	r2, r2, r1
 80138b8:	6022      	streq	r2, [r4, #0]
 80138ba:	602c      	str	r4, [r5, #0]
 80138bc:	e7ec      	b.n	8013898 <_free_r+0x28>
 80138be:	461a      	mov	r2, r3
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	b10b      	cbz	r3, 80138c8 <_free_r+0x58>
 80138c4:	42a3      	cmp	r3, r4
 80138c6:	d9fa      	bls.n	80138be <_free_r+0x4e>
 80138c8:	6811      	ldr	r1, [r2, #0]
 80138ca:	1855      	adds	r5, r2, r1
 80138cc:	42a5      	cmp	r5, r4
 80138ce:	d10b      	bne.n	80138e8 <_free_r+0x78>
 80138d0:	6824      	ldr	r4, [r4, #0]
 80138d2:	4421      	add	r1, r4
 80138d4:	1854      	adds	r4, r2, r1
 80138d6:	42a3      	cmp	r3, r4
 80138d8:	6011      	str	r1, [r2, #0]
 80138da:	d1dd      	bne.n	8013898 <_free_r+0x28>
 80138dc:	681c      	ldr	r4, [r3, #0]
 80138de:	685b      	ldr	r3, [r3, #4]
 80138e0:	6053      	str	r3, [r2, #4]
 80138e2:	4421      	add	r1, r4
 80138e4:	6011      	str	r1, [r2, #0]
 80138e6:	e7d7      	b.n	8013898 <_free_r+0x28>
 80138e8:	d902      	bls.n	80138f0 <_free_r+0x80>
 80138ea:	230c      	movs	r3, #12
 80138ec:	6003      	str	r3, [r0, #0]
 80138ee:	e7d3      	b.n	8013898 <_free_r+0x28>
 80138f0:	6825      	ldr	r5, [r4, #0]
 80138f2:	1961      	adds	r1, r4, r5
 80138f4:	428b      	cmp	r3, r1
 80138f6:	bf04      	itt	eq
 80138f8:	6819      	ldreq	r1, [r3, #0]
 80138fa:	685b      	ldreq	r3, [r3, #4]
 80138fc:	6063      	str	r3, [r4, #4]
 80138fe:	bf04      	itt	eq
 8013900:	1949      	addeq	r1, r1, r5
 8013902:	6021      	streq	r1, [r4, #0]
 8013904:	6054      	str	r4, [r2, #4]
 8013906:	e7c7      	b.n	8013898 <_free_r+0x28>
 8013908:	b003      	add	sp, #12
 801390a:	bd30      	pop	{r4, r5, pc}
 801390c:	200087a0 	.word	0x200087a0

08013910 <_malloc_r>:
 8013910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013912:	1ccd      	adds	r5, r1, #3
 8013914:	f025 0503 	bic.w	r5, r5, #3
 8013918:	3508      	adds	r5, #8
 801391a:	2d0c      	cmp	r5, #12
 801391c:	bf38      	it	cc
 801391e:	250c      	movcc	r5, #12
 8013920:	2d00      	cmp	r5, #0
 8013922:	4606      	mov	r6, r0
 8013924:	db01      	blt.n	801392a <_malloc_r+0x1a>
 8013926:	42a9      	cmp	r1, r5
 8013928:	d903      	bls.n	8013932 <_malloc_r+0x22>
 801392a:	230c      	movs	r3, #12
 801392c:	6033      	str	r3, [r6, #0]
 801392e:	2000      	movs	r0, #0
 8013930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013932:	f000 fa73 	bl	8013e1c <__malloc_lock>
 8013936:	4921      	ldr	r1, [pc, #132]	; (80139bc <_malloc_r+0xac>)
 8013938:	680a      	ldr	r2, [r1, #0]
 801393a:	4614      	mov	r4, r2
 801393c:	b99c      	cbnz	r4, 8013966 <_malloc_r+0x56>
 801393e:	4f20      	ldr	r7, [pc, #128]	; (80139c0 <_malloc_r+0xb0>)
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	b923      	cbnz	r3, 801394e <_malloc_r+0x3e>
 8013944:	4621      	mov	r1, r4
 8013946:	4630      	mov	r0, r6
 8013948:	f000 f9be 	bl	8013cc8 <_sbrk_r>
 801394c:	6038      	str	r0, [r7, #0]
 801394e:	4629      	mov	r1, r5
 8013950:	4630      	mov	r0, r6
 8013952:	f000 f9b9 	bl	8013cc8 <_sbrk_r>
 8013956:	1c43      	adds	r3, r0, #1
 8013958:	d123      	bne.n	80139a2 <_malloc_r+0x92>
 801395a:	230c      	movs	r3, #12
 801395c:	6033      	str	r3, [r6, #0]
 801395e:	4630      	mov	r0, r6
 8013960:	f000 fa62 	bl	8013e28 <__malloc_unlock>
 8013964:	e7e3      	b.n	801392e <_malloc_r+0x1e>
 8013966:	6823      	ldr	r3, [r4, #0]
 8013968:	1b5b      	subs	r3, r3, r5
 801396a:	d417      	bmi.n	801399c <_malloc_r+0x8c>
 801396c:	2b0b      	cmp	r3, #11
 801396e:	d903      	bls.n	8013978 <_malloc_r+0x68>
 8013970:	6023      	str	r3, [r4, #0]
 8013972:	441c      	add	r4, r3
 8013974:	6025      	str	r5, [r4, #0]
 8013976:	e004      	b.n	8013982 <_malloc_r+0x72>
 8013978:	6863      	ldr	r3, [r4, #4]
 801397a:	42a2      	cmp	r2, r4
 801397c:	bf0c      	ite	eq
 801397e:	600b      	streq	r3, [r1, #0]
 8013980:	6053      	strne	r3, [r2, #4]
 8013982:	4630      	mov	r0, r6
 8013984:	f000 fa50 	bl	8013e28 <__malloc_unlock>
 8013988:	f104 000b 	add.w	r0, r4, #11
 801398c:	1d23      	adds	r3, r4, #4
 801398e:	f020 0007 	bic.w	r0, r0, #7
 8013992:	1ac2      	subs	r2, r0, r3
 8013994:	d0cc      	beq.n	8013930 <_malloc_r+0x20>
 8013996:	1a1b      	subs	r3, r3, r0
 8013998:	50a3      	str	r3, [r4, r2]
 801399a:	e7c9      	b.n	8013930 <_malloc_r+0x20>
 801399c:	4622      	mov	r2, r4
 801399e:	6864      	ldr	r4, [r4, #4]
 80139a0:	e7cc      	b.n	801393c <_malloc_r+0x2c>
 80139a2:	1cc4      	adds	r4, r0, #3
 80139a4:	f024 0403 	bic.w	r4, r4, #3
 80139a8:	42a0      	cmp	r0, r4
 80139aa:	d0e3      	beq.n	8013974 <_malloc_r+0x64>
 80139ac:	1a21      	subs	r1, r4, r0
 80139ae:	4630      	mov	r0, r6
 80139b0:	f000 f98a 	bl	8013cc8 <_sbrk_r>
 80139b4:	3001      	adds	r0, #1
 80139b6:	d1dd      	bne.n	8013974 <_malloc_r+0x64>
 80139b8:	e7cf      	b.n	801395a <_malloc_r+0x4a>
 80139ba:	bf00      	nop
 80139bc:	200087a0 	.word	0x200087a0
 80139c0:	200087a4 	.word	0x200087a4

080139c4 <_realloc_r>:
 80139c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c6:	4607      	mov	r7, r0
 80139c8:	4614      	mov	r4, r2
 80139ca:	460e      	mov	r6, r1
 80139cc:	b921      	cbnz	r1, 80139d8 <_realloc_r+0x14>
 80139ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80139d2:	4611      	mov	r1, r2
 80139d4:	f7ff bf9c 	b.w	8013910 <_malloc_r>
 80139d8:	b922      	cbnz	r2, 80139e4 <_realloc_r+0x20>
 80139da:	f7ff ff49 	bl	8013870 <_free_r>
 80139de:	4625      	mov	r5, r4
 80139e0:	4628      	mov	r0, r5
 80139e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e4:	f000 fa26 	bl	8013e34 <_malloc_usable_size_r>
 80139e8:	42a0      	cmp	r0, r4
 80139ea:	d20f      	bcs.n	8013a0c <_realloc_r+0x48>
 80139ec:	4621      	mov	r1, r4
 80139ee:	4638      	mov	r0, r7
 80139f0:	f7ff ff8e 	bl	8013910 <_malloc_r>
 80139f4:	4605      	mov	r5, r0
 80139f6:	2800      	cmp	r0, #0
 80139f8:	d0f2      	beq.n	80139e0 <_realloc_r+0x1c>
 80139fa:	4631      	mov	r1, r6
 80139fc:	4622      	mov	r2, r4
 80139fe:	f7ff f85a 	bl	8012ab6 <memcpy>
 8013a02:	4631      	mov	r1, r6
 8013a04:	4638      	mov	r0, r7
 8013a06:	f7ff ff33 	bl	8013870 <_free_r>
 8013a0a:	e7e9      	b.n	80139e0 <_realloc_r+0x1c>
 8013a0c:	4635      	mov	r5, r6
 8013a0e:	e7e7      	b.n	80139e0 <_realloc_r+0x1c>

08013a10 <__ssputs_r>:
 8013a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a14:	688e      	ldr	r6, [r1, #8]
 8013a16:	429e      	cmp	r6, r3
 8013a18:	4682      	mov	sl, r0
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	4690      	mov	r8, r2
 8013a1e:	461f      	mov	r7, r3
 8013a20:	d838      	bhi.n	8013a94 <__ssputs_r+0x84>
 8013a22:	898a      	ldrh	r2, [r1, #12]
 8013a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a28:	d032      	beq.n	8013a90 <__ssputs_r+0x80>
 8013a2a:	6825      	ldr	r5, [r4, #0]
 8013a2c:	6909      	ldr	r1, [r1, #16]
 8013a2e:	eba5 0901 	sub.w	r9, r5, r1
 8013a32:	6965      	ldr	r5, [r4, #20]
 8013a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	444b      	add	r3, r9
 8013a40:	106d      	asrs	r5, r5, #1
 8013a42:	429d      	cmp	r5, r3
 8013a44:	bf38      	it	cc
 8013a46:	461d      	movcc	r5, r3
 8013a48:	0553      	lsls	r3, r2, #21
 8013a4a:	d531      	bpl.n	8013ab0 <__ssputs_r+0xa0>
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	f7ff ff5f 	bl	8013910 <_malloc_r>
 8013a52:	4606      	mov	r6, r0
 8013a54:	b950      	cbnz	r0, 8013a6c <__ssputs_r+0x5c>
 8013a56:	230c      	movs	r3, #12
 8013a58:	f8ca 3000 	str.w	r3, [sl]
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a62:	81a3      	strh	r3, [r4, #12]
 8013a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a6c:	6921      	ldr	r1, [r4, #16]
 8013a6e:	464a      	mov	r2, r9
 8013a70:	f7ff f821 	bl	8012ab6 <memcpy>
 8013a74:	89a3      	ldrh	r3, [r4, #12]
 8013a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a7e:	81a3      	strh	r3, [r4, #12]
 8013a80:	6126      	str	r6, [r4, #16]
 8013a82:	6165      	str	r5, [r4, #20]
 8013a84:	444e      	add	r6, r9
 8013a86:	eba5 0509 	sub.w	r5, r5, r9
 8013a8a:	6026      	str	r6, [r4, #0]
 8013a8c:	60a5      	str	r5, [r4, #8]
 8013a8e:	463e      	mov	r6, r7
 8013a90:	42be      	cmp	r6, r7
 8013a92:	d900      	bls.n	8013a96 <__ssputs_r+0x86>
 8013a94:	463e      	mov	r6, r7
 8013a96:	4632      	mov	r2, r6
 8013a98:	6820      	ldr	r0, [r4, #0]
 8013a9a:	4641      	mov	r1, r8
 8013a9c:	f7ff f819 	bl	8012ad2 <memmove>
 8013aa0:	68a3      	ldr	r3, [r4, #8]
 8013aa2:	6822      	ldr	r2, [r4, #0]
 8013aa4:	1b9b      	subs	r3, r3, r6
 8013aa6:	4432      	add	r2, r6
 8013aa8:	60a3      	str	r3, [r4, #8]
 8013aaa:	6022      	str	r2, [r4, #0]
 8013aac:	2000      	movs	r0, #0
 8013aae:	e7db      	b.n	8013a68 <__ssputs_r+0x58>
 8013ab0:	462a      	mov	r2, r5
 8013ab2:	f7ff ff87 	bl	80139c4 <_realloc_r>
 8013ab6:	4606      	mov	r6, r0
 8013ab8:	2800      	cmp	r0, #0
 8013aba:	d1e1      	bne.n	8013a80 <__ssputs_r+0x70>
 8013abc:	6921      	ldr	r1, [r4, #16]
 8013abe:	4650      	mov	r0, sl
 8013ac0:	f7ff fed6 	bl	8013870 <_free_r>
 8013ac4:	e7c7      	b.n	8013a56 <__ssputs_r+0x46>
	...

08013ac8 <_svfiprintf_r>:
 8013ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013acc:	4698      	mov	r8, r3
 8013ace:	898b      	ldrh	r3, [r1, #12]
 8013ad0:	061b      	lsls	r3, r3, #24
 8013ad2:	b09d      	sub	sp, #116	; 0x74
 8013ad4:	4607      	mov	r7, r0
 8013ad6:	460d      	mov	r5, r1
 8013ad8:	4614      	mov	r4, r2
 8013ada:	d50e      	bpl.n	8013afa <_svfiprintf_r+0x32>
 8013adc:	690b      	ldr	r3, [r1, #16]
 8013ade:	b963      	cbnz	r3, 8013afa <_svfiprintf_r+0x32>
 8013ae0:	2140      	movs	r1, #64	; 0x40
 8013ae2:	f7ff ff15 	bl	8013910 <_malloc_r>
 8013ae6:	6028      	str	r0, [r5, #0]
 8013ae8:	6128      	str	r0, [r5, #16]
 8013aea:	b920      	cbnz	r0, 8013af6 <_svfiprintf_r+0x2e>
 8013aec:	230c      	movs	r3, #12
 8013aee:	603b      	str	r3, [r7, #0]
 8013af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013af4:	e0d1      	b.n	8013c9a <_svfiprintf_r+0x1d2>
 8013af6:	2340      	movs	r3, #64	; 0x40
 8013af8:	616b      	str	r3, [r5, #20]
 8013afa:	2300      	movs	r3, #0
 8013afc:	9309      	str	r3, [sp, #36]	; 0x24
 8013afe:	2320      	movs	r3, #32
 8013b00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b08:	2330      	movs	r3, #48	; 0x30
 8013b0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013cb4 <_svfiprintf_r+0x1ec>
 8013b0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b12:	f04f 0901 	mov.w	r9, #1
 8013b16:	4623      	mov	r3, r4
 8013b18:	469a      	mov	sl, r3
 8013b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b1e:	b10a      	cbz	r2, 8013b24 <_svfiprintf_r+0x5c>
 8013b20:	2a25      	cmp	r2, #37	; 0x25
 8013b22:	d1f9      	bne.n	8013b18 <_svfiprintf_r+0x50>
 8013b24:	ebba 0b04 	subs.w	fp, sl, r4
 8013b28:	d00b      	beq.n	8013b42 <_svfiprintf_r+0x7a>
 8013b2a:	465b      	mov	r3, fp
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	4629      	mov	r1, r5
 8013b30:	4638      	mov	r0, r7
 8013b32:	f7ff ff6d 	bl	8013a10 <__ssputs_r>
 8013b36:	3001      	adds	r0, #1
 8013b38:	f000 80aa 	beq.w	8013c90 <_svfiprintf_r+0x1c8>
 8013b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013b3e:	445a      	add	r2, fp
 8013b40:	9209      	str	r2, [sp, #36]	; 0x24
 8013b42:	f89a 3000 	ldrb.w	r3, [sl]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	f000 80a2 	beq.w	8013c90 <_svfiprintf_r+0x1c8>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b56:	f10a 0a01 	add.w	sl, sl, #1
 8013b5a:	9304      	str	r3, [sp, #16]
 8013b5c:	9307      	str	r3, [sp, #28]
 8013b5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b62:	931a      	str	r3, [sp, #104]	; 0x68
 8013b64:	4654      	mov	r4, sl
 8013b66:	2205      	movs	r2, #5
 8013b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b6c:	4851      	ldr	r0, [pc, #324]	; (8013cb4 <_svfiprintf_r+0x1ec>)
 8013b6e:	f7ec fb37 	bl	80001e0 <memchr>
 8013b72:	9a04      	ldr	r2, [sp, #16]
 8013b74:	b9d8      	cbnz	r0, 8013bae <_svfiprintf_r+0xe6>
 8013b76:	06d0      	lsls	r0, r2, #27
 8013b78:	bf44      	itt	mi
 8013b7a:	2320      	movmi	r3, #32
 8013b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b80:	0711      	lsls	r1, r2, #28
 8013b82:	bf44      	itt	mi
 8013b84:	232b      	movmi	r3, #43	; 0x2b
 8013b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8013b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8013b90:	d015      	beq.n	8013bbe <_svfiprintf_r+0xf6>
 8013b92:	9a07      	ldr	r2, [sp, #28]
 8013b94:	4654      	mov	r4, sl
 8013b96:	2000      	movs	r0, #0
 8013b98:	f04f 0c0a 	mov.w	ip, #10
 8013b9c:	4621      	mov	r1, r4
 8013b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ba2:	3b30      	subs	r3, #48	; 0x30
 8013ba4:	2b09      	cmp	r3, #9
 8013ba6:	d94e      	bls.n	8013c46 <_svfiprintf_r+0x17e>
 8013ba8:	b1b0      	cbz	r0, 8013bd8 <_svfiprintf_r+0x110>
 8013baa:	9207      	str	r2, [sp, #28]
 8013bac:	e014      	b.n	8013bd8 <_svfiprintf_r+0x110>
 8013bae:	eba0 0308 	sub.w	r3, r0, r8
 8013bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	9304      	str	r3, [sp, #16]
 8013bba:	46a2      	mov	sl, r4
 8013bbc:	e7d2      	b.n	8013b64 <_svfiprintf_r+0x9c>
 8013bbe:	9b03      	ldr	r3, [sp, #12]
 8013bc0:	1d19      	adds	r1, r3, #4
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	9103      	str	r1, [sp, #12]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	bfbb      	ittet	lt
 8013bca:	425b      	neglt	r3, r3
 8013bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8013bd0:	9307      	strge	r3, [sp, #28]
 8013bd2:	9307      	strlt	r3, [sp, #28]
 8013bd4:	bfb8      	it	lt
 8013bd6:	9204      	strlt	r2, [sp, #16]
 8013bd8:	7823      	ldrb	r3, [r4, #0]
 8013bda:	2b2e      	cmp	r3, #46	; 0x2e
 8013bdc:	d10c      	bne.n	8013bf8 <_svfiprintf_r+0x130>
 8013bde:	7863      	ldrb	r3, [r4, #1]
 8013be0:	2b2a      	cmp	r3, #42	; 0x2a
 8013be2:	d135      	bne.n	8013c50 <_svfiprintf_r+0x188>
 8013be4:	9b03      	ldr	r3, [sp, #12]
 8013be6:	1d1a      	adds	r2, r3, #4
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	9203      	str	r2, [sp, #12]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	bfb8      	it	lt
 8013bf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013bf4:	3402      	adds	r4, #2
 8013bf6:	9305      	str	r3, [sp, #20]
 8013bf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013cc4 <_svfiprintf_r+0x1fc>
 8013bfc:	7821      	ldrb	r1, [r4, #0]
 8013bfe:	2203      	movs	r2, #3
 8013c00:	4650      	mov	r0, sl
 8013c02:	f7ec faed 	bl	80001e0 <memchr>
 8013c06:	b140      	cbz	r0, 8013c1a <_svfiprintf_r+0x152>
 8013c08:	2340      	movs	r3, #64	; 0x40
 8013c0a:	eba0 000a 	sub.w	r0, r0, sl
 8013c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8013c12:	9b04      	ldr	r3, [sp, #16]
 8013c14:	4303      	orrs	r3, r0
 8013c16:	3401      	adds	r4, #1
 8013c18:	9304      	str	r3, [sp, #16]
 8013c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c1e:	4826      	ldr	r0, [pc, #152]	; (8013cb8 <_svfiprintf_r+0x1f0>)
 8013c20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c24:	2206      	movs	r2, #6
 8013c26:	f7ec fadb 	bl	80001e0 <memchr>
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d038      	beq.n	8013ca0 <_svfiprintf_r+0x1d8>
 8013c2e:	4b23      	ldr	r3, [pc, #140]	; (8013cbc <_svfiprintf_r+0x1f4>)
 8013c30:	bb1b      	cbnz	r3, 8013c7a <_svfiprintf_r+0x1b2>
 8013c32:	9b03      	ldr	r3, [sp, #12]
 8013c34:	3307      	adds	r3, #7
 8013c36:	f023 0307 	bic.w	r3, r3, #7
 8013c3a:	3308      	adds	r3, #8
 8013c3c:	9303      	str	r3, [sp, #12]
 8013c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c40:	4433      	add	r3, r6
 8013c42:	9309      	str	r3, [sp, #36]	; 0x24
 8013c44:	e767      	b.n	8013b16 <_svfiprintf_r+0x4e>
 8013c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c4a:	460c      	mov	r4, r1
 8013c4c:	2001      	movs	r0, #1
 8013c4e:	e7a5      	b.n	8013b9c <_svfiprintf_r+0xd4>
 8013c50:	2300      	movs	r3, #0
 8013c52:	3401      	adds	r4, #1
 8013c54:	9305      	str	r3, [sp, #20]
 8013c56:	4619      	mov	r1, r3
 8013c58:	f04f 0c0a 	mov.w	ip, #10
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c62:	3a30      	subs	r2, #48	; 0x30
 8013c64:	2a09      	cmp	r2, #9
 8013c66:	d903      	bls.n	8013c70 <_svfiprintf_r+0x1a8>
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d0c5      	beq.n	8013bf8 <_svfiprintf_r+0x130>
 8013c6c:	9105      	str	r1, [sp, #20]
 8013c6e:	e7c3      	b.n	8013bf8 <_svfiprintf_r+0x130>
 8013c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c74:	4604      	mov	r4, r0
 8013c76:	2301      	movs	r3, #1
 8013c78:	e7f0      	b.n	8013c5c <_svfiprintf_r+0x194>
 8013c7a:	ab03      	add	r3, sp, #12
 8013c7c:	9300      	str	r3, [sp, #0]
 8013c7e:	462a      	mov	r2, r5
 8013c80:	4b0f      	ldr	r3, [pc, #60]	; (8013cc0 <_svfiprintf_r+0x1f8>)
 8013c82:	a904      	add	r1, sp, #16
 8013c84:	4638      	mov	r0, r7
 8013c86:	f3af 8000 	nop.w
 8013c8a:	1c42      	adds	r2, r0, #1
 8013c8c:	4606      	mov	r6, r0
 8013c8e:	d1d6      	bne.n	8013c3e <_svfiprintf_r+0x176>
 8013c90:	89ab      	ldrh	r3, [r5, #12]
 8013c92:	065b      	lsls	r3, r3, #25
 8013c94:	f53f af2c 	bmi.w	8013af0 <_svfiprintf_r+0x28>
 8013c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c9a:	b01d      	add	sp, #116	; 0x74
 8013c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ca0:	ab03      	add	r3, sp, #12
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	462a      	mov	r2, r5
 8013ca6:	4b06      	ldr	r3, [pc, #24]	; (8013cc0 <_svfiprintf_r+0x1f8>)
 8013ca8:	a904      	add	r1, sp, #16
 8013caa:	4638      	mov	r0, r7
 8013cac:	f7ff f8fa 	bl	8012ea4 <_printf_i>
 8013cb0:	e7eb      	b.n	8013c8a <_svfiprintf_r+0x1c2>
 8013cb2:	bf00      	nop
 8013cb4:	080146dc 	.word	0x080146dc
 8013cb8:	080146e6 	.word	0x080146e6
 8013cbc:	00000000 	.word	0x00000000
 8013cc0:	08013a11 	.word	0x08013a11
 8013cc4:	080146e2 	.word	0x080146e2

08013cc8 <_sbrk_r>:
 8013cc8:	b538      	push	{r3, r4, r5, lr}
 8013cca:	4d06      	ldr	r5, [pc, #24]	; (8013ce4 <_sbrk_r+0x1c>)
 8013ccc:	2300      	movs	r3, #0
 8013cce:	4604      	mov	r4, r0
 8013cd0:	4608      	mov	r0, r1
 8013cd2:	602b      	str	r3, [r5, #0]
 8013cd4:	f7ed f9c0 	bl	8001058 <_sbrk>
 8013cd8:	1c43      	adds	r3, r0, #1
 8013cda:	d102      	bne.n	8013ce2 <_sbrk_r+0x1a>
 8013cdc:	682b      	ldr	r3, [r5, #0]
 8013cde:	b103      	cbz	r3, 8013ce2 <_sbrk_r+0x1a>
 8013ce0:	6023      	str	r3, [r4, #0]
 8013ce2:	bd38      	pop	{r3, r4, r5, pc}
 8013ce4:	2000b6ac 	.word	0x2000b6ac

08013ce8 <__sread>:
 8013ce8:	b510      	push	{r4, lr}
 8013cea:	460c      	mov	r4, r1
 8013cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cf0:	f000 f8a8 	bl	8013e44 <_read_r>
 8013cf4:	2800      	cmp	r0, #0
 8013cf6:	bfab      	itete	ge
 8013cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8013cfc:	181b      	addge	r3, r3, r0
 8013cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d02:	bfac      	ite	ge
 8013d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d06:	81a3      	strhlt	r3, [r4, #12]
 8013d08:	bd10      	pop	{r4, pc}

08013d0a <__swrite>:
 8013d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d0e:	461f      	mov	r7, r3
 8013d10:	898b      	ldrh	r3, [r1, #12]
 8013d12:	05db      	lsls	r3, r3, #23
 8013d14:	4605      	mov	r5, r0
 8013d16:	460c      	mov	r4, r1
 8013d18:	4616      	mov	r6, r2
 8013d1a:	d505      	bpl.n	8013d28 <__swrite+0x1e>
 8013d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d20:	2302      	movs	r3, #2
 8013d22:	2200      	movs	r2, #0
 8013d24:	f000 f868 	bl	8013df8 <_lseek_r>
 8013d28:	89a3      	ldrh	r3, [r4, #12]
 8013d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d32:	81a3      	strh	r3, [r4, #12]
 8013d34:	4632      	mov	r2, r6
 8013d36:	463b      	mov	r3, r7
 8013d38:	4628      	mov	r0, r5
 8013d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d3e:	f000 b817 	b.w	8013d70 <_write_r>

08013d42 <__sseek>:
 8013d42:	b510      	push	{r4, lr}
 8013d44:	460c      	mov	r4, r1
 8013d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4a:	f000 f855 	bl	8013df8 <_lseek_r>
 8013d4e:	1c43      	adds	r3, r0, #1
 8013d50:	89a3      	ldrh	r3, [r4, #12]
 8013d52:	bf15      	itete	ne
 8013d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d5e:	81a3      	strheq	r3, [r4, #12]
 8013d60:	bf18      	it	ne
 8013d62:	81a3      	strhne	r3, [r4, #12]
 8013d64:	bd10      	pop	{r4, pc}

08013d66 <__sclose>:
 8013d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d6a:	f000 b813 	b.w	8013d94 <_close_r>
	...

08013d70 <_write_r>:
 8013d70:	b538      	push	{r3, r4, r5, lr}
 8013d72:	4d07      	ldr	r5, [pc, #28]	; (8013d90 <_write_r+0x20>)
 8013d74:	4604      	mov	r4, r0
 8013d76:	4608      	mov	r0, r1
 8013d78:	4611      	mov	r1, r2
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	602a      	str	r2, [r5, #0]
 8013d7e:	461a      	mov	r2, r3
 8013d80:	f7ed f919 	bl	8000fb6 <_write>
 8013d84:	1c43      	adds	r3, r0, #1
 8013d86:	d102      	bne.n	8013d8e <_write_r+0x1e>
 8013d88:	682b      	ldr	r3, [r5, #0]
 8013d8a:	b103      	cbz	r3, 8013d8e <_write_r+0x1e>
 8013d8c:	6023      	str	r3, [r4, #0]
 8013d8e:	bd38      	pop	{r3, r4, r5, pc}
 8013d90:	2000b6ac 	.word	0x2000b6ac

08013d94 <_close_r>:
 8013d94:	b538      	push	{r3, r4, r5, lr}
 8013d96:	4d06      	ldr	r5, [pc, #24]	; (8013db0 <_close_r+0x1c>)
 8013d98:	2300      	movs	r3, #0
 8013d9a:	4604      	mov	r4, r0
 8013d9c:	4608      	mov	r0, r1
 8013d9e:	602b      	str	r3, [r5, #0]
 8013da0:	f7ed f925 	bl	8000fee <_close>
 8013da4:	1c43      	adds	r3, r0, #1
 8013da6:	d102      	bne.n	8013dae <_close_r+0x1a>
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	b103      	cbz	r3, 8013dae <_close_r+0x1a>
 8013dac:	6023      	str	r3, [r4, #0]
 8013dae:	bd38      	pop	{r3, r4, r5, pc}
 8013db0:	2000b6ac 	.word	0x2000b6ac

08013db4 <_fstat_r>:
 8013db4:	b538      	push	{r3, r4, r5, lr}
 8013db6:	4d07      	ldr	r5, [pc, #28]	; (8013dd4 <_fstat_r+0x20>)
 8013db8:	2300      	movs	r3, #0
 8013dba:	4604      	mov	r4, r0
 8013dbc:	4608      	mov	r0, r1
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	602b      	str	r3, [r5, #0]
 8013dc2:	f7ed f920 	bl	8001006 <_fstat>
 8013dc6:	1c43      	adds	r3, r0, #1
 8013dc8:	d102      	bne.n	8013dd0 <_fstat_r+0x1c>
 8013dca:	682b      	ldr	r3, [r5, #0]
 8013dcc:	b103      	cbz	r3, 8013dd0 <_fstat_r+0x1c>
 8013dce:	6023      	str	r3, [r4, #0]
 8013dd0:	bd38      	pop	{r3, r4, r5, pc}
 8013dd2:	bf00      	nop
 8013dd4:	2000b6ac 	.word	0x2000b6ac

08013dd8 <_isatty_r>:
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	4d06      	ldr	r5, [pc, #24]	; (8013df4 <_isatty_r+0x1c>)
 8013ddc:	2300      	movs	r3, #0
 8013dde:	4604      	mov	r4, r0
 8013de0:	4608      	mov	r0, r1
 8013de2:	602b      	str	r3, [r5, #0]
 8013de4:	f7ed f91f 	bl	8001026 <_isatty>
 8013de8:	1c43      	adds	r3, r0, #1
 8013dea:	d102      	bne.n	8013df2 <_isatty_r+0x1a>
 8013dec:	682b      	ldr	r3, [r5, #0]
 8013dee:	b103      	cbz	r3, 8013df2 <_isatty_r+0x1a>
 8013df0:	6023      	str	r3, [r4, #0]
 8013df2:	bd38      	pop	{r3, r4, r5, pc}
 8013df4:	2000b6ac 	.word	0x2000b6ac

08013df8 <_lseek_r>:
 8013df8:	b538      	push	{r3, r4, r5, lr}
 8013dfa:	4d07      	ldr	r5, [pc, #28]	; (8013e18 <_lseek_r+0x20>)
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	4608      	mov	r0, r1
 8013e00:	4611      	mov	r1, r2
 8013e02:	2200      	movs	r2, #0
 8013e04:	602a      	str	r2, [r5, #0]
 8013e06:	461a      	mov	r2, r3
 8013e08:	f7ed f918 	bl	800103c <_lseek>
 8013e0c:	1c43      	adds	r3, r0, #1
 8013e0e:	d102      	bne.n	8013e16 <_lseek_r+0x1e>
 8013e10:	682b      	ldr	r3, [r5, #0]
 8013e12:	b103      	cbz	r3, 8013e16 <_lseek_r+0x1e>
 8013e14:	6023      	str	r3, [r4, #0]
 8013e16:	bd38      	pop	{r3, r4, r5, pc}
 8013e18:	2000b6ac 	.word	0x2000b6ac

08013e1c <__malloc_lock>:
 8013e1c:	4801      	ldr	r0, [pc, #4]	; (8013e24 <__malloc_lock+0x8>)
 8013e1e:	f7fe be3a 	b.w	8012a96 <__retarget_lock_acquire_recursive>
 8013e22:	bf00      	nop
 8013e24:	2000b6a4 	.word	0x2000b6a4

08013e28 <__malloc_unlock>:
 8013e28:	4801      	ldr	r0, [pc, #4]	; (8013e30 <__malloc_unlock+0x8>)
 8013e2a:	f7fe be35 	b.w	8012a98 <__retarget_lock_release_recursive>
 8013e2e:	bf00      	nop
 8013e30:	2000b6a4 	.word	0x2000b6a4

08013e34 <_malloc_usable_size_r>:
 8013e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e38:	1f18      	subs	r0, r3, #4
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	bfbc      	itt	lt
 8013e3e:	580b      	ldrlt	r3, [r1, r0]
 8013e40:	18c0      	addlt	r0, r0, r3
 8013e42:	4770      	bx	lr

08013e44 <_read_r>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	4d07      	ldr	r5, [pc, #28]	; (8013e64 <_read_r+0x20>)
 8013e48:	4604      	mov	r4, r0
 8013e4a:	4608      	mov	r0, r1
 8013e4c:	4611      	mov	r1, r2
 8013e4e:	2200      	movs	r2, #0
 8013e50:	602a      	str	r2, [r5, #0]
 8013e52:	461a      	mov	r2, r3
 8013e54:	f7ed f892 	bl	8000f7c <_read>
 8013e58:	1c43      	adds	r3, r0, #1
 8013e5a:	d102      	bne.n	8013e62 <_read_r+0x1e>
 8013e5c:	682b      	ldr	r3, [r5, #0]
 8013e5e:	b103      	cbz	r3, 8013e62 <_read_r+0x1e>
 8013e60:	6023      	str	r3, [r4, #0]
 8013e62:	bd38      	pop	{r3, r4, r5, pc}
 8013e64:	2000b6ac 	.word	0x2000b6ac

08013e68 <_init>:
 8013e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6a:	bf00      	nop
 8013e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e6e:	bc08      	pop	{r3}
 8013e70:	469e      	mov	lr, r3
 8013e72:	4770      	bx	lr

08013e74 <_fini>:
 8013e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e76:	bf00      	nop
 8013e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e7a:	bc08      	pop	{r3}
 8013e7c:	469e      	mov	lr, r3
 8013e7e:	4770      	bx	lr
