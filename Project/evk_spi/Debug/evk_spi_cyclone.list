
evk_spi_cyclone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  080111b4  080111b4  000211b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119d0  080119d0  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  080119d0  080119d0  000219d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119d8  080119d8  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119d8  080119d8  000219d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119dc  080119dc  000219dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080119e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000b608  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000b6a0  2000b6a0  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0009323f  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000975d  00000000  00000000  000c3307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002200  00000000  00000000  000cca68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ed0  00000000  00000000  000cec68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033c8b  00000000  00000000  000d0b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0007d150  00000000  00000000  001047c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9423  00000000  00000000  00181913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0026ad36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000931c  00000000  00000000  0026ad8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801119c 	.word	0x0801119c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0801119c 	.word	0x0801119c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000b8 	.word	0x200000b8
 80005a8:	2000010c 	.word	0x2000010c

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0
    MacAddr macAddr;
    Ipv4Addr ipv4Addr;


	   //TCP/IP stack initialization
    error = netInit();
 80005b2:	f001 fc47 	bl	8001e44 <netInit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(error)
 80005ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d005      	beq.n	80005cc <MX_FREERTOS_Init+0x20>
    {
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4837      	ldr	r0, [pc, #220]	; (80006a4 <MX_FREERTOS_Init+0xf8>)
 80005c8:	f00b fdb4 	bl	800c134 <HAL_GPIO_WritePin>
        //Debug message
//        TRACE_ERROR("Failed to initialize TCP/IP stack!\r\n");
    }

    interface = &netInterface[0];
 80005cc:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <MX_FREERTOS_Init+0xfc>)
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28

    //Set interface name
    netSetInterfaceName(interface, APP_IF_NAME);
 80005d0:	4936      	ldr	r1, [pc, #216]	; (80006ac <MX_FREERTOS_Init+0x100>)
 80005d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005d4:	f001 fd12 	bl	8001ffc <netSetInterfaceName>
    //Set host name
    netSetHostname(interface, APP_HOST_NAME);
 80005d8:	4935      	ldr	r1, [pc, #212]	; (80006b0 <MX_FREERTOS_Init+0x104>)
 80005da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005dc:	f001 fd30 	bl	8002040 <netSetHostname>
    //Set host MAC address
    macStringToAddr(APP_MAC_ADDR, &macAddr);
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4619      	mov	r1, r3
 80005e6:	4833      	ldr	r0, [pc, #204]	; (80006b4 <MX_FREERTOS_Init+0x108>)
 80005e8:	f001 f80c 	bl	8001604 <macStringToAddr>
    netSetMacAddr(interface, &macAddr);
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4619      	mov	r1, r3
 80005f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005f4:	f001 fcda 	bl	8001fac <netSetMacAddr>
    //Select the relevant network adapter

    netSetDriver(interface, &enc28j60Driver);
 80005f8:	492f      	ldr	r1, [pc, #188]	; (80006b8 <MX_FREERTOS_Init+0x10c>)
 80005fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80005fc:	f001 fd42 	bl	8002084 <netSetDriver>
    netSetSpiDriver(interface, &spiDriver);
 8000600:	492e      	ldr	r1, [pc, #184]	; (80006bc <MX_FREERTOS_Init+0x110>)
 8000602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000604:	f001 fd5c 	bl	80020c0 <netSetSpiDriver>
    netSetExtIntDriver(interface, &extIntDriver);
 8000608:	492d      	ldr	r1, [pc, #180]	; (80006c0 <MX_FREERTOS_Init+0x114>)
 800060a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800060c:	f001 fd76 	bl	80020fc <netSetExtIntDriver>

    //Initialize network interface
    error = netConfigInterface(interface);
 8000610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000612:	f001 fd91 	bl	8002138 <netConfigInterface>
 8000616:	4603      	mov	r3, r0
 8000618:	85fb      	strh	r3, [r7, #46]	; 0x2e
    //Any error to report?
    if(error)
 800061a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <MX_FREERTOS_Init+0x80>
    {
       //Debug message
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, TRUE);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	481f      	ldr	r0, [pc, #124]	; (80006a4 <MX_FREERTOS_Init+0xf8>)
 8000628:	f00b fd84 	bl	800c134 <HAL_GPIO_WritePin>
//       TRACE_ERROR("Failed to configure interface %s!\r\n", interface->name);
    }

   //Set IPv4 host address
   ipv4StringToAddr(APP_IPV4_HOST_ADDR, &ipv4Addr);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4824      	ldr	r0, [pc, #144]	; (80006c4 <MX_FREERTOS_Init+0x118>)
 8000634:	f00a f8aa 	bl	800a78c <ipv4StringToAddr>
   ipv4SetHostAddr(interface, ipv4Addr);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	4619      	mov	r1, r3
 800063c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800063e:	f009 fc42 	bl	8009ec6 <ipv4SetHostAddr>

   //Set subnet mask
   ipv4StringToAddr(APP_IPV4_SUBNET_MASK, &ipv4Addr);
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4619      	mov	r1, r3
 8000648:	481f      	ldr	r0, [pc, #124]	; (80006c8 <MX_FREERTOS_Init+0x11c>)
 800064a:	f00a f89f 	bl	800a78c <ipv4StringToAddr>
   ipv4SetSubnetMask(interface, ipv4Addr);
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	4619      	mov	r1, r3
 8000652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000654:	f009 fc86 	bl	8009f64 <ipv4SetSubnetMask>

   //Set default gateway
   ipv4StringToAddr(APP_IPV4_DEFAULT_GATEWAY, &ipv4Addr);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <MX_FREERTOS_Init+0x120>)
 8000660:	f00a f894 	bl	800a78c <ipv4StringToAddr>
   ipv4SetDefaultGateway(interface, ipv4Addr);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	4619      	mov	r1, r3
 8000668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800066a:	f009 fcb5 	bl	8009fd8 <ipv4SetDefaultGateway>
  /* add threads, ... */

//  osThreadDef(secondTask, secondTaskLoop, osPriorityHigh, 0, 512);
//  defaultTaskHandle = osThreadCreate(osThread(secondTask), NULL);

  osThreadDef(thirdTask, thirdTaskLoop, osPriorityHigh, 0, 128);
 800066e:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_FREERTOS_Init+0x124>)
 8000670:	463c      	mov	r4, r7
 8000672:	461d      	mov	r5, r3
 8000674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000678:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(thirdTask), NULL);
 8000680:	463b      	mov	r3, r7
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00c fff6 	bl	800d676 <osThreadCreate>
 800068a:	4603      	mov	r3, r0
 800068c:	4a11      	ldr	r2, [pc, #68]	; (80006d4 <MX_FREERTOS_Init+0x128>)
 800068e:	6013      	str	r3, [r2, #0]

  xSemaphore = xSemaphoreCreateMutex();
 8000690:	2001      	movs	r0, #1
 8000692:	f00d fa58 	bl	800db46 <xQueueCreateMutex>
 8000696:	4603      	mov	r3, r0
 8000698:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <MX_FREERTOS_Init+0x12c>)
 800069a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 800069c:	bf00      	nop
 800069e:	3730      	adds	r7, #48	; 0x30
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	40020c00 	.word	0x40020c00
 80006a8:	20009248 	.word	0x20009248
 80006ac:	080111c0 	.word	0x080111c0
 80006b0:	080111c8 	.word	0x080111c8
 80006b4:	080111dc 	.word	0x080111dc
 80006b8:	080117d0 	.word	0x080117d0
 80006bc:	0801181c 	.word	0x0801181c
 80006c0:	08011810 	.word	0x08011810
 80006c4:	080111f0 	.word	0x080111f0
 80006c8:	08011200 	.word	0x08011200
 80006cc:	08011210 	.word	0x08011210
 80006d0:	08011220 	.word	0x08011220
 80006d4:	20008798 	.word	0x20008798
 80006d8:	200000b4 	.word	0x200000b4

080006dc <thirdTaskLoop>:
    }
}


void thirdTaskLoop(void const * argument)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
    while(1)
    {
                HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <thirdTaskLoop+0x1c>)
 80006ea:	f00b fd3c 	bl	800c166 <HAL_GPIO_TogglePin>
                osDelay(500);
 80006ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f2:	f00d f80c 	bl	800d70e <osDelay>
                HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 80006f6:	e7f5      	b.n	80006e4 <thirdTaskLoop+0x8>
 80006f8:	40020c00 	.word	0x40020c00

080006fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	; 0x28
 8000700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	4b3b      	ldr	r3, [pc, #236]	; (8000804 <MX_GPIO_Init+0x108>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3a      	ldr	r2, [pc, #232]	; (8000804 <MX_GPIO_Init+0x108>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_GPIO_Init+0x108>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x108>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x108>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x108>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_GPIO_Init+0x108>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <MX_GPIO_Init+0x108>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_GPIO_Init+0x108>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_GPIO_Init+0x108>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_GPIO_Init+0x108>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_GPIO_Init+0x108>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_CS_GPIO_Port, ENC_CS_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2110      	movs	r1, #16
 8000786:	4820      	ldr	r0, [pc, #128]	; (8000808 <MX_GPIO_Init+0x10c>)
 8000788:	f00b fcd4 	bl	800c134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000792:	481e      	ldr	r0, [pc, #120]	; (800080c <MX_GPIO_Init+0x110>)
 8000794:	f00b fcce 	bl	800c134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CS_Pin;
 8000798:	2310      	movs	r3, #16
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ENC_CS_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <MX_GPIO_Init+0x10c>)
 80007b0:	f00b fb24 	bl	800bdfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_INT_Pin;
 80007b4:	2320      	movs	r3, #32
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_INT_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <MX_GPIO_Init+0x10c>)
 80007ca:	f00b fb17 	bl	800bdfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin;
 80007ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <MX_GPIO_Init+0x110>)
 80007e8:	f00b fb08 	bl	800bdfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2105      	movs	r1, #5
 80007f0:	2017      	movs	r0, #23
 80007f2:	f00b fad9 	bl	800bda8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007f6:	2017      	movs	r0, #23
 80007f8:	f00b faf2 	bl	800bde0 <HAL_NVIC_EnableIRQ>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000814:	f00b f9aa 	bl	800bb6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000818:	f000 f82a 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081c:	f7ff ff6e 	bl	80006fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000820:	f000 f8a8 	bl	8000974 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000824:	f000 f8dc 	bl	80009e0 <MX_SPI2_Init>

   /* Notify user about the network interface config */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000828:	f7ff fec0 	bl	80005ac <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800082c:	f00c ff1c 	bl	800d668 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <main+0x5c>)
 8000836:	f00b fc96 	bl	800c166 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); HAL_Delay(500);
 800083a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <main+0x5c>)
 8000840:	f00b fc91 	bl	800c166 <HAL_GPIO_TogglePin>
 8000844:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000848:	f00b f9d2 	bl	800bbf0 <HAL_Delay>
  HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800084c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x5c>)
 8000852:	f00b fc88 	bl	800c166 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); HAL_Delay(500);
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4804      	ldr	r0, [pc, #16]	; (800086c <main+0x5c>)
 800085c:	f00b fc83 	bl	800c166 <HAL_GPIO_TogglePin>
 8000860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000864:	f00b f9c4 	bl	800bbf0 <HAL_Delay>

  while (1)
 8000868:	e7fe      	b.n	8000868 <main+0x58>
 800086a:	bf00      	nop
 800086c:	40020c00 	.word	0x40020c00

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b094      	sub	sp, #80	; 0x50
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0320 	add.w	r3, r7, #32
 800087a:	2230      	movs	r2, #48	; 0x30
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f00f fb69 	bl	800ff56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <SystemClock_Config+0xcc>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a27      	ldr	r2, [pc, #156]	; (800093c <SystemClock_Config+0xcc>)
 800089e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <SystemClock_Config+0xcc>)
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SystemClock_Config+0xd0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <SystemClock_Config+0xd0>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008be:	6013      	str	r3, [r2, #0]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <SystemClock_Config+0xd0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008dc:	2300      	movs	r3, #0
 80008de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e0:	2308      	movs	r3, #8
 80008e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008e4:	23a8      	movs	r3, #168	; 0xa8
 80008e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ec:	2307      	movs	r3, #7
 80008ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	4618      	mov	r0, r3
 80008f6:	f00b fc69 	bl	800c1cc <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000900:	f000 f832 	bl	8000968 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2302      	movs	r3, #2
 800090a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000914:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2105      	movs	r1, #5
 8000922:	4618      	mov	r0, r3
 8000924:	f00b feca 	bl	800c6bc <HAL_RCC_ClockConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800092e:	f000 f81b 	bl	8000968 <Error_Handler>
  }
}
 8000932:	bf00      	nop
 8000934:	3750      	adds	r7, #80	; 0x50
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f00b f92b 	bl	800bbb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010000 	.word	0x40010000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_SPI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	; (80009dc <MX_SPI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_SPI1_Init+0x64>)
 80009c6:	f00c f893 	bl	800caf0 <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d0:	f7ff ffca 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200090c8 	.word	0x200090c8
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_SPI2_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <MX_SPI2_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI2_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI2_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_SPI2_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_SPI2_Init+0x64>)
 8000a32:	f00c f85d 	bl	800caf0 <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f7ff ff94 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20009070 	.word	0x20009070
 8000a48:	40003800 	.word	0x40003800

08000a4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a32      	ldr	r2, [pc, #200]	; (8000b34 <HAL_SPI_MspInit+0xe8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d12c      	bne.n	8000ac8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a30      	ldr	r2, [pc, #192]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a86:	61bb      	str	r3, [r7, #24]
 8000a88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aa6:	2338      	movs	r3, #56	; 0x38
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab6:	2305      	movs	r3, #5
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481e      	ldr	r0, [pc, #120]	; (8000b3c <HAL_SPI_MspInit+0xf0>)
 8000ac2:	f00b f99b 	bl	800bdfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ac6:	e031      	b.n	8000b2c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <HAL_SPI_MspInit+0xf4>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12c      	bne.n	8000b2c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_SPI_MspInit+0xec>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_SPI_MspInit+0xf0>)
 8000b28:	f00b f968 	bl	800bdfc <HAL_GPIO_Init>
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40013000 	.word	0x40013000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400
 8000b40:	40003800 	.word	0x40003800

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_MspInit+0x54>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x54>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x54>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x54>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f00b f90d 	bl	800bda8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2019      	movs	r0, #25
 8000bb2:	f00b f8f9 	bl	800bda8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bb6:	2019      	movs	r0, #25
 8000bb8:	f00b f912 	bl	800bde0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6453      	str	r3, [r2, #68]	; 0x44
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd8:	f107 0210 	add.w	r2, r7, #16
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f00b ff52 	bl	800ca8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000be8:	f00b ff3c 	bl	800ca64 <HAL_RCC_GetPCLK2Freq>
 8000bec:	4603      	mov	r3, r0
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <HAL_InitTick+0xa8>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0c9b      	lsrs	r3, r3, #18
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_InitTick+0xac>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <HAL_InitTick+0xb0>)
 8000c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_InitTick+0xac>)
 8000c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_InitTick+0xac>)
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_InitTick+0xac>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_InitTick+0xac>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <HAL_InitTick+0xac>)
 8000c22:	f00c fa5b 	bl	800d0dc <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d104      	bne.n	8000c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_InitTick+0xac>)
 8000c2e:	f00c faaf 	bl	800d190 <HAL_TIM_Base_Start_IT>
 8000c32:	4603      	mov	r3, r0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20009120 	.word	0x20009120
 8000c4c:	40010000 	.word	0x40010000

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c80:	2020      	movs	r0, #32
 8000c82:	f00b fa8b 	bl	800c19c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c92:	f00c faed 	bl	800d270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20009120 	.word	0x20009120

08000ca0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cb2:	f3af 8000 	nop.w
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <_read+0x12>
	}

return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf1      	blt.n	8000cec <_write+0x12>
	}
	return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_close>:

int _close(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return -1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_isatty>:

int _isatty(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
	return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f00e fff0 	bl	800fd90 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20020000 	.word	0x20020000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	2000030c 	.word	0x2000030c
 8000de4:	2000b6a0 	.word	0x2000b6a0

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e28:	4c0b      	ldr	r4, [pc, #44]	; (8000e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd7 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f00f f82f 	bl	800fe9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fce7 	bl	8000810 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e50:	080119e0 	.word	0x080119e0
  ldr r2, =_sbss
 8000e54:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e58:	2000b6a0 	.word	0x2000b6a0

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>

08000e5e <swapInt16>:
 * @param[in] value 16-bit value
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	80fb      	strh	r3, [r7, #6]
   return SWAPINT16(value);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	ba5b      	rev16	r3, r3
 8000e6c:	b29b      	uxth	r3, r3
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <swapInt32>:
 * @param[in] value 32-bit value
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SWAPINT32(value);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	061a      	lsls	r2, r3, #24
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	0e1b      	lsrs	r3, r3, #24
 8000e9e:	4313      	orrs	r3, r2
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <formatSystemTime>:
 * @param[out] str NULL-terminated string representing the specified time
 * @return Pointer to the formatted string
 **/

const char_t *formatSystemTime(systime_t time, char_t *str)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
   uint8_t seconds;
   uint16_t milliseconds;
   static char_t buffer[24];

   //Retrieve milliseconds
   milliseconds = time % 1000;
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <formatSystemTime+0xe8>)
 8000eba:	fba3 1302 	umull	r1, r3, r3, r2
 8000ebe:	099b      	lsrs	r3, r3, #6
 8000ec0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec4:	fb01 f303 	mul.w	r3, r1, r3
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	81fb      	strh	r3, [r7, #14]
   time /= 1000;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a31      	ldr	r2, [pc, #196]	; (8000f94 <formatSystemTime+0xe8>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	099b      	lsrs	r3, r3, #6
 8000ed6:	607b      	str	r3, [r7, #4]
   //Retrieve seconds
   seconds = time % 60;
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <formatSystemTime+0xec>)
 8000edc:	fba3 2301 	umull	r2, r3, r3, r1
 8000ee0:	095a      	lsrs	r2, r3, #5
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	1aca      	subs	r2, r1, r3
 8000eec:	4613      	mov	r3, r2
 8000eee:	737b      	strb	r3, [r7, #13]
   time /= 60;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <formatSystemTime+0xec>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	095b      	lsrs	r3, r3, #5
 8000efa:	607b      	str	r3, [r7, #4]
   //Retrieve minutes
   minutes = time % 60;
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <formatSystemTime+0xec>)
 8000f00:	fba3 2301 	umull	r2, r3, r3, r1
 8000f04:	095a      	lsrs	r2, r3, #5
 8000f06:	4613      	mov	r3, r2
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	1a9b      	subs	r3, r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	1aca      	subs	r2, r1, r3
 8000f10:	4613      	mov	r3, r2
 8000f12:	733b      	strb	r3, [r7, #12]
   time /= 60;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <formatSystemTime+0xec>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	095b      	lsrs	r3, r3, #5
 8000f1e:	607b      	str	r3, [r7, #4]
   //Retrieve hours
   hours = time;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	817b      	strh	r3, [r7, #10]

   //The str parameter is optional
   if(!str)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <formatSystemTime+0x82>
      str = buffer;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <formatSystemTime+0xf0>)
 8000f2c:	603b      	str	r3, [r7, #0]

   //Format system time
   if(hours > 0)
 8000f2e:	897b      	ldrh	r3, [r7, #10]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00c      	beq.n	8000f4e <formatSystemTime+0xa2>
   {
      osSprintf(str, "%" PRIu16 "h %02" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8000f34:	8979      	ldrh	r1, [r7, #10]
 8000f36:	7b38      	ldrb	r0, [r7, #12]
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	89fa      	ldrh	r2, [r7, #14]
 8000f3c:	9201      	str	r2, [sp, #4]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	460a      	mov	r2, r1
 8000f44:	4916      	ldr	r1, [pc, #88]	; (8000fa0 <formatSystemTime+0xf4>)
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f00f fafa 	bl	8010540 <siprintf>
 8000f4c:	e01c      	b.n	8000f88 <formatSystemTime+0xdc>
         hours, minutes, seconds, milliseconds);
   }
   else if(minutes > 0)
 8000f4e:	7b3b      	ldrb	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d009      	beq.n	8000f68 <formatSystemTime+0xbc>
   {
      osSprintf(str, "%" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 8000f54:	7b3a      	ldrb	r2, [r7, #12]
 8000f56:	7b79      	ldrb	r1, [r7, #13]
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4911      	ldr	r1, [pc, #68]	; (8000fa4 <formatSystemTime+0xf8>)
 8000f60:	6838      	ldr	r0, [r7, #0]
 8000f62:	f00f faed 	bl	8010540 <siprintf>
 8000f66:	e00f      	b.n	8000f88 <formatSystemTime+0xdc>
         minutes, seconds, milliseconds);
   }
   else if(seconds > 0)
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <formatSystemTime+0xd0>
   {
      osSprintf(str, "%" PRIu8 "s %03" PRIu16 "ms", seconds, milliseconds);
 8000f6e:	7b7a      	ldrb	r2, [r7, #13]
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <formatSystemTime+0xfc>)
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f00f fae3 	bl	8010540 <siprintf>
 8000f7a:	e005      	b.n	8000f88 <formatSystemTime+0xdc>
   }
   else
   {
      osSprintf(str, "%" PRIu16 "ms", milliseconds);
 8000f7c:	89fb      	ldrh	r3, [r7, #14]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	490a      	ldr	r1, [pc, #40]	; (8000fac <formatSystemTime+0x100>)
 8000f82:	6838      	ldr	r0, [r7, #0]
 8000f84:	f00f fadc 	bl	8010540 <siprintf>
   }

   //Return a pointer to the formatted string
   return str;
 8000f88:	683b      	ldr	r3, [r7, #0]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	10624dd3 	.word	0x10624dd3
 8000f98:	88888889 	.word	0x88888889
 8000f9c:	20000310 	.word	0x20000310
 8000fa0:	0801130c 	.word	0x0801130c
 8000fa4:	0801132c 	.word	0x0801132c
 8000fa8:	08011344 	.word	0x08011344
 8000fac:	08011354 	.word	0x08011354

08000fb0 <osCreateTask>:
 *   new task. If the function fails, the return value is NULL
 **/

OsTask *osCreateTask(const char_t *name, OsTaskCode taskCode,
   void *param, size_t stackSize, int_t priority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
   portBASE_TYPE status;
   TaskHandle_t task = NULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]

   //Create a new task
   status = xTaskCreate((TaskFunction_t) taskCode, name, stackSize, param,
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	f107 0210 	add.w	r2, r7, #16
 8000fcc:	9201      	str	r2, [sp, #4]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	68f9      	ldr	r1, [r7, #12]
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f00d fa2d 	bl	800e436 <xTaskCreate>
 8000fdc:	6178      	str	r0, [r7, #20]
      priority, &task);

   //Check whether the task was successfully created
   if(status == pdPASS)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <osCreateTask+0x38>
      return task;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	e000      	b.n	8000fea <osCreateTask+0x3a>
   else
      return NULL;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ff6:	f00d ff97 	bl	800ef28 <xTaskGetSchedulerState>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d001      	beq.n	8001004 <osSuspendAllTasks+0x12>
   {
      //Suspend all tasks
      vTaskSuspendAll();
 8001000:	f00d fbe4 	bl	800e7cc <vTaskSuspendAll>
   }
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800100c:	f00d ff8c 	bl	800ef28 <xTaskGetSchedulerState>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d001      	beq.n	800101a <osResumeAllTasks+0x12>
   {
      //Resume all tasks
      xTaskResumeAll();
 8001016:	f00d fbe7 	bl	800e7e8 <xTaskResumeAll>
   }
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af02      	add	r7, sp, #8
 8001024:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinaryStatic(&event->buffer);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	2203      	movs	r2, #3
 800102c:	9200      	str	r2, [sp, #0]
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2001      	movs	r0, #1
 8001034:	f00c fc9c 	bl	800d970 <xQueueGenericCreateStatic>
 8001038:	4602      	mov	r2, r0
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	601a      	str	r2, [r3, #0]
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinary();
#endif

   //Check whether the returned handle is valid
   if(event->handle != NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <osCreateEvent+0x2c>
      return TRUE;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <osCreateEvent+0x2e>
   else
      return FALSE;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <osDeleteEvent>:
 * @brief Delete an event object
 * @param[in] event Pointer to the event object
 **/

void osDeleteEvent(OsEvent *event)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
   //Make sure the handle is valid
   if(event->handle != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d004      	beq.n	800106e <osDeleteEvent+0x1a>
   {
      //Properly dispose the event object
      vSemaphoreDelete(event->handle);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f00d f837 	bl	800e0dc <vQueueDelete>
   }
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   //Set the specified event to the signaled state
   xSemaphoreGive(event->handle);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	f00c fd90 	bl	800dbac <xQueueGenericSend>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
   portBASE_TYPE ret;

   //Wait until the specified event is in the signaled state
   if(timeout == INFINITE_DELAY)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a4:	d108      	bne.n	80010b8 <osWaitForEvent+0x24>
   {
      //Infinite timeout period
      ret = xSemaphoreTake(event->handle, portMAX_DELAY);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010ae:	4618      	mov	r0, r3
 80010b0:	f00c ff08 	bl	800dec4 <xQueueSemaphoreTake>
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	e006      	b.n	80010c6 <osWaitForEvent+0x32>
   }
   else
   {
      //Wait for the specified time interval
      ret = xSemaphoreTake(event->handle, OS_MS_TO_SYSTICKS(timeout));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f00c ff00 	bl	800dec4 <xQueueSemaphoreTake>
 80010c4:	60f8      	str	r0, [r7, #12]
   }

   //The return value tells whether the event is set
   return ret;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
   portBASE_TYPE flag = FALSE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]

   //Set the specified event to the signaled state
   xSemaphoreGiveFromISR(event->handle, &flag);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	4611      	mov	r1, r2
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00c fe5e 	bl	800dda8 <xQueueGiveFromISR>

   //A higher priority task has been woken?
   return flag;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutexStatic(&mutex->buffer);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3304      	adds	r3, #4
 8001102:	4619      	mov	r1, r3
 8001104:	2001      	movs	r0, #1
 8001106:	f00c fd36 	bl	800db76 <xQueueCreateMutexStatic>
 800110a:	4602      	mov	r2, r0
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	601a      	str	r2, [r3, #0]
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutex();
#endif

   //Check whether the returned handle is valid
   if(mutex->handle != NULL)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <osCreateMutex+0x26>
      return TRUE;
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <osCreateMutex+0x28>
   else
      return FALSE;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   //Obtain ownership of the mutex object
   xSemaphoreTake(mutex->handle, portMAX_DELAY);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001136:	4618      	mov	r0, r3
 8001138:	f00c fec4 	bl	800dec4 <xQueueSemaphoreTake>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
   //Release ownership of the mutex object
   xSemaphoreGive(mutex->handle);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	f00c fd29 	bl	800dbac <xQueueGenericSend>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
   systime_t time;

   //Get current tick count
   time = xTaskGetTickCount();
 8001168:	f00d fbda 	bl	800e920 <xTaskGetTickCount>
 800116c:	6078      	str	r0, [r7, #4]

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

void *osAllocMem(size_t size)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f00e fb41 	bl	800f808 <pvPortMalloc>
 8001186:	60f8      	str	r0, [r7, #12]

   //Debug message
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n", size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <osFreeMem>:
 * @brief Release a previously allocated memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void osFreeMem(void *p)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   //Make sure the pointer is valid
   if(p != NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <osFreeMem+0x14>
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f00e fbfd 	bl	800f9a0 <vPortFree>
   }
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <strSafeCopy>:
 * @param[in] destSize Size of the buffer allocated for the destination string
 * @return Error code
 **/

error_t strSafeCopy(char_t *dest, const char_t *src, size_t destSize)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
   size_t n;

   //Check parameters
   if(dest == NULL || src == NULL || destSize < 1)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <strSafeCopy+0x1e>
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <strSafeCopy+0x1e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <strSafeCopy+0x22>
      return ERROR_INVALID_PARAMETER;
 80011cc:	2302      	movs	r3, #2
 80011ce:	e015      	b.n	80011fc <strSafeCopy+0x4e>

   //Get the length of the source name
   n = osStrlen(src);
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7fe fffd 	bl	80001d0 <strlen>
 80011d6:	6178      	str	r0, [r7, #20]
   //Limit the number of characters to be copied
   n = MIN(n, destSize - 1);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4293      	cmp	r3, r2
 80011e0:	bf28      	it	cs
 80011e2:	4613      	movcs	r3, r2
 80011e4:	617b      	str	r3, [r7, #20]

   //Copy the string
   osStrncpy(dest, src, n);
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	f00f f9ea 	bl	80105c4 <strncpy>
   //Properly terminate the string with a NULL character
   dest[n] = '\0';
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <ethInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ethInit(NetInterface *interface)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
   //Clear the MAC filter table contents
   osMemset(interface->macAddrFilter, 0,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	33d4      	adds	r3, #212	; 0xd4
 8001210:	22f0      	movs	r2, #240	; 0xf0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00e fe9e 	bl	800ff56 <memset>
      sizeof(interface->macAddrFilter));

   //Successful initialization
   return NO_ERROR;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <ethProcessFrame>:
 *   the packet
 **/

void ethProcessFrame(NetInterface *interface, uint8_t *frame, size_t length,
   NetRxAncillary *ancillary)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
#if (ETH_VMAN_SUPPORT == ENABLED)
   uint16_t vmanId = 0;
#endif

   //Initialize status code
   error = NO_ERROR;
 8001232:	2300      	movs	r3, #0
 8001234:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Initialize variables
   type = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	83fb      	strh	r3, [r7, #30]
   data = NULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
   header = NULL;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

   //Start of exception handling block
   do
   {
      //Check whether the CRC is included in the received frame
      if(!interface->nicDriver->autoCrcStrip)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d10c      	bne.n	8001266 <ethProcessFrame+0x42>
      {
         //Perform CRC verification
         error = ethCheckCrc(interface, frame, length);
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 fc3f 	bl	8001ad4 <ethCheckCrc>
 8001256:	4603      	mov	r3, r0
 8001258:	84fb      	strh	r3, [r7, #38]	; 0x26
         //CRC error?
         if(error)
 800125a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800125c:	2b00      	cmp	r3, #0
 800125e:	d11c      	bne.n	800129a <ethProcessFrame+0x76>
            break;

         //Strip CRC field from Ethernet frame
         length -= ETH_CRC_SIZE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b04      	subs	r3, #4
 8001264:	607b      	str	r3, [r7, #4]
            break;
      }
#endif

      //Point to the beginning of the frame
      header = (EthHeader *) frame;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	617b      	str	r3, [r7, #20]
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInOctets, length);

      //Malformed Ethernet frame?
      if(length < sizeof(EthHeader))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0d      	cmp	r3, #13
 800126e:	d802      	bhi.n	8001276 <ethProcessFrame+0x52>
      {
         //Drop the received frame
         error = ERROR_INVALID_LENGTH;
 8001270:	23ec      	movs	r3, #236	; 0xec
 8001272:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 8001274:	e012      	b.n	800129c <ethProcessFrame+0x78>
      }

      //Debug message
      TRACE_DEBUG("Ethernet frame received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump Ethernet header contents for debugging purpose
      ethDumpHeader(header);
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f000 fa82 	bl	8001780 <ethDumpHeader>
#if defined(ETH_FRAME_FORWARD_HOOK)
      ETH_FRAME_FORWARD_HOOK(interface, header, length);
#endif

      //Retrieve the value of the EtherType field
      type = ntohs(header->type);
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	899b      	ldrh	r3, [r3, #12]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fdeb 	bl	8000e5e <swapInt16>
 8001288:	4603      	mov	r3, r0
 800128a:	83fb      	strh	r3, [r7, #30]

      //Point to the data payload
      data = header->data;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	330e      	adds	r3, #14
 8001290:	61bb      	str	r3, [r7, #24]
      //Calculate the length of the data payload
      length -= sizeof(EthHeader);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3b0e      	subs	r3, #14
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	e000      	b.n	800129c <ethProcessFrame+0x78>
            break;
 800129a:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Invalid frame received?
   if(error)
 800129c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <ethProcessFrame+0x8a>
   {
      //Update Ethernet statistics
      ethUpdateErrorStats(interface, error);
 80012a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012a4:	4619      	mov	r1, r3
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f000 fb16 	bl	80018d8 <ethUpdateErrorStats>
      //Drop the received frame
      return;
 80012ac:	e059      	b.n	8001362 <ethProcessFrame+0x13e>
   }
#endif

   //802.1Q allows a single physical interface to be bound to multiple
   //virtual interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
 80012b2:	e053      	b.n	800135c <ethProcessFrame+0x138>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f240 628c 	movw	r2, #1676	; 0x68c
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	33e0      	adds	r3, #224	; 0xe0
 80012c0:	4a29      	ldr	r2, [pc, #164]	; (8001368 <ethProcessFrame+0x144>)
 80012c2:	4413      	add	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]

      //Check whether the current virtual interface is attached to the
      //physical interface where the packet was received
      if(nicGetPhysicalInterface(virtualInterface) != interface)
 80012c6:	6938      	ldr	r0, [r7, #16]
 80012c8:	f002 f818 	bl	80032fc <nicGetPhysicalInterface>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d13f      	bne.n	8001354 <ethProcessFrame+0x130>
#endif
      {
         //The host must silently discards an incoming frame whose destination
         //address does not correspond to the physical interface through which
         //it was received
         error = ethCheckDestAddr(virtualInterface, &header->destAddr);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6938      	ldr	r0, [r7, #16]
 80012da:	f000 fa83 	bl	80017e4 <ethCheckDestAddr>
 80012de:	4603      	mov	r3, r0
 80012e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      //Valid destination address?
      if(!error)
 80012e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12b      	bne.n	8001340 <ethProcessFrame+0x11c>
      {
         //Save source and destination MAC addresses
         ancillary->srcMacAddr = header->srcAddr;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	3206      	adds	r2, #6
 80012f0:	6811      	ldr	r1, [r2, #0]
 80012f2:	6019      	str	r1, [r3, #0]
 80012f4:	8892      	ldrh	r2, [r2, #4]
 80012f6:	809a      	strh	r2, [r3, #4]
         ancillary->destMacAddr = header->destAddr;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	3307      	adds	r3, #7
 80012fe:	6811      	ldr	r1, [r2, #0]
 8001300:	6019      	str	r1, [r3, #0]
 8001302:	8892      	ldrh	r2, [r2, #4]
 8001304:	809a      	strh	r2, [r3, #4]

         //Update Ethernet statistics
         ethUpdateInStats(virtualInterface, &header->destAddr);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	4619      	mov	r1, r3
 800130a:	6938      	ldr	r0, [r7, #16]
 800130c:	f000 fabe 	bl	800188c <ethUpdateInStats>
         //Allow raw sockets to process Ethernet packets
         rawSocketProcessEthPacket(virtualInterface, header, data, length,
            ancillary);
#endif
         //Check Ethernet type field
         switch(type)
 8001310:	8bfb      	ldrh	r3, [r7, #30]
 8001312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001316:	d009      	beq.n	800132c <ethProcessFrame+0x108>
 8001318:	f640 0206 	movw	r2, #2054	; 0x806
 800131c:	4293      	cmp	r3, r2
 800131e:	d10c      	bne.n	800133a <ethProcessFrame+0x116>
         {
#if (IPV4_SUPPORT == ENABLED)
         //ARP packet received?
         case ETH_TYPE_ARP:
            //Process incoming ARP packet
            arpProcessPacket(virtualInterface, (ArpPacket *) data, length);
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	6938      	ldr	r0, [r7, #16]
 8001326:	f008 f81b 	bl	8009360 <arpProcessPacket>
            //Continue processing
            break;
 800132a:	e00a      	b.n	8001342 <ethProcessFrame+0x11e>

         //IPv4 packet received?
         case ETH_TYPE_IPV4:
            //Process incoming IPv4 packet
            ipv4ProcessPacket(virtualInterface, (Ipv4Header *) data, length,
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	69b9      	ldr	r1, [r7, #24]
 8001332:	6938      	ldr	r0, [r7, #16]
 8001334:	f008 feb1 	bl	800a09a <ipv4ProcessPacket>
               ancillary);
            //Continue processing
            break;
 8001338:	e003      	b.n	8001342 <ethProcessFrame+0x11e>
            break;
#endif
         //Unknown packet received?
         default:
            //Drop the received frame
            error = ERROR_INVALID_PROTOCOL;
 800133a:	23e2      	movs	r3, #226	; 0xe2
 800133c:	84fb      	strh	r3, [r7, #38]	; 0x26
            break;
 800133e:	e000      	b.n	8001342 <ethProcessFrame+0x11e>
         }
      }
 8001340:	bf00      	nop

      //Invalid frame received?
      if(error)
 8001342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <ethProcessFrame+0x132>
      {
         //Update Ethernet statistics
         ethUpdateErrorStats(virtualInterface, error);
 8001348:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800134a:	4619      	mov	r1, r3
 800134c:	6938      	ldr	r0, [r7, #16]
 800134e:	f000 fac3 	bl	80018d8 <ethUpdateErrorStats>
 8001352:	e000      	b.n	8001356 <ethProcessFrame+0x132>
         continue;
 8001354:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	3301      	adds	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0a8      	beq.n	80012b4 <ethProcessFrame+0x90>
      }
   }
}
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20009168 	.word	0x20009168

0800136c <ethSendFrame>:
 * @return Error code
 **/

error_t ethSendFrame(NetInterface *interface, const MacAddr *destAddr,
   uint16_t type, NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	80fb      	strh	r3, [r7, #6]
   }
#endif

   //If the source address is not specified, then use the MAC address of the
   //interface as source address
   if(macCompAddr(&ancillary->srcMacAddr, &MAC_UNSPECIFIED_ADDR))
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	330c      	adds	r3, #12
 8001380:	2206      	movs	r2, #6
 8001382:	4947      	ldr	r1, [pc, #284]	; (80014a0 <ethSendFrame+0x134>)
 8001384:	4618      	mov	r0, r3
 8001386:	f00e fdb0 	bl	800feea <memcmp>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d10c      	bne.n	80013aa <ethSendFrame+0x3e>
   {
      NetInterface *logicalInterface;

      //Point to the logical interface
      logicalInterface = nicGetLogicalInterface(interface);
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f001 ffa8 	bl	80032e6 <nicGetLogicalInterface>
 8001396:	6278      	str	r0, [r7, #36]	; 0x24
      //Get the MAC address of the interface
      ancillary->srcMacAddr = logicalInterface->macAddr;
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	330c      	adds	r3, #12
 800139e:	32cc      	adds	r2, #204	; 0xcc
 80013a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a4:	6018      	str	r0, [r3, #0]
 80013a6:	3304      	adds	r3, #4
 80013a8:	8019      	strh	r1, [r3, #0]
   }

   //Sanity check
   if(offset < sizeof(EthHeader))
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	2b0d      	cmp	r3, #13
 80013ae:	d801      	bhi.n	80013b4 <ethSendFrame+0x48>
      return ERROR_INVALID_PARAMETER;
 80013b0:	2302      	movs	r3, #2
 80013b2:	e070      	b.n	8001496 <ethSendFrame+0x12a>

   //Make room for the Ethernet header
   offset -= sizeof(EthHeader);
 80013b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b6:	3b0e      	subs	r3, #14
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
   //Calculate the length of the frame
   length = netBufferGetLength(buffer) - offset;
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f001 f877 	bl	80024ae <netBufferGetLength>
 80013c0:	4602      	mov	r2, r0
 80013c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	613b      	str	r3, [r7, #16]

   //Point to the beginning of the frame
   header = netBufferAt(buffer, offset);
 80013c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f001 f937 	bl	800263e <netBufferAt>
 80013d0:	6238      	str	r0, [r7, #32]

   //Format Ethernet header
   header->destAddr = *destAddr;
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	6811      	ldr	r1, [r2, #0]
 80013d8:	6019      	str	r1, [r3, #0]
 80013da:	8892      	ldrh	r2, [r2, #4]
 80013dc:	809a      	strh	r2, [r3, #4]
   header->srcAddr = ancillary->srcMacAddr;
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e2:	3306      	adds	r3, #6
 80013e4:	320c      	adds	r2, #12
 80013e6:	6810      	ldr	r0, [r2, #0]
 80013e8:	6018      	str	r0, [r3, #0]
 80013ea:	8892      	ldrh	r2, [r2, #4]
 80013ec:	809a      	strh	r2, [r3, #4]
   header->type = htons(type);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd34 	bl	8000e5e <swapInt16>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	819a      	strh	r2, [r3, #12]

   //Update Ethernet statistics
   ethUpdateOutStats(interface, &header->destAddr, length);
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4619      	mov	r1, r3
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fa53 	bl	80018b0 <ethUpdateOutStats>

   //Debug message
   TRACE_DEBUG("Sending Ethernet frame (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump Ethernet header contents for debugging purpose
   ethDumpHeader(header);
 800140a:	6a38      	ldr	r0, [r7, #32]
 800140c:	f000 f9b8 	bl	8001780 <ethDumpHeader>
      TRACE_DEBUG("  Switch Port = %" PRIu8 "\r\n", ancillary->port);
   }
#endif

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f001 ff73 	bl	80032fc <nicGetPhysicalInterface>
 8001416:	61f8      	str	r0, [r7, #28]
      length = netBufferGetLength(buffer) - offset;
   }
#endif

   //Valid NIC driver?
   if(physicalInterface->nicDriver != NULL)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	2b00      	cmp	r3, #0
 800141e:	d031      	beq.n	8001484 <ethSendFrame+0x118>
   {
      //Automatic padding not supported by hardware?
      if(!physicalInterface->nicDriver->autoPadding)
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <ethSendFrame+0xd8>
      {
         //The host controller should manually add padding to the packet before
         //transmitting it
         error = ethPadFrame(buffer, &length);
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f000 f9af 	bl	8001794 <ethPadFrame>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <ethSendFrame+0xd8>
            return error;
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	e028      	b.n	8001496 <ethSendFrame+0x12a>
      }

      //CRC calculation not supported by hardware?
      if(!physicalInterface->nicDriver->autoCrcCalc)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11a      	bne.n	8001484 <ethSendFrame+0x118>
      {
         //Compute CRC over the header and payload
         crc = ethCalcCrcEx(buffer, offset, length);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	461a      	mov	r2, r3
 8001452:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001454:	6838      	ldr	r0, [r7, #0]
 8001456:	f000 fac3 	bl	80019e0 <ethCalcCrcEx>
 800145a:	4603      	mov	r3, r0
 800145c:	617b      	str	r3, [r7, #20]
         //Convert from host byte order to little-endian byte order
         crc = htole32(crc);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	617b      	str	r3, [r7, #20]

         //Append the calculated CRC value
         error = netBufferAppend(buffer, &crc, sizeof(crc));
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2204      	movs	r2, #4
 8001468:	4619      	mov	r1, r3
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f001 fa7f 	bl	800296e <netBufferAppend>
 8001470:	4603      	mov	r3, r0
 8001472:	837b      	strh	r3, [r7, #26]
         //Any error to report?
         if(error)
 8001474:	8b7b      	ldrh	r3, [r7, #26]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <ethSendFrame+0x112>
            return error;
 800147a:	8b7b      	ldrh	r3, [r7, #26]
 800147c:	e00b      	b.n	8001496 <ethSendFrame+0x12a>

         //Adjust the length of the frame
         length += sizeof(crc);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3304      	adds	r3, #4
 8001482:	613b      	str	r3, [r7, #16]
      }
   }

   //Forward the frame to the physical interface
   error = nicSendPacket(physicalInterface, buffer, offset, ancillary);
 8001484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	69f8      	ldr	r0, [r7, #28]
 800148c:	f001 ff7e 	bl	800338c <nicSendPacket>
 8001490:	4603      	mov	r3, r0
 8001492:	837b      	strh	r3, [r7, #26]

   //Return status code
   return error;
 8001494:	8b7b      	ldrh	r3, [r7, #26]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	08011750 	.word	0x08011750

080014a4 <ethAcceptMacAddr>:
 * @param[in] macAddr MAC address to accept
 * @return Error code
 **/

error_t ethAcceptMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   MacFilterEntry *firstFreeEntry;

   //Keep track of the first free entry
   firstFreeEntry = NULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e025      	b.n	8001504 <ethAcceptMacAddr+0x60>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	33d0      	adds	r3, #208	; 0xd0
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	3304      	adds	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]

      //Valid entry?
      if(entry->refCount > 0)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00f      	beq.n	80014f4 <ethAcceptMacAddr+0x50>
      {
         //Check whether the table already contains the specified MAC address
         if(macCompAddr(&entry->addr, macAddr))
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2206      	movs	r2, #6
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f00e fd05 	bl	800feea <memcmp>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10b      	bne.n	80014fe <ethAcceptMacAddr+0x5a>
         {
            //Increment the reference count
            entry->refCount++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	609a      	str	r2, [r3, #8]
            //No error to report
            return NO_ERROR;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e025      	b.n	8001540 <ethAcceptMacAddr+0x9c>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <ethAcceptMacAddr+0x5a>
            firstFreeEntry = entry;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	613b      	str	r3, [r7, #16]
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b0b      	cmp	r3, #11
 8001508:	d9d6      	bls.n	80014b8 <ethAcceptMacAddr+0x14>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <ethAcceptMacAddr+0x70>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 8001510:	2301      	movs	r3, #1
 8001512:	e015      	b.n	8001540 <ethAcceptMacAddr+0x9c>
   }

   //Add a new entry to the table
   firstFreeEntry->addr = *macAddr;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	6810      	ldr	r0, [r2, #0]
 800151a:	6018      	str	r0, [r3, #0]
 800151c:	8892      	ldrh	r2, [r2, #4]
 800151e:	809a      	strh	r2, [r3, #4]
   //Initialize the reference count
   firstFreeEntry->refCount = 1;
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	2201      	movs	r2, #1
 8001524:	609a      	str	r2, [r3, #8]

   //Force the network interface controller to add the current
   //entry to its MAC filter table
   firstFreeEntry->addFlag = TRUE;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	2201      	movs	r2, #1
 800152a:	60da      	str	r2, [r3, #12]
   firstFreeEntry->deleteFlag = FALSE;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]

   //Update the MAC filter table
   nicUpdateMacAddrFilter(interface);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f001 ff80 	bl	8003438 <nicUpdateMacAddrFilter>

   //Clear the flag
   firstFreeEntry->addFlag = FALSE;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]

   //No error to report
   return NO_ERROR;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <ethDropMacAddr>:
 * @param[in] macAddr MAC address to drop
 * @return Error code
 **/

error_t ethDropMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	e031      	b.n	80015bc <ethDropMacAddr+0x74>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	33d0      	adds	r3, #208	; 0xd0
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	3304      	adds	r3, #4
 800156a:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->refCount > 0)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d020      	beq.n	80015b6 <ethDropMacAddr+0x6e>
      {
         //Specified MAC address found?
         if(macCompAddr(&entry->addr, macAddr))
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2206      	movs	r2, #6
 8001578:	6839      	ldr	r1, [r7, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f00e fcb5 	bl	800feea <memcmp>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d117      	bne.n	80015b6 <ethDropMacAddr+0x6e>
         {
            //Decrement the reference count
            entry->refCount--;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	609a      	str	r2, [r3, #8]

            //Remove the entry if the reference count drops to zero
            if(entry->refCount == 0)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <ethDropMacAddr+0x6a>
            {
               //Force the network interface controller to remove the current
               //entry from its MAC filter table
               entry->deleteFlag = TRUE;
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2201      	movs	r2, #1
 800159c:	611a      	str	r2, [r3, #16]

               //Update the MAC filter table
               nicUpdateMacAddrFilter(interface);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f001 ff4a 	bl	8003438 <nicUpdateMacAddrFilter>

               //Clear the flag
               entry->deleteFlag = FALSE;
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
               //Remove the multicast address from the list
               entry->addr = MAC_UNSPECIFIED_ADDR;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	809a      	strh	r2, [r3, #4]
            }

            //No error to report
            return NO_ERROR;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e007      	b.n	80015c6 <ethDropMacAddr+0x7e>
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3301      	adds	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2b0b      	cmp	r3, #11
 80015c0:	d9ca      	bls.n	8001558 <ethDropMacAddr+0x10>
         }
      }
   }

   //The specified MAC address does not exist
   return ERROR_ADDRESS_NOT_FOUND;
 80015c2:	f44f 730a 	mov.w	r3, #552	; 0x228
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <ethAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ethAllocBuffer(size_t length, size_t *offset)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
   size_t n;
   NetBuffer *buffer;

   //Ethernet frame overhead
   n = sizeof(EthHeader);
 80015d8:	230e      	movs	r3, #14
 80015da:	60fb      	str	r3, [r7, #12]
   //Switch port tagging overhead
   n += ETH_PORT_TAG_SIZE;
#endif

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + n);
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 ff21 	bl	800242a <netBufferAlloc>
 80015e8:	60b8      	str	r0, [r7, #8]
   //Failed to allocate buffer?
   if(buffer == NULL)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <ethAllocBuffer+0x26>
      return NULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e003      	b.n	80015fc <ethAllocBuffer+0x2e>

   //Offset to the first byte of the payload
   *offset = n;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 80015fa:	68bb      	ldr	r3, [r7, #8]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <macStringToAddr>:
 * @param[out] macAddr Binary representation of the MAC address
 * @return Error code
 **/

error_t macStringToAddr(const char_t *str, MacAddr *macAddr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001616:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Hexadecimal digit found?
      if(isxdigit((uint8_t) *str))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	4a3f      	ldr	r2, [pc, #252]	; (800171c <macStringToAddr+0x118>)
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001628:	2b00      	cmp	r3, #0
 800162a:	d035      	beq.n	8001698 <macStringToAddr+0x94>
      {
         //First digit to be decoded?
         if(value < 0)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	da01      	bge.n	8001636 <macStringToAddr+0x32>
            value = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         if(osIsdigit(*str))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a37      	ldr	r2, [pc, #220]	; (800171c <macStringToAddr+0x118>)
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <macStringToAddr+0x56>
         {
            value = (value * 16) + (*str - '0');
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	011a      	lsls	r2, r3, #4
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	3b30      	subs	r3, #48	; 0x30
 8001654:	4413      	add	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	e018      	b.n	800168c <macStringToAddr+0x88>
         }
         else if(osIsupper(*str))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <macStringToAddr+0x118>)
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b01      	cmp	r3, #1
 800166c:	d107      	bne.n	800167e <macStringToAddr+0x7a>
         {
            value = (value * 16) + (*str - 'A' + 10);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	011a      	lsls	r2, r3, #4
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3b37      	subs	r3, #55	; 0x37
 8001678:	4413      	add	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e006      	b.n	800168c <macStringToAddr+0x88>
         }
         else
         {
            value = (value * 16) + (*str - 'a' + 10);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	011a      	lsls	r2, r3, #4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3b57      	subs	r3, #87	; 0x57
 8001688:	4413      	add	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
         }

         //Check resulting value
         if(value > 0xFF)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2bff      	cmp	r3, #255	; 0xff
 8001690:	dd38      	ble.n	8001704 <macStringToAddr+0x100>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 8001692:	2369      	movs	r3, #105	; 0x69
 8001694:	82fb      	strh	r3, [r7, #22]
            break;
 8001696:	e039      	b.n	800170c <macStringToAddr+0x108>
         }
      }
      //Dash or colon separator found?
      else if((*str == '-' || *str == ':') && i < 6)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b2d      	cmp	r3, #45	; 0x2d
 800169e:	d003      	beq.n	80016a8 <macStringToAddr+0xa4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b3a      	cmp	r3, #58	; 0x3a
 80016a6:	d113      	bne.n	80016d0 <macStringToAddr+0xcc>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b05      	cmp	r3, #5
 80016ac:	dc10      	bgt.n	80016d0 <macStringToAddr+0xcc>
      {
         //Each separator must be preceded by a valid number
         if(value < 0)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	da02      	bge.n	80016ba <macStringToAddr+0xb6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 80016b4:	2369      	movs	r3, #105	; 0x69
 80016b6:	82fb      	strh	r3, [r7, #22]
            break;
 80016b8:	e028      	b.n	800170c <macStringToAddr+0x108>
         }

         //Save the current byte
         macAddr->b[i++] = value;
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	613a      	str	r2, [r7, #16]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	b2d1      	uxtb	r1, r2
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	54d1      	strb	r1, [r2, r3]
         //Prepare to decode the next byte
         value = -1;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e019      	b.n	8001704 <macStringToAddr+0x100>
      }
      //End of string detected?
      else if(*str == '\0' && i == 5)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d112      	bne.n	80016fe <macStringToAddr+0xfa>
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10f      	bne.n	80016fe <macStringToAddr+0xfa>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da02      	bge.n	80016ea <macStringToAddr+0xe6>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 80016e4:	2369      	movs	r3, #105	; 0x69
 80016e6:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 80016e8:	e010      	b.n	800170c <macStringToAddr+0x108>
            macAddr->b[i] = value;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	b2d9      	uxtb	r1, r3
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4413      	add	r3, r2
 80016f4:	460a      	mov	r2, r1
 80016f6:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 80016f8:	2300      	movs	r3, #0
 80016fa:	82fb      	strh	r3, [r7, #22]
         break;
 80016fc:	e006      	b.n	800170c <macStringToAddr+0x108>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 80016fe:	2369      	movs	r3, #105	; 0x69
 8001700:	82fb      	strh	r3, [r7, #22]
         break;
 8001702:	e003      	b.n	800170c <macStringToAddr+0x108>
      }

      //Point to the next character
      str++;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3301      	adds	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
      if(isxdigit((uint8_t) *str))
 800170a:	e785      	b.n	8001618 <macStringToAddr+0x14>
   }

   //Return status code
   return error;
 800170c:	8afb      	ldrh	r3, [r7, #22]
}
 800170e:	4618      	mov	r0, r3
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	08011834 	.word	0x08011834

08001720 <macAddrToEui64>:
 * @param[in] macAddr Host MAC address
 * @param[out] interfaceId IPv6 modified EUI-64 identifier
 **/

void macAddrToEui64(const MacAddr *macAddr, Eui64 *interfaceId)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
   //Copy the Organization Unique Identifier (OUI)
   interfaceId->b[0] = macAddr->b[0];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	701a      	strb	r2, [r3, #0]
   interfaceId->b[1] = macAddr->b[1];
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	785a      	ldrb	r2, [r3, #1]
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	705a      	strb	r2, [r3, #1]
   interfaceId->b[2] = macAddr->b[2];
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	789a      	ldrb	r2, [r3, #2]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	709a      	strb	r2, [r3, #2]

   //The middle 16 bits are given the value 0xFFFE
   interfaceId->b[3] = 0xFF;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	22ff      	movs	r2, #255	; 0xff
 8001746:	70da      	strb	r2, [r3, #3]
   interfaceId->b[4] = 0xFE;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	22fe      	movs	r2, #254	; 0xfe
 800174c:	711a      	strb	r2, [r3, #4]

   //Copy the right-most 24 bits of the MAC address
   interfaceId->b[5] = macAddr->b[3];
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	78da      	ldrb	r2, [r3, #3]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	715a      	strb	r2, [r3, #5]
   interfaceId->b[6] = macAddr->b[4];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	791a      	ldrb	r2, [r3, #4]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	719a      	strb	r2, [r3, #6]
   interfaceId->b[7] = macAddr->b[5];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	795a      	ldrb	r2, [r3, #5]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	71da      	strb	r2, [r3, #7]

   //Modified EUI-64 format interface identifiers are
   //formed by inverting the Universal/Local bit
   interfaceId->b[0] ^= MAC_ADDR_FLAG_LOCAL;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f083 0302 	eor.w	r3, r3, #2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	701a      	strb	r2, [r3, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <ethDumpHeader>:
 * @brief Dump Ethernet header for debugging purpose
 * @param[in] ethHeader Pointer to the Ethernet header
 **/

void ethDumpHeader(const EthHeader *ethHeader)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
   //Dump Ethernet header contents
   TRACE_DEBUG("  Dest Addr = %s\r\n", macAddrToString(&ethHeader->destAddr, NULL));
   TRACE_DEBUG("  Src Addr = %s\r\n", macAddrToString(&ethHeader->srcAddr, NULL));
   TRACE_DEBUG("  Type = 0x%04" PRIX16 "\r\n", ntohs(ethHeader->type));
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <ethPadFrame>:
 * @param[in,out] length Length of the Ethernet frame, in bytes
 * @return Error code
 **/

error_t ethPadFrame(NetBuffer *buffer, size_t *length)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
   error_t error;
   size_t n;

   //Ethernet frames have a minimum length of 64 byte
   if(*length < (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b3b      	cmp	r3, #59	; 0x3b
 80017a4:	d815      	bhi.n	80017d2 <ethPadFrame+0x3e>
   {
      //Add padding as necessary
      n = (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE) - *length;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80017ae:	60bb      	str	r3, [r7, #8]

      //Append padding bytes
      error = netBufferAppend(buffer, ethPadding, n);
 80017b0:	68ba      	ldr	r2, [r7, #8]
 80017b2:	490b      	ldr	r1, [pc, #44]	; (80017e0 <ethPadFrame+0x4c>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f001 f8da 	bl	800296e <netBufferAppend>
 80017ba:	4603      	mov	r3, r0
 80017bc:	81fb      	strh	r3, [r7, #14]

      //Check status code
      if(!error)
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d108      	bne.n	80017d6 <ethPadFrame+0x42>
      {
         //Adjust frame length
         *length += n;
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	441a      	add	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	e001      	b.n	80017d6 <ethPadFrame+0x42>
      }
   }
   else
   {
      //No padding needed
      error = NO_ERROR;
 80017d2:	2300      	movs	r3, #0
 80017d4:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 80017d6:	89fb      	ldrh	r3, [r7, #14]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	08011760 	.word	0x08011760

080017e4 <ethCheckDestAddr>:
 * @param[in] macAddr Destination MAC address to be checked
 * @return Error code
 **/

error_t ethCheckDestAddr(NetInterface *interface, const MacAddr *macAddr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
   uint_t i;
   MacFilterEntry *entry;
   NetInterface *logicalInterface;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 80017ee:	23e4      	movs	r3, #228	; 0xe4
 80017f0:	82fb      	strh	r3, [r7, #22]

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f001 fd77 	bl	80032e6 <nicGetLogicalInterface>
 80017f8:	60f8      	str	r0, [r7, #12]

   //Interface MAC address?
   if(macCompAddr(macAddr, &logicalInterface->macAddr))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	33cc      	adds	r3, #204	; 0xcc
 80017fe:	2206      	movs	r2, #6
 8001800:	4619      	mov	r1, r3
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f00e fb71 	bl	800feea <memcmp>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <ethCheckDestAddr+0x30>
   {
      error = NO_ERROR;
 800180e:	2300      	movs	r3, #0
 8001810:	82fb      	strh	r3, [r7, #22]
 8001812:	e033      	b.n	800187c <ethCheckDestAddr+0x98>
   }
   //Broadcast address?
   else if(macCompAddr(macAddr, &MAC_BROADCAST_ADDR))
 8001814:	2206      	movs	r2, #6
 8001816:	491c      	ldr	r1, [pc, #112]	; (8001888 <ethCheckDestAddr+0xa4>)
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f00e fb66 	bl	800feea <memcmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <ethCheckDestAddr+0x46>
   {
      error = NO_ERROR;
 8001824:	2300      	movs	r3, #0
 8001826:	82fb      	strh	r3, [r7, #22]
 8001828:	e028      	b.n	800187c <ethCheckDestAddr+0x98>
   }
   //Multicast address?
   else if(macIsMulticastAddr(macAddr))
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d022      	beq.n	800187c <ethCheckDestAddr+0x98>
      }
      else
#endif
      {
         //Go through the MAC filter table
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	e01c      	b.n	8001876 <ethCheckDestAddr+0x92>
         {
            //Point to the current entry
            entry = &interface->macAddrFilter[i];
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	33d0      	adds	r3, #208	; 0xd0
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	4413      	add	r3, r2
 800184c:	3304      	adds	r3, #4
 800184e:	60bb      	str	r3, [r7, #8]

            //Valid entry?
            if(entry->refCount > 0)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00b      	beq.n	8001870 <ethCheckDestAddr+0x8c>
            {
               //Check whether the destination MAC address matches
               //a relevant multicast address
               if(macCompAddr(&entry->addr, macAddr))
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2206      	movs	r2, #6
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f00e fb43 	bl	800feea <memcmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <ethCheckDestAddr+0x8c>
               {
                  //The MAC address is acceptable
                  error = NO_ERROR;
 800186a:	2300      	movs	r3, #0
 800186c:	82fb      	strh	r3, [r7, #22]
                  //Stop immediately
                  break;
 800186e:	e005      	b.n	800187c <ethCheckDestAddr+0x98>
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	3301      	adds	r3, #1
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	2b0b      	cmp	r3, #11
 800187a:	d9df      	bls.n	800183c <ethCheckDestAddr+0x58>
         }
      }
   }

   //Return status code
   return error;
 800187c:	8afb      	ldrh	r3, [r7, #22]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08011758 	.word	0x08011758

0800188c <ethUpdateInStats>:
 * @param[in] interface Underlying network interface
 * @param[in] destMacAddr Destination MAC address
 **/

void ethUpdateInStats(NetInterface *interface, const MacAddr *destMacAddr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 8001896:	2206      	movs	r2, #6
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <ethUpdateInStats+0x20>)
 800189a:	6838      	ldr	r0, [r7, #0]
 800189c:	f00e fb25 	bl	800feea <memcmp>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
      //Number of unicast packets delivered to a higher-layer protocol
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInUcastPkts, 1);
   }
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	08011758 	.word	0x08011758

080018b0 <ethUpdateOutStats>:
 * @param[in] length Length of the Ethernet frame, in bytes
 **/

void ethUpdateOutStats(NetInterface *interface, const MacAddr *destMacAddr,
   size_t length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
   MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutOctets, length);
   IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutOctets, length);

   //Check whether the destination address is a unicast, broadcast or multicast address
   if(macCompAddr(destMacAddr, &MAC_BROADCAST_ADDR))
 80018bc:	2206      	movs	r2, #6
 80018be:	4905      	ldr	r1, [pc, #20]	; (80018d4 <ethUpdateOutStats+0x24>)
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f00e fb12 	bl	800feea <memcmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
      //Number of unicast packets that higher-level protocols requested be transmitted
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutUcastPkts, 1);
   }
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08011758 	.word	0x08011758

080018d8 <ethUpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ethUpdateErrorStats(NetInterface *interface, error_t error)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	3bd5      	subs	r3, #213	; 0xd5
 80018e8:	2b17      	cmp	r3, #23
 80018ea:	d833      	bhi.n	8001954 <ethUpdateErrorStats+0x7c>
 80018ec:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <ethUpdateErrorStats+0x1c>)
 80018ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f2:	bf00      	nop
 80018f4:	08001955 	.word	0x08001955
 80018f8:	08001955 	.word	0x08001955
 80018fc:	08001955 	.word	0x08001955
 8001900:	08001955 	.word	0x08001955
 8001904:	08001955 	.word	0x08001955
 8001908:	08001955 	.word	0x08001955
 800190c:	08001955 	.word	0x08001955
 8001910:	08001955 	.word	0x08001955
 8001914:	08001955 	.word	0x08001955
 8001918:	08001955 	.word	0x08001955
 800191c:	08001955 	.word	0x08001955
 8001920:	08001955 	.word	0x08001955
 8001924:	08001955 	.word	0x08001955
 8001928:	08001955 	.word	0x08001955
 800192c:	08001955 	.word	0x08001955
 8001930:	08001955 	.word	0x08001955
 8001934:	08001955 	.word	0x08001955
 8001938:	08001955 	.word	0x08001955
 800193c:	08001955 	.word	0x08001955
 8001940:	08001955 	.word	0x08001955
 8001944:	08001955 	.word	0x08001955
 8001948:	08001955 	.word	0x08001955
 800194c:	08001955 	.word	0x08001955
 8001950:	08001955 	.word	0x08001955
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInUnknownProtos, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUnknownProtos, 1);
      break;
   default:
      //Just for sanity
      break;
 8001954:	bf00      	nop
   }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop

08001964 <ethCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrc(const void *data, size_t length)
{
 8001964:	b480      	push	{r7}
 8001966:	b087      	sub	sp, #28
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
#else
   uint_t i;
   uint_t j;

   //Point to the data over which to calculate the CRC
   const uint8_t *p = (uint8_t *) data;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   uint32_t crc = 0xFFFFFFFF;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001976:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e021      	b.n	80019c2 <ethCalcCrc+0x5e>
   {
      //Update CRC value
      crc ^= p[i];
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4053      	eors	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e010      	b.n	80019b6 <ethCalcCrc+0x52>
      {
         if(crc & 0x00000001)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <ethCalcCrc+0x46>
            crc = (crc >> 1) ^ 0xEDB88320;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	085a      	lsrs	r2, r3, #1
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <ethCalcCrc+0x78>)
 80019a4:	4053      	eors	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e002      	b.n	80019b0 <ethCalcCrc+0x4c>
         else
            crc = crc >> 1;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	3301      	adds	r3, #1
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d9eb      	bls.n	8001994 <ethCalcCrc+0x30>
   for(i = 0; i < length; i++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3d9      	bcc.n	800197e <ethCalcCrc+0x1a>
      }
   }

   //Return 1's complement value
   return ~crc;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
#endif
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	edb88320 	.word	0xedb88320

080019e0 <ethCalcCrcEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrcEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b08b      	sub	sp, #44	; 0x2c
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
#if (ETH_FAST_CRC_SUPPORT == DISABLED)
   uint_t k;
#endif

   //CRC preset value
   crc = 0xFFFFFFFF;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f0:	61fb      	str	r3, [r7, #28]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	e05a      	b.n	8001aae <ethCalcCrcEx+0xce>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	3301      	adds	r3, #1
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	889b      	ldrh	r3, [r3, #4]
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d243      	bcs.n	8001a94 <ethCalcCrcEx+0xb4>
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	3201      	adds	r2, #1
 8001a12:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4413      	add	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	3301      	adds	r3, #1
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	889b      	ldrh	r3, [r3, #4]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf28      	it	cs
 8001a34:	4613      	movcs	r3, r2
 8001a36:	623b      	str	r3, [r7, #32]
         //Adjust byte counter
         length -= n;
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	607b      	str	r3, [r7, #4]

         //Process current chunk
         while(n > 0)
 8001a40:	e022      	b.n	8001a88 <ethCalcCrcEx+0xa8>
#if (ETH_FAST_CRC_SUPPORT == ENABLED)
            //The message is processed byte by byte
            crc = (crc >> 8) ^ crc32Table[(crc & 0xFF) ^ *p];
#else
            //Update CRC value
            crc ^= *p;
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	461a      	mov	r2, r3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	4053      	eors	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]

            //The message is processed bit by bit
            for(k = 0; k < 8; k++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e010      	b.n	8001a76 <ethCalcCrcEx+0x96>
            {
               if(crc & 0x00000001)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <ethCalcCrcEx+0x8a>
                  crc = (crc >> 1) ^ 0xEDB88320;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	085a      	lsrs	r2, r3, #1
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <ethCalcCrcEx+0xf0>)
 8001a64:	4053      	eors	r3, r2
 8001a66:	61fb      	str	r3, [r7, #28]
 8001a68:	e002      	b.n	8001a70 <ethCalcCrcEx+0x90>
               else
                  crc = crc >> 1;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	085b      	lsrs	r3, r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
            for(k = 0; k < 8; k++)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	3301      	adds	r3, #1
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	d9eb      	bls.n	8001a54 <ethCalcCrcEx+0x74>
            }
#endif
            //Next byte
            p++;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	61bb      	str	r3, [r7, #24]
            n--;
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	623b      	str	r3, [r7, #32]
         while(n > 0)
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1d9      	bne.n	8001a42 <ethCalcCrcEx+0x62>
         }

         //Process the next block from the start
         offset = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	e009      	b.n	8001aa8 <ethCalcCrcEx+0xc8>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	889b      	ldrh	r3, [r3, #4]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	3301      	adds	r3, #1
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d202      	bcs.n	8001abe <ethCalcCrcEx+0xde>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d19c      	bne.n	80019f8 <ethCalcCrcEx+0x18>
      }
   }

   //Return 1's complement value
   return ~crc;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	43db      	mvns	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	372c      	adds	r7, #44	; 0x2c
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	edb88320 	.word	0xedb88320

08001ad4 <ethCheckCrc>:
 * @return Error code
 **/

error_t ethCheckCrc(NetInterface *interface, const uint8_t *frame,
   size_t length)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
   uint32_t crc;

   //Malformed Ethernet frame?
   if(length < (sizeof(EthHeader) + ETH_CRC_SIZE))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d801      	bhi.n	8001aea <ethCheckCrc+0x16>
   {
      //Drop the received frame
      return ERROR_INVALID_LENGTH;
 8001ae6:	23ec      	movs	r3, #236	; 0xec
 8001ae8:	e035      	b.n	8001b56 <ethCheckCrc+0x82>
   }

   //CRC verification not supported by hardware?
   if(!interface->nicDriver->autoCrcVerif)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d109      	bne.n	8001b08 <ethCheckCrc+0x34>
   {
      //The value of the residue is 0x2144DF1C when no CRC errors
      //are detected
      if(ethCalcCrc(frame, length) != 0x2144DF1C)
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68b8      	ldr	r0, [r7, #8]
 8001af8:	f7ff ff34 	bl	8001964 <ethCalcCrc>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a18      	ldr	r2, [pc, #96]	; (8001b60 <ethCheckCrc+0x8c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d001      	beq.n	8001b08 <ethCheckCrc+0x34>
      {
         //Drop the received frame
         return ERROR_WRONG_CHECKSUM;
 8001b04:	23d5      	movs	r3, #213	; 0xd5
 8001b06:	e026      	b.n	8001b56 <ethCheckCrc+0x82>
      }
   }

   //Retrieve CRC value
   crc = LOAD32BE(frame + length - ETH_CRC_SIZE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	061a      	lsls	r2, r3, #24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b04      	subs	r3, #4
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	041b      	lsls	r3, r3, #16
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b04      	subs	r3, #4
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4313      	orrs	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	3a04      	subs	r2, #4
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	440a      	add	r2, r1
 8001b3c:	3203      	adds	r2, #3
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	617b      	str	r3, [r7, #20]

   //Gather entropy
   netContext.entropy += crc;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <ethCheckCrc+0x90>)
 8001b46:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <ethCheckCrc+0x90>)
 8001b50:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Successful CRC verification
   return NO_ERROR;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2144df1c 	.word	0x2144df1c
 8001b64:	20009168 	.word	0x20009168

08001b68 <ipSendDatagram>:
 * @return Error code
 **/

error_t ipSendDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d10b      	bne.n	8001b96 <ipSendDatagram+0x2e>
   {
      //Form an IPv4 packet and send it
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data, buffer,
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1d19      	adds	r1, r3, #4
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f008 fbd2 	bl	800a334 <ipv4SendDatagram>
 8001b90:	4603      	mov	r3, r0
 8001b92:	82fb      	strh	r3, [r7, #22]
 8001b94:	e001      	b.n	8001b9a <ipSendDatagram+0x32>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 8001b96:	23e4      	movs	r3, #228	; 0xe4
 8001b98:	82fb      	strh	r3, [r7, #22]
   }

   //Return status code
   return error;
 8001b9a:	8afb      	ldrh	r3, [r7, #22]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
   uint32_t temp;
   uint32_t checksum;
   const uint8_t *p;

   //Checksum preset value
   checksum = 0x0000;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	613b      	str	r3, [r7, #16]

   //Pointer not aligned on a 16-bit boundary?
   if(((uintptr_t) p & 1) != 0)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <ipCalcChecksum+0x3a>
   {
      if(length >= 1)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <ipCalcChecksum+0x3a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	021b      	lsls	r3, r3, #8
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length--;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uintptr_t) p & 2) != 0)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d024      	beq.n	8001c32 <ipCalcChecksum+0x8e>
   {
      if(length >= 2)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d921      	bls.n	8001c32 <ipCalcChecksum+0x8e>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

         //Restore the alignment on 32-bit boundaries
         p += 2;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	613b      	str	r3, [r7, #16]
         //Number of bytes left to process
         length -= 2;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	3b02      	subs	r3, #2
 8001c04:	603b      	str	r3, [r7, #0]
      }
   }

   //Process the data 4 bytes at a time
   while(length >= 4)
 8001c06:	e014      	b.n	8001c32 <ipCalcChecksum+0x8e>
   {
      //Update checksum value
      temp = checksum + *((uint32_t *) p);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4413      	add	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

      //Add carry bit, if any
      if(temp < checksum)
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d203      	bcs.n	8001c22 <ipCalcChecksum+0x7e>
      {
         checksum = temp + 1;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e001      	b.n	8001c26 <ipCalcChecksum+0x82>
      }
      else
      {
         checksum = temp;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	617b      	str	r3, [r7, #20]
      }

      //Point to the next 32-bit word
      p += 4;
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 4;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	603b      	str	r3, [r7, #0]
   while(length >= 4)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d8e7      	bhi.n	8001c08 <ipCalcChecksum+0x64>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

   //Add left-over 16-bit word, if any
   if(length >= 2)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d90b      	bls.n	8001c62 <ipCalcChecksum+0xbe>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	4413      	add	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]

      //Point to the next byte
      p += 2;
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3302      	adds	r3, #2
 8001c5a:	613b      	str	r3, [r7, #16]
      //Number of bytes left to process
      length -= 2;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	3b02      	subs	r3, #2
 8001c60:	603b      	str	r3, [r7, #0]
   }

   //Add left-over byte, if any
   if(length >= 1)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <ipCalcChecksum+0xd0>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	4413      	add	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

   //Restore checksum endianness
   if(((uintptr_t) data & 1) != 0)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <ipCalcChecksum+0x100>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	0a1a      	lsrs	r2, r3, #8
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	617b      	str	r3, [r7, #20]
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	b29b      	uxth	r3, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	371c      	adds	r7, #28
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]

   //Current position in the multi-part buffer
   pos = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	e060      	b.n	8001d94 <ipCalcChecksumEx+0xdc>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	889b      	ldrh	r3, [r3, #4]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d249      	bcs.n	8001d7a <ipCalcChecksumEx+0xc2>
      {
         //Point to the first data byte
         data = (uint8_t *) buffer->chunk[i].address + offset;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	3201      	adds	r2, #1
 8001cec:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]

         //Number of bytes available in the current chunk
         n = buffer->chunk[i].length - offset;
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
         //Limit the number of byte to process
         n = MIN(n, length - pos);
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4293      	cmp	r3, r2
 8001d14:	bf28      	it	cs
 8001d16:	4613      	movcs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]

         //Take care of alignment issues
         if((pos & 1) != 0)
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <ipCalcChecksumEx+0x7a>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	0a1a      	lsrs	r2, r3, #8
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	61fb      	str	r3, [r7, #28]
         }

         //Process data chunk
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	69b8      	ldr	r0, [r7, #24]
 8001d36:	f7ff ff35 	bl	8001ba4 <ipCalcChecksum>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	61fb      	str	r3, [r7, #28]
         //Fold 32-bit sum to 16 bits
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	0c1b      	lsrs	r3, r3, #16
 8001d50:	4413      	add	r3, r2
 8001d52:	61fb      	str	r3, [r7, #28]

         //Restore checksum endianness
         if((pos & 1) != 0)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d006      	beq.n	8001d6c <ipCalcChecksumEx+0xb4>
         {
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	0a1a      	lsrs	r2, r3, #8
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	61fb      	str	r3, [r7, #28]
         }

         //Advance current position
         pos += n;
 8001d6c:	6a3a      	ldr	r2, [r7, #32]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4413      	add	r3, r2
 8001d72:	623b      	str	r3, [r7, #32]
         //Process the next block from the start
         offset = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	e009      	b.n	8001d8e <ipCalcChecksumEx+0xd6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	3301      	adds	r3, #1
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	889b      	ldrh	r3, [r3, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	3301      	adds	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d203      	bcs.n	8001da6 <ipCalcChecksumEx+0xee>
 8001d9e:	6a3a      	ldr	r2, [r7, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d395      	bcc.n	8001cd2 <ipCalcChecksumEx+0x1a>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	b29b      	uxth	r3, r3
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	603b      	str	r3, [r7, #0]
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff feec 	bl	8001ba4 <ipCalcChecksum>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	617b      	str	r3, [r7, #20]
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8001dd4:	6a3a      	ldr	r2, [r7, #32]
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ff6d 	bl	8001cb8 <ipCalcChecksumEx>
 8001dde:	4603      	mov	r3, r0
 8001de0:	43db      	mvns	r3, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	461a      	mov	r2, r3
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	4413      	add	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	0c1b      	lsrs	r3, r3, #16
 8001df4:	4413      	add	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	b29b      	uxth	r3, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
#if (IPV6_SUPPORT == ENABLED)
   //Maximum overhead when using IPv6
   headerLen = sizeof(Ipv6Header) + sizeof(Ipv6FragmentHeader);
#else
   //Maximum overhead when using IPv4
   headerLen = sizeof(Ipv4Header) + sizeof(uint32_t);
 8001e12:	2318      	movs	r3, #24
 8001e14:	60fb      	str	r3, [r7, #12]
#endif

#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fbd5 	bl	80015ce <ethAllocBuffer>
 8001e24:	60b8      	str	r0, [r7, #8]
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <ipAllocBuffer+0x30>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	441a      	add	r2, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	601a      	str	r2, [r3, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8001e38:	68bb      	ldr	r3, [r7, #8]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <netInit>:
 * @brief TCP/IP stack initialization
 * @return Error code
 **/

error_t netInit(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af02      	add	r7, sp, #8
   error_t error;
   uint_t i;
   NetInterface *interface;

   //Clear TCP/IP stack context
   osMemset(&netContext, 0, sizeof(NetContext));
 8001e4a:	f640 0214 	movw	r2, #2068	; 0x814
 8001e4e:	2100      	movs	r1, #0
 8001e50:	484b      	ldr	r0, [pc, #300]	; (8001f80 <netInit+0x13c>)
 8001e52:	f00e f880 	bl	800ff56 <memset>

   //The TCP/IP process is currently suspended
   netTaskRunning = FALSE;
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <netInit+0x13c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   //Get current time
   netTimestamp = osGetSystemTime();
 8001e5e:	f7ff f980 	bl	8001162 <osGetSystemTime>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a46      	ldr	r2, [pc, #280]	; (8001f80 <netInit+0x13c>)
 8001e66:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

   //Create a mutex to prevent simultaneous access to the TCP/IP stack
   if(!osCreateMutex(&netMutex))
 8001e6a:	4845      	ldr	r0, [pc, #276]	; (8001f80 <netInit+0x13c>)
 8001e6c:	f7ff f943 	bl	80010f6 <osCreateMutex>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <netInit+0x36>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001e76:	2365      	movs	r3, #101	; 0x65
 8001e78:	e07d      	b.n	8001f76 <netInit+0x132>
   }

   //Create a event object to receive notifications from device drivers
   if(!osCreateEvent(&netEvent))
 8001e7a:	4842      	ldr	r0, [pc, #264]	; (8001f84 <netInit+0x140>)
 8001e7c:	f7ff f8cf 	bl	800101e <osCreateEvent>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <netInit+0x46>
   {
      //Failed to create mutex
      return ERROR_OUT_OF_RESOURCES;
 8001e86:	2365      	movs	r3, #101	; 0x65
 8001e88:	e075      	b.n	8001f76 <netInit+0x132>
   }

   //Memory pool initialization
   error = memPoolInit();
 8001e8a:	f000 fa99 	bl	80023c0 <memPoolInit>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001e92:	897b      	ldrh	r3, [r7, #10]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <netInit+0x58>
      return error;
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	e06c      	b.n	8001f76 <netInit+0x132>

   //Clear configuration data for each interface
   osMemset(netInterface, 0, sizeof(netInterface));
 8001e9c:	f240 628c 	movw	r2, #1676	; 0x68c
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4839      	ldr	r0, [pc, #228]	; (8001f88 <netInit+0x144>)
 8001ea4:	f00e f857 	bl	800ff56 <memset>

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e015      	b.n	8001eda <netInit+0x96>
   {
      //Point to the current interface
      interface = &netInterface[i];
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f240 628c 	movw	r2, #1676	; 0x68c
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	33e0      	adds	r3, #224	; 0xe0
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <netInit+0x13c>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	607b      	str	r3, [r7, #4]

      //Default interface name
//      osSprintf(interface->name, "eth%u", i);

      //Zero-based index
      interface->index = i;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	601a      	str	r2, [r3, #0]
      //Unique number identifying the interface
      interface->id = i;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	605a      	str	r2, [r3, #4]

#if (ETH_SUPPORT == ENABLED)
      //Default PHY address
      interface->phyAddr = UINT8_MAX;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	22ff      	movs	r2, #255	; 0xff
 8001ed0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0e6      	beq.n	8001eae <netInit+0x6a>
#endif
   }

   //Socket related initialization
   error = socketInit();
 8001ee0:	f001 fb64 	bl	80035ac <socketInit>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001ee8:	897b      	ldrh	r3, [r7, #10]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <netInit+0xae>
      return error;
 8001eee:	897b      	ldrh	r3, [r7, #10]
 8001ef0:	e041      	b.n	8001f76 <netInit+0x132>
      return error;
#endif

#if (UDP_SUPPORT == ENABLED)
   //UDP related initialization
   error = udpInit();
 8001ef2:	f004 f9f1 	bl	80062d8 <udpInit>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001efa:	897b      	ldrh	r3, [r7, #10]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <netInit+0xc0>
      return error;
 8001f00:	897b      	ldrh	r3, [r7, #10]
 8001f02:	e038      	b.n	8001f76 <netInit+0x132>
#endif

#if (TCP_SUPPORT == ENABLED)
   //TCP related initialization
   error = tcpInit();
 8001f04:	f001 fb9c 	bl	8003640 <tcpInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001f0c:	897b      	ldrh	r3, [r7, #10]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <netInit+0xd2>
      return error;
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	e02f      	b.n	8001f76 <netInit+0x132>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //DNS cache initialization
   error = dnsInit();
 8001f16:	f005 fde5 	bl	8007ae4 <dnsInit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8001f1e:	897b      	ldrh	r3, [r7, #10]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <netInit+0xe4>
      return error;
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	e026      	b.n	8001f76 <netInit+0x132>
#endif

   //Initialize tick counters
   nicTickCounter = 0;
 8001f28:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <netInit+0x148>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

#if (PPP_SUPPORT == ENABLED)
   pppTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   arpTickCounter = 0;
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <netInit+0x14c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   ipv4FragTickCounter = 0;
 8001f34:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <netInit+0x150>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
#endif
#if (IPV4_SUPPORT == ENABLED && AUTO_IP_SUPPORT == ENABLED)
   autoIpTickCounter = 0;
#endif
#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   dhcpClientTickCounter = 0;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <netInit+0x154>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
#endif
#if (IPV6_SUPPORT == ENABLED && DHCPV6_CLIENT_SUPPORT == ENABLED)
   dhcpv6ClientTickCounter = 0;
#endif
#if (TCP_SUPPORT == ENABLED)
   tcpTickCounter = 0;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <netInit+0x158>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
#endif
#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   dnsTickCounter = 0;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <netInit+0x15c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
   //Create a task to handle TCP/IP events
   osCreateStaticTask(&netTaskInstance, "TCP/IP Stack", (OsTaskCode) netTask,
      NULL, netTaskStack, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);
#else
   //Create a task to handle TCP/IP events
   netTaskHandle = osCreateTask("TCP/IP Stack", (OsTaskCode) netTask,
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f240 238a 	movw	r3, #650	; 0x28a
 8001f54:	2200      	movs	r2, #0
 8001f56:	4913      	ldr	r1, [pc, #76]	; (8001fa4 <netInit+0x160>)
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <netInit+0x164>)
 8001f5a:	f7ff f829 	bl	8000fb0 <osCreateTask>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <netInit+0x13c>)
 8001f62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      NULL, NET_TASK_STACK_SIZE, NET_TASK_PRIORITY);

   //Unable to create the task?
   if(netTaskHandle == OS_INVALID_HANDLE)
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <netInit+0x13c>)
 8001f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <netInit+0x130>
      return ERROR_OUT_OF_RESOURCES;
 8001f70:	2365      	movs	r3, #101	; 0x65
 8001f72:	e000      	b.n	8001f76 <netInit+0x132>
   //The TCP/IP process is now running
   netTaskRunning = TRUE;
#endif

   //Successful initialization
   return NO_ERROR;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20009168 	.word	0x20009168
 8001f84:	200091b4 	.word	0x200091b4
 8001f88:	20009248 	.word	0x20009248
 8001f8c:	2000997c 	.word	0x2000997c
 8001f90:	2000b644 	.word	0x2000b644
 8001f94:	2000b648 	.word	0x2000b648
 8001f98:	2000b2fc 	.word	0x2000b2fc
 8001f9c:	2000b258 	.word	0x2000b258
 8001fa0:	2000b300 	.word	0x2000b300
 8001fa4:	08002231 	.word	0x08002231
 8001fa8:	080113a8 	.word	0x080113a8

08001fac <netSetMacAddr>:
 * @param[in] macAddr MAC address
 * @return Error code
 **/

error_t netSetMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
#if (ETH_SUPPORT == ENABLED)
   //Check parameters
   if(interface == NULL || macAddr == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <netSetMacAddr+0x16>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <netSetMacAddr+0x1a>
      return ERROR_INVALID_PARAMETER;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e013      	b.n	8001fee <netSetMacAddr+0x42>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8001fc6:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <netSetMacAddr+0x4c>)
 8001fc8:	f7ff f8ad 	bl	8001126 <osAcquireMutex>

   //Set MAC address
   interface->macAddr = *macAddr;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	33cc      	adds	r3, #204	; 0xcc
 8001fd2:	6810      	ldr	r0, [r2, #0]
 8001fd4:	6018      	str	r0, [r3, #0]
 8001fd6:	8892      	ldrh	r2, [r2, #4]
 8001fd8:	809a      	strh	r2, [r3, #4]

   //Generate the 64-bit interface identifier
   macAddrToEui64(macAddr, &interface->eui64);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7ff fb9d 	bl	8001720 <macAddrToEui64>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <netSetMacAddr+0x4c>)
 8001fe8:	f7ff f8ac 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8001fec:	2300      	movs	r3, #0
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20009168 	.word	0x20009168

08001ffc <netSetInterfaceName>:
 * @param[in] name NULL-terminated string that contains the interface name
 * @return Error code
 **/

error_t netSetInterfaceName(NetInterface *interface, const char_t *name)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <netSetInterfaceName+0x16>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <netSetInterfaceName+0x1a>
      return ERROR_INVALID_PARAMETER;
 8002012:	2302      	movs	r3, #2
 8002014:	e00d      	b.n	8002032 <netSetInterfaceName+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002016:	4809      	ldr	r0, [pc, #36]	; (800203c <netSetInterfaceName+0x40>)
 8002018:	f7ff f885 	bl	8001126 <osAcquireMutex>

   //Set interface name
   strSafeCopy(interface->name, name, NET_MAX_IF_NAME_LEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3310      	adds	r3, #16
 8002020:	2208      	movs	r2, #8
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f8c2 	bl	80011ae <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800202a:	4804      	ldr	r0, [pc, #16]	; (800203c <netSetInterfaceName+0x40>)
 800202c:	f7ff f88a 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20009168 	.word	0x20009168

08002040 <netSetHostname>:
 * @param[in] name NULL-terminated string that contains the host name
 * @return Error code
 **/

error_t netSetHostname(NetInterface *interface, const char_t *name)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || name == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <netSetHostname+0x16>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <netSetHostname+0x1a>
      return ERROR_INVALID_PARAMETER;
 8002056:	2302      	movs	r3, #2
 8002058:	e00d      	b.n	8002076 <netSetHostname+0x36>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800205a:	4809      	ldr	r0, [pc, #36]	; (8002080 <netSetHostname+0x40>)
 800205c:	f7ff f863 	bl	8001126 <osAcquireMutex>

   //Set host name
   strSafeCopy(interface->hostname, name, NET_MAX_HOSTNAME_LEN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3319      	adds	r3, #25
 8002064:	2218      	movs	r2, #24
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f8a0 	bl	80011ae <strSafeCopy>

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <netSetHostname+0x40>)
 8002070:	f7ff f868 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20009168 	.word	0x20009168

08002084 <netSetDriver>:
 * @param[in] driver Ethernet MAC driver
 * @return Error code
 **/

error_t netSetDriver(NetInterface *interface, const NicDriver *driver)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <netSetDriver+0x16>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <netSetDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 800209a:	2302      	movs	r3, #2
 800209c:	e009      	b.n	80020b2 <netSetDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800209e:	4807      	ldr	r0, [pc, #28]	; (80020bc <netSetDriver+0x38>)
 80020a0:	f7ff f841 	bl	8001126 <osAcquireMutex>
   //Set Ethernet MAC driver
   interface->nicDriver = driver;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	635a      	str	r2, [r3, #52]	; 0x34
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80020aa:	4804      	ldr	r0, [pc, #16]	; (80020bc <netSetDriver+0x38>)
 80020ac:	f7ff f84a 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20009168 	.word	0x20009168

080020c0 <netSetSpiDriver>:
 * @param[in] driver Underlying SPI driver
 * @return Error code
 **/

error_t netSetSpiDriver(NetInterface *interface, const SpiDriver *driver)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <netSetSpiDriver+0x16>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <netSetSpiDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 80020d6:	2302      	movs	r3, #2
 80020d8:	e009      	b.n	80020ee <netSetSpiDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 80020da:	4807      	ldr	r0, [pc, #28]	; (80020f8 <netSetSpiDriver+0x38>)
 80020dc:	f7ff f823 	bl	8001126 <osAcquireMutex>
   //Set SPI driver
   interface->spiDriver = driver;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	639a      	str	r2, [r3, #56]	; 0x38
   //Release exclusive access
   osReleaseMutex(&netMutex);
 80020e6:	4804      	ldr	r0, [pc, #16]	; (80020f8 <netSetSpiDriver+0x38>)
 80020e8:	f7ff f82c 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20009168 	.word	0x20009168

080020fc <netSetExtIntDriver>:
 * @param[in] driver Underlying SPI driver
 * @return Error code
 **/

error_t netSetExtIntDriver(NetInterface *interface, const ExtIntDriver *driver)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
   //Check parameters
   if(interface == NULL || driver == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <netSetExtIntDriver+0x16>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <netSetExtIntDriver+0x1a>
      return ERROR_INVALID_PARAMETER;
 8002112:	2302      	movs	r3, #2
 8002114:	e009      	b.n	800212a <netSetExtIntDriver+0x2e>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002116:	4807      	ldr	r0, [pc, #28]	; (8002134 <netSetExtIntDriver+0x38>)
 8002118:	f7ff f805 	bl	8001126 <osAcquireMutex>
   //Set external interrupt line driver
   interface->extIntDriver = driver;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002122:	4804      	ldr	r0, [pc, #16]	; (8002134 <netSetExtIntDriver+0x38>)
 8002124:	f7ff f80e 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20009168 	.word	0x20009168

08002138 <netConfigInterface>:
 * @param[in] interface Network interface to configure
 * @return Error code
 **/

error_t netConfigInterface(NetInterface *interface)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
   error_t error;

   //Make sure the network interface is valid
   if(interface == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <netConfigInterface+0x12>
      return ERROR_INVALID_PARAMETER;
 8002146:	2302      	movs	r3, #2
 8002148:	e06c      	b.n	8002224 <netConfigInterface+0xec>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800214a:	4838      	ldr	r0, [pc, #224]	; (800222c <netConfigInterface+0xf4>)
 800214c:	f7fe ffeb 	bl	8001126 <osAcquireMutex>

   //Disable hardware interrupts
   if(interface->nicDriver != NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <netConfigInterface+0x2a>
      interface->nicDriver->disableIrq(interface);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	4798      	blx	r3

   //Start of exception handling block
   do
   {
      //Receive notifications when the transmitter is ready to send
      if(!osCreateEvent(&interface->nicTxEvent))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3354      	adds	r3, #84	; 0x54
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ff59 	bl	800101e <osCreateEvent>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <netConfigInterface+0x40>
      {
         //Failed to create event object
         error = ERROR_OUT_OF_RESOURCES;
 8002172:	2365      	movs	r3, #101	; 0x65
 8002174:	81fb      	strh	r3, [r7, #14]
         //Stop immediately
         break;
 8002176:	e034      	b.n	80021e2 <netConfigInterface+0xaa>
      }

      //Valid NIC driver?
      if(interface->nicDriver != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <netConfigInterface+0x5c>
      {
         //Network controller initialization
         error = interface->nicDriver->init(interface);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
 800218a:	4603      	mov	r3, r0
 800218c:	81fb      	strh	r3, [r7, #14]
         //Any error to report?
         if(error)
 800218e:	89fb      	ldrh	r3, [r7, #14]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11f      	bne.n	80021d4 <netConfigInterface+0x9c>
#endif
      }

#if (ETH_SUPPORT == ENABLED)
      //Ethernet related initialization
      error = ethInit(interface);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff f835 	bl	8001204 <ethInit>
 800219a:	4603      	mov	r3, r0
 800219c:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d119      	bne.n	80021d8 <netConfigInterface+0xa0>
         break;
#endif

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 initialization
      error = ipv4Init(interface);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f007 fe53 	bl	8009e50 <ipv4Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 80021ae:	89fb      	ldrh	r3, [r7, #14]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d113      	bne.n	80021dc <netConfigInterface+0xa4>
         break;

#if (ETH_SUPPORT == ENABLED)
      //ARP cache initialization
      error = arpInit(interface);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f006 fe1b 	bl	8008df0 <arpInit>
 80021ba:	4603      	mov	r3, r0
 80021bc:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 80021be:	89fb      	ldrh	r3, [r7, #14]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10d      	bne.n	80021e0 <netConfigInterface+0xa8>
         break;
#endif

#if (LLMNR_RESPONDER_SUPPORT == ENABLED)
      //LLMNR responder initialization
      error = llmnrResponderInit(interface);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f009 fabd 	bl	800b744 <llmnrResponderInit>
 80021ca:	4603      	mov	r3, r0
 80021cc:	81fb      	strh	r3, [r7, #14]
      //Any error to report?
      if(error)
 80021ce:	89fb      	ldrh	r3, [r7, #14]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	e006      	b.n	80021e2 <netConfigInterface+0xaa>
            break;
 80021d4:	bf00      	nop
 80021d6:	e004      	b.n	80021e2 <netConfigInterface+0xaa>
         break;
 80021d8:	bf00      	nop
 80021da:	e002      	b.n	80021e2 <netConfigInterface+0xaa>
         break;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <netConfigInterface+0xaa>
         break;
 80021e0:	bf00      	nop

      //End of exception handling block
   } while(0);

   //Check status code
   if(!error)
 80021e2:	89fb      	ldrh	r3, [r7, #14]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d114      	bne.n	8002212 <netConfigInterface+0xda>
   {
      //Initialize pseudo-random generator
      netInitRand();
 80021e8:	f000 fea0 	bl	8002f2c <netInitRand>

      //The network interface is now fully configured
      interface->configured = TRUE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

      //Check whether the TCP/IP process is running
      if(netTaskRunning)
 80021f4:	4b0d      	ldr	r3, [pc, #52]	; (800222c <netConfigInterface+0xf4>)
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00e      	beq.n	800221c <netConfigInterface+0xe4>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <netConfigInterface+0xe4>
            interface->nicDriver->enableIrq(interface);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	4798      	blx	r3
 8002210:	e004      	b.n	800221c <netConfigInterface+0xe4>
      }
   }
   else
   {
      //Clean up side effects before returning
      osDeleteEvent(&interface->nicTxEvent);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3354      	adds	r3, #84	; 0x54
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe ff1c 	bl	8001054 <osDeleteEvent>
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800221c:	4803      	ldr	r0, [pc, #12]	; (800222c <netConfigInterface+0xf4>)
 800221e:	f7fe ff91 	bl	8001144 <osReleaseMutex>

   //Return status code
   return error;
 8002222:	89fb      	ldrh	r3, [r7, #14]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20009168 	.word	0x20009168

08002230 <netTask>:
/**
 * @brief TCP/IP events handling
 **/

void netTask(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8002236:	4860      	ldr	r0, [pc, #384]	; (80023b8 <netTask+0x188>)
 8002238:	f7fe ff75 	bl	8001126 <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 800223c:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <netTask+0x188>)
 800223e:	2201      	movs	r2, #1
 8002240:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e019      	b.n	800227e <netTask+0x4e>
   {
      //Point to the current network interface
      interface = &netInterface[i];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f240 628c 	movw	r2, #1676	; 0x68c
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	33e0      	adds	r3, #224	; 0xe0
 8002256:	4a58      	ldr	r2, [pc, #352]	; (80023b8 <netTask+0x188>)
 8002258:	4413      	add	r3, r2
 800225a:	607b      	str	r3, [r7, #4]

      //Check whether the interface is fully configured
      if(interface->configured)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <netTask+0x48>
      {
         //Interrupts can be safely enabled
         if(interface->nicDriver != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <netTask+0x48>
         {
            interface->nicDriver->enableIrq(interface);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	3301      	adds	r3, #1
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0e2      	beq.n	800224a <netTask+0x1a>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8002284:	484c      	ldr	r0, [pc, #304]	; (80023b8 <netTask+0x188>)
 8002286:	f7fe ff5d 	bl	8001144 <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 800228a:	f7fe ff6a 	bl	8001162 <osGetSystemTime>
 800228e:	60f8      	str	r0, [r7, #12]

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 8002290:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <netTask+0x188>)
 8002292:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	da06      	bge.n	80022ac <netTask+0x7c>
         timeout = netTimestamp - time;
 800229e:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <netTask+0x188>)
 80022a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	e001      	b.n	80022b0 <netTask+0x80>
      else
         timeout = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	4842      	ldr	r0, [pc, #264]	; (80023bc <netTask+0x18c>)
 80022b4:	f7fe feee 	bl	8001094 <osWaitForEvent>
 80022b8:	60b8      	str	r0, [r7, #8]

      //Check whether the specified event is in signaled state
      if(status)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d061      	beq.n	8002384 <netTask+0x154>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 80022c0:	483d      	ldr	r0, [pc, #244]	; (80023b8 <netTask+0x188>)
 80022c2:	f7fe ff30 	bl	8001126 <osAcquireMutex>

         //Process events
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	e055      	b.n	8002378 <netTask+0x148>
         {
            //Point to the current network interface
            interface = &netInterface[i];
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f240 628c 	movw	r2, #1676	; 0x68c
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	33e0      	adds	r3, #224	; 0xe0
 80022d8:	4a37      	ldr	r2, [pc, #220]	; (80023b8 <netTask+0x188>)
 80022da:	4413      	add	r3, r2
 80022dc:	607b      	str	r3, [r7, #4]

            //Check whether a NIC event is pending
            if(interface->nicEvent)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d016      	beq.n	8002316 <netTask+0xe6>
            {
               //Acknowledge the event by clearing the flag
               interface->nicEvent = FALSE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00e      	beq.n	8002316 <netTask+0xe6>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
                  //Handle NIC events
                  interface->nicDriver->eventHandler(interface);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
               }
            }

#if (ETH_SUPPORT == ENABLED)
            //Check whether a PHY event is pending
            if(interface->phyEvent)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d028      	beq.n	8002372 <netTask+0x142>
            {
               //Acknowledge the event by clearing the flag
               interface->phyEvent = FALSE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

               //Valid NIC driver?
               if(interface->nicDriver != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <netTask+0x142>
               {
                  //Disable hardware interrupts
                  interface->nicDriver->disableIrq(interface);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3

                  //Valid Ethernet PHY or switch driver?
                  if(interface->phyDriver != NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <netTask+0x122>
                  {
                     //Handle events
                     interface->phyDriver->eventHandler(interface);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
 8002350:	e00a      	b.n	8002368 <netTask+0x138>
                  }
                  else if(interface->switchDriver != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <netTask+0x138>
                  {
                     //Handle events
                     interface->switchDriver->eventHandler(interface);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	4798      	blx	r3
                  {
                     //The interface is not properly configured
                  }

                  //Re-enable hardware interrupts
                  interface->nicDriver->enableIrq(interface);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3301      	adds	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0a6      	beq.n	80022cc <netTask+0x9c>
            }
#endif
         }

         //Release exclusive access
         osReleaseMutex(&netMutex);
 800237e:	480e      	ldr	r0, [pc, #56]	; (80023b8 <netTask+0x188>)
 8002380:	f7fe fee0 	bl	8001144 <osReleaseMutex>
      }

      //Get current time
      time = osGetSystemTime();
 8002384:	f7fe feed 	bl	8001162 <osGetSystemTime>
 8002388:	60f8      	str	r0, [r7, #12]

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <netTask+0x188>)
 800238c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	f6ff af78 	blt.w	800228a <netTask+0x5a>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 800239a:	4807      	ldr	r0, [pc, #28]	; (80023b8 <netTask+0x188>)
 800239c:	f7fe fec3 	bl	8001126 <osAcquireMutex>
         //Handle periodic operations
         netTick();
 80023a0:	f000 fc76 	bl	8002c90 <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <netTask+0x188>)
 80023a6:	f7fe fecd 	bl	8001144 <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3364      	adds	r3, #100	; 0x64
 80023ae:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <netTask+0x188>)
 80023b0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
      time = osGetSystemTime();
 80023b4:	e769      	b.n	800228a <netTask+0x5a>
 80023b6:	bf00      	nop
 80023b8:	20009168 	.word	0x20009168
 80023bc:	200091b4 	.word	0x200091b4

080023c0 <memPoolInit>:
 * @brief Memory pool initialization
 * @return Error code
 **/

error_t memPoolInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
   memPoolCurrentUsage = 0;
   memPoolMaxUsage = 0;
#endif

   //Successful initialization
   return NO_ERROR;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
#if (NET_MEM_POOL_SUPPORT == ENABLED)
   uint_t i;
#endif

   //Pointer to the allocated memory block
   void *p = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Allocate a memory block
   p = osAllocMem(size);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7fe fecb 	bl	8001178 <osAllocMem>
 80023e2:	60f8      	str	r0, [r7, #12]
#endif

   //Failed to allocate memory?
   if(!p)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <memPoolAlloc+0x32>
   {
      //Debug message
      TRACE_WARNING("Memory allocation failed!\r\n");
 80023ea:	f7fe fe02 	bl	8000ff2 <osSuspendAllTasks>
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <memPoolAlloc+0x3c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	221b      	movs	r2, #27
 80023f6:	2101      	movs	r1, #1
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <memPoolAlloc+0x40>)
 80023fa:	f00d fd41 	bl	800fe80 <fwrite>
 80023fe:	f7fe fe03 	bl	8001008 <osResumeAllTasks>
   }

   //Return a pointer to the allocated memory block
   return p;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000034 	.word	0x20000034
 8002410:	080113b8 	.word	0x080113b8

08002414 <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Release memory block
   osFreeMem(p);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe feb8 	bl	8001192 <osFreeMem>
#endif
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <netBufferAlloc>:
 * @return Pointer to the allocated buffer or NULL if there is
 *   insufficient memory available
 **/

NetBuffer *netBufferAlloc(size_t length)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   error_t error;
   NetBuffer *buffer;

   //Allocate memory to hold the multi-part buffer
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 8002432:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8002436:	f7ff ffcb 	bl	80023d0 <memPoolAlloc>
 800243a:	60f8      	str	r0, [r7, #12]
   //Failed to allocate memory?
   if(buffer == NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <netBufferAlloc+0x1c>
      return NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	e020      	b.n	8002488 <netBufferAlloc+0x5e>

   //The multi-part buffer consists of a single chunk
   buffer->chunkCount = 1;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2209      	movs	r2, #9
 8002450:	605a      	str	r2, [r3, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	609a      	str	r2, [r3, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8002462:	819a      	strh	r2, [r3, #12]
   buffer->chunk[0].size = 0;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	81da      	strh	r2, [r3, #14]

   //Adjust the length of the buffer
   error = netBufferSetLength(buffer, length);
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 f840 	bl	80024f2 <netBufferSetLength>
 8002472:	4603      	mov	r3, r0
 8002474:	817b      	strh	r3, [r7, #10]
   //Any error to report?
   if(error)
 8002476:	897b      	ldrh	r3, [r7, #10]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <netBufferAlloc+0x5c>
   {
      //Clean up side effects
      netBufferFree(buffer);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f807 	bl	8002490 <netBufferFree>
      //Report an failure
      return NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	e000      	b.n	8002488 <netBufferAlloc+0x5e>
   }

   //Successful memory allocation
   return buffer;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <netBufferFree>:
 * @brief Dispose a multi-part buffer
 * @param[in] buffer Pointer to the multi-part buffer to be released
 **/

void netBufferFree(NetBuffer *buffer)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
   //Properly dispose data chunks
   netBufferSetLength(buffer, 0);
 8002498:	2100      	movs	r1, #0
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f829 	bl	80024f2 <netBufferSetLength>
   //Release multi-part buffer
   memPoolFree(buffer);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffb7 	bl	8002414 <memPoolFree>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Total length
   size_t length = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60bb      	str	r3, [r7, #8]

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e00c      	b.n	80024da <netBufferGetLength+0x2c>
      length += buffer->chunk[i].length;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4413      	add	r3, r2
 80024ca:	889b      	ldrh	r3, [r3, #4]
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	4413      	add	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < buffer->chunkCount; i++)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3301      	adds	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d3ed      	bcc.n	80024c0 <netBufferGetLength+0x12>

   //Return total length
   return length;
 80024e4:	68bb      	ldr	r3, [r7, #8]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e02c      	b.n	8002562 <netBufferSetLength+0x70>
   {
      //Point to the chunk descriptor;
      chunk = &buffer->chunk[i];
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	60fb      	str	r3, [r7, #12]

      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	889b      	ldrh	r3, [r3, #4]
 8002518:	461a      	mov	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4293      	cmp	r3, r2
 800251e:	d804      	bhi.n	800252a <netBufferSetLength+0x38>
      {
         chunk->length = length;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	809a      	strh	r2, [r3, #4]
 8002528:	e012      	b.n	8002550 <netBufferSetLength+0x5e>
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	88db      	ldrh	r3, [r3, #6]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <netBufferSetLength+0x5e>
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	3b01      	subs	r3, #1
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	d109      	bne.n	8002550 <netBufferSetLength+0x5e>
      {
         chunk->length = MIN(length, chunk->size);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88db      	ldrh	r3, [r3, #6]
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4293      	cmp	r3, r2
 8002546:	bf28      	it	cs
 8002548:	4613      	movcs	r3, r2
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	809a      	strh	r2, [r3, #4]
      }

      //Prepare to process next chunk
      length -= chunk->length;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	603b      	str	r3, [r7, #0]
   for(i = 0; i < chunkCount && length > 0; i++)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3301      	adds	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	429a      	cmp	r2, r3
 8002568:	d202      	bcs.n	8002570 <netBufferSetLength+0x7e>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1cb      	bne.n	8002508 <netBufferSetLength+0x16>
   }

   //The size of the buffer should be decreased?
   if(!length)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d151      	bne.n	800261a <netBufferSetLength+0x128>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	601a      	str	r2, [r3, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 800257c:	e01a      	b.n	80025b4 <netBufferSetLength+0xc2>
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

         //Release previously allocated memory
         if(chunk->size > 0)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	88db      	ldrh	r3, [r3, #6]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <netBufferSetLength+0xaa>
            memPoolFree(chunk->address);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff3c 	bl	8002414 <memPoolFree>

         //Mark the current chunk as free
         chunk->address = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
         chunk->length = 0;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	809a      	strh	r2, [r3, #4]
         chunk->size = 0;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	80da      	strh	r2, [r3, #6]

         //Next chunk
         i++;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
      while(i < chunkCount)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3e0      	bcc.n	800257e <netBufferSetLength+0x8c>
 80025bc:	e035      	b.n	800262a <netBufferSetLength+0x138>
   {
      //Add as many chunks as necessary
      while(i < buffer->maxChunkCount && length > 0)
      {
         //Point to the chunk descriptor;
         chunk = &buffer->chunk[i];
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

         //Allocate memory to hold a new chunk
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 80025ca:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80025ce:	f7ff feff 	bl	80023d0 <memPoolAlloc>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]
         //Failed to allocate memory?
         if(!chunk->address)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <netBufferSetLength+0xf2>
            return ERROR_OUT_OF_MEMORY;
 80025e0:	2364      	movs	r3, #100	; 0x64
 80025e2:	e028      	b.n	8002636 <netBufferSetLength+0x144>

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80025ea:	80da      	strh	r2, [r3, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025f2:	bf28      	it	cs
 80025f4:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	809a      	strh	r2, [r3, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	889b      	ldrh	r3, [r3, #4]
 8002602:	461a      	mov	r2, r3
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	603b      	str	r3, [r7, #0]
         buffer->chunkCount++;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	601a      	str	r2, [r3, #0]
         i++;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
      while(i < buffer->maxChunkCount && length > 0)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	d202      	bcs.n	800262a <netBufferSetLength+0x138>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1c9      	bne.n	80025be <netBufferSetLength+0xcc>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <netBufferSetLength+0x142>
 8002630:	2365      	movs	r3, #101	; 0x65
 8002632:	e000      	b.n	8002636 <netBufferSetLength+0x144>
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <netBufferAt>:
 * @param[in] offset Offset from the beginning of the buffer
 * @return Pointer the data at the specified position
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e01e      	b.n	800268c <netBufferAt+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(offset < buffer->chunk[i].length)
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4293      	cmp	r3, r2
 8002660:	d207      	bcs.n	8002672 <netBufferAt+0x34>
         return (uint8_t *) buffer->chunk[i].address + offset;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	3201      	adds	r2, #1
 8002668:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	e012      	b.n	8002698 <netBufferAt+0x5a>

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3301      	adds	r3, #1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	889b      	ldrh	r3, [r3, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	603b      	str	r3, [r7, #0]
   for(i = 0; i < buffer->chunkCount; i++)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	429a      	cmp	r2, r3
 8002694:	d3db      	bcc.n	800264e <netBufferAt+0x10>
   }

   //Invalid offset...
   return NULL;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e016      	b.n	80026e6 <netBufferConcat+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	3301      	adds	r3, #1
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	889b      	ldrh	r3, [r3, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d312      	bcc.n	80026f2 <netBufferConcat+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	3301      	adds	r3, #1
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	889b      	ldrh	r3, [r3, #4]
 80026d8:	461a      	mov	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	607b      	str	r3, [r7, #4]
   for(j = 0; j < src->chunkCount; j++)
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	3301      	adds	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3e3      	bcc.n	80026b8 <netBufferConcat+0x14>
 80026f0:	e000      	b.n	80026f4 <netBufferConcat+0x50>
         break;
 80026f2:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d301      	bcc.n	8002702 <netBufferConcat+0x5e>
      return ERROR_INVALID_PARAMETER;
 80026fe:	2302      	movs	r3, #2
 8002700:	e065      	b.n	80027ce <netBufferConcat+0x12a>

   //Position to the end of the destination data
   i = dest->chunkCount;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 8002708:	e04d      	b.n	80027a6 <netBufferConcat+0x102>
   {
      //Copy current block
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	3201      	adds	r2, #1
 8002710:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	18d1      	adds	r1, r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	3201      	adds	r2, #1
 800271e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	3301      	adds	r3, #1
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	889a      	ldrh	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	b29b      	uxth	r3, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	b299      	uxth	r1, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	460a      	mov	r2, r1
 8002742:	809a      	strh	r2, [r3, #4]
      dest->chunk[i].size = 0;
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	2200      	movs	r2, #0
 8002750:	80da      	strh	r2, [r3, #6]

      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	889b      	ldrh	r3, [r3, #4]
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4293      	cmp	r3, r2
 8002764:	d208      	bcs.n	8002778 <netBufferConcat+0xd4>
         dest->chunk[i].length = length;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b299      	uxth	r1, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	460a      	mov	r2, r1
 8002776:	809a      	strh	r2, [r3, #4]

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	3301      	adds	r3, #1
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	461a      	mov	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	603b      	str	r3, [r7, #0]
      //Increment the number of chunks
      dest->chunkCount++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	601a      	str	r2, [r3, #0]

      //Adjust variables
      srcOffset = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	607b      	str	r3, [r7, #4]
      i++;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3301      	adds	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
      j++;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3301      	adds	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d009      	beq.n	80027c0 <netBufferConcat+0x11c>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d204      	bcs.n	80027c0 <netBufferConcat+0x11c>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3a4      	bcc.n	800270a <netBufferConcat+0x66>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	b29b      	uxth	r3, r3
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08a      	sub	sp, #40	; 0x28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	e016      	b.n	800281c <netBufferCopy+0x42>
   {
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	3301      	adds	r3, #1
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	889b      	ldrh	r3, [r3, #4]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4293      	cmp	r3, r2
 8002800:	d312      	bcc.n	8002828 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3301      	adds	r3, #1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	461a      	mov	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount; i++)
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	3301      	adds	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002822:	429a      	cmp	r2, r3
 8002824:	d3e3      	bcc.n	80027ee <netBufferCopy+0x14>
 8002826:	e000      	b.n	800282a <netBufferCopy+0x50>
         break;
 8002828:	bf00      	nop
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	429a      	cmp	r2, r3
 8002832:	d301      	bcc.n	8002838 <netBufferCopy+0x5e>
      return ERROR_INVALID_PARAMETER;
 8002834:	2302      	movs	r3, #2
 8002836:	e096      	b.n	8002966 <netBufferCopy+0x18c>

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
 800283c:	e016      	b.n	800286c <netBufferCopy+0x92>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	3301      	adds	r3, #1
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	889b      	ldrh	r3, [r3, #4]
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4293      	cmp	r3, r2
 8002850:	d312      	bcc.n	8002878 <netBufferCopy+0x9e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	3301      	adds	r3, #1
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	889b      	ldrh	r3, [r3, #4]
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	603b      	str	r3, [r7, #0]
   for(j = 0; j < src->chunkCount; j++)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	3301      	adds	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	429a      	cmp	r2, r3
 8002874:	d3e3      	bcc.n	800283e <netBufferCopy+0x64>
 8002876:	e000      	b.n	800287a <netBufferCopy+0xa0>
         break;
 8002878:	bf00      	nop
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6a3a      	ldr	r2, [r7, #32]
 8002880:	429a      	cmp	r2, r3
 8002882:	d35c      	bcc.n	800293e <netBufferCopy+0x164>
      return ERROR_INVALID_PARAMETER;
 8002884:	2302      	movs	r3, #2
 8002886:	e06e      	b.n	8002966 <netBufferCopy+0x18c>

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	3201      	adds	r2, #1
 800288e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4413      	add	r3, r2
 8002896:	61fb      	str	r3, [r7, #28]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a3a      	ldr	r2, [r7, #32]
 800289c:	3201      	adds	r2, #1
 800289e:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	3301      	adds	r3, #1
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf28      	it	cs
 80028c0:	4613      	movcs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
      n = MIN(n, src->chunk[j].length - srcOffset);
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	3301      	adds	r3, #1
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	889b      	ldrh	r3, [r3, #4]
 80028d0:	461a      	mov	r2, r3
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf28      	it	cs
 80028dc:	4613      	movcs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

      //Copy data
      osMemcpy(p, q, n);
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	69f8      	ldr	r0, [r7, #28]
 80028e6:	f00d fb0e 	bl	800ff06 <memcpy>

      destOffset += n;
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	4413      	add	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]
      srcOffset += n;
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4413      	add	r3, r2
 80028f8:	603b      	str	r3, [r7, #0]
      length -= n;
 80028fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	633b      	str	r3, [r7, #48]	; 0x30

      if(destOffset >= dest->chunk[i].length)
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3301      	adds	r3, #1
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	889b      	ldrh	r3, [r3, #4]
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4293      	cmp	r3, r2
 8002914:	d304      	bcc.n	8002920 <netBufferCopy+0x146>
      {
         destOffset = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
         i++;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	3301      	adds	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if(srcOffset >= src->chunk[j].length)
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	3301      	adds	r3, #1
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	889b      	ldrh	r3, [r3, #4]
 800292c:	461a      	mov	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4293      	cmp	r3, r2
 8002932:	d304      	bcc.n	800293e <netBufferCopy+0x164>
      {
         srcOffset = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	603b      	str	r3, [r7, #0]
         j++;
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	3301      	adds	r3, #1
 800293c:	623b      	str	r3, [r7, #32]
   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <netBufferCopy+0x17e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294a:	429a      	cmp	r2, r3
 800294c:	d204      	bcs.n	8002958 <netBufferCopy+0x17e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	429a      	cmp	r2, r3
 8002956:	d397      	bcc.n	8002888 <netBufferCopy+0xae>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 8002958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf14      	ite	ne
 800295e:	2301      	movne	r3, #1
 8002960:	2300      	moveq	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	b29b      	uxth	r3, r3
}
 8002966:	4618      	mov	r0, r3
 8002968:	3728      	adds	r7, #40	; 0x28
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 800296e:	b480      	push	{r7}
 8002970:	b087      	sub	sp, #28
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	d301      	bcc.n	800298a <netBufferAppend+0x1c>
      return ERROR_FAILURE;
 8002986:	2301      	movs	r3, #1
 8002988:	e01e      	b.n	80029c8 <netBufferAppend+0x5a>

   //Position to the end of the buffer
   i = dest->chunkCount;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	3201      	adds	r2, #1
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
   dest->chunk[i].length = length;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	b299      	uxth	r1, r3
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	460a      	mov	r2, r1
 80029ac:	809a      	strh	r2, [r3, #4]
   dest->chunk[i].size = 0;
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	3301      	adds	r3, #1
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	2200      	movs	r2, #0
 80029ba:	80da      	strh	r2, [r3, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e03e      	b.n	8002a6a <netBufferWrite+0x96>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3301      	adds	r3, #1
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4413      	add	r3, r2
 80029f6:	889b      	ldrh	r3, [r3, #4]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d227      	bcs.n	8002a50 <netBufferWrite+0x7c>
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	3201      	adds	r2, #1
 8002a06:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3301      	adds	r3, #1
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	889b      	ldrh	r3, [r3, #4]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	1acb      	subs	r3, r1, r3
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf28      	it	cs
 8002a2c:	4613      	movcs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

         //Copy data
         osMemcpy(p, src, n);
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f00d fa66 	bl	800ff06 <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4413      	add	r3, r2
 8002a40:	607b      	str	r3, [r7, #4]
         //Total number of bytes written
         totalLength += n;
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
         //Process the next block from the start
         destOffset = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	e009      	b.n	8002a64 <netBufferWrite+0x90>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	889b      	ldrh	r3, [r3, #4]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	3301      	adds	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d203      	bcs.n	8002a7c <netBufferWrite+0xa8>
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3b7      	bcc.n	80029ec <netBufferWrite+0x18>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d07c      	beq.n	8002b94 <netProcessLinkChange+0x10c>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 8002a9a:	f7fe faaa 	bl	8000ff2 <osSuspendAllTasks>
 8002a9e:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68d8      	ldr	r0, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	496c      	ldr	r1, [pc, #432]	; (8002c5c <netProcessLinkChange+0x1d4>)
 8002aac:	f00d f976 	bl	800fd9c <fiprintf>
 8002ab0:	f7fe faaa 	bl	8001008 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002aba:	4a69      	ldr	r2, [pc, #420]	; (8002c60 <netProcessLinkChange+0x1d8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10c      	bne.n	8002ada <netProcessLinkChange+0x52>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 8002ac0:	f7fe fa97 	bl	8000ff2 <osSuspendAllTasks>
 8002ac4:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	221a      	movs	r2, #26
 8002acc:	2101      	movs	r1, #1
 8002ace:	4865      	ldr	r0, [pc, #404]	; (8002c64 <netProcessLinkChange+0x1dc>)
 8002ad0:	f00d f9d6 	bl	800fe80 <fwrite>
 8002ad4:	f7fe fa98 	bl	8001008 <osResumeAllTasks>
 8002ad8:	e038      	b.n	8002b4c <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ae0:	4a61      	ldr	r2, [pc, #388]	; (8002c68 <netProcessLinkChange+0x1e0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10c      	bne.n	8002b00 <netProcessLinkChange+0x78>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 8002ae6:	f7fe fa84 	bl	8000ff2 <osSuspendAllTasks>
 8002aea:	4b5b      	ldr	r3, [pc, #364]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	2219      	movs	r2, #25
 8002af2:	2101      	movs	r1, #1
 8002af4:	485d      	ldr	r0, [pc, #372]	; (8002c6c <netProcessLinkChange+0x1e4>)
 8002af6:	f00d f9c3 	bl	800fe80 <fwrite>
 8002afa:	f7fe fa85 	bl	8001008 <osResumeAllTasks>
 8002afe:	e025      	b.n	8002b4c <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b06:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <netProcessLinkChange+0x1e8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10c      	bne.n	8002b26 <netProcessLinkChange+0x9e>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 8002b0c:	f7fe fa71 	bl	8000ff2 <osSuspendAllTasks>
 8002b10:	4b51      	ldr	r3, [pc, #324]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2218      	movs	r2, #24
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4856      	ldr	r0, [pc, #344]	; (8002c74 <netProcessLinkChange+0x1ec>)
 8002b1c:	f00d f9b0 	bl	800fe80 <fwrite>
 8002b20:	f7fe fa72 	bl	8001008 <osResumeAllTasks>
 8002b24:	e012      	b.n	8002b4c <netProcessLinkChange+0xc4>
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <netProcessLinkChange+0xc4>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 8002b30:	f7fe fa5f 	bl	8000ff2 <osSuspendAllTasks>
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68d8      	ldr	r0, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b40:	461a      	mov	r2, r3
 8002b42:	494d      	ldr	r1, [pc, #308]	; (8002c78 <netProcessLinkChange+0x1f0>)
 8002b44:	f00d f92a 	bl	800fd9c <fiprintf>
 8002b48:	f7fe fa5e 	bl	8001008 <osResumeAllTasks>
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d10c      	bne.n	8002b70 <netProcessLinkChange+0xe8>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 8002b56:	f7fe fa4c 	bl	8000ff2 <osSuspendAllTasks>
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	221d      	movs	r2, #29
 8002b62:	2101      	movs	r1, #1
 8002b64:	4845      	ldr	r0, [pc, #276]	; (8002c7c <netProcessLinkChange+0x1f4>)
 8002b66:	f00d f98b 	bl	800fe80 <fwrite>
 8002b6a:	f7fe fa4d 	bl	8001008 <osResumeAllTasks>
 8002b6e:	e01e      	b.n	8002bae <netProcessLinkChange+0x126>
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d119      	bne.n	8002bae <netProcessLinkChange+0x126>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 8002b7a:	f7fe fa3a 	bl	8000ff2 <osSuspendAllTasks>
 8002b7e:	4b36      	ldr	r3, [pc, #216]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	221d      	movs	r2, #29
 8002b86:	2101      	movs	r1, #1
 8002b88:	483d      	ldr	r0, [pc, #244]	; (8002c80 <netProcessLinkChange+0x1f8>)
 8002b8a:	f00d f979 	bl	800fe80 <fwrite>
 8002b8e:	f7fe fa3b 	bl	8001008 <osResumeAllTasks>
 8002b92:	e00c      	b.n	8002bae <netProcessLinkChange+0x126>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 8002b94:	f7fe fa2d 	bl	8000ff2 <osSuspendAllTasks>
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <netProcessLinkChange+0x1d0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68d8      	ldr	r0, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4937      	ldr	r1, [pc, #220]	; (8002c84 <netProcessLinkChange+0x1fc>)
 8002ba6:	f00d f8f9 	bl	800fd9c <fiprintf>
 8002baa:	f7fe fa2d 	bl	8001008 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f007 fa52 	bl	800a058 <ipv4LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f004 ffa3 	bl	8007b00 <dnsFlushCache>
   //Perform probing and announcing
   dnsSdLinkChangeEvent(interface->dnsSdContext);
#endif

   //Loop through the link change callback table
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e023      	b.n	8002c08 <netProcessLinkChange+0x180>
   {
      NetLinkChangeCallbackEntry *entry;

      //Point to the current entry
      entry = &netContext.linkChangeCallbacks[i];
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8002bce:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <netProcessLinkChange+0x200>)
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	60fb      	str	r3, [r7, #12]

      //Any registered callback?
      if(entry->callback != NULL)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <netProcessLinkChange+0x17a>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d004      	beq.n	8002bf0 <netProcessLinkChange+0x168>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d108      	bne.n	8002c02 <netProcessLinkChange+0x17a>
         {
            //Invoke user callback function
            entry->callback(interface, interface->linkState, entry->param);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	6892      	ldr	r2, [r2, #8]
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3301      	adds	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d9d8      	bls.n	8002bc0 <netProcessLinkChange+0x138>
         }
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e018      	b.n	8002c46 <netProcessLinkChange+0x1be>
   {
      //Point to the current socket
      socket = socketTable + i;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <netProcessLinkChange+0x204>)
 8002c20:	4413      	add	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <netProcessLinkChange+0x1aa>
      {
         tcpUpdateEvents(socket);
 8002c2c:	6938      	ldr	r0, [r7, #16]
 8002c2e:	f002 ff39 	bl	8005aa4 <tcpUpdateEvents>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d102      	bne.n	8002c40 <netProcessLinkChange+0x1b8>
      {
         udpUpdateEvents(socket);
 8002c3a:	6938      	ldr	r0, [r7, #16]
 8002c3c:	f003 fd75 	bl	800672a <udpUpdateEvents>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d9e3      	bls.n	8002c14 <netProcessLinkChange+0x18c>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000034 	.word	0x20000034
 8002c5c:	080113d4 	.word	0x080113d4
 8002c60:	3b9aca00 	.word	0x3b9aca00
 8002c64:	080113ec 	.word	0x080113ec
 8002c68:	05f5e100 	.word	0x05f5e100
 8002c6c:	08011408 	.word	0x08011408
 8002c70:	00989680 	.word	0x00989680
 8002c74:	08011424 	.word	0x08011424
 8002c78:	08011440 	.word	0x08011440
 8002c7c:	0801145c 	.word	0x0801145c
 8002c80:	0801147c 	.word	0x0801147c
 8002c84:	0801149c 	.word	0x0801149c
 8002c88:	20009168 	.word	0x20009168
 8002c8c:	20009980 	.word	0x20009980

08002c90 <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
   uint_t i;
   NetTimerCallbackEntry *entry;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 8002c96:	4b79      	ldr	r3, [pc, #484]	; (8002e7c <netTick+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3364      	adds	r3, #100	; 0x64
 8002c9c:	4a77      	ldr	r2, [pc, #476]	; (8002e7c <netTick+0x1ec>)
 8002c9e:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 8002ca0:	4b76      	ldr	r3, [pc, #472]	; (8002e7c <netTick+0x1ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ca8:	d322      	bcc.n	8002cf0 <netTick+0x60>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	e019      	b.n	8002ce4 <netTick+0x54>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002cb0:	4a73      	ldr	r2, [pc, #460]	; (8002e80 <netTick+0x1f0>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f240 618c 	movw	r1, #1676	; 0x68c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <netTick+0x4e>
            nicTick(&netInterface[i]);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f240 628c 	movw	r2, #1676	; 0x68c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	33e0      	adds	r3, #224	; 0xe0
 8002cd4:	4a6a      	ldr	r2, [pc, #424]	; (8002e80 <netTick+0x1f0>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fb37 	bl	800334c <nicTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0e2      	beq.n	8002cb0 <netTick+0x20>
      }

      //Reset tick counter
      nicTickCounter = 0;
 8002cea:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <netTick+0x1ec>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   //Increment tick counter
   arpTickCounter += NET_TICK_INTERVAL;
 8002cf0:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <netTick+0x1f4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3364      	adds	r3, #100	; 0x64
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <netTick+0x1f4>)
 8002cf8:	6013      	str	r3, [r2, #0]

   //Manage ARP cache
   if(arpTickCounter >= ARP_TICK_INTERVAL)
 8002cfa:	4b62      	ldr	r3, [pc, #392]	; (8002e84 <netTick+0x1f4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2bc7      	cmp	r3, #199	; 0xc7
 8002d00:	d922      	bls.n	8002d48 <netTick+0xb8>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	e019      	b.n	8002d3c <netTick+0xac>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002d08:	4a5d      	ldr	r2, [pc, #372]	; (8002e80 <netTick+0x1f0>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f240 618c 	movw	r1, #1676	; 0x68c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <netTick+0xa6>
            arpTick(&netInterface[i]);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f240 628c 	movw	r2, #1676	; 0x68c
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	33e0      	adds	r3, #224	; 0xe0
 8002d2c:	4a54      	ldr	r2, [pc, #336]	; (8002e80 <netTick+0x1f0>)
 8002d2e:	4413      	add	r3, r2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f006 fa67 	bl	8009204 <arpTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	607b      	str	r3, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0e2      	beq.n	8002d08 <netTick+0x78>
      }

      //Reset tick counter
      arpTickCounter = 0;
 8002d42:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <netTick+0x1f4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 8002d48:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <netTick+0x1f8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3364      	adds	r3, #100	; 0x64
 8002d4e:	4a4e      	ldr	r2, [pc, #312]	; (8002e88 <netTick+0x1f8>)
 8002d50:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 8002d52:	4b4d      	ldr	r3, [pc, #308]	; (8002e88 <netTick+0x1f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5a:	d322      	bcc.n	8002da2 <netTick+0x112>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	e019      	b.n	8002d96 <netTick+0x106>
      {
         //Make sure the interface has been properly configured
         if(netInterface[i].configured)
 8002d62:	4a47      	ldr	r2, [pc, #284]	; (8002e80 <netTick+0x1f0>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f240 618c 	movw	r1, #1676	; 0x68c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <netTick+0x100>
            ipv4FragTick(&netInterface[i]);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f240 628c 	movw	r2, #1676	; 0x68c
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	33e0      	adds	r3, #224	; 0xe0
 8002d86:	4a3e      	ldr	r2, [pc, #248]	; (8002e80 <netTick+0x1f0>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f007 ffc3 	bl	800ad16 <ipv4FragTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3301      	adds	r3, #1
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0e2      	beq.n	8002d62 <netTick+0xd2>
      }

      //Reset tick counter
      ipv4FragTickCounter = 0;
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <netTick+0x1f8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
   }
#endif

#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dhcpClientTickCounter += NET_TICK_INTERVAL;
 8002da2:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <netTick+0x1fc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3364      	adds	r3, #100	; 0x64
 8002da8:	4a38      	ldr	r2, [pc, #224]	; (8002e8c <netTick+0x1fc>)
 8002daa:	6013      	str	r3, [r2, #0]

   //Handle DHCP client related timers
   if(dhcpClientTickCounter >= DHCP_CLIENT_TICK_INTERVAL)
 8002dac:	4b37      	ldr	r3, [pc, #220]	; (8002e8c <netTick+0x1fc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2bc7      	cmp	r3, #199	; 0xc7
 8002db2:	d918      	bls.n	8002de6 <netTick+0x156>
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	e00f      	b.n	8002dda <netTick+0x14a>
         dhcpClientTick(netInterface[i].dhcpClientContext);
 8002dba:	4a31      	ldr	r2, [pc, #196]	; (8002e80 <netTick+0x1f0>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f240 618c 	movw	r1, #1676	; 0x68c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 f87c 	bl	8006ecc <dhcpClientTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ec      	beq.n	8002dba <netTick+0x12a>

      //Reset tick counter
      dhcpClientTickCounter = 0;
 8002de0:	4b2a      	ldr	r3, [pc, #168]	; (8002e8c <netTick+0x1fc>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <netTick+0x200>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3364      	adds	r3, #100	; 0x64
 8002dec:	4a28      	ldr	r2, [pc, #160]	; (8002e90 <netTick+0x200>)
 8002dee:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <netTick+0x200>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b63      	cmp	r3, #99	; 0x63
 8002df6:	d904      	bls.n	8002e02 <netTick+0x172>
   {
      //TCP timer handler
      tcpTick();
 8002df8:	f003 f872 	bl	8005ee0 <tcpTick>
      //Reset tick counter
      tcpTickCounter = 0;
 8002dfc:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <netTick+0x200>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <netTick+0x204>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3364      	adds	r3, #100	; 0x64
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <netTick+0x204>)
 8002e0a:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <netTick+0x204>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2bc7      	cmp	r3, #199	; 0xc7
 8002e12:	d904      	bls.n	8002e1e <netTick+0x18e>
   {
      //DNS timer handler
      dnsTick();
 8002e14:	f004 feba 	bl	8007b8c <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <netTick+0x204>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
      dnsSdTickCounter = 0;
   }
#endif

   //Loop through the timer callback table
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	e022      	b.n	8002e6a <netTick+0x1da>
   {
      //Point to the current entry
      entry = &netContext.timerCallbacks[i];
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	337b      	adds	r3, #123	; 0x7b
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <netTick+0x1f0>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3304      	adds	r3, #4
 8002e30:	603b      	str	r3, [r7, #0]

      //Any registered callback?
      if(entry->callback != NULL)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d014      	beq.n	8002e64 <netTick+0x1d4>
      {
         //Increment timer value
         entry->timerValue += NET_TICK_INTERVAL;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	601a      	str	r2, [r3, #0]

         //Timer period elapsed?
         if(entry->timerValue >= entry->timerPeriod)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d308      	bcc.n	8002e64 <netTick+0x1d4>
         {
            //Invoke user callback function
            entry->callback(entry->param);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4798      	blx	r3
            //Reload timer
            entry->timerValue = 0;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d9d9      	bls.n	8002e24 <netTick+0x194>
         }
      }
   }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2000997c 	.word	0x2000997c
 8002e80:	20009168 	.word	0x20009168
 8002e84:	2000b644 	.word	0x2000b644
 8002e88:	2000b648 	.word	0x2000b648
 8002e8c:	2000b2fc 	.word	0x2000b2fc
 8002e90:	2000b258 	.word	0x2000b258
 8002e94:	2000b300 	.word	0x2000b300

08002e98 <netStartTimer>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] interval Time interval
 **/

void netStartTimer(NetTimer *timer, systime_t interval)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
   //Start timer
   timer->startTime = osGetSystemTime();
 8002ea2:	f7fe f95e 	bl	8001162 <osGetSystemTime>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	605a      	str	r2, [r3, #4]
   timer->interval = interval;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	609a      	str	r2, [r3, #8]
   timer->running = TRUE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <netStopTimer>:
 * @brief Stop timer
 * @param[in] timer Pointer to the timer structure
 **/

void netStopTimer(NetTimer *timer)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
   //Stop timer
   timer->running = FALSE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <netTimerRunning>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer is running, else FALSE
 **/

bool_t netTimerRunning(NetTimer *timer)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
   //Return TRUE if the timer is running
   return timer->running;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <netTimerExpired>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer has expired, else FALSE
 **/

bool_t netTimerExpired(NetTimer *timer)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
   bool_t expired;
   systime_t time;

   //Initialize flag
   expired = FALSE;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
   //Get current time
   time = osGetSystemTime();
 8002efe:	f7fe f930 	bl	8001162 <osGetSystemTime>
 8002f02:	60b8      	str	r0, [r7, #8]

   //Check whether the timer is running
   if(timer->running)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <netTimerExpired+0x30>
   {
      //Check whether the specified time interval has elapsed
      if(timeCompare(time, timer->startTime + timer->interval) >= 0)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4413      	add	r3, r2
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db01      	blt.n	8002f22 <netTimerExpired+0x30>
      {
         expired = TRUE;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return TRUE if the timer has expired
   return expired;
 8002f22:	68fb      	ldr	r3, [r7, #12]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <netInitRand>:
/**
 * @brief PRNG initialization
 **/

void netInitRand(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
   uint_t i;
   NetRandState *state;
   uint8_t iv[10];

   //Point to the PRNG state
   state = &netContext.randState;
 8002f32:	4b4a      	ldr	r3, [pc, #296]	; (800305c <netInitRand+0x130>)
 8002f34:	613b      	str	r3, [r7, #16]

   //Increment invocation counter
   state->counter++;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	801a      	strh	r2, [r3, #0]

   //Copy the EUI-64 identifier of the default interface
   eui64CopyAddr(iv, &netInterface[0].eui64);
 8002f42:	4a47      	ldr	r2, [pc, #284]	; (8003060 <netInitRand+0x134>)
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	32e8      	adds	r2, #232	; 0xe8
 8002f48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f4c:	e883 0003 	stmia.w	r3, {r0, r1}
   //Append the invocation counter
   STORE16BE(state->counter, iv + sizeof(Eui64));
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	0a1b      	lsrs	r3, r3, #8
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	733b      	strb	r3, [r7, #12]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	737b      	strb	r3, [r7, #13]

   //Clear the 288-bit internal state
   osMemset(state->s, 0, 36);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3302      	adds	r3, #2
 8002f68:	2224      	movs	r2, #36	; 0x24
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f00c fff2 	bl	800ff56 <memset>

   //Let (s1, s2, ..., s93) = (K1, ..., K80, 0, ..., 0)
   for(i = 0; i < 10; i++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e00d      	b.n	8002f94 <netInitRand+0x68>
   {
      state->s[i] = netContext.randSeed[i];
 8002f78:	4a39      	ldr	r2, [pc, #228]	; (8003060 <netInitRand+0x134>)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	33a8      	adds	r3, #168	; 0xa8
 8002f80:	7819      	ldrb	r1, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4413      	add	r3, r2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < 10; i++)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3301      	adds	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d9ee      	bls.n	8002f78 <netInitRand+0x4c>
   }

   //Load the 80-bit initialization vector
   for(i = 0; i < 10; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e00c      	b.n	8002fba <netInitRand+0x8e>
   {
      state->s[12 + i] = iv[i];
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	1d39      	adds	r1, r7, #4
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	440a      	add	r2, r1
 8002faa:	7811      	ldrb	r1, [r2, #0]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	460a      	mov	r2, r1
 8002fb2:	709a      	strb	r2, [r3, #2]
   for(i = 0; i < 10; i++)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b09      	cmp	r3, #9
 8002fbe:	d9ef      	bls.n	8002fa0 <netInitRand+0x74>
   }

   //Let (s94, s95, ..., s177) = (IV1, ..., IV80, 0, ..., 0)
   for(i = 11; i < 22; i++)
 8002fc0:	230b      	movs	r3, #11
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	e01a      	b.n	8002ffc <netInitRand+0xd0>
   {
      state->s[i] = (state->s[i + 1] << 5) | (state->s[i] >> 3);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	789b      	ldrb	r3, [r3, #2]
 8002fd0:	015b      	lsls	r3, r3, #5
 8002fd2:	b25a      	sxtb	r2, r3
 8002fd4:	6939      	ldr	r1, [r7, #16]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	440b      	add	r3, r1
 8002fda:	3302      	adds	r3, #2
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	08db      	lsrs	r3, r3, #3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b25b      	sxtb	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b25b      	sxtb	r3, r3
 8002fe8:	b2d9      	uxtb	r1, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	701a      	strb	r2, [r3, #0]
   for(i = 11; i < 22; i++)
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b15      	cmp	r3, #21
 8003000:	d9e1      	bls.n	8002fc6 <netInitRand+0x9a>
   }

   //Let (s178, s279, ..., s288) = (0, ..., 0, 1, 1, 1)
   NET_RAND_STATE_SET_BIT(state->s, 286, 1);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003008:	f043 0320 	orr.w	r3, r3, #32
 800300c:	b2da      	uxtb	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 287, 1);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301e:	b2da      	uxtb	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
   NET_RAND_STATE_SET_BIT(state->s, 288, 1);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003030:	b2da      	uxtb	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

   //The state is rotated over 4 full cycles, without generating key stream bit
   for(i = 0; i < (4 * 288); i++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e005      	b.n	800304a <netInitRand+0x11e>
   {
      netGetRandBit(state);
 800303e:	6938      	ldr	r0, [r7, #16]
 8003040:	f000 f856 	bl	80030f0 <netGetRandBit>
   for(i = 0; i < (4 * 288); i++)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	3301      	adds	r3, #1
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003050:	d3f5      	bcc.n	800303e <netInitRand+0x112>
   }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	20009220 	.word	0x20009220
 8003060:	20009168 	.word	0x20009168

08003064 <netGetRand>:
 * @brief Generate a random 32-bit value
 * @return Random value
 **/

uint32_t netGetRand(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
   uint_t i;
   uint32_t value;

   //Initialize value
   value = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]

   //Generate a random 32-bit value
   for(i = 0; i < 32; i++)
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e00c      	b.n	800308e <netGetRand+0x2a>
   {
      value |= netGetRandBit(&netContext.randState) << i;
 8003074:	480c      	ldr	r0, [pc, #48]	; (80030a8 <netGetRand+0x44>)
 8003076:	f000 f83b 	bl	80030f0 <netGetRandBit>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	603b      	str	r3, [r7, #0]
   for(i = 0; i < 32; i++)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3301      	adds	r3, #1
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b1f      	cmp	r3, #31
 8003092:	d9ef      	bls.n	8003074 <netGetRand+0x10>
   }

   //Return the value
   return value + netContext.entropy;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <netGetRand+0x48>)
 8003096:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4413      	add	r3, r2
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20009220 	.word	0x20009220
 80030ac:	20009168 	.word	0x20009168

080030b0 <netGetRandRange>:
 * @param[in] max Upper bound
 * @return Random value in the specified range
 **/

int32_t netGetRandRange(int32_t min, int32_t max)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
   int32_t value;

   //Valid parameters?
   if(max > min)
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	dd0f      	ble.n	80030e2 <netGetRandRange+0x32>
   {
      //Pick up a random value in the given range
      value = min + (netGetRand() % (max - min + 1));
 80030c2:	f7ff ffcf 	bl	8003064 <netGetRand>
 80030c6:	4603      	mov	r3, r0
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	1a8a      	subs	r2, r1, r2
 80030ce:	3201      	adds	r2, #1
 80030d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80030d4:	fb02 f201 	mul.w	r2, r2, r1
 80030d8:	1a9a      	subs	r2, r3, r2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e001      	b.n	80030e6 <netGetRandRange+0x36>
   }
   else
   {
      //Use default value
      value = min;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
   }

   //Return the random value
   return value;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <netGetRandBit>:
 * @param[in] state Pointer to the PRNG state
 * @return Key stream bit
 **/

uint32_t netGetRandBit(NetRandState *state)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
   uint8_t t2;
   uint8_t t3;
   uint8_t z;

   //Let t1 = s66 + s93
   t1 = NET_RAND_GET_BIT(state->s, 66);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7a9b      	ldrb	r3, [r3, #10]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 93);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7b5b      	ldrb	r3, [r3, #13]
 800310a:	091b      	lsrs	r3, r3, #4
 800310c:	b2db      	uxtb	r3, r3
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	b25a      	sxtb	r2, r3
 8003116:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800311a:	4053      	eors	r3, r2
 800311c:	b25b      	sxtb	r3, r3
 800311e:	72fb      	strb	r3, [r7, #11]

   //Let t2 = s162 + s177
   t2 = NET_RAND_GET_BIT(state->s, 162);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7d9b      	ldrb	r3, [r3, #22]
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 177);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7e1b      	ldrb	r3, [r3, #24]
 8003132:	b25b      	sxtb	r3, r3
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	b25a      	sxtb	r2, r3
 800313a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800313e:	4053      	eors	r3, r2
 8003140:	b25b      	sxtb	r3, r3
 8003142:	72bb      	strb	r3, [r7, #10]

   //Let t3 = s243 + s288
   t3 = NET_RAND_GET_BIT(state->s, 243);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	b2db      	uxtb	r3, r3
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 288);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800315a:	09db      	lsrs	r3, r3, #7
 800315c:	b2db      	uxtb	r3, r3
 800315e:	b25a      	sxtb	r2, r3
 8003160:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003164:	4053      	eors	r3, r2
 8003166:	b25b      	sxtb	r3, r3
 8003168:	727b      	strb	r3, [r7, #9]

   //Generate a key stream bit z
   z = t1 ^ t2 ^ t3;
 800316a:	7afa      	ldrb	r2, [r7, #11]
 800316c:	7abb      	ldrb	r3, [r7, #10]
 800316e:	4053      	eors	r3, r2
 8003170:	b2da      	uxtb	r2, r3
 8003172:	7a7b      	ldrb	r3, [r7, #9]
 8003174:	4053      	eors	r3, r2
 8003176:	723b      	strb	r3, [r7, #8]

   //Let t1 = t1 + s91.s92 + s171
   t1 ^= NET_RAND_GET_BIT(state->s, 91) & NET_RAND_GET_BIT(state->s, 92);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7b5b      	ldrb	r3, [r3, #13]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	b2da      	uxtb	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7b5b      	ldrb	r3, [r3, #13]
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	4013      	ands	r3, r2
 800318a:	b2db      	uxtb	r3, r3
 800318c:	b25b      	sxtb	r3, r3
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	b25a      	sxtb	r2, r3
 8003194:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003198:	4053      	eors	r3, r2
 800319a:	b25b      	sxtb	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
   t1 ^= NET_RAND_GET_BIT(state->s, 171);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7ddb      	ldrb	r3, [r3, #23]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	b25a      	sxtb	r2, r3
 80031ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80031b2:	4053      	eors	r3, r2
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	72fb      	strb	r3, [r7, #11]

   //Let t2 = t2 + s175.s176 + s264
   t2 ^= NET_RAND_GET_BIT(state->s, 175) & NET_RAND_GET_BIT(state->s, 176);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	7ddb      	ldrb	r3, [r3, #23]
 80031bc:	099b      	lsrs	r3, r3, #6
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7ddb      	ldrb	r3, [r3, #23]
 80031c4:	09db      	lsrs	r3, r3, #7
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4013      	ands	r3, r2
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	b25a      	sxtb	r2, r3
 80031d4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80031d8:	4053      	eors	r3, r2
 80031da:	b25b      	sxtb	r3, r3
 80031dc:	72bb      	strb	r3, [r7, #10]
   t2 ^= NET_RAND_GET_BIT(state->s, 264);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80031e4:	09db      	lsrs	r3, r3, #7
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	b25a      	sxtb	r2, r3
 80031ea:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80031ee:	4053      	eors	r3, r2
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	72bb      	strb	r3, [r7, #10]

   //Let t3 = t3 + s286.s287 + s69
   t3 ^= NET_RAND_GET_BIT(state->s, 286) & NET_RAND_GET_BIT(state->s, 287);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4013      	ands	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	b25b      	sxtb	r3, r3
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	b25a      	sxtb	r2, r3
 8003214:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003218:	4053      	eors	r3, r2
 800321a:	b25b      	sxtb	r3, r3
 800321c:	727b      	strb	r3, [r7, #9]
   t3 ^= NET_RAND_GET_BIT(state->s, 69);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7a9b      	ldrb	r3, [r3, #10]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	b2db      	uxtb	r3, r3
 8003226:	b25b      	sxtb	r3, r3
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	b25a      	sxtb	r2, r3
 800322e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003232:	4053      	eors	r3, r2
 8003234:	b25b      	sxtb	r3, r3
 8003236:	727b      	strb	r3, [r7, #9]

   //Rotate the internal state
   for(i = 35; i > 0; i--)
 8003238:	2323      	movs	r3, #35	; 0x23
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	e01a      	b.n	8003274 <netGetRandBit+0x184>
   {
      state->s[i] = (state->s[i] << 1) | (state->s[i - 1] >> 7);
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	3302      	adds	r3, #2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	b25a      	sxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b01      	subs	r3, #1
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	440b      	add	r3, r1
 8003254:	789b      	ldrb	r3, [r3, #2]
 8003256:	09db      	lsrs	r3, r3, #7
 8003258:	b2db      	uxtb	r3, r3
 800325a:	b25b      	sxtb	r3, r3
 800325c:	4313      	orrs	r3, r2
 800325e:	b25b      	sxtb	r3, r3
 8003260:	b2d9      	uxtb	r1, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	3302      	adds	r3, #2
 800326a:	460a      	mov	r2, r1
 800326c:	701a      	strb	r2, [r3, #0]
   for(i = 35; i > 0; i--)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b01      	subs	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e1      	bne.n	800323e <netGetRandBit+0x14e>
   }

   state->s[0] = state->s[0] << 1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	709a      	strb	r2, [r3, #2]

   //Let s1 = t3
   NET_RAND_STATE_SET_BIT(state->s, 1, t3);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	789b      	ldrb	r3, [r3, #2]
 800328a:	b25b      	sxtb	r3, r3
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	b25a      	sxtb	r2, r3
 8003292:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003296:	4313      	orrs	r3, r2
 8003298:	b25b      	sxtb	r3, r3
 800329a:	b2da      	uxtb	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	709a      	strb	r2, [r3, #2]
   //Let s94 = t1
   NET_RAND_STATE_SET_BIT(state->s, 94, t1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7b5b      	ldrb	r3, [r3, #13]
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	f023 0320 	bic.w	r3, r3, #32
 80032aa:	b25a      	sxtb	r2, r3
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	015b      	lsls	r3, r3, #5
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b25b      	sxtb	r3, r3
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	735a      	strb	r2, [r3, #13]
   //Let s178 = t2
   NET_RAND_STATE_SET_BIT(state->s, 178, t2);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	7e1b      	ldrb	r3, [r3, #24]
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	f023 0302 	bic.w	r3, r3, #2
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	7abb      	ldrb	r3, [r7, #10]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	761a      	strb	r2, [r3, #24]

   //Return one bit of key stream
   return z;
 80032d8:	7a3b      	ldrb	r3, [r7, #8]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <nicGetLogicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetLogicalInterface(NetInterface *interface)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the logical interface
   return interface;
 80032ee:	687b      	ldr	r3, [r7, #4]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <nicGetPhysicalInterface>:
 * @param[in] interface Pointer to the network interface
 * @return Pointer to the physical interface
 **/

NetInterface *nicGetPhysicalInterface(NetInterface *interface)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
      interface = interface->parent;
   }
#endif

   //Return a pointer to the physical interface
   return interface;
 8003304:	687b      	ldr	r3, [r7, #4]
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <nicGetSwitchPort>:
 * @param[in] interface Pointer to the network interface
 * @return Switch port identifier
 **/

uint8_t nicGetSwitchPort(NetInterface *interface)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]

   //Return switch port identifier
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
 800331a:	2300      	movs	r3, #0
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <nicIsParentInterface>:
 * @param[in] parent Pointer to the parent interface
 * @return TRUE is an existing parent/child relationship is found, else FALSE
 **/

bool_t nicIsParentInterface(NetInterface *interface, NetInterface *parent)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]

   //Return TRUE is an existing parent/child relationship is found
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	bf0c      	ite	eq
 800333a:	2301      	moveq	r3, #1
 800333c:	2300      	movne	r3, #0
 800333e:	b2db      	uxtb	r3, r3
#endif
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <nicTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void nicTick(NetInterface *interface)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	2b00      	cmp	r3, #0
 800335a:	d013      	beq.n	8003384 <nicTick+0x38>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003376:	2b00      	cmp	r3, #0
 8003378:	d004      	beq.n	8003384 <nicTick+0x38>
      {
         interface->nicDriver->enableIrq(interface);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
      }
   }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset, NetTxAncillary *ancillary)
{
 800338c:	b590      	push	{r4, r7, lr}
 800338e:	b087      	sub	sp, #28
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 800339a:	f7fd fee2 	bl	8001162 <osGetSystemTime>
 800339e:	4602      	mov	r2, r0
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <nicSendPacket+0xa8>)
 80033a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033a6:	4413      	add	r3, r2
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <nicSendPacket+0xa8>)
 80033aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d033      	beq.n	8003420 <nicSendPacket+0x94>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d02f      	beq.n	8003420 <nicSendPacket+0x94>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d102      	bne.n	80033d0 <nicSendPacket+0x44>
      {
         //The loopback interface is always available
         status = TRUE;
 80033ca:	2301      	movs	r3, #1
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	e007      	b.n	80033e0 <nicSendPacket+0x54>
      }
      else
      {
         //Wait for the transmitter to be ready to send
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3354      	adds	r3, #84	; 0x54
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fe5b 	bl	8001094 <osWaitForEvent>
 80033de:	6138      	str	r0, [r7, #16]
      }

      //Check whether the specified event is in signaled state
      if(status)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d019      	beq.n	800341a <nicSendPacket+0x8e>
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	4798      	blx	r3

         //Send the packet
         error = interface->nicDriver->sendPacket(interface, buffer, offset,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	69dc      	ldr	r4, [r3, #28]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	47a0      	blx	r4
 8003400:	4603      	mov	r3, r0
 8003402:	82fb      	strh	r3, [r7, #22]
            ancillary);

         //Re-enable interrupts if necessary
         if(interface->configured)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <nicSendPacket+0x9a>
         {
            interface->nicDriver->enableIrq(interface);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	4798      	blx	r3
      if(status)
 8003418:	e005      	b.n	8003426 <nicSendPacket+0x9a>
         }
      }
      else
      {
         //If the transmitter is busy, then drop the packet
         error = NO_ERROR;
 800341a:	2300      	movs	r3, #0
 800341c:	82fb      	strh	r3, [r7, #22]
      if(status)
 800341e:	e002      	b.n	8003426 <nicSendPacket+0x9a>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8003420:	2307      	movs	r3, #7
 8003422:	82fb      	strh	r3, [r7, #22]
 8003424:	e000      	b.n	8003428 <nicSendPacket+0x9c>
      if(status)
 8003426:	bf00      	nop
   }

   //Return status code
   return error;
 8003428:	8afb      	ldrh	r3, [r7, #22]
}
 800342a:	4618      	mov	r0, r3
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop
 8003434:	20009168 	.word	0x20009168

08003438 <nicUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t nicUpdateMacAddrFilter(NetInterface *interface)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
   error_t error;

   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <nicUpdateMacAddrFilter+0x3e>
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3

      //Update MAC filter table
      error = interface->nicDriver->updateMacAddrFilter(interface);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	4603      	mov	r3, r0
 800345e:	81fb      	strh	r3, [r7, #14]

      //Re-enable interrupts if necessary
      if(interface->configured)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <nicUpdateMacAddrFilter+0x42>
      {
         interface->nicDriver->enableIrq(interface);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e001      	b.n	800347a <nicUpdateMacAddrFilter+0x42>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 8003476:	2307      	movs	r3, #7
 8003478:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800347a:	89fb      	ldrh	r3, [r7, #14]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <nicProcessPacket>:
 *   the packet
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length,
   NetRxAncillary *ancillary)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
   NicType type;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 8003492:	f7fd fe66 	bl	8001162 <osGetSystemTime>
 8003496:	4602      	mov	r2, r0
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <nicProcessPacket+0x64>)
 800349a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800349e:	4413      	add	r3, r2
 80034a0:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <nicProcessPacket+0x64>)
 80034a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Check whether the interface is enabled for operation
   if(interface->configured)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <nicProcessPacket+0x5a>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	75fb      	strb	r3, [r7, #23]

#if (ETH_SUPPORT == ENABLED)
      //Ethernet interface?
      if(type == NIC_TYPE_ETHERNET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <nicProcessPacket+0x50>
      {
         //Process incoming Ethernet frame
         ethProcessFrame(interface, packet, length, ancillary);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7fd fea8 	bl	8001224 <ethProcessFrame>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	4798      	blx	r3
   }
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20009168 	.word	0x20009168

080034ec <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 80034ec:	b590      	push	{r4, r7, lr}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 80034f4:	f7fd fe35 	bl	8001162 <osGetSystemTime>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <nicNotifyLinkChange+0xbc>)
 80034fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003500:	4413      	add	r3, r2
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <nicNotifyLinkChange+0xbc>)
 8003504:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fef7 	bl	80032fc <nicGetPhysicalInterface>
 800350e:	6138      	str	r0, [r7, #16]

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <nicNotifyLinkChange+0x38>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	6938      	ldr	r0, [r7, #16]
 8003522:	4798      	blx	r3
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e032      	b.n	8003590 <nicNotifyLinkChange+0xa4>
   {
      //Point to the current interface
      virtualInterface = &netInterface[i];
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f240 628c 	movw	r2, #1676	; 0x68c
 8003530:	fb02 f303 	mul.w	r3, r2, r3
 8003534:	33e0      	adds	r3, #224	; 0xe0
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <nicNotifyLinkChange+0xbc>)
 8003538:	4413      	add	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

      //Check whether the current virtual interface is attached to the physical
      //interface
      if(nicIsParentInterface(virtualInterface, interface) &&
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fef2 	bl	8003328 <nicIsParentInterface>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d01f      	beq.n	800358a <nicNotifyLinkChange+0x9e>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff fee1 	bl	8003312 <nicGetSwitchPort>
 8003550:	4603      	mov	r3, r0
 8003552:	461c      	mov	r4, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fedc 	bl	8003312 <nicGetSwitchPort>
 800355a:	4603      	mov	r3, r0
      if(nicIsParentInterface(virtualInterface, interface) &&
 800355c:	429c      	cmp	r4, r3
 800355e:	d114      	bne.n	800358a <nicNotifyLinkChange+0x9e>
      {
         //Set operation mode
         virtualInterface->linkSpeed = interface->linkSpeed;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
         virtualInterface->duplexMode = interface->duplexMode;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

         //Update link state
         virtualInterface->linkState = interface->linkState;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

         //Process link state change event
         netProcessLinkChange(virtualInterface);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f7ff fa7f 	bl	8002a88 <netProcessLinkChange>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0c9      	beq.n	800352a <nicNotifyLinkChange+0x3e>
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	6938      	ldr	r0, [r7, #16]
 800359e:	4798      	blx	r3
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd90      	pop	{r4, r7, pc}
 80035a8:	20009168 	.word	0x20009168

080035ac <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   osMemset(socketTable, 0, sizeof(socketTable));
 80035b2:	f641 02d8 	movw	r2, #6360	; 0x18d8
 80035b6:	2100      	movs	r1, #0
 80035b8:	4820      	ldr	r0, [pc, #128]	; (800363c <socketInit+0x90>)
 80035ba:	f00c fccc 	bl	800ff56 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	e032      	b.n	800362a <socketInit+0x7e>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 80035c4:	4a1d      	ldr	r2, [pc, #116]	; (800363c <socketInit+0x90>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	4413      	add	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	601a      	str	r2, [r3, #0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f44f 721f 	mov.w	r2, #636	; 0x27c
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	3330      	adds	r3, #48	; 0x30
 80035e2:	4a16      	ldr	r2, [pc, #88]	; (800363c <socketInit+0x90>)
 80035e4:	4413      	add	r3, r2
 80035e6:	3304      	adds	r3, #4
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fd18 	bl	800101e <osCreateEvent>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d117      	bne.n	8003624 <socketInit+0x78>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	e00e      	b.n	8003618 <socketInit+0x6c>
            osDeleteEvent(&socketTable[j].event);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	3330      	adds	r3, #48	; 0x30
 8003606:	4a0d      	ldr	r2, [pc, #52]	; (800363c <socketInit+0x90>)
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fd21 	bl	8001054 <osDeleteEvent>
         for(j = 0; j < i; j++)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d3ec      	bcc.n	80035fa <socketInit+0x4e>

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 8003620:	2365      	movs	r3, #101	; 0x65
 8003622:	e006      	b.n	8003632 <socketInit+0x86>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3301      	adds	r3, #1
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b09      	cmp	r3, #9
 800362e:	d9c9      	bls.n	80035c4 <socketInit+0x18>
      }
   }

   //Successful initialization
   return NO_ERROR;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20009980 	.word	0x20009980

08003640 <tcpInit>:
 * @brief TCP related initialization
 * @return Error code
 **/

error_t tcpInit(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <tcpInit+0x18>)
 8003646:	2200      	movs	r2, #0
 8003648:	801a      	strh	r2, [r3, #0]

   //Successful initialization
   return NO_ERROR;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000328 	.word	0x20000328

0800365c <tcpProcessSegment>:
 *   the packet
 **/

void tcpProcessSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b08d      	sub	sp, #52	; 0x34
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]

   //A TCP implementation must silently discard an incoming segment that is
   //addressed to a broadcast or multicast address (refer to RFC 1122, section
   //4.2.3.10)
#if (IPV4_SUPPORT == ENABLED)
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	f040 81ab 	bne.w	80039ca <tcpProcessSegment+0x36e>
   {
      //Ensure the destination address is not a broadcast address
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4619      	mov	r1, r3
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f007 feb8 	bl	800b3f0 <ipv4IsBroadcastAddr>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 81a3 	bne.w	80039ce <tcpProcessSegment+0x372>
         return;
      //Ensure the destination address is not a multicast address
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003690:	2be0      	cmp	r3, #224	; 0xe0
 8003692:	f000 819e 	beq.w	80039d2 <tcpProcessSegment+0x376>
      //This should never occur...
      return;
   }

   //Retrieve the length of the TCP segment
   length = netBufferGetLength(buffer) - offset;
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe ff09 	bl	80024ae <netBufferGetLength>
 800369c:	4602      	mov	r2, r0
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]

   //Point to the TCP header
   segment = netBufferAt(buffer, offset);
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe ffc9 	bl	800263e <netBufferAt>
 80036ac:	6178      	str	r0, [r7, #20]
   //Sanity check
   if(segment == NULL)
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8190 	beq.w	80039d6 <tcpProcessSegment+0x37a>
      return;

   //Ensure the TCP header is valid
   if(length < sizeof(TcpHeader))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b13      	cmp	r3, #19
 80036ba:	f240 818e 	bls.w	80039da <tcpProcessSegment+0x37e>
      //Exit immediately
      return;
   }

   //Check header length
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	7b1b      	ldrb	r3, [r3, #12]
 80036c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	f240 8188 	bls.w	80039de <tcpProcessSegment+0x382>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	7b1b      	ldrb	r3, [r3, #12]
 80036d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f0c0 817e 	bcc.w	80039de <tcpProcessSegment+0x382>
      //Exit immediately
      return;
   }

   //Verify TCP checksum
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	1d18      	adds	r0, r3, #4
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f7fe fb60 	bl	8001db6 <ipCalcUpperLayerChecksumEx>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f040 8172 	bne.w	80039e2 <tcpProcessSegment+0x386>
      //Exit immediately
      return;
   }

   //No matching socket in the LISTEN state for the moment
   passiveSocket = NULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]

   //Look through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	e06b      	b.n	80037e0 <tcpProcessSegment+0x184>
   {
      //Point to the current socket
      socket = socketTable + i;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f44f 721f 	mov.w	r2, #636	; 0x27c
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4aa4      	ldr	r2, [pc, #656]	; (80039a4 <tcpProcessSegment+0x348>)
 8003714:	4413      	add	r3, r2
 8003716:	623b      	str	r3, [r7, #32]

      //TCP socket found?
      if(socket->type != SOCKET_TYPE_STREAM)
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d14d      	bne.n	80037bc <tcpProcessSegment+0x160>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d004      	beq.n	8003732 <tcpProcessSegment+0xd6>
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	429a      	cmp	r2, r3
 8003730:	d146      	bne.n	80037c0 <tcpProcessSegment+0x164>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(segment->destPort))
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	8b1b      	ldrh	r3, [r3, #24]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <tcpProcessSegment+0x168>
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	8b1c      	ldrh	r4, [r3, #24]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	885b      	ldrh	r3, [r3, #2]
 8003742:	b29b      	uxth	r3, r3
 8003744:	4618      	mov	r0, r3
 8003746:	f7fd fb8a 	bl	8000e5e <swapInt16>
 800374a:	4603      	mov	r3, r0
 800374c:	429c      	cmp	r4, r3
 800374e:	d139      	bne.n	80037c4 <tcpProcessSegment+0x168>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d137      	bne.n	80037c8 <tcpProcessSegment+0x16c>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <tcpProcessSegment+0x118>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d131      	bne.n	80037cc <tcpProcessSegment+0x170>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d12d      	bne.n	80037d0 <tcpProcessSegment+0x174>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <tcpProcessSegment+0x134>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d127      	bne.n	80037d4 <tcpProcessSegment+0x178>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d123      	bne.n	80037d8 <tcpProcessSegment+0x17c>
         //This should never occur...
         continue;
      }

      //Keep track of the first matching socket in the LISTEN state
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d104      	bne.n	80037a4 <tcpProcessSegment+0x148>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <tcpProcessSegment+0x148>
         passiveSocket = socket;
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	61fb      	str	r3, [r7, #28]

      //Source port filtering
      if(socket->remotePort != ntohs(segment->srcPort))
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd fb55 	bl	8000e5e <swapInt16>
 80037b4:	4603      	mov	r3, r0
 80037b6:	429c      	cmp	r4, r3
 80037b8:	d016      	beq.n	80037e8 <tcpProcessSegment+0x18c>
         continue;
 80037ba:	e00e      	b.n	80037da <tcpProcessSegment+0x17e>
         continue;
 80037bc:	bf00      	nop
 80037be:	e00c      	b.n	80037da <tcpProcessSegment+0x17e>
         continue;
 80037c0:	bf00      	nop
 80037c2:	e00a      	b.n	80037da <tcpProcessSegment+0x17e>
         continue;
 80037c4:	bf00      	nop
 80037c6:	e008      	b.n	80037da <tcpProcessSegment+0x17e>
         continue;
 80037c8:	bf00      	nop
 80037ca:	e006      	b.n	80037da <tcpProcessSegment+0x17e>
               continue;
 80037cc:	bf00      	nop
 80037ce:	e004      	b.n	80037da <tcpProcessSegment+0x17e>
               continue;
 80037d0:	bf00      	nop
 80037d2:	e002      	b.n	80037da <tcpProcessSegment+0x17e>
               continue;
 80037d4:	bf00      	nop
 80037d6:	e000      	b.n	80037da <tcpProcessSegment+0x17e>
               continue;
 80037d8:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	3301      	adds	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	2b09      	cmp	r3, #9
 80037e4:	d990      	bls.n	8003708 <tcpProcessSegment+0xac>
 80037e6:	e000      	b.n	80037ea <tcpProcessSegment+0x18e>

      //A matching socket has been found
      break;
 80037e8:	bf00      	nop
   }

   //If no matching socket has been found then try to use the first matching
   //socket in the LISTEN state
   if(i >= SOCKET_MAX_COUNT)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	2b09      	cmp	r3, #9
 80037ee:	d901      	bls.n	80037f4 <tcpProcessSegment+0x198>
      socket = passiveSocket;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	623b      	str	r3, [r7, #32]

   //Offset to the first data byte
   offset += segment->dataOffset * 4;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	7b1b      	ldrb	r3, [r3, #12]
 80037f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	461a      	mov	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	603b      	str	r3, [r7, #0]
   //Calculate the length of the data
   length -= segment->dataOffset * 4;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	7b1b      	ldrb	r3, [r3, #12]
 800380c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003810:	b2db      	uxtb	r3, r3
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	461a      	mov	r2, r3
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
   //Debug message
   TRACE_DEBUG("%s: TCP segment received (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   if(socket == NULL)
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <tcpProcessSegment+0x1d4>
   {
      tcpDumpHeader(segment, length, 0, 0);
 8003822:	2300      	movs	r3, #0
 8003824:	2200      	movs	r2, #0
 8003826:	69b9      	ldr	r1, [r7, #24]
 8003828:	6978      	ldr	r0, [r7, #20]
 800382a:	f002 fb4c 	bl	8005ec6 <tcpDumpHeader>
 800382e:	e009      	b.n	8003844 <tcpProcessSegment+0x1e8>
   }
   else
   {
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800383c:	69b9      	ldr	r1, [r7, #24]
 800383e:	6978      	ldr	r0, [r7, #20]
 8003840:	f002 fb41 	bl	8005ec6 <tcpDumpHeader>
   }

   //Convert from network byte order to host byte order
   segment->srcPort = ntohs(segment->srcPort);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	b29b      	uxth	r3, r3
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fb07 	bl	8000e5e <swapInt16>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	801a      	strh	r2, [r3, #0]
   segment->destPort = ntohs(segment->destPort);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	885b      	ldrh	r3, [r3, #2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fafd 	bl	8000e5e <swapInt16>
 8003864:	4603      	mov	r3, r0
 8003866:	461a      	mov	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	805a      	strh	r2, [r3, #2]
   segment->seqNum = ntohl(segment->seqNum);
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fb02 	bl	8000e7a <swapInt32>
 8003876:	4602      	mov	r2, r0
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	605a      	str	r2, [r3, #4]
   segment->ackNum = ntohl(segment->ackNum);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fafa 	bl	8000e7a <swapInt32>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	609a      	str	r2, [r3, #8]
   segment->window = ntohs(segment->window);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	89db      	ldrh	r3, [r3, #14]
 8003890:	b29b      	uxth	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f7fd fae3 	bl	8000e5e <swapInt16>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	81da      	strh	r2, [r3, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	8a5b      	ldrh	r3, [r3, #18]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fad9 	bl	8000e5e <swapInt16>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	825a      	strh	r2, [r3, #18]

   //Specified port unreachable?
   if(socket == NULL)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d110      	bne.n	80038dc <tcpProcessSegment+0x280>
   {
      //An incoming segment not containing a RST causes a reset to be sent in
      //response
      if((segment->flags & TCP_FLAG_RST) == 0)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	7b5b      	ldrb	r3, [r3, #13]
 80038be:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 808c 	bne.w	80039e6 <tcpProcessSegment+0x38a>
      {
         tcpRejectSegment(interface, pseudoHeader, segment, length);
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 ff4d 	bl	8004774 <tcpRejectSegment>
      }

      //Return immediately
      return;
 80038da:	e084      	b.n	80039e6 <tcpProcessSegment+0x38a>
   }

   //Check current state
   switch(socket->state)
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80038e2:	2b0a      	cmp	r3, #10
 80038e4:	d86c      	bhi.n	80039c0 <tcpProcessSegment+0x364>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <tcpProcessSegment+0x290>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	08003919 	.word	0x08003919
 80038f0:	08003927 	.word	0x08003927
 80038f4:	08003939 	.word	0x08003939
 80038f8:	08003945 	.word	0x08003945
 80038fc:	08003957 	.word	0x08003957
 8003900:	08003969 	.word	0x08003969
 8003904:	08003975 	.word	0x08003975
 8003908:	08003981 	.word	0x08003981
 800390c:	08003993 	.word	0x08003993
 8003910:	080039a9 	.word	0x080039a9
 8003914:	080039b5 	.word	0x080039b5
   {
   //Process CLOSED state
   case TCP_STATE_CLOSED:
      //This is the default state that each connection starts in before the
      //process of establishing it begins
      tcpStateClosed(interface, pseudoHeader, segment, length);
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f866 	bl	80039f0 <tcpStateClosed>
      break;
 8003924:	e060      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process LISTEN state
   case TCP_STATE_LISTEN:
      //A device (normally a server) is waiting to receive a synchronize (SYN)
      //message from a client. It has not yet sent its own SYN message
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	6a38      	ldr	r0, [r7, #32]
 8003932:	f000 f877 	bl	8003a24 <tcpStateListen>
      break;
 8003936:	e057      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process SYN_SENT state
   case TCP_STATE_SYN_SENT:
      //The device (normally a client) has sent a synchronize (SYN) message and
      //is waiting for a matching SYN from the other device (usually a server)
      tcpStateSynSent(socket, segment, length);
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	6a38      	ldr	r0, [r7, #32]
 800393e:	f000 f943 	bl	8003bc8 <tcpStateSynSent>
      break;
 8003942:	e051      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process SYN_RECEIVED state
   case TCP_STATE_SYN_RECEIVED:
      //The device has both received a SYN from its partner and sent its own
      //SYN. It is now waiting for an ACK to its SYN to finish connection setup
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6979      	ldr	r1, [r7, #20]
 800394e:	6a38      	ldr	r0, [r7, #32]
 8003950:	f000 fa32 	bl	8003db8 <tcpStateSynReceived>
      break;
 8003954:	e048      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process ESTABLISHED state
   case TCP_STATE_ESTABLISHED:
      //Data can be exchanged freely once both devices in the connection enter
      //this state. This will continue until the connection is closed
      tcpStateEstablished(socket, segment, buffer, offset, length);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6979      	ldr	r1, [r7, #20]
 8003960:	6a38      	ldr	r0, [r7, #32]
 8003962:	f000 fa90 	bl	8003e86 <tcpStateEstablished>
      break;
 8003966:	e03f      	b.n	80039e8 <tcpProcessSegment+0x38c>
   //Process CLOSE_WAIT state
   case TCP_STATE_CLOSE_WAIT:
      //The device has received a close request (FIN) from the other device. It
      //must now wait for the application to acknowledge this request and
      //generate a matching request
      tcpStateCloseWait(socket, segment, length);
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	6979      	ldr	r1, [r7, #20]
 800396c:	6a38      	ldr	r0, [r7, #32]
 800396e:	f000 fb04 	bl	8003f7a <tcpStateCloseWait>
      break;
 8003972:	e039      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process LAST_ACK state
   case TCP_STATE_LAST_ACK:
      //A device that has already received a close request and acknowledged it,
      //has sent its own FIN and is waiting for an ACK to this request
      tcpStateLastAck(socket, segment, length);
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	6a38      	ldr	r0, [r7, #32]
 800397a:	f000 fb41 	bl	8004000 <tcpStateLastAck>
      break;
 800397e:	e033      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Process FIN_WAIT_1 state
   case TCP_STATE_FIN_WAIT_1:
      //A device in this state is waiting for an ACK for a FIN it has sent, or
      //is waiting for a connection termination request from the other device
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6979      	ldr	r1, [r7, #20]
 800398a:	6a38      	ldr	r0, [r7, #32]
 800398c:	f000 fb79 	bl	8004082 <tcpStateFinWait1>
      break;
 8003990:	e02a      	b.n	80039e8 <tcpProcessSegment+0x38c>
   //Process FIN_WAIT_2 state
   case TCP_STATE_FIN_WAIT_2:
      //A device in this state has received an ACK for its request to terminate
      //the connection and is now waiting for a matching FIN from the other
      //device
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6979      	ldr	r1, [r7, #20]
 800399c:	6a38      	ldr	r0, [r7, #32]
 800399e:	f000 fc06 	bl	80041ae <tcpStateFinWait2>
      break;
 80039a2:	e021      	b.n	80039e8 <tcpProcessSegment+0x38c>
 80039a4:	20009980 	.word	0x20009980

   //Process CLOSING state
   case TCP_STATE_CLOSING:
      //The device has received a FIN from the other device and sent an ACK for
      //it, but not yet received an ACK for its own FIN message
      tcpStateClosing(socket, segment, length);
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	6979      	ldr	r1, [r7, #20]
 80039ac:	6a38      	ldr	r0, [r7, #32]
 80039ae:	f000 fc75 	bl	800429c <tcpStateClosing>
      break;
 80039b2:	e019      	b.n	80039e8 <tcpProcessSegment+0x38c>
   case TCP_STATE_TIME_WAIT:
      //The device has now received a FIN from the other device and acknowledged
      //it, and sent its own FIN and received an ACK for it. We are done, except
      //for waiting to ensure the ACK is received and prevent potential overlap
      //with new connections
      tcpStateTimeWait(socket, segment, length);
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	6a38      	ldr	r0, [r7, #32]
 80039ba:	f000 fcba 	bl	8004332 <tcpStateTimeWait>
      break;
 80039be:	e013      	b.n	80039e8 <tcpProcessSegment+0x38c>

   //Invalid state...
   default:
      //Back to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80039c0:	2100      	movs	r1, #0
 80039c2:	6a38      	ldr	r0, [r7, #32]
 80039c4:	f002 f847 	bl	8005a56 <tcpChangeState>
      //Silently discard incoming packet
      break;
 80039c8:	e00e      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039ca:	bf00      	nop
 80039cc:	e00c      	b.n	80039e8 <tcpProcessSegment+0x38c>
         return;
 80039ce:	bf00      	nop
 80039d0:	e00a      	b.n	80039e8 <tcpProcessSegment+0x38c>
         return;
 80039d2:	bf00      	nop
 80039d4:	e008      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039d6:	bf00      	nop
 80039d8:	e006      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <tcpProcessSegment+0x38c>
      return;
 80039e6:	bf00      	nop
   }
}
 80039e8:	372c      	adds	r7, #44	; 0x2c
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}
 80039ee:	bf00      	nop

080039f0 <tcpStateClosed>:
 * @param[in] length Length of the segment data
 **/

void tcpStateClosed(NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes a reset to be sent in
   //response
   if((segment->flags & TCP_FLAG_RST) == 0)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7b5b      	ldrb	r3, [r3, #13]
 8003a02:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <tcpStateClosed+0x2c>
   {
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 feac 	bl	8004774 <tcpRejectSegment>
   }
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   IpPseudoHeader *pseudoHeader, TcpHeader *segment, size_t length)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if((segment->flags & TCP_FLAG_RST) != 0)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	7b5b      	ldrb	r3, [r3, #13]
 8003a36:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 80b7 	bne.w	8003bb4 <tcpStateListen+0x190>
      return;

   //Any acknowledgment is bad if it arrives on a connection still in the
   //LISTEN state
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	7b5b      	ldrb	r3, [r3, #13]
 8003a4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <tcpStateListen+0x42>
   {
      //A reset segment should be formed for any arriving ACK-bearing segment
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	68b8      	ldr	r0, [r7, #8]
 8003a60:	f000 fe88 	bl	8004774 <tcpRejectSegment>
      //Return immediately
      return;
 8003a64:	e0ad      	b.n	8003bc2 <tcpStateListen+0x19e>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	7b5b      	ldrb	r3, [r3, #13]
 8003a6a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80a4 	beq.w	8003bc2 <tcpStateListen+0x19e>
   {
      //Silently drop duplicate SYN segments
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f001 fa35 	bl	8004eee <tcpIsDuplicateSyn>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 8096 	bne.w	8003bb8 <tcpStateListen+0x194>
         return;

      //Check whether the SYN queue is empty
      if(socket->synQueue == NULL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <tcpStateListen+0x84>
      {
         //Allocate memory to save incoming data
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 8003a96:	2024      	movs	r0, #36	; 0x24
 8003a98:	f7fe fc9a 	bl	80023d0 <memPoolAlloc>
 8003a9c:	61b8      	str	r0, [r7, #24]
         //Add the newly created item to the queue
         socket->synQueue = queueItem;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8003aa6:	e02b      	b.n	8003b00 <tcpStateListen+0xdc>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->synQueue;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003aae:	61bb      	str	r3, [r7, #24]
         firstQueueItem = socket->synQueue;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8003ab6:	617b      	str	r3, [r7, #20]

         //Reach the last item in the SYN queue
         for(i = 1; queueItem->next != NULL; i++)
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e005      	b.n	8003aca <tcpStateListen+0xa6>
         {
            queueItem = queueItem->next;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	61bb      	str	r3, [r7, #24]
         for(i = 1; queueItem->next != NULL; i++)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f5      	bne.n	8003abe <tcpStateListen+0x9a>
         }

         //Check whether the SYN queue is full
         if(i >= socket->synQueueSize)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d307      	bcc.n	8003aee <tcpStateListen+0xca>
         {
            //Remove the first item if the SYN queue runs out of space
            socket->synQueue = firstQueueItem->next;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
            //Deallocate memory buffer
            memPoolFree(firstQueueItem);
 8003ae8:	6978      	ldr	r0, [r7, #20]
 8003aea:	f7fe fc93 	bl	8002414 <memPoolFree>
         }

         //Allocate memory to save incoming data
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 8003aee:	2024      	movs	r0, #36	; 0x24
 8003af0:	f7fe fc6e 	bl	80023d0 <memPoolAlloc>
 8003af4:	4602      	mov	r2, r0
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	61bb      	str	r3, [r7, #24]
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d05a      	beq.n	8003bbc <tcpStateListen+0x198>
         return;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 is currently used?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d158      	bne.n	8003bc0 <tcpStateListen+0x19c>
      {
         //Save the source IPv4 address
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2204      	movs	r2, #4
 8003b12:	609a      	str	r2, [r3, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	60da      	str	r2, [r3, #12]

         //Save the destination IPv4 address
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	615a      	str	r2, [r3, #20]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	619a      	str	r2, [r3, #24]
         //This should never occur...
         return;
      }

      //Initialize next field
      queueItem->next = NULL;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
      //Underlying network interface
      queueItem->interface = interface;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	605a      	str	r2, [r3, #4]
      //Save the port number of the client
      queueItem->srcPort = segment->srcPort;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	821a      	strh	r2, [r3, #16]
      //Save the initial sequence number
      queueItem->isn = segment->seqNum;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	61da      	str	r2, [r3, #28]
      //Default MSS value
      queueItem->mss = MIN(TCP_DEFAULT_MSS, TCP_MAX_MSS);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8003b4e:	841a      	strh	r2, [r3, #32]

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8003b50:	2102      	movs	r1, #2
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f000 ff5d 	bl	8004a12 <tcpGetOption>
 8003b58:	6138      	str	r0, [r7, #16]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d025      	beq.n	8003bac <tcpStateListen+0x188>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d121      	bne.n	8003bac <tcpStateListen+0x188>
      {
         //Retrieve MSS value
         osMemcpy(&queueItem->mss, option->value, 2);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	3320      	adds	r3, #32
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	3202      	adds	r2, #2
 8003b70:	8812      	ldrh	r2, [r2, #0]
 8003b72:	b292      	uxth	r2, r2
 8003b74:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         queueItem->mss = ntohs(queueItem->mss);
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	8c1b      	ldrh	r3, [r3, #32]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f96f 	bl	8000e5e <swapInt16>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	841a      	strh	r2, [r3, #32]

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", queueItem->mss);

         //Make sure that the MSS advertised by the peer is acceptable
         queueItem->mss = MIN(queueItem->mss, TCP_MAX_MSS);
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	8c1b      	ldrh	r3, [r3, #32]
 8003b8c:	f240 5296 	movw	r2, #1430	; 0x596
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf28      	it	cs
 8003b94:	4613      	movcs	r3, r2
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	841a      	strh	r2, [r3, #32]
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	8c1b      	ldrh	r3, [r3, #32]
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	bf38      	it	cc
 8003ba4:	2340      	movcc	r3, #64	; 0x40
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	841a      	strh	r2, [r3, #32]
      }

      //Notify user that a connection request is pending
      tcpUpdateEvents(socket);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f001 ff79 	bl	8005aa4 <tcpUpdateEvents>
 8003bb2:	e006      	b.n	8003bc2 <tcpStateListen+0x19e>
      return;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <tcpStateListen+0x19e>
         return;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <tcpStateListen+0x19e>
         return;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <tcpStateListen+0x19e>
         return;
 8003bc0:	bf00      	nop

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, TcpHeader *segment, size_t length)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	7b5b      	ldrb	r3, [r3, #13]
 8003bd8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d017      	beq.n	8003c16 <tcpStateSynSent+0x4e>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d010      	beq.n	8003c16 <tcpStateSynSent+0x4e>
      {
         //Send a reset segment unless the RST bit is set
         if((segment->flags & TCP_FLAG_RST) == 0)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	7b5b      	ldrb	r3, [r3, #13]
 8003bf8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 80d2 	bne.w	8003dac <tcpStateSynSent+0x1e4>
         {
            tcpSendResetSegment(socket, segment->ackNum);
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fd7e 	bl	8004710 <tcpSendResetSegment>
         }

         //Drop the segment and return
         return;
 8003c14:	e0ca      	b.n	8003dac <tcpStateSynSent+0x1e4>
      }
   }

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	7b5b      	ldrb	r3, [r3, #13]
 8003c1a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <tcpStateSynSent+0x7e>
   {
      //Make sure the ACK is acceptable
      if((segment->flags & TCP_FLAG_ACK) != 0)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	7b5b      	ldrb	r3, [r3, #13]
 8003c2c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80ba 	beq.w	8003db0 <tcpStateSynSent+0x1e8>
      {
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f001 ff09 	bl	8005a56 <tcpChangeState>
         MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
         TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);
      }

      //Drop the segment and return
      return;
 8003c44:	e0b4      	b.n	8003db0 <tcpStateSynSent+0x1e8>
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	7b5b      	ldrb	r3, [r3, #13]
 8003c4a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80ac 	beq.w	8003db2 <tcpStateSynSent+0x1ea>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if((segment->flags & TCP_FLAG_ACK) != 0)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	7b5b      	ldrb	r3, [r3, #13]
 8003c74:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0310 	and.w	r3, r3, #16
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d004      	beq.n	8003c8c <tcpStateSynSent+0xc4>
      {
         socket->sndUna = segment->ackNum;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      }

      //Compute retransmission timeout
      tcpComputeRto(socket);
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f001 fcb1 	bl	80055f4 <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby
      //acknowledged should be removed
      tcpUpdateRetransmitQueue(socket);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f001 fae3 	bl	800525e <tcpUpdateRetransmitQueue>

      //Get the maximum segment size
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 8003c98:	2102      	movs	r1, #2
 8003c9a:	68b8      	ldr	r0, [r7, #8]
 8003c9c:	f000 feb9 	bl	8004a12 <tcpGetOption>
 8003ca0:	6178      	str	r0, [r7, #20]

      //Specified option found?
      if(option != NULL && option->length == 4)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d02b      	beq.n	8003d00 <tcpStateSynSent+0x138>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d127      	bne.n	8003d00 <tcpStateSynSent+0x138>
      {
         //Retrieve MSS value
         osMemcpy(&socket->smss, option->value, 2);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	339c      	adds	r3, #156	; 0x9c
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	3202      	adds	r2, #2
 8003cb8:	8812      	ldrh	r2, [r2, #0]
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	801a      	strh	r2, [r3, #0]
         //Convert from network byte order to host byte order
         socket->smss = ntohs(socket->smss);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd f8ca 	bl	8000e5e <swapInt16>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

         //Debug message
         TRACE_DEBUG("Remote host MSS = %" PRIu16 "\r\n", socket->smss);

         //Make sure that the MSS advertised by the peer is acceptable
         socket->smss = MIN(socket->smss, TCP_MAX_MSS);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003cda:	f240 5296 	movw	r2, #1430	; 0x596
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	bf28      	it	cs
 8003ce2:	4613      	movcs	r3, r2
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003cf2:	2b40      	cmp	r3, #64	; 0x40
 8003cf4:	bf38      	it	cc
 8003cf6:	2340      	movcc	r3, #64	; 0x40
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN(TCP_INITIAL_WINDOW * socket->smss, socket->txBufferSize);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	460b      	mov	r3, r1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	440b      	add	r3, r1
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bf28      	it	cs
 8003d18:	4613      	movcs	r3, r2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	dd28      	ble.n	8003d86 <tcpStateSynSent+0x1be>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	89db      	ldrh	r3, [r3, #14]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
         socket->sndWl1 = segment->seqNum;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
         socket->sndWl2 = segment->ackNum;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	89db      	ldrh	r3, [r3, #14]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	9101      	str	r1, [sp, #4]
 8003d70:	2100      	movs	r1, #0
 8003d72:	9100      	str	r1, [sp, #0]
 8003d74:	2110      	movs	r1, #16
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fb3e 	bl	80043f8 <tcpSendSegment>
            FALSE);

         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8003d7c:	2104      	movs	r1, #4
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f001 fe69 	bl	8005a56 <tcpChangeState>
 8003d84:	e015      	b.n	8003db2 <tcpStateSynSent+0x1ea>
      }
      else
      {
         //Form an SYN ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d92:	2101      	movs	r1, #1
 8003d94:	9101      	str	r1, [sp, #4]
 8003d96:	2100      	movs	r1, #0
 8003d98:	9100      	str	r1, [sp, #0]
 8003d9a:	2112      	movs	r1, #18
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 fb2b 	bl	80043f8 <tcpSendSegment>
            socket->rcvNxt, 0, TRUE);

         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 8003da2:	2103      	movs	r1, #3
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f001 fe56 	bl	8005a56 <tcpChangeState>
 8003daa:	e002      	b.n	8003db2 <tcpStateSynSent+0x1ea>
         return;
 8003dac:	bf00      	nop
 8003dae:	e000      	b.n	8003db2 <tcpStateSynSent+0x1ea>
      return;
 8003db0:	bf00      	nop
      }
   }
}
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <tcpStateSynReceived>:
 * @param[in] length Length of the segment data
 **/

void tcpStateSynReceived(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-RECEIVED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fe78 	bl	8004ac0 <tcpCheckSeqNum>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d14f      	bne.n	8003e76 <tcpStateSynReceived+0xbe>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	7b5b      	ldrb	r3, [r3, #13]
 8003dda:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <tcpStateSynReceived+0x3a>
   {
      //Return to CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003de8:	2100      	movs	r1, #0
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f001 fe33 	bl	8005a56 <tcpChangeState>
      //CLOSED state from either the SYN-SENT state or the SYN-RECEIVED state
      MIB2_INC_COUNTER32(tcpGroup.tcpAttemptFails, 1);
      TCP_MIB_INC_COUNTER32(tcpAttemptFails, 1);

      //Return immediately
      return;
 8003df0:	e046      	b.n	8003e80 <tcpStateSynReceived+0xc8>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 ff01 	bl	8004bfe <tcpCheckSyn>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d13b      	bne.n	8003e7a <tcpStateSynReceived+0xc2>
      return;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	7b5b      	ldrb	r3, [r3, #13]
 8003e06:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d034      	beq.n	8003e7e <tcpStateSynReceived+0xc6>
      return;

   //Make sure the acknowledgment number is valid
   if(segment->ackNum != socket->sndNxt)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d006      	beq.n	8003e30 <tcpStateSynReceived+0x78>
   {
      //If the segment acknowledgment is not acceptable, form a reset segment
      //and send it
      tcpSendResetSegment(socket, segment->ackNum);
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	4619      	mov	r1, r3
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fc71 	bl	8004710 <tcpSendResetSegment>

      //Drop the segment and return
      return;
 8003e2e:	e027      	b.n	8003e80 <tcpStateSynReceived+0xc8>
   }

   //Update the send window before entering ESTABLISHED state (refer to
   //RFC 1122, section 4.2.2.20)
   socket->sndWnd = segment->window;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	89db      	ldrh	r3, [r3, #14]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
   socket->sndWl1 = segment->seqNum;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
   socket->sndWl2 = segment->ackNum;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

   //Maximum send window it has seen so far on the connection
   socket->maxSndWnd = segment->window;
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	89db      	ldrh	r3, [r3, #14]
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

   //Enter ESTABLISHED state
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f001 fdf9 	bl	8005a56 <tcpChangeState>
   //And continue processing...
   tcpStateEstablished(socket, segment, buffer, offset, length);
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f809 	bl	8003e86 <tcpStateEstablished>
 8003e74:	e004      	b.n	8003e80 <tcpStateSynReceived+0xc8>
      return;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <tcpStateSynReceived+0xc8>
      return;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <tcpStateSynReceived+0xc8>
      return;
 8003e7e:	bf00      	nop
}
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b088      	sub	sp, #32
 8003e8a:	af02      	add	r7, sp, #8
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
   uint_t flags = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8003e98:	6a3a      	ldr	r2, [r7, #32]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 fe0f 	bl	8004ac0 <tcpCheckSeqNum>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d160      	bne.n	8003f6a <tcpStateEstablished+0xe4>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	7b5b      	ldrb	r3, [r3, #13]
 8003eac:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <tcpStateEstablished+0x3e>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f001 fdca 	bl	8005a56 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 8003ec2:	e057      	b.n	8003f74 <tcpStateEstablished+0xee>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fe98 	bl	8004bfe <tcpCheckSyn>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d14c      	bne.n	8003f6e <tcpStateEstablished+0xe8>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fec4 	bl	8004c66 <tcpCheckAck>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d146      	bne.n	8003f72 <tcpStateEstablished+0xec>
      return;

   //Process the segment text
   if(length > 0)
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <tcpStateEstablished+0x74>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f001 f905 	bl	8005104 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	7b5b      	ldrb	r3, [r3, #13]
 8003efe:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d021      	beq.n	8003f50 <tcpStateEstablished+0xca>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6859      	ldr	r1, [r3, #4]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	440b      	add	r3, r1
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d118      	bne.n	8003f50 <tcpStateEstablished+0xca>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f38:	2100      	movs	r1, #0
 8003f3a:	9101      	str	r1, [sp, #4]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	9100      	str	r1, [sp, #0]
 8003f40:	2110      	movs	r1, #16
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 fa58 	bl	80043f8 <tcpSendSegment>
            FALSE);

         //Switch to the CLOSE-WAIT state
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 8003f48:	2105      	movs	r1, #5
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f001 fd83 	bl	8005a56 <tcpChangeState>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <tcpStateEstablished+0xda>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 8003f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f5e:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce short segments (refer
   //to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8003f60:	6979      	ldr	r1, [r7, #20]
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f001 fc5c 	bl	8005820 <tcpNagleAlgo>
 8003f68:	e004      	b.n	8003f74 <tcpStateEstablished+0xee>
      return;
 8003f6a:	bf00      	nop
 8003f6c:	e002      	b.n	8003f74 <tcpStateEstablished+0xee>
      return;
 8003f6e:	bf00      	nop
 8003f70:	e000      	b.n	8003f74 <tcpStateEstablished+0xee>
      return;
 8003f72:	bf00      	nop
}
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
   uint_t flags = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fd96 	bl	8004ac0 <tcpCheckSeqNum>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d12a      	bne.n	8003ff0 <tcpStateCloseWait+0x76>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	7b5b      	ldrb	r3, [r3, #13]
 8003f9e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <tcpStateCloseWait+0x3c>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8003fac:	2100      	movs	r1, #0
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f001 fd51 	bl	8005a56 <tcpChangeState>
      //CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state
      MIB2_INC_COUNTER32(tcpGroup.tcpEstabResets, 1);
      TCP_MIB_INC_COUNTER32(tcpEstabResets, 1);

      //Return immediately
      return;
 8003fb4:	e021      	b.n	8003ffa <tcpStateCloseWait+0x80>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fe1f 	bl	8004bfe <tcpCheckSyn>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d116      	bne.n	8003ff4 <tcpStateCloseWait+0x7a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fe4b 	bl	8004c66 <tcpCheckAck>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d110      	bne.n	8003ff8 <tcpStateCloseWait+0x7e>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <tcpStateCloseWait+0x6c>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 8003fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fe4:	617b      	str	r3, [r7, #20]
   }
#endif

   //The Nagle algorithm should be implemented to coalesce
   //short segments (refer to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f001 fc19 	bl	8005820 <tcpNagleAlgo>
 8003fee:	e004      	b.n	8003ffa <tcpStateCloseWait+0x80>
      return;
 8003ff0:	bf00      	nop
 8003ff2:	e002      	b.n	8003ffa <tcpStateCloseWait+0x80>
      return;
 8003ff4:	bf00      	nop
 8003ff6:	e000      	b.n	8003ffa <tcpStateCloseWait+0x80>
      return;
 8003ff8:	bf00      	nop
}
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	68b9      	ldr	r1, [r7, #8]
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 fd55 	bl	8004ac0 <tcpCheckSeqNum>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d12a      	bne.n	8004072 <tcpStateLastAck+0x72>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	7b5b      	ldrb	r3, [r3, #13]
 8004020:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <tcpStateLastAck+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800402e:	2100      	movs	r1, #0
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f001 fd10 	bl	8005a56 <tcpChangeState>
      //Return immediately
      return;
 8004036:	e021      	b.n	800407c <tcpStateLastAck+0x7c>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 fdde 	bl	8004bfe <tcpCheckSyn>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d116      	bne.n	8004076 <tcpStateLastAck+0x76>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	7b5b      	ldrb	r3, [r3, #13]
 800404c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004050:	b2db      	uxtb	r3, r3
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00f      	beq.n	800407a <tcpStateLastAck+0x7a>
      return;

   //The only thing that can arrive in this state is an acknowledgment of
   //our FIN
   if(segment->ackNum == socket->sndNxt)
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004064:	429a      	cmp	r2, r3
 8004066:	d109      	bne.n	800407c <tcpStateLastAck+0x7c>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004068:	2100      	movs	r1, #0
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f001 fcf3 	bl	8005a56 <tcpChangeState>
 8004070:	e004      	b.n	800407c <tcpStateLastAck+0x7c>
      return;
 8004072:	bf00      	nop
 8004074:	e002      	b.n	800407c <tcpStateLastAck+0x7c>
      return;
 8004076:	bf00      	nop
 8004078:	e000      	b.n	800407c <tcpStateLastAck+0x7c>
      return;
 800407a:	bf00      	nop
   }
}
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af02      	add	r7, sp, #8
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fd13 	bl	8004ac0 <tcpCheckSeqNum>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d17e      	bne.n	800419e <tcpStateFinWait1+0x11c>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	7b5b      	ldrb	r3, [r3, #13]
 80040a4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d004      	beq.n	80040bc <tcpStateFinWait1+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80040b2:	2100      	movs	r1, #0
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f001 fcce 	bl	8005a56 <tcpChangeState>
      //Return immediately
      return;
 80040ba:	e075      	b.n	80041a8 <tcpStateFinWait1+0x126>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 fd9c 	bl	8004bfe <tcpCheckSyn>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d16a      	bne.n	80041a2 <tcpStateFinWait1+0x120>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fdc8 	bl	8004c66 <tcpCheckAck>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d164      	bne.n	80041a6 <tcpStateFinWait1+0x124>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d10b      	bne.n	8004102 <tcpStateFinWait1+0x80>
   {
      //Start the FIN-WAIT-2 timer to prevent the connection from staying in
      //the FIN-WAIT-2 state forever
      netStartTimer(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80040f0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fecf 	bl	8002e98 <netStartTimer>

      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 80040fa:	2108      	movs	r1, #8
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f001 fcaa 	bl	8005a56 <tcpChangeState>
   }

   //Process the segment text
   if(length > 0)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <tcpStateFinWait1+0x96>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68b9      	ldr	r1, [r7, #8]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fff6 	bl	8005104 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	7b5b      	ldrb	r3, [r3, #13]
 800411c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03e      	beq.n	80041a8 <tcpStateFinWait1+0x126>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	440b      	add	r3, r1
 8004138:	429a      	cmp	r2, r3
 800413a:	d135      	bne.n	80041a8 <tcpStateFinWait1+0x126>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004156:	2100      	movs	r1, #0
 8004158:	9101      	str	r1, [sp, #4]
 800415a:	2100      	movs	r1, #0
 800415c:	9100      	str	r1, [sp, #0]
 800415e:	2110      	movs	r1, #16
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f949 	bl	80043f8 <tcpSendSegment>
            FALSE);

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004170:	429a      	cmp	r2, r3
 8004172:	d10f      	bne.n	8004194 <tcpStateFinWait1+0x112>
         {
            //Release previously allocated resources
            tcpDeleteControlBlock(socket);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f001 f857 	bl	8005228 <tcpDeleteControlBlock>
            //Start the 2MSL timer
            netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004180:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004184:	4618      	mov	r0, r3
 8004186:	f7fe fe87 	bl	8002e98 <netStartTimer>
            //Switch to the TIME-WAIT state
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800418a:	210a      	movs	r1, #10
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f001 fc62 	bl	8005a56 <tcpChangeState>
 8004192:	e009      	b.n	80041a8 <tcpStateFinWait1+0x126>
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 8004194:	2109      	movs	r1, #9
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 fc5d 	bl	8005a56 <tcpChangeState>
 800419c:	e004      	b.n	80041a8 <tcpStateFinWait1+0x126>
      return;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <tcpStateFinWait1+0x126>
      return;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <tcpStateFinWait1+0x126>
      return;
 80041a6:	bf00      	nop
         }
      }
   }
}
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b086      	sub	sp, #24
 80041b2:	af02      	add	r7, sp, #8
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 fc7d 	bl	8004ac0 <tcpCheckSeqNum>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d15f      	bne.n	800428c <tcpStateFinWait2+0xde>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	7b5b      	ldrb	r3, [r3, #13]
 80041d0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d004      	beq.n	80041e8 <tcpStateFinWait2+0x3a>
   {
      //Switch to the CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80041de:	2100      	movs	r1, #0
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f001 fc38 	bl	8005a56 <tcpChangeState>
      //Return immediately
      return;
 80041e6:	e056      	b.n	8004296 <tcpStateFinWait2+0xe8>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fd06 	bl	8004bfe <tcpCheckSyn>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d14b      	bne.n	8004290 <tcpStateFinWait2+0xe2>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fd32 	bl	8004c66 <tcpCheckAck>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d145      	bne.n	8004294 <tcpStateFinWait2+0xe6>
      return;

   //Process the segment text
   if(length > 0)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <tcpStateFinWait2+0x70>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 ff73 	bl	8005104 <tcpProcessSegmentData>
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	7b5b      	ldrb	r3, [r3, #13]
 8004222:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004226:	b2db      	uxtb	r3, r3
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d032      	beq.n	8004296 <tcpStateFinWait2+0xe8>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	440b      	add	r3, r1
 800423e:	429a      	cmp	r2, r3
 8004240:	d129      	bne.n	8004296 <tcpStateFinWait2+0xe8>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800425c:	2100      	movs	r1, #0
 800425e:	9101      	str	r1, [sp, #4]
 8004260:	2100      	movs	r1, #0
 8004262:	9100      	str	r1, [sp, #0]
 8004264:	2110      	movs	r1, #16
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f000 f8c6 	bl	80043f8 <tcpSendSegment>
            FALSE);

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 ffdb 	bl	8005228 <tcpDeleteControlBlock>
         //Start the 2MSL timer
         netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8004278:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe fe0b 	bl	8002e98 <netStartTimer>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8004282:	210a      	movs	r1, #10
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f001 fbe6 	bl	8005a56 <tcpChangeState>
 800428a:	e004      	b.n	8004296 <tcpStateFinWait2+0xe8>
      return;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <tcpStateFinWait2+0xe8>
      return;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <tcpStateFinWait2+0xe8>
      return;
 8004294:	bf00      	nop
      }
   }
}
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, TcpHeader *segment, size_t length)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fc07 	bl	8004ac0 <tcpCheckSeqNum>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d134      	bne.n	8004322 <tcpStateClosing+0x86>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	7b5b      	ldrb	r3, [r3, #13]
 80042bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <tcpStateClosing+0x38>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 80042ca:	2100      	movs	r1, #0
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f001 fbc2 	bl	8005a56 <tcpChangeState>
      //Return immediately
      return;
 80042d2:	e02b      	b.n	800432c <tcpStateClosing+0x90>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fc90 	bl	8004bfe <tcpCheckSyn>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d120      	bne.n	8004326 <tcpStateClosing+0x8a>
      return;
   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	68f8      	ldr	r0, [r7, #12]
 80042ea:	f000 fcbc 	bl	8004c66 <tcpCheckAck>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d11a      	bne.n	800432a <tcpStateClosing+0x8e>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT state, otherwise
   //ignore the segment
   if(segment->ackNum == socket->sndNxt)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042fe:	429a      	cmp	r2, r3
 8004300:	d114      	bne.n	800432c <tcpStateClosing+0x90>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 ff90 	bl	8005228 <tcpDeleteControlBlock>
      //Start the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800430e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fdc0 	bl	8002e98 <netStartTimer>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 8004318:	210a      	movs	r1, #10
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f001 fb9b 	bl	8005a56 <tcpChangeState>
 8004320:	e004      	b.n	800432c <tcpStateClosing+0x90>
      return;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <tcpStateClosing+0x90>
      return;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <tcpStateClosing+0x90>
      return;
 800432a:	bf00      	nop
   }
}
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <tcpStateTimeWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateTimeWait(Socket *socket, TcpHeader *segment, size_t length)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af02      	add	r7, sp, #8
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fbbc 	bl	8004ac0 <tcpCheckSeqNum>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d149      	bne.n	80043e2 <tcpStateTimeWait+0xb0>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	7b5b      	ldrb	r3, [r3, #13]
 8004352:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <tcpStateTimeWait+0x4e>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 8004360:	2100      	movs	r1, #0
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f001 fb77 	bl	8005a56 <tcpChangeState>

      //Dispose the socket if the user does not have the ownership anymore
      if(!socket->ownedFlag)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	2b00      	cmp	r3, #0
 8004370:	d139      	bne.n	80043e6 <tcpStateTimeWait+0xb4>
      {
         //Delete the TCB
         tcpDeleteControlBlock(socket);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 ff58 	bl	8005228 <tcpDeleteControlBlock>
         //Mark the socket as closed
         socket->type = SOCKET_TYPE_UNUSED;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	605a      	str	r2, [r3, #4]
      }

      //Return immediately
      return;
 800437e:	e032      	b.n	80043e6 <tcpStateTimeWait+0xb4>
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68b9      	ldr	r1, [r7, #8]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fc3a 	bl	8004bfe <tcpCheckSyn>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d12c      	bne.n	80043ea <tcpStateTimeWait+0xb8>
      return;
   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	7b5b      	ldrb	r3, [r3, #13]
 8004394:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0310 	and.w	r3, r3, #16
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d025      	beq.n	80043ee <tcpStateTimeWait+0xbc>
      return;

   //The only thing that can arrive in this state is a retransmission of the
   //remote FIN. Acknowledge it and restart the 2 MSL timeout
   if((segment->flags & TCP_FLAG_FIN) != 0)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	7b5b      	ldrb	r3, [r3, #13]
 80043a6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01d      	beq.n	80043f0 <tcpStateTimeWait+0xbe>
   {
      //Send an acknowledgment for the FIN
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043c0:	2100      	movs	r1, #0
 80043c2:	9101      	str	r1, [sp, #4]
 80043c4:	2100      	movs	r1, #0
 80043c6:	9100      	str	r1, [sp, #0]
 80043c8:	2110      	movs	r1, #16
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f814 	bl	80043f8 <tcpSendSegment>
         FALSE);

      //Restart the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80043d6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd5c 	bl	8002e98 <netStartTimer>
 80043e0:	e006      	b.n	80043f0 <tcpStateTimeWait+0xbe>
      return;
 80043e2:	bf00      	nop
 80043e4:	e004      	b.n	80043f0 <tcpStateTimeWait+0xbe>
      return;
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <tcpStateTimeWait+0xbe>
      return;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <tcpStateTimeWait+0xbe>
      return;
 80043ee:	bf00      	nop
   }
}
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <tcpSendSegment>:
 * @return Error code
 **/

error_t tcpSendSegment(Socket *socket, uint8_t flags, uint32_t seqNum,
   uint32_t ackNum, size_t length, bool_t addToQueue)
{
 80043f8:	b5b0      	push	{r4, r5, r7, lr}
 80043fa:	b098      	sub	sp, #96	; 0x60
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	460b      	mov	r3, r1
 8004406:	72fb      	strb	r3, [r7, #11]
   TcpQueueItem *queueItem;
   IpPseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Maximum segment size
   uint16_t mss = HTONS(socket->rmss);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 800440e:	ba5b      	rev16	r3, r3
 8004410:	b29b      	uxth	r3, r3
 8004412:	82fb      	strh	r3, [r7, #22]

   //Allocate a memory buffer to hold the TCP segment
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 8004414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004418:	4619      	mov	r1, r3
 800441a:	203c      	movs	r0, #60	; 0x3c
 800441c:	f7fd fcf4 	bl	8001e08 <ipAllocBuffer>
 8004420:	6538      	str	r0, [r7, #80]	; 0x50
   //Failed to allocate memory?
   if(buffer == NULL)
 8004422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <tcpSendSegment+0x34>
      return ERROR_OUT_OF_MEMORY;
 8004428:	2364      	movs	r3, #100	; 0x64
 800442a:	e16a      	b.n	8004702 <tcpSendSegment+0x30a>

   //Point to the beginning of the TCP segment
   segment = netBufferAt(buffer, offset);
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	4619      	mov	r1, r3
 8004430:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004432:	f7fe f904 	bl	800263e <netBufferAt>
 8004436:	64f8      	str	r0, [r7, #76]	; 0x4c

   //Format TCP header
   segment->srcPort = htons(socket->localPort);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8b1b      	ldrh	r3, [r3, #24]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fd0e 	bl	8000e5e <swapInt16>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004448:	801a      	strh	r2, [r3, #0]
   segment->destPort = htons(socket->remotePort);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc fd05 	bl	8000e5e <swapInt16>
 8004454:	4603      	mov	r3, r0
 8004456:	461a      	mov	r2, r3
 8004458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445a:	805a      	strh	r2, [r3, #2]
   segment->seqNum = htonl(seqNum);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fc fd0c 	bl	8000e7a <swapInt32>
 8004462:	4602      	mov	r2, r0
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	605a      	str	r2, [r3, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d004      	beq.n	800447c <tcpSendSegment+0x84>
 8004472:	6838      	ldr	r0, [r7, #0]
 8004474:	f7fc fd01 	bl	8000e7a <swapInt32>
 8004478:	4603      	mov	r3, r0
 800447a:	e000      	b.n	800447e <tcpSendSegment+0x86>
 800447c:	2300      	movs	r3, #0
 800447e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004480:	6093      	str	r3, [r2, #8]
   segment->reserved1 = 0;
 8004482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004484:	7b13      	ldrb	r3, [r2, #12]
 8004486:	f36f 0303 	bfc	r3, #0, #4
 800448a:	7313      	strb	r3, [r2, #12]
   segment->dataOffset = 5;
 800448c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800448e:	7b13      	ldrb	r3, [r2, #12]
 8004490:	2105      	movs	r1, #5
 8004492:	f361 1307 	bfi	r3, r1, #4, #4
 8004496:	7313      	strb	r3, [r2, #12]
   segment->flags = flags;
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800449e:	b2d9      	uxtb	r1, r3
 80044a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044a2:	7b53      	ldrb	r3, [r2, #13]
 80044a4:	f361 0305 	bfi	r3, r1, #0, #6
 80044a8:	7353      	strb	r3, [r2, #13]
   segment->reserved2 = 0;
 80044aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ac:	7b53      	ldrb	r3, [r2, #13]
 80044ae:	f36f 1387 	bfc	r3, #6, #2
 80044b2:	7353      	strb	r3, [r2, #13]
   segment->window = htons(socket->rcvWnd);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fc fccf 	bl	8000e5e <swapInt16>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c6:	81da      	strh	r2, [r3, #14]
   segment->checksum = 0;
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	2200      	movs	r2, #0
 80044cc:	741a      	strb	r2, [r3, #16]
 80044ce:	2200      	movs	r2, #0
 80044d0:	745a      	strb	r2, [r3, #17]
   segment->urgentPointer = 0;
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	2200      	movs	r2, #0
 80044d6:	749a      	strb	r2, [r3, #18]
 80044d8:	2200      	movs	r2, #0
 80044da:	74da      	strb	r2, [r3, #19]

   //SYN flag set?
   if((flags & TCP_FLAG_SYN) != 0)
 80044dc:	7afb      	ldrb	r3, [r7, #11]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d006      	beq.n	80044f4 <tcpSendSegment+0xfc>
   {
      //Append MSS option
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss, sizeof(mss));
 80044e6:	f107 0216 	add.w	r2, r7, #22
 80044ea:	2302      	movs	r3, #2
 80044ec:	2102      	movs	r1, #2
 80044ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80044f0:	f000 fa28 	bl	8004944 <tcpAddOption>
      tcpAddOption(segment, TCP_OPTION_SACK_PERMITTED, NULL, 0);
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 80044f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f6:	7b1b      	ldrb	r3, [r3, #12]
 80044f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	461a      	mov	r2, r3
 8004502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004504:	4413      	add	r3, r2
 8004506:	4619      	mov	r1, r3
 8004508:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800450a:	f7fd fff2 	bl	80024f2 <netBufferSetLength>

   //Any data to send?
   if(length > 0)
 800450e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <tcpSendSegment+0x142>
   {
      //Copy data
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 8004514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f001 fc32 	bl	8005d84 <tcpReadTxBuffer>
 8004520:	4603      	mov	r3, r0
 8004522:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      //Any error to report?
      if(error)
 8004526:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <tcpSendSegment+0x142>
      {
         //Clean up side effects
         netBufferFree(buffer);
 800452e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004530:	f7fd ffae 	bl	8002490 <netBufferFree>
         //Exit immediately
         return error;
 8004534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004538:	e0e3      	b.n	8004702 <tcpSendSegment+0x30a>
      }
   }

   //Calculate the length of the complete TCP segment
   totalLength = segment->dataOffset * 4 + length;
 800453a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800453c:	7b1b      	ldrb	r3, [r3, #12]
 800453e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004542:	b2db      	uxtb	r3, r3
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800454a:	4413      	add	r3, r2
 800454c:	647b      	str	r3, [r7, #68]	; 0x44

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	2b04      	cmp	r3, #4
 8004554:	d128      	bne.n	80045a8 <tcpSendSegment+0x1b0>
   {
      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 8004556:	230c      	movs	r3, #12
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
      pseudoHeader.ipv4Data.reserved = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 800456c:	2306      	movs	r3, #6
 800456e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
      pseudoHeader.ipv4Data.length = htons(totalLength);
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	b29b      	uxth	r3, r3
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc fc71 	bl	8000e5e <swapInt16>
 800457c:	4603      	mov	r3, r0
 800457e:	87fb      	strh	r3, [r7, #62]	; 0x3e

      //Calculate TCP header checksum
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8004580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004586:	1d18      	adds	r0, r3, #4
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004590:	210c      	movs	r1, #12
 8004592:	f7fd fc10 	bl	8001db6 <ipCalcUpperLayerChecksumEx>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	821a      	strh	r2, [r3, #16]
      //This should never occur...
      return ERROR_INVALID_ADDRESS;
   }

   //Add current segment to retransmission queue?
   if(addToQueue)
 800459e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8082 	beq.w	80046aa <tcpSendSegment+0x2b2>
 80045a6:	e004      	b.n	80045b2 <tcpSendSegment+0x1ba>
      netBufferFree(buffer);
 80045a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80045aa:	f7fd ff71 	bl	8002490 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 80045ae:	23e4      	movs	r3, #228	; 0xe4
 80045b0:	e0a7      	b.n	8004702 <tcpSendSegment+0x30a>
   {
      //Empty retransmission queue?
      if(socket->retransmitQueue == NULL)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d108      	bne.n	80045ce <tcpSendSegment+0x1d6>
      {
         //Create a new item
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 80045bc:	2058      	movs	r0, #88	; 0x58
 80045be:	f7fd ff07 	bl	80023d0 <memPoolAlloc>
 80045c2:	6578      	str	r0, [r7, #84]	; 0x54
         //Add the newly created item to the queue
         socket->retransmitQueue = queueItem;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045c8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 80045cc:	e014      	b.n	80045f8 <tcpSendSegment+0x200>
      }
      else
      {
         //Point to the very first item
         queueItem = socket->retransmitQueue;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80045d4:	657b      	str	r3, [r7, #84]	; 0x54
         //Reach the last item of the retransmission queue
         while(queueItem->next) queueItem = queueItem->next;
 80045d6:	e002      	b.n	80045de <tcpSendSegment+0x1e6>
 80045d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	657b      	str	r3, [r7, #84]	; 0x54
 80045de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f8      	bne.n	80045d8 <tcpSendSegment+0x1e0>
         //Create a new item
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 80045e6:	2058      	movs	r0, #88	; 0x58
 80045e8:	f7fd fef2 	bl	80023d0 <memPoolAlloc>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 80045f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	657b      	str	r3, [r7, #84]	; 0x54
      }

      //Failed to allocate memory?
      if(queueItem == NULL)
 80045f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <tcpSendSegment+0x210>
      {
         //Free previously allocated memory
         netBufferFree(buffer);
 80045fe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004600:	f7fd ff46 	bl	8002490 <netBufferFree>
         //Return status
         return ERROR_OUT_OF_MEMORY;
 8004604:	2364      	movs	r3, #100	; 0x64
 8004606:	e07c      	b.n	8004702 <tcpSendSegment+0x30a>
      }

      //Retransmission mechanism requires additional information
      queueItem->next = NULL;
 8004608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
      queueItem->length = length;
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004612:	605a      	str	r2, [r3, #4]
      queueItem->sacked = FALSE;
 8004614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004616:	2200      	movs	r2, #0
 8004618:	609a      	str	r2, [r3, #8]
      //Save TCP header
      osMemcpy(queueItem->header, segment, segment->dataOffset * 4);
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	f103 001c 	add.w	r0, r3, #28
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	7b1b      	ldrb	r3, [r3, #12]
 8004624:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004628:	b2db      	uxtb	r3, r3
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	461a      	mov	r2, r3
 800462e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004630:	f00b fc69 	bl	800ff06 <memcpy>
      //Save pseudo header
      queueItem->pseudoHeader = pseudoHeader;
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004636:	f103 040c 	add.w	r4, r3, #12
 800463a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800463e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004640:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      //Take one RTT measurement at a time
      if(!socket->rttBusy)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <tcpSendSegment+0x284>
      {
         //Save round-trip start time
         socket->rttStartTime = osGetSystemTime();
 800464e:	f7fc fd88 	bl	8001162 <osGetSystemTime>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         //Record current sequence number
         socket->rttSeqNum = ntohl(segment->seqNum);
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fc0b 	bl	8000e7a <swapInt32>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
         //Wait for an acknowledgment that covers that sequence number...
         socket->rttBusy = TRUE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Reset the byte counter
         socket->n = 0;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif
      }

      //Check whether the RTO timer is running or not
      if(!netTimerRunning(&socket->retransmitTimer))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fc29 	bl	8002eda <netTimerRunning>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <tcpSendSegment+0x2b2>
      {
         //If the timer is not running, start it running so that it will expire
         //after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe fbfb 	bl	8002e98 <netStartTimer>

         //Reset retransmission counter
         socket->retransmitCount = 0;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
   //Debug message
   TRACE_DEBUG("%s: Sending TCP segment (%" PRIuSIZE " data bytes)...\r\n",
      formatSystemTime(osGetSystemTime(), NULL), length);

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment, length, socket->iss, socket->irs);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80046ba:	f001 fc04 	bl	8005ec6 <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <tcpSendSegment+0x314>)
 80046c0:	f107 0418 	add.w	r4, r7, #24
 80046c4:	461d      	mov	r5, r3
 80046c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80046ce:	e884 0003 	stmia.w	r4, {r0, r1}
   //Set the TTL value to be used
   ancillary.ttl = socket->ttl;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046d8:	763b      	strb	r3, [r7, #24]
   ancillary.vmanPcp = socket->vmanPcp;
   ancillary.vmanDei = socket->vmanDei;
#endif

   //Send TCP segment
   error = ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset,
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	68d8      	ldr	r0, [r3, #12]
 80046de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046e0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80046e4:	f107 0318 	add.w	r3, r7, #24
 80046e8:	9300      	str	r3, [sp, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046ee:	f7fd fa3b 	bl	8001b68 <ipSendDatagram>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 80046f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80046fa:	f7fd fec9 	bl	8002490 <netBufferFree>

   //Return error code
   return error;
 80046fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
}
 8004702:	4618      	mov	r0, r3
 8004704:	3758      	adds	r7, #88	; 0x58
 8004706:	46bd      	mov	sp, r7
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
 800470a:	bf00      	nop
 800470c:	080117a0 	.word	0x080117a0

08004710 <tcpSendResetSegment>:
 * @param[in] seqNum Sequence number
 * @return Error code
 **/

error_t tcpSendResetSegment(Socket *socket, uint32_t seqNum)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af02      	add	r7, sp, #8
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 800471a:	2300      	movs	r3, #0
 800471c:	81fb      	strh	r3, [r7, #14]

   //Check current state
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004724:	2b03      	cmp	r3, #3
 8004726:	d013      	beq.n	8004750 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_ESTABLISHED ||
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_SYN_RECEIVED ||
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00e      	beq.n	8004750 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_ESTABLISHED ||
 8004738:	2b07      	cmp	r3, #7
 800473a:	d009      	beq.n	8004750 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8004742:	2b08      	cmp	r3, #8
 8004744:	d004      	beq.n	8004750 <tcpSendResetSegment+0x40>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 800474c:	2b05      	cmp	r3, #5
 800474e:	d10b      	bne.n	8004768 <tcpSendResetSegment+0x58>
   {
      //Send a reset segment
      error = tcpSendSegment(socket, TCP_FLAG_RST, seqNum, 0, 0, FALSE);
 8004750:	2300      	movs	r3, #0
 8004752:	9301      	str	r3, [sp, #4]
 8004754:	2300      	movs	r3, #0
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	2300      	movs	r3, #0
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	2104      	movs	r1, #4
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe4a 	bl	80043f8 <tcpSendSegment>
 8004764:	4603      	mov	r3, r0
 8004766:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 8004768:	89fb      	ldrh	r3, [r7, #14]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <tcpRejectSegment>:
 * @return Error code
 **/

error_t tcpRejectSegment(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment, size_t length)
{
 8004774:	b5b0      	push	{r4, r5, r7, lr}
 8004776:	b098      	sub	sp, #96	; 0x60
 8004778:	af02      	add	r7, sp, #8
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;
   NetTxAncillary ancillary;

   //Check whether the ACK bit is set
   if((segment->flags & TCP_FLAG_ACK) != 0)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	7b5b      	ldrb	r3, [r3, #13]
 8004786:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <tcpRejectSegment+0x32>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
 8004794:	2304      	movs	r3, #4
 8004796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      seqNum = segment->ackNum;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	653b      	str	r3, [r7, #80]	; 0x50
      ackNum = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047a4:	e021      	b.n	80047ea <tcpRejectSegment+0x76>
   }
   else
   {
      //Otherwise the reset has sequence number zero and the ACK field is set to
      //the sum of the sequence number and segment length of the incoming segment
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 80047a6:	2314      	movs	r3, #20
 80047a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      seqNum = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
      ackNum = segment->seqNum + length;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	64fb      	str	r3, [r7, #76]	; 0x4c

      //Advance the acknowledgment number over the SYN or the FIN
      if((segment->flags & TCP_FLAG_SYN) != 0)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7b5b      	ldrb	r3, [r3, #13]
 80047be:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <tcpRejectSegment+0x5e>
      {
         ackNum++;
 80047cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ce:	3301      	adds	r3, #1
 80047d0:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      if((segment->flags & TCP_FLAG_FIN) != 0)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	7b5b      	ldrb	r3, [r3, #13]
 80047d6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <tcpRejectSegment+0x76>
      {
         ackNum++;
 80047e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e6:	3301      	adds	r3, #1
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 80047ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047ee:	4619      	mov	r1, r3
 80047f0:	2014      	movs	r0, #20
 80047f2:	f7fd fb09 	bl	8001e08 <ipAllocBuffer>
 80047f6:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(buffer == NULL)
 80047f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <tcpRejectSegment+0x8e>
      return ERROR_OUT_OF_MEMORY;
 80047fe:	2364      	movs	r3, #100	; 0x64
 8004800:	e09a      	b.n	8004938 <tcpRejectSegment+0x1c4>

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset);
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	4619      	mov	r1, r3
 8004806:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004808:	f7fd ff19 	bl	800263e <netBufferAt>
 800480c:	6478      	str	r0, [r7, #68]	; 0x44

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	885b      	ldrh	r3, [r3, #2]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4618      	mov	r0, r3
 8004816:	f7fc fb22 	bl	8000e5e <swapInt16>
 800481a:	4603      	mov	r3, r0
 800481c:	461a      	mov	r2, r3
 800481e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004820:	801a      	strh	r2, [r3, #0]
   segment2->destPort = htons(segment->srcPort);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	f7fc fb18 	bl	8000e5e <swapInt16>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004834:	805a      	strh	r2, [r3, #2]
   segment2->seqNum = htonl(seqNum);
 8004836:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004838:	f7fc fb1f 	bl	8000e7a <swapInt32>
 800483c:	4602      	mov	r2, r0
 800483e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004840:	605a      	str	r2, [r3, #4]
   segment2->ackNum = htonl(ackNum);
 8004842:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004844:	f7fc fb19 	bl	8000e7a <swapInt32>
 8004848:	4602      	mov	r2, r0
 800484a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800484c:	609a      	str	r2, [r3, #8]
   segment2->reserved1 = 0;
 800484e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004850:	7b13      	ldrb	r3, [r2, #12]
 8004852:	f36f 0303 	bfc	r3, #0, #4
 8004856:	7313      	strb	r3, [r2, #12]
   segment2->dataOffset = 5;
 8004858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485a:	7b13      	ldrb	r3, [r2, #12]
 800485c:	2105      	movs	r1, #5
 800485e:	f361 1307 	bfi	r3, r1, #4, #4
 8004862:	7313      	strb	r3, [r2, #12]
   segment2->flags = flags;
 8004864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	b2d9      	uxtb	r1, r3
 800486e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004870:	7b53      	ldrb	r3, [r2, #13]
 8004872:	f361 0305 	bfi	r3, r1, #0, #6
 8004876:	7353      	strb	r3, [r2, #13]
   segment2->reserved2 = 0;
 8004878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800487a:	7b53      	ldrb	r3, [r2, #13]
 800487c:	f36f 1387 	bfc	r3, #6, #2
 8004880:	7353      	strb	r3, [r2, #13]
   segment2->window = 0;
 8004882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004884:	2200      	movs	r2, #0
 8004886:	739a      	strb	r2, [r3, #14]
 8004888:	2200      	movs	r2, #0
 800488a:	73da      	strb	r2, [r3, #15]
   segment2->checksum = 0;
 800488c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488e:	2200      	movs	r2, #0
 8004890:	741a      	strb	r2, [r3, #16]
 8004892:	2200      	movs	r2, #0
 8004894:	745a      	strb	r2, [r3, #17]
   segment2->urgentPointer = 0;
 8004896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004898:	2200      	movs	r2, #0
 800489a:	749a      	strb	r2, [r3, #18]
 800489c:	2200      	movs	r2, #0
 800489e:	74da      	strb	r2, [r3, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d143      	bne.n	8004930 <tcpRejectSegment+0x1bc>
   {
      //Format IPv4 pseudo header
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 80048a8:	230c      	movs	r3, #12
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
      pseudoHeader2.ipv4Data.reserved = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 80048be:	2306      	movs	r3, #6
 80048c0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 80048c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80048c8:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 80048ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048d0:	1d18      	adds	r0, r3, #4
 80048d2:	2314      	movs	r3, #20
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	4613      	mov	r3, r2
 80048d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048da:	210c      	movs	r1, #12
 80048dc:	f7fd fa6b 	bl	8001db6 <ipCalcUpperLayerChecksumEx>
 80048e0:	4603      	mov	r3, r0
 80048e2:	461a      	mov	r2, r3
 80048e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e6:	821a      	strh	r2, [r3, #16]
   //Debug message
   TRACE_DEBUG("%s: Sending TCP reset segment...\r\n",
      formatSystemTime(osGetSystemTime(), NULL));

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);
 80048e8:	2300      	movs	r3, #0
 80048ea:	2200      	movs	r2, #0
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80048f0:	f001 fae9 	bl	8005ec6 <tcpDumpHeader>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <tcpRejectSegment+0x1cc>)
 80048f6:	f107 0414 	add.w	r4, r7, #20
 80048fa:	461d      	mov	r5, r3
 80048fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004900:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004904:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset,
 8004908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800490a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7fd f925 	bl	8001b68 <ipSendDatagram>
 800491e:	4603      	mov	r3, r0
 8004920:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8004924:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004926:	f7fd fdb3 	bl	8002490 <netBufferFree>

   //Return error code
   return error;
 800492a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800492e:	e003      	b.n	8004938 <tcpRejectSegment+0x1c4>
      netBufferFree(buffer);
 8004930:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004932:	f7fd fdad 	bl	8002490 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 8004936:	23e4      	movs	r3, #228	; 0xe4
}
 8004938:	4618      	mov	r0, r3
 800493a:	3758      	adds	r7, #88	; 0x58
 800493c:	46bd      	mov	sp, r7
 800493e:	bdb0      	pop	{r4, r5, r7, pc}
 8004940:	080117a0 	.word	0x080117a0

08004944 <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	461a      	mov	r2, r3
 8004950:	460b      	mov	r3, r1
 8004952:	72fb      	strb	r3, [r7, #11]
 8004954:	4613      	mov	r3, r2
 8004956:	72bb      	strb	r3, [r7, #10]
   size_t paddingSize;
   TcpOption *option;

   //The option-length counts the two octets of option-kind and option-length
   //as well as the option-data octets (refer to RFC 793, section 3.1)
   length += sizeof(TcpOption);
 8004958:	7abb      	ldrb	r3, [r7, #10]
 800495a:	3302      	adds	r3, #2
 800495c:	72bb      	strb	r3, [r7, #10]

   //Make sure there is enough room to add the option
   if((segment->dataOffset * 4 + length) <= TCP_MAX_HEADER_LENGTH)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	7b1b      	ldrb	r3, [r3, #12]
 8004962:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004966:	b2db      	uxtb	r3, r3
 8004968:	009a      	lsls	r2, r3, #2
 800496a:	7abb      	ldrb	r3, [r7, #10]
 800496c:	4413      	add	r3, r2
 800496e:	2b3c      	cmp	r3, #60	; 0x3c
 8004970:	dc48      	bgt.n	8004a04 <tcpAddOption+0xc0>
   {
      //Index of the first available byte
      i = (segment->dataOffset * 4) - sizeof(TcpHeader);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	7b1b      	ldrb	r3, [r3, #12]
 8004976:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800497a:	b2db      	uxtb	r3, r3
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	3b14      	subs	r3, #20
 8004980:	61bb      	str	r3, [r7, #24]

      //Calculate the number of padding bytes
      paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 8004982:	7abb      	ldrb	r3, [r7, #10]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <tcpAddOption+0x56>
 800498e:	7abb      	ldrb	r3, [r7, #10]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	f1c3 0304 	rsb	r3, r3, #4
 8004998:	e000      	b.n	800499c <tcpAddOption+0x58>
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

      //Write padding bytes
      while(paddingSize--)
 800499e:	e006      	b.n	80049ae <tcpAddOption+0x6a>
      {
         segment->options[i++] = TCP_OPTION_NOP;
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	61ba      	str	r2, [r7, #24]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	2201      	movs	r2, #1
 80049ac:	751a      	strb	r2, [r3, #20]
      while(paddingSize--)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1e5a      	subs	r2, r3, #1
 80049b2:	617a      	str	r2, [r7, #20]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f3      	bne.n	80049a0 <tcpAddOption+0x5c>
      }

      //Point to the current location
      option = (TcpOption *) (segment->options + i);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f103 0214 	add.w	r2, r3, #20
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	4413      	add	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

      //Format option
      option->kind = kind;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	7afa      	ldrb	r2, [r7, #11]
 80049c8:	701a      	strb	r2, [r3, #0]
      option->length = length;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	7aba      	ldrb	r2, [r7, #10]
 80049ce:	705a      	strb	r2, [r3, #1]
      osMemcpy(option->value, value, length - sizeof(TcpOption));
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1c98      	adds	r0, r3, #2
 80049d4:	7abb      	ldrb	r3, [r7, #10]
 80049d6:	3b02      	subs	r3, #2
 80049d8:	461a      	mov	r2, r3
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	f00b fa93 	bl	800ff06 <memcpy>

      //Adjust index value
      i += length;
 80049e0:	7abb      	ldrb	r3, [r7, #10]
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4413      	add	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]

      //Update the length of the TCP header
      segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	3314      	adds	r3, #20
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	b2d9      	uxtb	r1, r3
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	7b13      	ldrb	r3, [r2, #12]
 80049f8:	f361 1307 	bfi	r3, r1, #4, #4
 80049fc:	7313      	strb	r3, [r2, #12]

      //Successful processing
      error = NO_ERROR;
 80049fe:	2300      	movs	r3, #0
 8004a00:	83fb      	strh	r3, [r7, #30]
 8004a02:	e001      	b.n	8004a08 <tcpAddOption+0xc4>
   }
   else
   {
      //Report an error
      error = ERROR_FAILURE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3720      	adds	r7, #32
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <tcpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

TcpOption *tcpGetOption(TcpHeader *segment, uint8_t kind)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
   size_t i;
   size_t length;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset >= (sizeof(TcpHeader) / 4))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7b1b      	ldrb	r3, [r3, #12]
 8004a22:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d942      	bls.n	8004ab2 <tcpGetOption+0xa0>
   {
      //Compute the length of the options field
      length = (segment->dataOffset * 4) - sizeof(TcpHeader);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	7b1b      	ldrb	r3, [r3, #12]
 8004a30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	3b14      	subs	r3, #20
 8004a3a:	613b      	str	r3, [r7, #16]

      //Point to the very first option
      i = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]

      //Loop through the list of options
      while(i < length)
 8004a40:	e02f      	b.n	8004aa2 <tcpGetOption+0x90>
      {
         //Point to the current option
         option = (TcpOption *) (segment->options + i);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f103 0214 	add.w	r2, r3, #20
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

         //Check option code
         if(option->kind == TCP_OPTION_END)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02a      	beq.n	8004aac <tcpGetOption+0x9a>
         {
            //This option code indicates the end of the option list
            break;
         }
         else if(option->kind == TCP_OPTION_NOP)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d103      	bne.n	8004a66 <tcpGetOption+0x54>
         {
            //This option consists of a single octet
            i++;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	3301      	adds	r3, #1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	e01d      	b.n	8004aa2 <tcpGetOption+0x90>
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d91f      	bls.n	8004ab0 <tcpGetOption+0x9e>
               break;

            //Check the length of the option
            if(option->length < sizeof(TcpOption) || (i + option->length) > length)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d91c      	bls.n	8004ab2 <tcpGetOption+0xa0>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d314      	bcc.n	8004ab2 <tcpGetOption+0xa0>
               break;

            //Matching option code?
            if(option->kind == kind)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d101      	bne.n	8004a96 <tcpGetOption+0x84>
               return option;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	e00e      	b.n	8004ab4 <tcpGetOption+0xa2>

            //Jump to the next option
            i += option->length;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
      while(i < length)
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d3cb      	bcc.n	8004a42 <tcpGetOption+0x30>
 8004aaa:	e002      	b.n	8004ab2 <tcpGetOption+0xa0>
            break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <tcpGetOption+0xa0>
               break;
 8004ab0:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <tcpCheckSeqNum>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the incoming segment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckSeqNum(Socket *socket, TcpHeader *segment, size_t length)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
   bool_t acceptable;

   //Due to zero windows and zero length segments, we have four cases for the
   //acceptability of an incoming segment (refer to RFC 793, section 3.3)
   if(length == 0 && socket->rcvWnd == 0)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d111      	bne.n	8004af6 <tcpCheckSeqNum+0x36>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10c      	bne.n	8004af6 <tcpCheckSeqNum+0x36>
   {
      //If both segment length and receive window are zero, then test if
      //SEG.SEQ = RCV.NXT
      if(segment->seqNum == socket->rcvNxt)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d102      	bne.n	8004af0 <tcpCheckSeqNum+0x30>
      {
         acceptable = TRUE;
 8004aea:	2301      	movs	r3, #1
 8004aec:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8004aee:	e065      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
      if(segment->seqNum == socket->rcvNxt)
 8004af4:	e062      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length == 0 && socket->rcvWnd != 0)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11e      	bne.n	8004b3a <tcpCheckSeqNum+0x7a>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d019      	beq.n	8004b3a <tcpCheckSeqNum+0x7a>
   {
      //If segment length is zero and receive window is non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	db0e      	blt.n	8004b34 <tcpCheckSeqNum+0x74>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b20:	68f9      	ldr	r1, [r7, #12]
 8004b22:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 8004b26:	440b      	add	r3, r1
 8004b28:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da02      	bge.n	8004b34 <tcpCheckSeqNum+0x74>
      {
         acceptable = TRUE;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b32:	e043      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b38:	e040      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
   }
   else if(length != 0 && socket->rcvWnd == 0)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <tcpCheckSeqNum+0x90>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d102      	bne.n	8004b50 <tcpCheckSeqNum+0x90>
   {
      //If segment length is non zero and receive window is zero, then the
      //sequence number is not acceptable
      acceptable = FALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e035      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
   else
   {
      //If both segment length and receive window are non zero, then test if
      //RCV.NXT <= SEG.SEQ < RCV.NXT+RCV.WND or
      //RCV.NXT <= SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db0e      	blt.n	8004b7e <tcpCheckSeqNum+0xbe>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 8004b70:	440b      	add	r3, r1
 8004b72:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	da02      	bge.n	8004b7e <tcpCheckSeqNum+0xbe>
      {
         acceptable = TRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e01e      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db11      	blt.n	8004bb8 <tcpCheckSeqNum+0xf8>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 8004ba8:	440b      	add	r3, r1
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	3b01      	subs	r3, #1
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da02      	bge.n	8004bb8 <tcpCheckSeqNum+0xf8>
      {
         acceptable = TRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	e001      	b.n	8004bbc <tcpCheckSeqNum+0xfc>
      }
      else
      {
         acceptable = FALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	617b      	str	r3, [r7, #20]
      }
   }

   //Non acceptable sequence number?
   if(!acceptable)
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d118      	bne.n	8004bf4 <tcpCheckSeqNum+0x134>
      //Debug message
      TRACE_WARNING("Sequence number is not acceptable!\r\n");

      //If an incoming segment is not acceptable, an acknowledgment should
      //be sent in reply (unless the RST bit is set)
      if((segment->flags & TCP_FLAG_RST) == 0)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	7b5b      	ldrb	r3, [r3, #13]
 8004bc6:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <tcpCheckSeqNum+0x130>
      {
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004be0:	2100      	movs	r1, #0
 8004be2:	9101      	str	r1, [sp, #4]
 8004be4:	2100      	movs	r1, #0
 8004be6:	9100      	str	r1, [sp, #0]
 8004be8:	2110      	movs	r1, #16
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fc04 	bl	80043f8 <tcpSendSegment>
            0, FALSE);
      }

      //Return status code
      return ERROR_FAILURE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <tcpCheckSeqNum+0x136>
   }

   //Sequence number is acceptable
   return NO_ERROR;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <tcpCheckSyn>:
 * @param[in] length Length of the segment data
 * @return ERROR_FAILURE if the SYN is in the window, NO_ERROR otherwise
 **/

error_t tcpCheckSyn(Socket *socket, TcpHeader *segment, size_t length)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
   //Check whether the SYN bit is set
   if((segment->flags & TCP_FLAG_SYN) != 0)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	7b5b      	ldrb	r3, [r3, #13]
 8004c0e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01f      	beq.n	8004c5c <tcpCheckSyn+0x5e>
   {
      //If this step is reached, the SYN is in the window. It is an error
      //and a reset shall be sent in response
      if((segment->flags & TCP_FLAG_ACK) != 0)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	7b5b      	ldrb	r3, [r3, #13]
 8004c20:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d006      	beq.n	8004c3c <tcpCheckSyn+0x3e>
      {
         tcpSendResetSegment(socket, segment->ackNum);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4619      	mov	r1, r3
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7ff fd6b 	bl	8004710 <tcpSendResetSegment>
 8004c3a:	e00d      	b.n	8004c58 <tcpCheckSyn+0x5a>
      }
      else
      {
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
            segment->seqNum + length + 1, 0, FALSE);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 8004c44:	3301      	adds	r3, #1
 8004c46:	2200      	movs	r2, #0
 8004c48:	9201      	str	r2, [sp, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	9200      	str	r2, [sp, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2114      	movs	r1, #20
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fbd0 	bl	80043f8 <tcpSendSegment>
      }

      //Return immediately
      return ERROR_FAILURE;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <tcpCheckSyn+0x60>
   }

   //No error to report
   return NO_ERROR;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <tcpCheckAck>:
 * @param[in] length Length of the segment data
 * @return NO_ERROR if the acknowledgment is acceptable, ERROR_FAILURE otherwise
 **/

error_t tcpCheckAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b08c      	sub	sp, #48	; 0x30
 8004c6a:	af02      	add	r7, sp, #8
 8004c6c:	60f8      	str	r0, [r7, #12]
 8004c6e:	60b9      	str	r1, [r7, #8]
 8004c70:	607a      	str	r2, [r7, #4]
   uint_t thresh;
   bool_t duplicateFlag;
   bool_t updateFlag;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	7b5b      	ldrb	r3, [r3, #13]
 8004c76:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <tcpCheckAck+0x22>
      return ERROR_FAILURE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e12e      	b.n	8004ee6 <tcpCheckAck+0x280>
      socket->keepAliveProbeCount = 0;
   }
#endif

   //Test the case where SEG.ACK < SND.UNA
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da01      	bge.n	8004c9c <tcpCheckAck+0x36>
   {
      //An old duplicate ACK has been received
      return NO_ERROR;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e124      	b.n	8004ee6 <tcpCheckAck+0x280>
   }
   //Test the case where SEG.ACK > SND.NXT
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd0f      	ble.n	8004ccc <tcpCheckAck+0x66>
   {
      //Send an ACK segment indicating the current send sequence number
      //and the acknowledgment number expected to be received
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004cb8:	2100      	movs	r1, #0
 8004cba:	9101      	str	r1, [sp, #4]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	9100      	str	r1, [sp, #0]
 8004cc0:	2110      	movs	r1, #16
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f7ff fb98 	bl	80043f8 <tcpSendSegment>
         FALSE);

      //The ACK segment acknowledges something not yet sent
      return ERROR_FAILURE;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e10c      	b.n	8004ee6 <tcpCheckAck+0x280>
   }

   //Check whether the ACK is a duplicate
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f947 	bl	8004f64 <tcpIsDuplicateAck>
 8004cd6:	61f8      	str	r0, [r7, #28]

   //The send window should be updated
   tcpUpdateSendWindow(socket, segment);
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fc02 	bl	80054e4 <tcpUpdateSendWindow>

   //The incoming ACK segment acknowledges new data?
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dd7b      	ble.n	8004de8 <tcpCheckAck+0x182>
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Compute the number of bytes acknowledged by the incoming ACK
      n = segment->ackNum - socket->sndUna;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24

      //Check whether the ACK segment acknowledges our SYN
      if(socket->sndUna == socket->iss)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d102      	bne.n	8004d14 <tcpCheckAck+0xae>
      {
         n--;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	3b01      	subs	r3, #1
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
      }

      //Total number of bytes acknowledged during the whole round-trip
      socket->n += n;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	441a      	add	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
#endif
      //Update SND.UNA pointer
      socket->sndUna = segment->ackNum;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

      //Compute retransmission timeout
      updateFlag = tcpComputeRto(socket);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fc60 	bl	80055f4 <tcpComputeRto>
 8004d34:	6178      	str	r0, [r7, #20]

      //Any segments on the retransmission queue which are thereby
      //entirely acknowledged are removed
      tcpUpdateRetransmitQueue(socket);
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa91 	bl	800525e <tcpUpdateRetransmitQueue>

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <tcpCheckAck+0xec>
      {
         //Invoke fast recovery (refer to RFC 6582)
         tcpFastRecovery(socket, segment, n);
 8004d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 f976 	bl	800503c <tcpFastRecovery>
 8004d50:	e03c      	b.n	8004dcc <tcpCheckAck+0x166>
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

         //Check congestion state
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d103      	bne.n	8004d6c <tcpCheckAck+0x106>
         {
            //Invoke fast loss recovery
            tcpFastLossRecovery(socket, segment);
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f9af 	bl	80050ca <tcpFastLossRecovery>
         }

         //Slow start algorithm is used when cwnd is lower than ssthresh
         if(socket->cwnd < socket->ssthresh)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d211      	bcs.n	8004da0 <tcpCheckAck+0x13a>
         {
            //During slow start, TCP increments cwnd by at most SMSS bytes
            //for each ACK received that cumulatively acknowledges new data
            socket->cwnd += MIN(n, socket->smss);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	bf28      	it	cs
 8004d90:	460b      	movcs	r3, r1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	4413      	add	r3, r2
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8004d9e:	e015      	b.n	8004dcc <tcpCheckAck+0x166>
         }
         //Congestion avoidance algorithm is used when cwnd exceeds ssthres
         else
         {
            //Congestion window is updated once per RTT
            if(updateFlag)
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d012      	beq.n	8004dcc <tcpCheckAck+0x166>
            {
               //TCP must not increment cwnd by more than SMSS bytes
               socket->cwnd += MIN(socket->n, socket->smss);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004db2:	4619      	mov	r1, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004dba:	428b      	cmp	r3, r1
 8004dbc:	bf28      	it	cs
 8004dbe:	460b      	movcs	r3, r1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
            }
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	f8b2 20e2 	ldrh.w	r2, [r2, #226]	; 0xe2
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	bf28      	it	cs
 8004ddc:	4613      	movcs	r3, r2
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 8004de6:	e07a      	b.n	8004ede <tcpCheckAck+0x278>
   //The incoming ACK segment does not acknowledge new data?
   else
   {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Check whether the acknowledgment is a duplicate
      if(duplicateFlag)
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <tcpCheckAck+0x198>
      {
         //Increment duplicate ACK counter
         socket->dupAckCount++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004dfc:	e003      	b.n	8004e06 <tcpCheckAck+0x1a0>
         TRACE_INFO("TCP duplicate ACK #%u\r\n", socket->dupAckCount);
      }
      else
      {
         //Reset duplicate ACK counter
         socket->dupAckCount = 0;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      }

      //Check congestion state
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d146      	bne.n	8004e9e <tcpCheckAck+0x238>
      {
         //Use default duplicate ACK threshold
         thresh = TCP_FAST_RETRANSMIT_THRES;
 8004e10:	2303      	movs	r3, #3
 8004e12:	623b      	str	r3, [r7, #32]
         //Amount of data sent but not yet acknowledged
         ownd = socket->sndNxt - socket->sndUna;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	61bb      	str	r3, [r7, #24]

         //Test if there is either no unsent data ready for transmission at
         //the sender, or the advertised receive window does not permit new
         //segments to be transmitted (refer to RFC 5827 section 3.1)
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <tcpCheckAck+0x1e2>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8004e34:	4619      	mov	r1, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	4299      	cmp	r1, r3
 8004e46:	d817      	bhi.n	8004e78 <tcpCheckAck+0x212>
         {
            //Compute the duplicate ACK threshold used to trigger a
            //retransmission
            if(ownd <= (3 * socket->smss))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004e4e:	461a      	mov	r2, r3
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	461a      	mov	r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d802      	bhi.n	8004e64 <tcpCheckAck+0x1fe>
            {
               thresh = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	e009      	b.n	8004e78 <tcpCheckAck+0x212>
            }
            else if(ownd <= (4 * socket->smss))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d801      	bhi.n	8004e78 <tcpCheckAck+0x212>
            {
               thresh = 2;
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
            {
            }
         }

         //Check the number of duplicate ACKs that have been received
         if(socket->dupAckCount >= thresh)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7e:	6a3a      	ldr	r2, [r7, #32]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d81f      	bhi.n	8004ec4 <tcpCheckAck+0x25e>
         {
            //The TCP sender first checks the value of recover to see if the
            //cumulative acknowledgment field covers more than recover
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	dd16      	ble.n	8004ec4 <tcpCheckAck+0x25e>
            {
               //Invoke Fast Retransmit (refer to RFC 6582)
               tcpFastRetransmit(socket);
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 f895 	bl	8004fc6 <tcpFastRetransmit>
 8004e9c:	e012      	b.n	8004ec4 <tcpCheckAck+0x25e>
               //If not, the TCP does not enter fast retransmit and does not
               //reset ssthres...
            }
         }
      }
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10d      	bne.n	8004ec4 <tcpCheckAck+0x25e>
      {
         //Duplicate ACK received?
         if(duplicateFlag)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <tcpCheckAck+0x25e>
         {
            //For each additional duplicate ACK received (after the third),
            //cwnd must be incremented by SMSS. This artificially inflates
            //the congestion window in order to reflect the additional
            //segment that has left the network
            socket->cwnd += socket->smss;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004eba:	4413      	add	r3, r2
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
         }
      }

      //Limit the size of the congestion window
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f8b2 20e2 	ldrh.w	r2, [r2, #226]	; 0xe2
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf28      	it	cs
 8004ed4:	4613      	movcs	r3, r2
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
#endif
   }

   //Update TX events
   tcpUpdateEvents(socket);
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f000 fde0 	bl	8005aa4 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3728      	adds	r7, #40	; 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, IpPseudoHeader *pseudoHeader,
   TcpHeader *segment)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
   bool_t flag;
   TcpSynQueueItem *queueItem;

   //Initialize flag
   flag = FALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

   //Point to the very first item
   queueItem = socket->synQueue;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f04:	613b      	str	r3, [r7, #16]

   //Loop through the SYN queue
   while(queueItem != NULL)
 8004f06:	e023      	b.n	8004f50 <tcpIsDuplicateSyn+0x62>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d11c      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	695b      	ldr	r3, [r3, #20]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d118      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	681b      	ldr	r3, [r3, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d114      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d10e      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	689b      	ldr	r3, [r3, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d108      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
         {
            //Check source port
            if(queueItem->srcPort == segment->srcPort)
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	8a1a      	ldrh	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d101      	bne.n	8004f4a <tcpIsDuplicateSyn+0x5c>
            {
               //Duplicate SYN
               flag = TRUE;
 8004f46:	2301      	movs	r3, #1
 8004f48:	617b      	str	r3, [r7, #20]
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	613b      	str	r3, [r7, #16]
   while(queueItem != NULL)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1d8      	bne.n	8004f08 <tcpIsDuplicateSyn+0x1a>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
 8004f56:	697b      	ldr	r3, [r7, #20]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <tcpIsDuplicateAck>:
 * @param[in] length Length of the segment data
 * @return TRUE if the ACK is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateAck(Socket *socket, TcpHeader *segment, size_t length)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
   bool_t flag;

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01c      	beq.n	8004fb8 <tcpIsDuplicateAck+0x54>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d119      	bne.n	8004fb8 <tcpIsDuplicateAck+0x54>
      {
         //The SYN and FIN bits are both off
         if((segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)) == 0)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	7b5b      	ldrb	r3, [r3, #13]
 8004f88:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d110      	bne.n	8004fb8 <tcpIsDuplicateAck+0x54>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d109      	bne.n	8004fb8 <tcpIsDuplicateAck+0x54>
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	89db      	ldrh	r3, [r3, #14]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d101      	bne.n	8004fb8 <tcpIsDuplicateAck+0x54>
               {
                  //Duplicate ACK
                  flag = TRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
         }
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
 8004fb8:	697b      	ldr	r3, [r7, #20]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <tcpFastRetransmit>:
 * @brief Fast retransmit procedure
 * @param[in] socket Handle referencing the current socket
 **/

void tcpFastRetransmit(Socket *socket)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   uint32_t flightSize;

   //Amount of data that has been sent but not yet acknowledged
   flightSize = socket->sndNxt - socket->sndUna;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
   //After receiving 3 duplicate ACKs, ssthresh must be adjusted
   socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	085b      	lsrs	r3, r3, #1
 8004fec:	4293      	cmp	r3, r2
 8004fee:	bf38      	it	cc
 8004ff0:	4613      	movcc	r3, r2
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

   //The value of recover is incremented to the value of the highest
   //sequence number transmitted by the TCP so far
   socket->recover = socket->sndNxt - 1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
   //Debug message
   TRACE_INFO("TCP fast retransmit...\r\n");

   //TCP performs a retransmission of what appears to be the missing segment,
   //without waiting for the retransmission timer to expire
   tcpRetransmitSegment(socket);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fb7b 	bl	8005704 <tcpRetransmitSegment>

   //cwnd must set to ssthresh plus 3*SMSS. This artificially inflates the
   //congestion window by the number of segments (three) that have left the
   //network and which the receiver has buffered
   socket->cwnd = socket->ssthresh + TCP_FAST_RETRANSMIT_THRES * socket->smss;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800501a:	4619      	mov	r1, r3
 800501c:	0049      	lsls	r1, r1, #1
 800501e:	440b      	add	r3, r1
 8005020:	b29b      	uxth	r3, r3
 8005022:	4413      	add	r3, r2
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2

   //Enter the fast recovery procedure
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
#endif
}
 8005034:	bf00      	nop
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <tcpFastRecovery>:
 * @param[in] segment Pointer to the incoming TCP segment
 * @param[in] n Number of bytes acknowledged by the incoming ACK
 **/

void tcpFastRecovery(Socket *socket, TcpHeader *segment, uint_t n)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and including
   //recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	dd0a      	ble.n	800506e <tcpFastRecovery+0x32>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Set cwnd to ssthresh
      socket->cwnd = socket->ssthresh;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      //Exit the fast recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

      //Do not exit the fast recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
   }
#endif
}
 800506c:	e029      	b.n	80050c2 <tcpFastRecovery+0x86>
      tcpRetransmitSegment(socket);
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 fb48 	bl	8005704 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 800507a:	461a      	mov	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4293      	cmp	r3, r2
 8005080:	d209      	bcs.n	8005096 <tcpFastRecovery+0x5a>
         socket->cwnd -= n;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	b29b      	uxth	r3, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      if(n >= socket->smss)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d30a      	bcc.n	80050ba <tcpFastRecovery+0x7e>
         socket->cwnd += socket->smss;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80050b0:	4413      	add	r3, r2
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <tcpFastLossRecovery>:
 * @param[in] socket Handle referencing the current socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpFastLossRecovery(Socket *socket, TcpHeader *segment)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check whether this ACK acknowledges all of the data up to and
   //including recover
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dd04      	ble.n	80050ee <tcpFastLossRecovery+0x24>
   {
      //This is a full acknowledgment
      TRACE_INFO("TCP full acknowledgment\r\n");

      //Exit the fast loss recovery procedure
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

      //Do not exit the fast loss recovery procedure...
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
   }
#endif
}
 80050ec:	e006      	b.n	80050fc <tcpFastLossRecovery+0x32>
      tcpRetransmitSegment(socket);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb08 	bl	8005704 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <tcpProcessSegmentData>:
 * @param[in] length Length of the segment data
 **/

void tcpProcessSegmentData(Socket *socket, TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
   uint32_t leftEdge;
   uint32_t rightEdge;

   //First sequence number occupied by the incoming segment
   leftEdge = segment->seqNum;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	617b      	str	r3, [r7, #20]
   //Sequence number immediately following the incoming segment
   rightEdge = segment->seqNum + length;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	4413      	add	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

   //Check whether some data falls outside the receive window
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	da0b      	bge.n	8005148 <tcpProcessSegmentData+0x44>
   {
      //Position of the first byte to be read
      offset += socket->rcvNxt - leftEdge;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	603b      	str	r3, [r7, #0]
      //Ignore the data that falls outside the receive window
      leftEdge = socket->rcvNxt;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005146:	617b      	str	r3, [r7, #20]
   }
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	f8b1 10c6 	ldrh.w	r1, [r1, #198]	; 0xc6
 8005156:	440b      	add	r3, r1
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	dd07      	ble.n	800516e <tcpProcessSegmentData+0x6a>
   {
      //Ignore the data that falls outside the receive window
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	f8b2 20c6 	ldrh.w	r2, [r2, #198]	; 0xc6
 800516a:	4413      	add	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
   }

   //Copy the incoming data to the receive buffer
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 800516e:	6979      	ldr	r1, [r7, #20]
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fe50 	bl	8005e22 <tcpWriteRxBuffer>

   //Update the list of non-contiguous blocks of data that
   //have been received and queued
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 8005182:	f107 0210 	add.w	r2, r7, #16
 8005186:	f107 0314 	add.w	r3, r7, #20
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f91d 	bl	80053cc <tcpUpdateSackBlocks>

   //Check whether the segment was received out of order
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	dd0e      	ble.n	80051be <tcpProcessSegmentData+0xba>
   {
      //Out of order data segments should be acknowledged immediately, in
      //order to accelerate loss recovery
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051ac:	2100      	movs	r1, #0
 80051ae:	9101      	str	r1, [sp, #4]
 80051b0:	2100      	movs	r1, #0
 80051b2:	9100      	str	r1, [sp, #0]
 80051b4:	2110      	movs	r1, #16
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff f91e 	bl	80043f8 <tcpSendSegment>
         FALSE);

      //Notify user task that data is available
      tcpUpdateEvents(socket);
   }
}
 80051bc:	e030      	b.n	8005220 <tcpProcessSegmentData+0x11c>
      length = rightEdge - leftEdge;
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	623b      	str	r3, [r7, #32]
      socket->rcvNxt += length;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	441a      	add	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      socket->rcvUser += length;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
      socket->rcvWnd -= length;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8b3 20c6 	ldrh.w	r2, [r3, #198]	; 0xc6
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800520a:	2100      	movs	r1, #0
 800520c:	9101      	str	r1, [sp, #4]
 800520e:	2100      	movs	r1, #0
 8005210:	9100      	str	r1, [sp, #0]
 8005212:	2110      	movs	r1, #16
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff f8ef 	bl	80043f8 <tcpSendSegment>
      tcpUpdateEvents(socket);
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fc42 	bl	8005aa4 <tcpUpdateEvents>
}
 8005220:	bf00      	nop
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <tcpDeleteControlBlock>:
 * @brief Delete TCB structure
 * @param[in] socket Handle referencing the socket
 **/

void tcpDeleteControlBlock(Socket *socket)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
   //Delete retransmission queue
   tcpFlushRetransmitQueue(socket);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f88d 	bl	8005350 <tcpFlushRetransmitQueue>

   //Delete SYN queue
   tcpFlushSynQueue(socket);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8ac 	bl	8005394 <tcpFlushSynQueue>

   //Release transmit buffer
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	33f4      	adds	r3, #244	; 0xf4
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd f955 	bl	80024f2 <netBufferSetLength>

   //Release receive buffer
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd f94e 	bl	80024f2 <netBufferSetLength>
}
 8005256:	bf00      	nop
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 800525e:	b590      	push	{r4, r7, lr}
 8005260:	b087      	sub	sp, #28
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
   TcpQueueItem *prevQueueItem;
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
   queueItem = socket->retransmitQueue;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005270:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 8005272:	e05b      	b.n	800532c <tcpUpdateRetransmitQueue+0xce>
   {
      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	331c      	adds	r3, #28
 8005278:	60bb      	str	r3, [r7, #8]

      //Calculate the length of the TCP segment
      if(header->flags & TCP_FLAG_SYN)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	7b5b      	ldrb	r3, [r3, #13]
 800527e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <tcpUpdateRetransmitQueue+0x34>
      {
         length = 1;
 800528c:	2301      	movs	r3, #1
 800528e:	617b      	str	r3, [r7, #20]
 8005290:	e010      	b.n	80052b4 <tcpUpdateRetransmitQueue+0x56>
      }
      else if(header->flags & TCP_FLAG_FIN)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	7b5b      	ldrb	r3, [r3, #13]
 8005296:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <tcpUpdateRetransmitQueue+0x50>
      {
         length = queueItem->length + 1;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	3301      	adds	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e002      	b.n	80052b4 <tcpUpdateRetransmitQueue+0x56>
      }
      else
      {
         length = queueItem->length;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	617b      	str	r3, [r7, #20]
      }

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb fddb 	bl	8000e7a <swapInt32>
 80052c4:	4602      	mov	r2, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	1ae3      	subs	r3, r4, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	db28      	blt.n	8005322 <tcpUpdateRetransmitQueue+0xc4>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10c      	bne.n	80052f0 <tcpUpdateRetransmitQueue+0x92>
         {
            //Remove the current item from the queue
            socket->retransmitQueue = queueItem->next;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
            //The item can now be safely deleted
            memPoolFree(queueItem);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f7fd f897 	bl	8002414 <memPoolFree>
            //Point to the next item
            queueItem = socket->retransmitQueue;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e009      	b.n	8005304 <tcpUpdateRetransmitQueue+0xa6>
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	601a      	str	r2, [r3, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7fd f88b 	bl	8002414 <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fd fdc0 	bl	8002e98 <netStartTimer>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 8005320:	e004      	b.n	800532c <tcpUpdateRetransmitQueue+0xce>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	613b      	str	r3, [r7, #16]
         queueItem = queueItem->next;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1a0      	bne.n	8005274 <tcpUpdateRetransmitQueue+0x16>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <tcpUpdateRetransmitQueue+0xea>
      netStopTimer(&socket->retransmitTimer);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005342:	4618      	mov	r0, r3
 8005344:	f7fd fdbc 	bl	8002ec0 <netStopTimer>
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}

08005350 <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800535e:	60fb      	str	r3, [r7, #12]

   //Loop through retransmission queue
   while(queueItem != NULL)
 8005360:	e007      	b.n	8005372 <tcpFlushRetransmitQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7fd f853 	bl	8002414 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f4      	bne.n	8005362 <tcpFlushRetransmitQueue+0x12>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc

   //Turn off the retransmission timer
   netStopTimer(&socket->retransmitTimer);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005386:	4618      	mov	r0, r3
 8005388:	f7fd fd9a 	bl	8002ec0 <netStopTimer>
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80053a2:	60fb      	str	r3, [r7, #12]

   //Loop through SYN queue
   while(queueItem != NULL)
 80053a4:	e007      	b.n	80053b6 <tcpFlushSynQueue+0x22>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60bb      	str	r3, [r7, #8]
      //Free previously allocated memory
      memPoolFree(queueItem);
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f7fd f831 	bl	8002414 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	60fb      	str	r3, [r7, #12]
   while(queueItem != NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f4      	bne.n	80053a6 <tcpFlushSynQueue+0x12>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
   uint_t i = 0;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 80053dc:	e04e      	b.n	800547c <tcpUpdateSackBlocks+0xb0>
   {
      //Find each block that overlaps the specified one
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	334a      	adds	r3, #74	; 0x4a
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	440b      	add	r3, r1
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	db40      	blt.n	8005476 <tcpUpdateSackBlocks+0xaa>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68f9      	ldr	r1, [r7, #12]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	334a      	adds	r3, #74	; 0x4a
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	1ad3      	subs	r3, r2, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 8005406:	2b00      	cmp	r3, #0
 8005408:	dc35      	bgt.n	8005476 <tcpUpdateSackBlocks+0xaa>
      {
         //Merge blocks to form a contiguous one
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	334a      	adds	r3, #74	; 0x4a
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	bf28      	it	cs
 800541e:	461a      	movcs	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	601a      	str	r2, [r3, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	334a      	adds	r3, #74	; 0x4a
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	4413      	add	r3, r2
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	bf38      	it	cc
 8005438:	461a      	movcc	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]

         //Delete current block
         osMemmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	18d0      	adds	r0, r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3301      	adds	r3, #1
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	18d1      	adds	r1, r2, r3
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f1c3 0303 	rsb	r3, r3, #3
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	461a      	mov	r2, r3
 8005462:	f00a fd5e 	bl	800ff22 <memmove>
            (TCP_MAX_SACK_BLOCKS - i - 1) * sizeof(TcpSackBlock));

         //Decrement the number of non-contiguous blocks
         socket->sackBlockCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 800546c:	1e5a      	subs	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8005474:	e002      	b.n	800547c <tcpUpdateSackBlocks+0xb0>
      }
      else
      {
         //Point to the next block
         i++;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	3301      	adds	r3, #1
 800547a:	617b      	str	r3, [r7, #20]
   while(i < socket->sackBlockCount)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	d3aa      	bcc.n	80053de <tcpUpdateSackBlocks+0x12>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	dd21      	ble.n	80054dc <tcpUpdateSackBlocks+0x110>
   {
      //Make room for the new non-contiguous block
      osMemmove(socket->sackBlock + 1, socket->sackBlock,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800549e:	f103 0008 	add.w	r0, r3, #8
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80054a8:	2218      	movs	r2, #24
 80054aa:	4619      	mov	r1, r3
 80054ac:	f00a fd39 	bl	800ff22 <memmove>
         (TCP_MAX_SACK_BLOCKS - 1) * sizeof(TcpSackBlock));

      //Insert the element in the list
      socket->sackBlock[0].leftEdge = *leftEdge;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
      socket->sackBlock[0].rightEdge = *rightEdge;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258

      //Increment the number of non-contiguous blocks
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80054ca:	2b03      	cmp	r3, #3
 80054cc:	d806      	bhi.n	80054dc <tcpUpdateSackBlocks+0x110>
         socket->sackBlockCount++;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
   }
}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, TcpHeader *segment)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d12c      	bne.n	8005556 <tcpUpdateSendWindow+0x72>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005506:	429a      	cmp	r2, r3
 8005508:	d125      	bne.n	8005556 <tcpUpdateSendWindow+0x72>
   {
      //TCP may ignore a window update with a smaller window than previously
      //offered if neither the sequence number nor the acknowledgment number
      //is increased (refer to RFC 1122, section 4.2.2.16)
      if(segment->window > socket->sndWnd)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	89db      	ldrh	r3, [r3, #14]
 800550e:	b29a      	uxth	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005516:	429a      	cmp	r2, r3
 8005518:	d968      	bls.n	80055ec <tcpUpdateSendWindow+0x108>
      {
         //Update the send window and record the sequence number and the
         //acknowledgment number used to update SND.WND
         socket->sndWnd = segment->window;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	89db      	ldrh	r3, [r3, #14]
 800551e:	b29a      	uxth	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
         socket->sndWl1 = segment->seqNum;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
         socket->sndWl2 = segment->ackNum;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	89db      	ldrh	r3, [r3, #14]
 800553e:	b29a      	uxth	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8005546:	4293      	cmp	r3, r2
 8005548:	bf38      	it	cc
 800554a:	4613      	movcc	r3, r2
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
      if(segment->window > socket->sndWnd)
 8005554:	e04a      	b.n	80055ec <tcpUpdateSendWindow+0x108>
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	db42      	blt.n	80055ec <tcpUpdateSendWindow+0x108>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005570:	1ad3      	subs	r3, r2, r3
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 8005572:	2b00      	cmp	r3, #0
 8005574:	db3a      	blt.n	80055ec <tcpUpdateSendWindow+0x108>
   {
      //Check whether the remote host advertises a zero window
      if(segment->window == 0 && socket->sndWnd != 0)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	89db      	ldrh	r3, [r3, #14]
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d117      	bne.n	80055b0 <tcpUpdateSendWindow+0xcc>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d012      	beq.n	80055b0 <tcpUpdateSendWindow+0xcc>
      {
         //Start the persist timer
         socket->wndProbeCount = 0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005598:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
         netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f503 7208 	add.w	r2, r3, #544	; 0x220
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80055a8:	4619      	mov	r1, r3
 80055aa:	4610      	mov	r0, r2
 80055ac:	f7fd fc74 	bl	8002e98 <netStartTimer>
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = segment->window;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	89db      	ldrh	r3, [r3, #14]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
      socket->sndWl1 = segment->seqNum;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      socket->sndWl2 = segment->ackNum;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, segment->window);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	89db      	ldrh	r3, [r3, #14]
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80055dc:	4293      	cmp	r3, r2
 80055de:	bf38      	it	cc
 80055e0:	4613      	movcc	r3, r2
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
   }
}
 80055ea:	e7ff      	b.n	80055ec <tcpUpdateSendWindow+0x108>
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
   bool_t flag;
   systime_t r;
   systime_t delta;

   //Clear flag
   flag = FALSE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d076      	beq.n	80056f8 <tcpComputeRto+0x104>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	dd6d      	ble.n	80056f8 <tcpComputeRto+0x104>
      {
         //Calculate round-time trip
         r = osGetSystemTime() - socket->rttStartTime;
 800561c:	f7fb fda1 	bl	8001162 <osGetSystemTime>
 8005620:	4602      	mov	r2, r0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	613b      	str	r3, [r7, #16]

         //First RTT measurement?
         if(socket->srtt == 0 && socket->rttvar == 0)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10e      	bne.n	8005654 <tcpComputeRto+0x60>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d109      	bne.n	8005654 <tcpComputeRto+0x60>
         {
            //Initialize RTO calculation algorithm
            socket->srtt = r;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            socket->rttvar = r / 2;
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	085a      	lsrs	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8005652:	e029      	b.n	80056a8 <tcpComputeRto+0xb4>
         }
         else
         {
            //Calculate the difference between the measured value and the
            //current RTT estimator
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d905      	bls.n	800566c <tcpComputeRto+0x78>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	e004      	b.n	8005676 <tcpComputeRto+0x82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	60fb      	str	r3, [r7, #12]

            //Implement Van Jacobson's algorithm (as specified in RFC 6298 2.3)
            socket->rttvar = (3 * socket->rttvar + delta) / 4;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	441a      	add	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	089a      	lsrs	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            socket->srtt = (7 * socket->srtt + r) / 8;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8005696:	4613      	mov	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	1a9a      	subs	r2, r3, r2
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	08da      	lsrs	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
         }

         //Calculate the next retransmission timeout
         socket->rto = socket->srtt + 4 * socket->rttvar;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

         //Whenever RTO is computed, if it is less than 1 second, then the RTO
         //should be rounded up to 1 second
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c8:	bf38      	it	cc
 80056ca:	f44f 737a 	movcc.w	r3, #1000	; 0x3e8
 80056ce:	461a      	mov	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

         //A maximum value may be placed on RTO provided it is at least 60
         //seconds
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056dc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80056e0:	429a      	cmp	r2, r3
 80056e2:	bf28      	it	cs
 80056e4:	461a      	movcs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
         //Debug message
         TRACE_DEBUG("R=%" PRIu32 ", SRTT=%" PRIu32 ", RTTVAR=%" PRIu32 ", RTO=%" PRIu32 "\r\n",
            r, socket->srtt, socket->rttvar, socket->rto);

         //RTT measurement is complete
         socket->rttBusy = FALSE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
         //Set flag
         flag = TRUE;
 80056f4:	2301      	movs	r3, #1
 80056f6:	617b      	str	r3, [r7, #20]
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
 80056f8:	697b      	ldr	r3, [r7, #20]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <tcpRetransmitSegment>:
 * @param[in] socket Handle referencing the socket
 * @return Error code
 **/

error_t tcpRetransmitSegment(Socket *socket)
{
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b090      	sub	sp, #64	; 0x40
 8005708:	af02      	add	r7, sp, #8
 800570a:	6078      	str	r0, [r7, #4]
   TcpQueueItem *queueItem;
   TcpHeader *header;
   NetTxAncillary ancillary;

   //Initialize error code
   error = NO_ERROR;
 800570c:	2300      	movs	r3, #0
 800570e:	86fb      	strh	r3, [r7, #54]	; 0x36
   //Total number of bytes that have been retransmitted
   length = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	633b      	str	r3, [r7, #48]	; 0x30

   //Point to the retransmission queue
   queueItem = socket->retransmitQueue;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Any segment in the retransmission queue?
   while(queueItem != NULL)
 800571c:	e074      	b.n	8005808 <tcpRetransmitSegment+0x104>
   {
      //Total number of bytes that have been retransmitted
      length += queueItem->length;
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005724:	4413      	add	r3, r2
 8005726:	633b      	str	r3, [r7, #48]	; 0x30

      //The amount of data that can be sent cannot exceed the MSS
      if(length > socket->smss)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800572e:	461a      	mov	r2, r3
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	4293      	cmp	r3, r2
 8005734:	d902      	bls.n	800573c <tcpRetransmitSegment+0x38>
      {
         //We are done
         error = NO_ERROR;
 8005736:	2300      	movs	r3, #0
 8005738:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 800573a:	e06a      	b.n	8005812 <tcpRetransmitSegment+0x10e>
      }

      //Point to the TCP header
      header = (TcpHeader *) queueItem->header;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	331c      	adds	r3, #28
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28

      //Allocate a memory buffer to hold the TCP segment
      buffer = ipAllocBuffer(0, &offset);
 8005742:	f107 0320 	add.w	r3, r7, #32
 8005746:	4619      	mov	r1, r3
 8005748:	2000      	movs	r0, #0
 800574a:	f7fc fb5d 	bl	8001e08 <ipAllocBuffer>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24
      //Failed to allocate memory?
      if(buffer == NULL)
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <tcpRetransmitSegment+0x58>
      {
         //Report an error
         error = ERROR_OUT_OF_MEMORY;
 8005756:	2364      	movs	r3, #100	; 0x64
 8005758:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Exit immediately
         break;
 800575a:	e05a      	b.n	8005812 <tcpRetransmitSegment+0x10e>

      //Start of exception handling block
      do
      {
         //Copy TCP header
         error = netBufferAppend(buffer, header, header->dataOffset * 4);
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	7b1b      	ldrb	r3, [r3, #12]
 8005760:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005764:	b2db      	uxtb	r3, r3
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	461a      	mov	r2, r3
 800576a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800576c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800576e:	f7fd f8fe 	bl	800296e <netBufferAppend>
 8005772:	4603      	mov	r3, r0
 8005774:	86fb      	strh	r3, [r7, #54]	; 0x36
         //Any error to report?
         if(error)
 8005776:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005778:	2b00      	cmp	r3, #0
 800577a:	d139      	bne.n	80057f0 <tcpRetransmitSegment+0xec>
            break;

         //Copy data from send buffer
         error = tcpReadTxBuffer(socket, ntohl(header->seqNum), buffer,
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4618      	mov	r0, r3
 8005782:	f7fb fb7a 	bl	8000e7a <swapInt32>
 8005786:	4601      	mov	r1, r0
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 faf8 	bl	8005d84 <tcpReadTxBuffer>
 8005794:	4603      	mov	r3, r0
 8005796:	86fb      	strh	r3, [r7, #54]	; 0x36
            queueItem->length);
         //Any error to report?
         if(error)
 8005798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800579a:	2b00      	cmp	r3, #0
 800579c:	d12a      	bne.n	80057f4 <tcpRetransmitSegment+0xf0>
         //Total number of segments retransmitted
         MIB2_INC_COUNTER32(tcpGroup.tcpRetransSegs, 1);
         TCP_MIB_INC_COUNTER32(tcpRetransSegs, 1);

         //Dump TCP header contents for debugging purpose
         tcpDumpHeader(header, queueItem->length, socket->iss, socket->irs);
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	6859      	ldr	r1, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b0:	f000 fb89 	bl	8005ec6 <tcpDumpHeader>

         //Additional options can be passed to the stack along with the packet
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 80057b4:	4b19      	ldr	r3, [pc, #100]	; (800581c <tcpRetransmitSegment+0x118>)
 80057b6:	f107 0408 	add.w	r4, r7, #8
 80057ba:	461d      	mov	r5, r3
 80057bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80057c4:	e884 0003 	stmia.w	r4, {r0, r1}
         //Set the TTL value to be used
         ancillary.ttl = socket->ttl;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057ce:	723b      	strb	r3, [r7, #8]
         ancillary.vmanPcp = socket->vmanPcp;
         ancillary.vmanDei = socket->vmanDei;
#endif
         //Retransmit the lost segment without waiting for the retransmission
         //timer to expire
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68d8      	ldr	r0, [r3, #12]
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	f103 010c 	add.w	r1, r3, #12
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	f107 0308 	add.w	r3, r7, #8
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	f7fc f9bf 	bl	8001b68 <ipSendDatagram>
 80057ea:	4603      	mov	r3, r0
 80057ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80057ee:	e002      	b.n	80057f6 <tcpRetransmitSegment+0xf2>
            break;
 80057f0:	bf00      	nop
 80057f2:	e000      	b.n	80057f6 <tcpRetransmitSegment+0xf2>
            break;
 80057f4:	bf00      	nop

         //End of exception handling block
      } while(0);

      //Free previously allocated memory
      netBufferFree(buffer);
 80057f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057f8:	f7fc fe4a 	bl	8002490 <netBufferFree>

      //Any error to report?
      if(error)
 80057fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <tcpRetransmitSegment+0x10c>
         //Exit immediately
         break;
      }

      //Point to the next segment in the queue
      queueItem = queueItem->next;
 8005802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
   while(queueItem != NULL)
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d187      	bne.n	800571e <tcpRetransmitSegment+0x1a>
 800580e:	e000      	b.n	8005812 <tcpRetransmitSegment+0x10e>
         break;
 8005810:	bf00      	nop
   }

   //Return status code
   return error;
 8005812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8005814:	4618      	mov	r0, r3
 8005816:	3738      	adds	r7, #56	; 0x38
 8005818:	46bd      	mov	sp, r7
 800581a:	bdb0      	pop	{r4, r5, r7, pc}
 800581c:	080117a0 	.word	0x080117a0

08005820 <tcpNagleAlgo>:
 * @param[in] flags Set of flags that influences the behavior of this function
 * @return Error code
 **/

error_t tcpNagleAlgo(Socket *socket, uint_t flags)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af02      	add	r7, sp, #8
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
   uint32_t n;
   uint32_t u;

   //The amount of data that can be sent at any given time is limited by the
   //receiver window and the congestion window
   n = MIN(socket->sndWnd, socket->txBufferSize);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8005836:	4293      	cmp	r3, r2
 8005838:	bf28      	it	cs
 800583a:	4613      	movcs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Check the congestion window
   n = MIN(n, socket->cwnd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8005844:	461a      	mov	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4293      	cmp	r3, r2
 800584a:	bf28      	it	cs
 800584c:	4613      	movcs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
#endif

   //Retrieve the size of the usable window
   u = n - (socket->sndNxt - socket->sndUna);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

   //The Nagle algorithm discourages sending tiny segments when the data to be
   //sent increases in small increments
   while(socket->sndUser > 0)
 8005864:	e0e1      	b.n	8005a2a <tcpNagleAlgo+0x20a>
   {
      //The usable window size may become zero or negative, preventing packet
      //transmission
      if((int32_t) u <= 0)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f340 80e5 	ble.w	8005a38 <tcpNagleAlgo+0x218>
         break;

      //Calculate the number of bytes to send at a time
      n = MIN(u, socket->sndUser);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005874:	461a      	mov	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	4293      	cmp	r3, r2
 800587a:	bf28      	it	cs
 800587c:	4613      	movcs	r3, r2
 800587e:	613b      	str	r3, [r7, #16]
      n = MIN(n, socket->smss);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005886:	461a      	mov	r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4293      	cmp	r3, r2
 800588c:	bf28      	it	cs
 800588e:	4613      	movcs	r3, r2
 8005890:	613b      	str	r3, [r7, #16]

      //Disable Nagle algorithm?
      if((flags & SOCKET_FLAG_NO_DELAY) != 0)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01a      	beq.n	80058d2 <tcpNagleAlgo+0xb2>
      {
         //All packets will be send no matter what size they have
         if(n > 0)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 80cc 	beq.w	8005a3c <tcpNagleAlgo+0x21c>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80058b0:	2301      	movs	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	460b      	mov	r3, r1
 80058ba:	2118      	movs	r1, #24
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fe fd9b 	bl	80043f8 <tcpSendSegment>
 80058c2:	4603      	mov	r3, r0
 80058c4:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 8098 	beq.w	80059fe <tcpNagleAlgo+0x1de>
               return error;
 80058ce:	89fb      	ldrh	r3, [r7, #14]
 80058d0:	e0bd      	b.n	8005a4e <tcpNagleAlgo+0x22e>
         {
            //We are done...
            break;
         }
      }
      else if((flags & SOCKET_FLAG_DELAY) != 0)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d023      	beq.n	8005924 <tcpNagleAlgo+0x104>
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80058e2:	461a      	mov	r2, r3
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	bf28      	it	cs
 80058ea:	4613      	movcs	r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 80058f2:	4293      	cmp	r3, r2
 80058f4:	f0c0 80a4 	bcc.w	8005a40 <tcpNagleAlgo+0x220>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005904:	2301      	movs	r3, #1
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	460b      	mov	r3, r1
 800590e:	2118      	movs	r1, #24
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fe fd71 	bl	80043f8 <tcpSendSegment>
 8005916:	4603      	mov	r3, r0
 8005918:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d06e      	beq.n	80059fe <tcpNagleAlgo+0x1de>
               return error;
 8005920:	89fb      	ldrh	r3, [r7, #14]
 8005922:	e094      	b.n	8005a4e <tcpNagleAlgo+0x22e>
         }
      }
      else
      {
         //Transmit data if a maximum-sized segment can be sent
         if(MIN(socket->sndUser, u) >= socket->smss)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800592a:	461a      	mov	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4293      	cmp	r3, r2
 8005930:	bf28      	it	cs
 8005932:	4613      	movcs	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 800593a:	4293      	cmp	r3, r2
 800593c:	d315      	bcc.n	800596a <tcpNagleAlgo+0x14a>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800594a:	2301      	movs	r3, #1
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	460b      	mov	r3, r1
 8005954:	2118      	movs	r1, #24
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe fd4e 	bl	80043f8 <tcpSendSegment>
 800595c:	4603      	mov	r3, r0
 800595e:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d04b      	beq.n	80059fe <tcpNagleAlgo+0x1de>
               return error;
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	e071      	b.n	8005a4e <tcpNagleAlgo+0x22e>
         }
         //Or if all queued data can be sent now
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005976:	429a      	cmp	r2, r3
 8005978:	d11c      	bne.n	80059b4 <tcpNagleAlgo+0x194>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005980:	461a      	mov	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4293      	cmp	r3, r2
 8005986:	d315      	bcc.n	80059b4 <tcpNagleAlgo+0x194>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005994:	2301      	movs	r3, #1
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	460b      	mov	r3, r1
 800599e:	2118      	movs	r1, #24
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fe fd29 	bl	80043f8 <tcpSendSegment>
 80059a6:	4603      	mov	r3, r0
 80059a8:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d026      	beq.n	80059fe <tcpNagleAlgo+0x1de>
               return error;
 80059b0:	89fb      	ldrh	r3, [r7, #14]
 80059b2:	e04c      	b.n	8005a4e <tcpNagleAlgo+0x22e>
         }
         //Or if at least a fraction of the maximum window can be sent
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80059ba:	461a      	mov	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4293      	cmp	r3, r2
 80059c0:	bf28      	it	cs
 80059c2:	4613      	movcs	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 80059ca:	0852      	lsrs	r2, r2, #1
 80059cc:	b292      	uxth	r2, r2
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d338      	bcc.n	8005a44 <tcpNagleAlgo+0x224>
         {
            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80059de:	2301      	movs	r3, #1
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	460b      	mov	r3, r1
 80059e8:	2118      	movs	r1, #24
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f7fe fd04 	bl	80043f8 <tcpSendSegment>
 80059f0:	4603      	mov	r3, r0
 80059f2:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <tcpNagleAlgo+0x1de>
               return error;
 80059fa:	89fb      	ldrh	r3, [r7, #14]
 80059fc:	e027      	b.n	8005a4e <tcpNagleAlgo+0x22e>
            break;
         }
      }

      //Advance SND.NXT pointer
      socket->sndNxt += n;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	441a      	add	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
      //Update the number of data buffered but not yet sent
      socket->sndUser -= n;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
      //Update the size of the usable window
      u -= n;
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
   while(socket->sndUser > 0)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af18 	bne.w	8005866 <tcpNagleAlgo+0x46>
 8005a36:	e006      	b.n	8005a46 <tcpNagleAlgo+0x226>
         break;
 8005a38:	bf00      	nop
 8005a3a:	e004      	b.n	8005a46 <tcpNagleAlgo+0x226>
            break;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <tcpNagleAlgo+0x226>
            break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <tcpNagleAlgo+0x226>
            break;
 8005a44:	bf00      	nop
   }

   //Check whether the transmitter can accept more data
   tcpUpdateEvents(socket);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f82c 	bl	8005aa4 <tcpUpdateEvents>

   //No error to report
   return NO_ERROR;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <tcpChangeState>:
 * @param[in] socket Handle referencing the socket
 * @param[in] newState New TCP state to switch to
 **/

void tcpChangeState(Socket *socket, TcpState newState)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
   //Enter CLOSED state?
   if(newState == TCP_STATE_CLOSED)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d112      	bne.n	8005a8e <tcpChangeState+0x38>
   {
      //Check previous state
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d004      	beq.n	8005a7c <tcpChangeState+0x26>
         socket->state == TCP_STATE_TIME_WAIT)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      if(socket->state == TCP_STATE_LAST_ACK ||
 8005a78:	2b0a      	cmp	r3, #10
 8005a7a:	d104      	bne.n	8005a86 <tcpChangeState+0x30>
      {
         //The connection has been closed properly
         socket->closedFlag = TRUE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005a84:	e003      	b.n	8005a8e <tcpChangeState+0x38>
      }
      else
      {
         //The connection has been reset by the peer
         socket->resetFlag = TRUE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      }
   }

   //Enter the desired state
   socket->state = newState;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	78fa      	ldrb	r2, [r7, #3]
 8005a92:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
   //Update TCP related events
   tcpUpdateEvents(socket);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f804 	bl	8005aa4 <tcpUpdateEvents>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check current TCP state
   switch(socket->state)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005aba:	2b0a      	cmp	r3, #10
 8005abc:	d85c      	bhi.n	8005b78 <tcpUpdateEvents+0xd4>
 8005abe:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <tcpUpdateEvents+0x20>)
 8005ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac4:	08005b47 	.word	0x08005b47
 8005ac8:	08005b79 	.word	0x08005b79
 8005acc:	08005b79 	.word	0x08005b79
 8005ad0:	08005b79 	.word	0x08005b79
 8005ad4:	08005af1 	.word	0x08005af1
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b03 	.word	0x08005b03
 8005ae8:	08005b25 	.word	0x08005b25
 8005aec:	08005b47 	.word	0x08005b47
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af6:	f043 0202 	orr.w	r2, r3, #2
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8005b00:	e03b      	b.n	8005b7a <tcpUpdateEvents+0xd6>

   //FIN-WAIT-2 state?
   case TCP_STATE_FIN_WAIT_2:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b08:	f043 0202 	orr.w	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8005b22:	e02a      	b.n	8005b7a <tcpUpdateEvents+0xd6>

   //CLOSE-WAIT, LAST-ACK or CLOSING state?
   case TCP_STATE_CLOSE_WAIT:
   case TCP_STATE_LAST_ACK:
   case TCP_STATE_CLOSING:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2a:	f043 0202 	orr.w	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8005b44:	e019      	b.n	8005b7a <tcpUpdateEvents+0xd6>

   //TIME-WAIT or CLOSED state?
   case TCP_STATE_TIME_WAIT:
   case TCP_STATE_CLOSED:
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b4c:	f043 0204 	orr.w	r2, r3, #4
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      break;
 8005b76:	e000      	b.n	8005b7a <tcpUpdateEvents+0xd6>

   //Any other state
   default:
      break;
 8005b78:	bf00      	nop
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d004      	beq.n	8005b8e <tcpUpdateEvents+0xea>
      socket->state == TCP_STATE_SYN_RECEIVED)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_SYN_SENT ||
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d110      	bne.n	8005bb0 <tcpUpdateEvents+0x10c>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b94:	f043 0210 	orr.w	r2, r3, #16
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005bae:	e060      	b.n	8005c72 <tcpUpdateEvents+0x1ce>
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d004      	beq.n	8005bc4 <tcpUpdateEvents+0x120>
      socket->state == TCP_STATE_CLOSE_WAIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d137      	bne.n	8005c34 <tcpUpdateEvents+0x190>
   {
      //Check whether the send buffer is full or not
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bd2:	441a      	add	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005bda:	1ad2      	subs	r2, r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d207      	bcs.n	8005bf6 <tcpUpdateEvents+0x152>
      {
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bec:	f043 0208 	orr.w	r2, r3, #8
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }

      //Check whether all the data in the send buffer has been transmitted
      if(socket->sndUser == 0)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d137      	bne.n	8005c70 <tcpUpdateEvents+0x1cc>
      {
         //All the pending data has been sent out
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c06:	f043 0210 	orr.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

         //Check whether an acknowledgment has been received
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	db26      	blt.n	8005c70 <tcpUpdateEvents+0x1cc>
         {
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      if(socket->sndUser == 0)
 8005c32:	e01d      	b.n	8005c70 <tcpUpdateEvents+0x1cc>
         }
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d019      	beq.n	8005c72 <tcpUpdateEvents+0x1ce>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c44:	f043 0208 	orr.w	r2, r3, #8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	f043 0210 	orr.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c64:	f043 0220 	orr.w	r2, r3, #32
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005c6e:	e000      	b.n	8005c72 <tcpUpdateEvents+0x1ce>
      if(socket->sndUser == 0)
 8005c70:	bf00      	nop
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d009      	beq.n	8005c90 <tcpUpdateEvents+0x1ec>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	d004      	beq.n	8005c90 <tcpUpdateEvents+0x1ec>
      socket->state == TCP_STATE_FIN_WAIT_2)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d10d      	bne.n	8005cac <tcpUpdateEvents+0x208>
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d035      	beq.n	8005d06 <tcpUpdateEvents+0x262>
      {
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      if(socket->rcvUser > 0)
 8005caa:	e02c      	b.n	8005d06 <tcpUpdateEvents+0x262>
      }
   }
   else if(socket->state == TCP_STATE_LISTEN)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d115      	bne.n	8005ce2 <tcpUpdateEvents+0x23e>
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d022      	beq.n	8005d06 <tcpUpdateEvents+0x262>
      {
         socket->eventFlags |= SOCKET_EVENT_ACCEPT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cc6:	f043 0201 	orr.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005ce0:	e011      	b.n	8005d06 <tcpUpdateEvents+0x262>
      }
   }
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d00c      	beq.n	8005d06 <tcpUpdateEvents+0x262>
      socket->state != TCP_STATE_SYN_RECEIVED)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   else if(socket->state != TCP_STATE_SYN_SENT &&
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d007      	beq.n	8005d06 <tcpUpdateEvents+0x262>
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <tcpUpdateEvents+0x298>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <tcpUpdateEvents+0x288>
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005d2a:	e007      	b.n	8005d3c <tcpUpdateEvents+0x298>
      }
      else
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	401a      	ands	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Any event to signal?
   if(socket->eventFlags)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00f      	beq.n	8005d7a <tcpUpdateEvents+0x2d6>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3334      	adds	r3, #52	; 0x34
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fb f989 	bl	8001076 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <tcpUpdateEvents+0x2d6>
      {
         osSetEvent(socket->userEvent);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fb f97e 	bl	8001076 <osSetEvent>
      }
   }
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop

08005d84 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d98:	68ba      	ldr	r2, [r7, #8]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f8d2 2174 	ldr.w	r2, [r2, #372]	; 0x174
 8005da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da8:	fb02 f201 	mul.w	r2, r2, r1
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	613b      	str	r3, [r7, #16]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d80a      	bhi.n	8005dd6 <tcpReadTxBuffer+0x52>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc fc6a 	bl	80026a4 <netBufferConcat>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	82fb      	strh	r3, [r7, #22]
 8005dd4:	e020      	b.n	8005e18 <tcpReadTxBuffer+0x94>
         offset, length);
   }
   else
   {
      //Copy the first part of the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
         offset, socket->txBufferSize - offset);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fc fc5b 	bl	80026a4 <netBufferConcat>
 8005dee:	4603      	mov	r3, r0
 8005df0:	82fb      	strh	r3, [r7, #22]

      //Check status code
      if(!error)
 8005df2:	8afb      	ldrh	r3, [r7, #22]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <tcpReadTxBuffer+0x94>
      {
         //Wrap around to the beginning of the circular buffer
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
            0, length - socket->txBufferSize + offset);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	1ad2      	subs	r2, r2, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fc fc48 	bl	80026a4 <netBufferConcat>
 8005e14:	4603      	mov	r3, r0
 8005e16:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 8005e18:	8afb      	ldrh	r3, [r7, #22]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b088      	sub	sp, #32
 8005e26:	af02      	add	r7, sp, #8
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
 8005e2e:	603b      	str	r3, [r7, #0]
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f8d2 21f8 	ldr.w	r2, [r2, #504]	; 0x1f8
 8005e42:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e46:	fb02 f201 	mul.w	r2, r2, r1
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d80a      	bhi.n	8005e74 <tcpWriteRxBuffer+0x52>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6979      	ldr	r1, [r7, #20]
 8005e6e:	f7fc fcb4 	bl	80027da <netBufferCopy>
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset,
         length - socket->rxBufferSize + offset);
   }
}
 8005e72:	e024      	b.n	8005ebe <tcpWriteRxBuffer+0x9c>
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 70bc 	add.w	r0, r3, #376	; 0x178
         offset, data, dataOffset, socket->rxBufferSize - offset);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6979      	ldr	r1, [r7, #20]
 8005e8c:	f7fc fca5 	bl	80027da <netBufferCopy>
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 70bc 	add.w	r0, r3, #376	; 0x178
         dataOffset + socket->rxBufferSize - offset,
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	441a      	add	r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1ad1      	subs	r1, r2, r3
         length - socket->rxBufferSize + offset);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	1ad2      	subs	r2, r2, r3
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	2100      	movs	r1, #0
 8005eba:	f7fc fc8e 	bl	80027da <netBufferCopy>
}
 8005ebe:	bf00      	nop
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <tcpDumpHeader>:
 * @param[in] irs Initial receive sequence number (needed to compute relative ACK number)
 **/

void tcpDumpHeader(const TcpHeader *segment, size_t length, uint32_t iss,
   uint32_t irs)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	603b      	str	r3, [r7, #0]
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <tcpTick>:
 * FIN-WAIT-2 timer and TIME-WAIT timer)
 *
 **/

void tcpTick(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
   uint_t i;
   Socket *socket;

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	e025      	b.n	8005f38 <tcpTick+0x58>
   {
      //Point to the current socket
      socket = &socketTable[i];
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <tcpTick+0x68>)
 8005ef8:	4413      	add	r3, r2
 8005efa:	603b      	str	r3, [r7, #0]

      //TCP socket?
      if(socket->type == SOCKET_TYPE_STREAM)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d116      	bne.n	8005f32 <tcpTick+0x52>
      {
         //Check current TCP state
         if(socket->state != TCP_STATE_CLOSED)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d011      	beq.n	8005f32 <tcpTick+0x52>
         {
            //Check retransmission timer
            tcpCheckRetransmitTimer(socket);
 8005f0e:	6838      	ldr	r0, [r7, #0]
 8005f10:	f000 f81c 	bl	8005f4c <tcpCheckRetransmitTimer>
            //Check persist timer
            tcpCheckPersistTimer(socket);
 8005f14:	6838      	ldr	r0, [r7, #0]
 8005f16:	f000 f8a2 	bl	800605e <tcpCheckPersistTimer>
            //Check TCP keep-alive timer
            tcpCheckKeepAliveTimer(socket);
 8005f1a:	6838      	ldr	r0, [r7, #0]
 8005f1c:	f000 f8fc 	bl	8006118 <tcpCheckKeepAliveTimer>
            //Check override timer
            tcpCheckOverrideTimer(socket);
 8005f20:	6838      	ldr	r0, [r7, #0]
 8005f22:	f000 f903 	bl	800612c <tcpCheckOverrideTimer>
            //Check FIN-WAIT-2 timer
            tcpCheckFinWait2Timer(socket);
 8005f26:	6838      	ldr	r0, [r7, #0]
 8005f28:	f000 f997 	bl	800625a <tcpCheckFinWait2Timer>
            //Check 2MSL timer
            tcpCheckTimeWaitTimer(socket);
 8005f2c:	6838      	ldr	r0, [r7, #0]
 8005f2e:	f000 f9ae 	bl	800628e <tcpCheckTimeWaitTimer>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3301      	adds	r3, #1
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b09      	cmp	r3, #9
 8005f3c:	d9d6      	bls.n	8005eec <tcpTick+0xc>
         }
      }
   }
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20009980 	.word	0x20009980

08005f4c <tcpCheckRetransmitTimer>:
 * @brief Check retransmission timer
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckRetransmitTimer(Socket *socket)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d07b      	beq.n	8006056 <tcpCheckRetransmitTimer+0x10a>
   {
      //Any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d076      	beq.n	8006056 <tcpCheckRetransmitTimer+0x10a>
      {
         //Retransmission timeout?
         if(netTimerExpired(&socket->retransmitTimer))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fc ffbf 	bl	8002ef2 <netTimerExpired>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06d      	beq.n	8006056 <tcpCheckRetransmitTimer+0x10a>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(socket->retransmitCount == 0)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d115      	bne.n	8005fb0 <tcpCheckRetransmitTimer+0x64>
            {
               uint32_t flightSize;

               //Amount of data that has been sent but not yet acknowledged
               flightSize = socket->sndNxt - socket->sndUna;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	60fb      	str	r3, [r7, #12]
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, 2 * socket->smss);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	085b      	lsrs	r3, r3, #1
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	bf38      	it	cc
 8005fa6:	4613      	movcc	r3, r2
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
            }

            //Furthermore, upon a timeout cwnd must be set to no more than the
            //loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN(TCP_LOSS_WINDOW * socket->smss,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	f8b2 209c 	ldrh.w	r2, [r2, #156]	; 0x9c
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	bf28      	it	cs
 8005fc0:	4613      	movcs	r3, r2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
               socket->txBufferSize);

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fd0:	1e5a      	subs	r2, r3, #1
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
#endif
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d820      	bhi.n	800602c <tcpCheckRetransmitTimer+0xe0>
                  socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been acknowledged
               //by the TCP receiver
               tcpRetransmitSegment(socket);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fb8a 	bl	8005704 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	bf28      	it	cs
 8006000:	461a      	movcs	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
               //Restart retransmission timer
               netStartTimer(&socket->retransmitTimer, socket->rto);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fc ff3e 	bl	8002e98 <netStartTimer>
               //Increment retransmission counter
               socket->retransmitCount++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800602a:	e010      	b.n	800604e <tcpCheckRetransmitTimer+0x102>
            }
            else
            {
               //Send a reset segment
               tcpSendResetSegment(socket, socket->sndNxt);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe fb6b 	bl	8004710 <tcpSendResetSegment>
               //Turn off the retransmission timer
               netStopTimer(&socket->retransmitTimer);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006040:	4618      	mov	r0, r3
 8006042:	f7fc ff3d 	bl	8002ec0 <netStopTimer>
               //The maximum number of retransmissions has been exceeded
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8006046:	2100      	movs	r1, #0
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fd04 	bl	8005a56 <tcpChangeState>
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
         }
      }
   }
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <tcpCheckPersistTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckPersistTimer(Socket *socket)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af02      	add	r7, sp, #8
 8006064:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800606c:	2b00      	cmp	r3, #0
 800606e:	d04f      	beq.n	8006110 <tcpCheckPersistTimer+0xb2>
   {
      //Check whether the remote host advertises a window size of zero
      if(socket->sndWnd == 0 && socket->wndProbeInterval != 0)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d14a      	bne.n	8006110 <tcpCheckPersistTimer+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d045      	beq.n	8006110 <tcpCheckPersistTimer+0xb2>
      {
         //Persist timer expired?
         if(netTimerExpired(&socket->persistTimer))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800608a:	4618      	mov	r0, r3
 800608c:	f7fc ff31 	bl	8002ef2 <netTimerExpired>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d03c      	beq.n	8006110 <tcpCheckPersistTimer+0xb2>
         {
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800609c:	2b04      	cmp	r3, #4
 800609e:	d82c      	bhi.n	80060fa <tcpCheckPersistTimer+0x9c>
               TRACE_INFO("%s: TCP zero window probe #%u...\r\n",
                  formatSystemTime(osGetSystemTime(), NULL), socket->wndProbeCount + 1);

               //Zero window probes usually have the sequence number one less
               //than expected
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndUna - 1,
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060ae:	2100      	movs	r1, #0
 80060b0:	9101      	str	r1, [sp, #4]
 80060b2:	2100      	movs	r1, #0
 80060b4:	9100      	str	r1, [sp, #0]
 80060b6:	2110      	movs	r1, #16
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7fe f99d 	bl	80043f8 <tcpSendSegment>
                  socket->rcvNxt, 0, FALSE);

               //The interval between successive probes should be increased
               //exponentially
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80060ca:	429a      	cmp	r2, r3
 80060cc:	bf28      	it	cs
 80060ce:	461a      	movcs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
                  TCP_MAX_PROBE_INTERVAL);

               //Restart the persist timer
               netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f503 7208 	add.w	r2, r3, #544	; 0x220
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f7fc fed7 	bl	8002e98 <netStartTimer>
               //Increment window probe counter
               socket->wndProbeCount++;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
               tcpChangeState(socket, TCP_STATE_CLOSED);
            }
         }
      }
   }
}
 80060f8:	e00a      	b.n	8006110 <tcpCheckPersistTimer+0xb2>
               tcpSendResetSegment(socket, socket->sndNxt);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7fe fb04 	bl	8004710 <tcpSendResetSegment>
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8006108:	2100      	movs	r1, #0
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fca3 	bl	8005a56 <tcpChangeState>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <tcpCheckKeepAliveTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckKeepAliveTimer(Socket *socket)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
            }
         }
      }
   }
#endif
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <tcpCheckOverrideTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckOverrideTimer(Socket *socket)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af02      	add	r7, sp, #8
 8006132:	6078      	str	r0, [r7, #4]
   error_t error;
   uint32_t n;
   uint32_t u;

   //Check current TCP state
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800613a:	2b04      	cmp	r3, #4
 800613c:	d005      	beq.n	800614a <tcpCheckOverrideTimer+0x1e>
      socket->state == TCP_STATE_CLOSE_WAIT)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
   if(socket->state == TCP_STATE_ESTABLISHED ||
 8006144:	2b05      	cmp	r3, #5
 8006146:	f040 8084 	bne.w	8006252 <tcpCheckOverrideTimer+0x126>
   {
      //Override timer expired?
      if(socket->sndUser && netTimerExpired(&socket->overrideTimer))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d07e      	beq.n	8006252 <tcpCheckOverrideTimer+0x126>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800615a:	4618      	mov	r0, r3
 800615c:	f7fc fec9 	bl	8002ef2 <netTimerExpired>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d075      	beq.n	8006252 <tcpCheckOverrideTimer+0x126>
      {
         //The amount of data that can be sent at any given time is limited by
         //the receiver window and the congestion window
         n = MIN(socket->sndWnd, socket->txBufferSize);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8006172:	4293      	cmp	r3, r2
 8006174:	bf28      	it	cs
 8006176:	4613      	movcs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
         //Check the congestion window
         n = MIN(n, socket->cwnd);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8006180:	461a      	mov	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf28      	it	cs
 8006188:	4613      	movcs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
#endif
         //Retrieve the size of the usable window
         u = n - (socket->sndNxt - socket->sndUna);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

         //Send as much data as possible
         while(socket->sndUser > 0)
 80061a0:	e03e      	b.n	8006220 <tcpCheckOverrideTimer+0xf4>
         {
            //The usable window size may become zero or negative, preventing
            //packet transmission
            if((int32_t) u <= 0)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	dd41      	ble.n	800622c <tcpCheckOverrideTimer+0x100>
               break;

            //Calculate the number of bytes to send at a time
            n = MIN(u, socket->sndUser);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 80061ae:	461a      	mov	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4293      	cmp	r3, r2
 80061b4:	bf28      	it	cs
 80061b6:	4613      	movcs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
            n = MIN(n, socket->smss);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80061c0:	461a      	mov	r2, r3
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf28      	it	cs
 80061c8:	4613      	movcs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]

            //Send TCP segment
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80061d8:	2301      	movs	r3, #1
 80061da:	9301      	str	r3, [sp, #4]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	460b      	mov	r3, r1
 80061e2:	2118      	movs	r1, #24
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fe f907 	bl	80043f8 <tcpSendSegment>
 80061ea:	4603      	mov	r3, r0
 80061ec:	81fb      	strh	r3, [r7, #14]
               socket->sndNxt, socket->rcvNxt, n, TRUE);
            //Failed to send TCP segment?
            if(error)
 80061ee:	89fb      	ldrh	r3, [r7, #14]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11d      	bne.n	8006230 <tcpCheckOverrideTimer+0x104>
               break;

            //Advance SND.NXT pointer
            socket->sndNxt += n;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	441a      	add	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
            //Adjust the number of bytes buffered but not yet sent
            socket->sndUser -= n;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	; 0xb0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	b29b      	uxth	r3, r3
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
            //Update the size of the usable window
            u -= n;
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	617b      	str	r3, [r7, #20]
         while(socket->sndUser > 0)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1bb      	bne.n	80061a2 <tcpCheckOverrideTimer+0x76>
 800622a:	e002      	b.n	8006232 <tcpCheckOverrideTimer+0x106>
               break;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <tcpCheckOverrideTimer+0x106>
               break;
 8006230:	bf00      	nop
         }

         //Check whether the transmitter can accept more data
         tcpUpdateEvents(socket);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fc36 	bl	8005aa4 <tcpUpdateEvents>

         //Restart override timer if necessary
         if(socket->sndUser > 0)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <tcpCheckOverrideTimer+0x126>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8006248:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800624c:	4618      	mov	r0, r3
 800624e:	f7fc fe23 	bl	8002e98 <netStartTimer>
         }
      }
   }
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <tcpCheckFinWait2Timer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckFinWait2Timer(Socket *socket)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_FIN_WAIT_2)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006268:	2b08      	cmp	r3, #8
 800626a:	d10c      	bne.n	8006286 <tcpCheckFinWait2Timer+0x2c>
   {
      //FIN-WAIT-2 timer expired?
      if(netTimerExpired(&socket->finWait2Timer))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc fe3d 	bl	8002ef2 <netTimerExpired>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <tcpCheckFinWait2Timer+0x2c>
      {
         //Debug message
         TRACE_INFO("TCP FIN-WAIT-2 timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 800627e:	2100      	movs	r1, #0
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7ff fbe8 	bl	8005a56 <tcpChangeState>
      }
   }
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <tcpCheckTimeWaitTimer>:
 *
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckTimeWaitTimer(Socket *socket)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
   //Check current TCP state
   if(socket->state == TCP_STATE_TIME_WAIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d117      	bne.n	80062d0 <tcpCheckTimeWaitTimer+0x42>
   {
      //2MSL timer expired?
      if(netTimerExpired(&socket->timeWaitTimer))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fc fe23 	bl	8002ef2 <netTimerExpired>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00e      	beq.n	80062d0 <tcpCheckTimeWaitTimer+0x42>
      {
         //Debug message
         TRACE_INFO("TCP 2MSL timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
 80062b2:	2100      	movs	r1, #0
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff fbce 	bl	8005a56 <tcpChangeState>

         //Dispose the socket if the user does not have the ownership anymore
         if(!socket->ownedFlag)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d105      	bne.n	80062d0 <tcpCheckTimeWaitTimer+0x42>
         {
            //Delete the TCB
            tcpDeleteControlBlock(socket);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fe ffaf 	bl	8005228 <tcpDeleteControlBlock>
            //Mark the socket as closed
            socket->type = SOCKET_TYPE_UNUSED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	605a      	str	r2, [r3, #4]
         }
      }
   }
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
   //Reset ephemeral port number
   udpDynamicPort = 0;
 80062dc:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <udpInit+0x1c>)
 80062de:	2200      	movs	r2, #0
 80062e0:	801a      	strh	r2, [r3, #0]

   //Initialize callback table
   osMemset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 80062e2:	22a0      	movs	r2, #160	; 0xa0
 80062e4:	2100      	movs	r1, #0
 80062e6:	4804      	ldr	r0, [pc, #16]	; (80062f8 <udpInit+0x20>)
 80062e8:	f009 fe35 	bl	800ff56 <memset>

   //Successful initialization
   return NO_ERROR;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	2000032a 	.word	0x2000032a
 80062f8:	2000b25c 	.word	0x2000b25c

080062fc <udpProcessDatagram>:
 * @return Error code
 **/

error_t udpProcessDatagram(NetInterface *interface, IpPseudoHeader *pseudoHeader,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 80062fc:	b590      	push	{r4, r7, lr}
 80062fe:	b08f      	sub	sp, #60	; 0x3c
 8006300:	af02      	add	r7, sp, #8
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
   Socket *socket;
   SocketQueueItem *queueItem;
   NetBuffer *p;

   //Retrieve the length of the UDP datagram
   length = netBufferGetLength(buffer) - offset;
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fc f8cf 	bl	80024ae <netBufferGetLength>
 8006310:	4602      	mov	r2, r0
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	623b      	str	r3, [r7, #32]

   //Ensure the UDP header is valid
   if(length < sizeof(UdpHeader))
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b07      	cmp	r3, #7
 800631c:	d801      	bhi.n	8006322 <udpProcessDatagram+0x26>
      //reasons other than the lack of an application at the destination port
      MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
      UDP_MIB_INC_COUNTER32(udpInErrors, 1);

      //Report an error
      return ERROR_INVALID_HEADER;
 800631e:	23d4      	movs	r3, #212	; 0xd4
 8006320:	e138      	b.n	8006594 <udpProcessDatagram+0x298>
   }

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7fc f98a 	bl	800263e <netBufferAt>
 800632a:	61f8      	str	r0, [r7, #28]
   //Sanity check
   if(header == NULL)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <udpProcessDatagram+0x3a>
      return ERROR_FAILURE;
 8006332:	2301      	movs	r3, #1
 8006334:	e12e      	b.n	8006594 <udpProcessDatagram+0x298>

   //Debug message
   TRACE_INFO("UDP datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 8006336:	69f8      	ldr	r0, [r7, #28]
 8006338:	f000 faf8 	bl	800692c <udpDumpHeader>

   //When UDP runs over IPv6, the checksum is mandatory
   if(header->checksum != 0x0000 || pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	88db      	ldrh	r3, [r3, #6]
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <udpProcessDatagram+0x52>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b28      	cmp	r3, #40	; 0x28
 800634c:	d10e      	bne.n	800636c <udpProcessDatagram+0x70>
   {
      //Verify UDP checksum
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	1d18      	adds	r0, r3, #4
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	6819      	ldr	r1, [r3, #0]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	f7fb fd2a 	bl	8001db6 <ipCalcUpperLayerChecksumEx>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <udpProcessDatagram+0x70>
         //reasons other than the lack of an application at the destination port
         MIB2_INC_COUNTER32(udpGroup.udpInErrors, 1);
         UDP_MIB_INC_COUNTER32(udpInErrors, 1);

         //Report an error
         return ERROR_WRONG_CHECKSUM;
 8006368:	23d5      	movs	r3, #213	; 0xd5
 800636a:	e113      	b.n	8006594 <udpProcessDatagram+0x298>
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800636c:	2300      	movs	r3, #0
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006370:	e065      	b.n	800643e <udpProcessDatagram+0x142>
   {
      //Point to the current socket
      socket = socketTable + i;
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	f44f 721f 	mov.w	r2, #636	; 0x27c
 8006378:	fb02 f303 	mul.w	r3, r2, r3
 800637c:	4a87      	ldr	r2, [pc, #540]	; (800659c <udpProcessDatagram+0x2a0>)
 800637e:	4413      	add	r3, r2
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28

      //UDP socket found?
      if(socket->type != SOCKET_TYPE_DGRAM)
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d147      	bne.n	800641a <udpProcessDatagram+0x11e>
         continue;
      //Check whether the socket is bound to a particular interface
      if(socket->interface && socket->interface != interface)
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <udpProcessDatagram+0xa0>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	429a      	cmp	r2, r3
 800639a:	d140      	bne.n	800641e <udpProcessDatagram+0x122>
         continue;
      //Check destination port number
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	8b1b      	ldrh	r3, [r3, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d03e      	beq.n	8006422 <udpProcessDatagram+0x126>
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	8b1c      	ldrh	r4, [r3, #24]
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	885b      	ldrh	r3, [r3, #2]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa fd55 	bl	8000e5e <swapInt16>
 80063b4:	4603      	mov	r3, r0
 80063b6:	429c      	cmp	r4, r3
 80063b8:	d133      	bne.n	8006422 <udpProcessDatagram+0x126>
         continue;
      //Source port number filtering
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <udpProcessDatagram+0xdc>
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fa fd46 	bl	8000e5e <swapInt16>
 80063d2:	4603      	mov	r3, r0
 80063d4:	429c      	cmp	r4, r3
 80063d6:	d126      	bne.n	8006426 <udpProcessDatagram+0x12a>
         continue;

#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b0c      	cmp	r3, #12
 80063de:	d124      	bne.n	800642a <udpProcessDatagram+0x12e>
      {
         //Destination IP address filtering
         if(socket->localIpAddr.length != 0)
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d009      	beq.n	80063fc <udpProcessDatagram+0x100>
         {
            //An IPv4 address is expected
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d11e      	bne.n	800642e <udpProcessDatagram+0x132>
               continue;
            //Filter out non-matching addresses
            if(socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d11a      	bne.n	8006432 <udpProcessDatagram+0x136>
               continue;
         }

         //Source IP address filtering
         if(socket->remoteIpAddr.length != 0)
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d020      	beq.n	8006446 <udpProcessDatagram+0x14a>
         {
            //An IPv4 address is expected
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	69db      	ldr	r3, [r3, #28]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d114      	bne.n	8006436 <udpProcessDatagram+0x13a>
               continue;
            //Filter out non-matching addresses
            if(socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d016      	beq.n	8006446 <udpProcessDatagram+0x14a>
               continue;
 8006418:	e00e      	b.n	8006438 <udpProcessDatagram+0x13c>
         continue;
 800641a:	bf00      	nop
 800641c:	e00c      	b.n	8006438 <udpProcessDatagram+0x13c>
         continue;
 800641e:	bf00      	nop
 8006420:	e00a      	b.n	8006438 <udpProcessDatagram+0x13c>
         continue;
 8006422:	bf00      	nop
 8006424:	e008      	b.n	8006438 <udpProcessDatagram+0x13c>
         continue;
 8006426:	bf00      	nop
 8006428:	e006      	b.n	8006438 <udpProcessDatagram+0x13c>
      else
#endif
      //Invalid packet received?
      {
         //This should never occur...
         continue;
 800642a:	bf00      	nop
 800642c:	e004      	b.n	8006438 <udpProcessDatagram+0x13c>
               continue;
 800642e:	bf00      	nop
 8006430:	e002      	b.n	8006438 <udpProcessDatagram+0x13c>
               continue;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <udpProcessDatagram+0x13c>
               continue;
 8006436:	bf00      	nop
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	3301      	adds	r3, #1
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b09      	cmp	r3, #9
 8006442:	d996      	bls.n	8006372 <udpProcessDatagram+0x76>
 8006444:	e000      	b.n	8006448 <udpProcessDatagram+0x14c>
      }

      //The current socket meets all the criteria
      break;
 8006446:	bf00      	nop
   }

   //Point to the payload
   offset += sizeof(UdpHeader);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	3308      	adds	r3, #8
 800644c:	603b      	str	r3, [r7, #0]
   length -= sizeof(UdpHeader);
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	3b08      	subs	r3, #8
 8006452:	623b      	str	r3, [r7, #32]

   //No matching socket found?
   if(i >= SOCKET_MAX_COUNT)
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b09      	cmp	r3, #9
 8006458:	d90d      	bls.n	8006476 <udpProcessDatagram+0x17a>
   {
      //Invoke user callback, if any
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer,
 800645a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 fa19 	bl	80068a0 <udpInvokeRxCallback>
 800646e:	4603      	mov	r3, r0
 8006470:	82fb      	strh	r3, [r7, #22]
         offset, ancillary);
      //Return status code
      return error;
 8006472:	8afb      	ldrh	r3, [r7, #22]
 8006474:	e08e      	b.n	8006594 <udpProcessDatagram+0x298>
   }

   //Empty receive queue?
   if(socket->receiveQueue == NULL)
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 800647c:	2b00      	cmp	r3, #0
 800647e:	d118      	bne.n	80064b2 <udpProcessDatagram+0x1b6>
   {
      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	3334      	adds	r3, #52	; 0x34
 8006484:	4618      	mov	r0, r3
 8006486:	f7fb ffd0 	bl	800242a <netBufferAlloc>
 800648a:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <udpProcessDatagram+0x1b0>
      {
         //Point to the newly created item
         queueItem = netBufferAt(p, 0);
 8006492:	2100      	movs	r1, #0
 8006494:	69b8      	ldr	r0, [r7, #24]
 8006496:	f7fc f8d2 	bl	800263e <netBufferAt>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24
         queueItem->buffer = p;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	61da      	str	r2, [r3, #28]
         //Add the newly created item to the queue
         socket->receiveQueue = queueItem;
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
 80064aa:	e031      	b.n	8006510 <udpProcessDatagram+0x214>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
 80064b0:	e02e      	b.n	8006510 <udpProcessDatagram+0x214>
      }
   }
   else
   {
      //Point to the very first item
      queueItem = socket->receiveQueue;
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24

      //Reach the last item in the receive queue
      for(i = 1; queueItem->next; i++)
 80064ba:	2301      	movs	r3, #1
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064be:	e005      	b.n	80064cc <udpProcessDatagram+0x1d0>
      {
         queueItem = queueItem->next;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	627b      	str	r3, [r7, #36]	; 0x24
      for(i = 1; queueItem->next; i++)
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	3301      	adds	r3, #1
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f5      	bne.n	80064c0 <udpProcessDatagram+0x1c4>
      }

      //Check whether the receive queue is full
      if(i >= UDP_RX_QUEUE_SIZE)
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d901      	bls.n	80064de <udpProcessDatagram+0x1e2>
         //though no errors had been detected
         MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
         IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

         //Report an error
         return ERROR_RECEIVE_QUEUE_FULL;
 80064da:	23db      	movs	r3, #219	; 0xdb
 80064dc:	e05a      	b.n	8006594 <udpProcessDatagram+0x298>
      }

      //Allocate a memory buffer to hold the data and the associated descriptor
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	3334      	adds	r3, #52	; 0x34
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fb ffa1 	bl	800242a <netBufferAlloc>
 80064e8:	61b8      	str	r0, [r7, #24]

      //Successful memory allocation?
      if(p != NULL)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <udpProcessDatagram+0x210>
      {
         //Add the newly created item to the queue
         queueItem->next = netBufferAt(p, 0);
 80064f0:	2100      	movs	r1, #0
 80064f2:	69b8      	ldr	r0, [r7, #24]
 80064f4:	f7fc f8a3 	bl	800263e <netBufferAt>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	601a      	str	r2, [r3, #0]
         //Point to the newly created item
         queueItem = queueItem->next;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	627b      	str	r3, [r7, #36]	; 0x24
         queueItem->buffer = p;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	69ba      	ldr	r2, [r7, #24]
 8006508:	61da      	str	r2, [r3, #28]
 800650a:	e001      	b.n	8006510 <udpProcessDatagram+0x214>
      }
      else
      {
         //Memory allocation failed
         queueItem = NULL;
 800650c:	2300      	movs	r3, #0
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
      }
   }

   //Not enough resources to properly handle the packet?
   if(queueItem == NULL)
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <udpProcessDatagram+0x21e>
      //though no errors had been detected
      MIB2_INC_COUNTER32(ifGroup.ifTable[interface->index].ifInDiscards, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInDiscards, 1);

      //Report an error
      return ERROR_OUT_OF_MEMORY;
 8006516:	2364      	movs	r3, #100	; 0x64
 8006518:	e03c      	b.n	8006594 <udpProcessDatagram+0x298>
   }

   //Initialize next field
   queueItem->next = NULL;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
   //Network interface where the packet was received
   queueItem->interface = interface;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]
   //Record the source port number
   queueItem->srcPort = ntohs(header->srcPort);
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	f7fa fc96 	bl	8000e5e <swapInt16>
 8006532:	4603      	mov	r3, r0
 8006534:	461a      	mov	r2, r3
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	821a      	strh	r2, [r3, #16]

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 remote address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b0c      	cmp	r3, #12
 8006540:	d10d      	bne.n	800655e <udpProcessDatagram+0x262>
   {
      //Save the source IPv4 address
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	2204      	movs	r2, #4
 8006546:	609a      	str	r2, [r3, #8]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	60da      	str	r2, [r3, #12]

      //Save the destination IPv4 address
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	2204      	movs	r2, #4
 8006554:	615a      	str	r2, [r3, #20]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	619a      	str	r2, [r3, #24]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
   }
#endif

   //Offset to the payload
   queueItem->offset = sizeof(SocketQueueItem);
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	2234      	movs	r2, #52	; 0x34
 8006562:	621a      	str	r2, [r3, #32]
   //Copy the payload
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	69d8      	ldr	r0, [r3, #28]
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	6a19      	ldr	r1, [r3, #32]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	f7fc f931 	bl	80027da <netBufferCopy>

   //Additional options can be passed to the stack along with the packet
   queueItem->ancillary = *ancillary;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800657c:	3324      	adds	r3, #36	; 0x24
 800657e:	4614      	mov	r4, r2
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	6861      	ldr	r1, [r4, #4]
 8006584:	68a2      	ldr	r2, [r4, #8]
 8006586:	c307      	stmia	r3!, {r0, r1, r2}
 8006588:	7b22      	ldrb	r2, [r4, #12]
 800658a:	701a      	strb	r2, [r3, #0]

   //Notify user that data is available
   udpUpdateEvents(socket);
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 f8cc 	bl	800672a <udpUpdateEvents>
   MIB2_INC_COUNTER32(udpGroup.udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
   UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);

   //Successful processing
   return NO_ERROR;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3734      	adds	r7, #52	; 0x34
 8006598:	46bd      	mov	sp, r7
 800659a:	bd90      	pop	{r4, r7, pc}
 800659c:	20009980 	.word	0x20009980

080065a0 <udpSendBuffer>:
 **/

error_t udpSendBuffer(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	80fb      	strh	r3, [r7, #6]
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	3b08      	subs	r3, #8
 80065b4:	643b      	str	r3, [r7, #64]	; 0x40
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 80065b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065b8:	f7fb ff79 	bl	80024ae <netBufferGetLength>
 80065bc:	4602      	mov	r2, r0
 80065be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Point to the UDP header
   header = netBufferAt(buffer, offset);
 80065c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065c8:	f7fc f839 	bl	800263e <netBufferAt>
 80065cc:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(header == NULL)
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <udpSendBuffer+0x38>
      return ERROR_FAILURE;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e088      	b.n	80066ea <udpSendBuffer+0x14a>

   //Format UDP header
   header->srcPort = htons(srcPort);
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fa fc3f 	bl	8000e5e <swapInt16>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	801a      	strh	r2, [r3, #0]
   header->destPort = htons(destPort);
 80065e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fa fc37 	bl	8000e5e <swapInt16>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	805a      	strh	r2, [r3, #2]
   header->length = htons(length);
 80065f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fa fc2e 	bl	8000e5e <swapInt16>
 8006602:	4603      	mov	r3, r0
 8006604:	461a      	mov	r2, r3
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	809a      	strh	r2, [r3, #4]
   header->checksum = 0;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2200      	movs	r2, #0
 800660e:	719a      	strb	r2, [r3, #6]
 8006610:	2200      	movs	r2, #0
 8006612:	71da      	strb	r2, [r3, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b04      	cmp	r3, #4
 800661a:	d14e      	bne.n	80066ba <udpSendBuffer+0x11a>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <udpSendBuffer+0x92>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b04      	cmp	r3, #4
 8006628:	d103      	bne.n	8006632 <udpSendBuffer+0x92>
      {
         //Copy the source IP address
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e01d      	b.n	800666e <udpSendBuffer+0xce>
      {
         Ipv4Addr ipAddr;

         //Select the source IPv4 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	f107 0210 	add.w	r2, r7, #16
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	4618      	mov	r0, r3
 8006640:	f004 fd66 	bl	800b110 <ipv4SelectSourceAddr>
 8006644:	4603      	mov	r3, r0
 8006646:	84fb      	strh	r3, [r7, #38]	; 0x26
            &ipAddr);

         //Check status code
         if(!error)
 8006648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <udpSendBuffer+0xb4>
         {
            //Copy the resulting source IP address
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	61bb      	str	r3, [r7, #24]
 8006652:	e00c      	b.n	800666e <udpSendBuffer+0xce>
         }
         else
         {
            //Handle the special case where the destination address is the
            //broadcast address
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800665c:	d105      	bne.n	800666a <udpSendBuffer+0xca>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <udpSendBuffer+0xca>
            {
               //Use the unspecified address as source address
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 8006664:	2300      	movs	r3, #0
 8006666:	61bb      	str	r3, [r7, #24]
 8006668:	e001      	b.n	800666e <udpSendBuffer+0xce>
            }
            else
            {
               //Source address selection failed
               return error;
 800666a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800666c:	e03d      	b.n	80066ea <udpSendBuffer+0x14a>
            }
         }
      }

      //Format IPv4 pseudo header
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800666e:	230c      	movs	r3, #12
 8006670:	617b      	str	r3, [r7, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	61fb      	str	r3, [r7, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	f887 3020 	strb.w	r3, [r7, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 800667e:	2311      	movs	r3, #17
 8006680:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	b29b      	uxth	r3, r3
 8006688:	4618      	mov	r0, r3
 800668a:	f7fa fbe8 	bl	8000e5e <swapInt16>
 800668e:	4603      	mov	r3, r0
 8006690:	847b      	strh	r3, [r7, #34]	; 0x22

      //Calculate UDP header checksum
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8006692:	f107 0314 	add.w	r3, r7, #20
 8006696:	1d18      	adds	r0, r3, #4
 8006698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066a0:	210c      	movs	r1, #12
 80066a2:	f7fb fb88 	bl	8001db6 <ipCalcUpperLayerChecksumEx>
 80066a6:	4603      	mov	r3, r0
 80066a8:	461a      	mov	r2, r3
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	80da      	strh	r2, [r3, #6]
   }

   //If the computed checksum is zero, it is transmitted as all ones. An all
   //zero transmitted checksum value means that the transmitter generated no
   //checksum
   if(header->checksum == 0x0000)
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	88db      	ldrh	r3, [r3, #6]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <udpSendBuffer+0x12c>
 80066b8:	e001      	b.n	80066be <udpSendBuffer+0x11e>
      return ERROR_FAILURE;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e015      	b.n	80066ea <udpSendBuffer+0x14a>
   {
      header->checksum = 0xFFFF;
 80066be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c4:	719a      	strb	r2, [r3, #6]
 80066c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ca:	71da      	strb	r2, [r3, #7]
   UDP_MIB_INC_COUNTER64(udpHCOutDatagrams, 1);

   //Debug message
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);
 80066cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ce:	f000 f92d 	bl	800692c <udpDumpHeader>

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, ancillary);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f107 0114 	add.w	r1, r7, #20
 80066d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e0:	f7fb fa42 	bl	8001b68 <ipSendDatagram>
 80066e4:	4603      	mov	r3, r0
 80066e6:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Return status code
   return error;
 80066e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3730      	adds	r7, #48	; 0x30
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3308      	adds	r3, #8
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fb80 	bl	8001e08 <ipAllocBuffer>
 8006708:	60f8      	str	r0, [r7, #12]
   //Failed to allocate buffer?
   if(buffer == NULL)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <udpAllocBuffer+0x22>
      return NULL;
 8006710:	2300      	movs	r3, #0
 8006712:	e006      	b.n	8006722 <udpAllocBuffer+0x30>

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f103 0208 	add.w	r2, r3, #8
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	601a      	str	r2, [r3, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
 8006720:	68fb      	ldr	r3, [r7, #12]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
   //Clear event flags
   socket->eventFlags = 0;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <udpUpdateEvents+0x2a>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d016      	beq.n	800678a <udpUpdateEvents+0x60>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <udpUpdateEvents+0x50>
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800676e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006778:	e007      	b.n	800678a <udpUpdateEvents+0x60>
      else
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006780:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006796:	401a      	ands	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

   //Any event to signal?
   if(socket->eventFlags)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00f      	beq.n	80067c8 <udpUpdateEvents+0x9e>
   {
      //Unblock I/O operations currently in waiting state
      osSetEvent(&socket->event);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3334      	adds	r3, #52	; 0x34
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fa fc62 	bl	8001076 <osSetEvent>

      //Set user event to signaled state if necessary
      if(socket->userEvent != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <udpUpdateEvents+0x9e>
      {
         osSetEvent(socket->userEvent);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fa fc57 	bl	8001076 <osSetEvent>
      }
   }
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <udpAttachRxCallback>:
 * @return Error code
 **/

error_t udpAttachRxCallback(NetInterface *interface, uint16_t port,
   UdpRxCallback callback, void *param)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
 80067dc:	460b      	mov	r3, r1
 80067de:	817b      	strh	r3, [r7, #10]
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e018      	b.n	8006818 <udpAttachRxCallback+0x48>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <udpAttachRxCallback+0x68>)
 80067ec:	4413      	add	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]

      //Check whether the entry is currently in use
      if(entry->callback == NULL)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10c      	bne.n	8006812 <udpAttachRxCallback+0x42>
      {
         //Create a new entry
         entry->interface = interface;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	601a      	str	r2, [r3, #0]
         entry->port = port;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	897a      	ldrh	r2, [r7, #10]
 8006802:	809a      	strh	r2, [r3, #4]
         entry->callback = callback;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	609a      	str	r2, [r3, #8]
         entry->param = param;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	60da      	str	r2, [r3, #12]
         //We are done
         break;
 8006810:	e005      	b.n	800681e <udpAttachRxCallback+0x4e>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	3301      	adds	r3, #1
 8006816:	617b      	str	r3, [r7, #20]
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b09      	cmp	r3, #9
 800681c:	d9e3      	bls.n	80067e6 <udpAttachRxCallback+0x16>
      }
   }

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2b09      	cmp	r3, #9
 8006822:	d901      	bls.n	8006828 <udpAttachRxCallback+0x58>
      return ERROR_OUT_OF_RESOURCES;
 8006824:	2365      	movs	r3, #101	; 0x65
 8006826:	e000      	b.n	800682a <udpAttachRxCallback+0x5a>

   //Successful processing
   return NO_ERROR;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	2000b25c 	.word	0x2000b25c

0800683c <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	807b      	strh	r3, [r7, #2]
   error_t error;
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_FAILURE;
 8006848:	2301      	movs	r3, #1
 800684a:	82fb      	strh	r3, [r7, #22]

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	e01a      	b.n	8006888 <udpDetachRxCallback+0x4c>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	4a11      	ldr	r2, [pc, #68]	; (800689c <udpDetachRxCallback+0x60>)
 8006858:	4413      	add	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00e      	beq.n	8006882 <udpDetachRxCallback+0x46>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	889b      	ldrh	r3, [r3, #4]
 8006868:	887a      	ldrh	r2, [r7, #2]
 800686a:	429a      	cmp	r2, r3
 800686c:	d109      	bne.n	8006882 <udpDetachRxCallback+0x46>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d104      	bne.n	8006882 <udpDetachRxCallback+0x46>
         {
            //Unregister user callback
            entry->callback = NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
            //A matching entry has been found
            error = NO_ERROR;
 800687e:	2300      	movs	r3, #0
 8006880:	82fb      	strh	r3, [r7, #22]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	3301      	adds	r3, #1
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	2b09      	cmp	r3, #9
 800688c:	d9e1      	bls.n	8006852 <udpDetachRxCallback+0x16>
         }
      }
   }

   //Return status code
   return error;
 800688e:	8afb      	ldrh	r3, [r7, #22]
}
 8006890:	4618      	mov	r0, r3
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	2000b25c 	.word	0x2000b25c

080068a0 <udpInvokeRxCallback>:
 **/

error_t udpInvokeRxCallback(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *header,
   const NetBuffer *buffer, size_t offset, NetRxAncillary *ancillary)
{
 80068a0:	b590      	push	{r4, r7, lr}
 80068a2:	b08d      	sub	sp, #52	; 0x34
 80068a4:	af04      	add	r7, sp, #16
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
   error_t error;
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;
 80068ae:	23d2      	movs	r3, #210	; 0xd2
 80068b0:	83fb      	strh	r3, [r7, #30]

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	e02f      	b.n	8006918 <udpInvokeRxCallback+0x78>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	4a1a      	ldr	r2, [pc, #104]	; (8006928 <udpInvokeRxCallback+0x88>)
 80068be:	4413      	add	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d023      	beq.n	8006912 <udpInvokeRxCallback+0x72>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d004      	beq.n	80068dc <udpInvokeRxCallback+0x3c>
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d11a      	bne.n	8006912 <udpInvokeRxCallback+0x72>
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	889c      	ldrh	r4, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	885b      	ldrh	r3, [r3, #2]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fa fab9 	bl	8000e5e <swapInt16>
 80068ec:	4603      	mov	r3, r0
 80068ee:	429c      	cmp	r4, r3
 80068f0:	d10f      	bne.n	8006912 <udpInvokeRxCallback+0x72>
            {
               //Invoke user callback function
               entry->callback(interface, pseudoHeader, header, buffer, offset,
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	689c      	ldr	r4, [r3, #8]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	9302      	str	r3, [sp, #8]
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	9301      	str	r3, [sp, #4]
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	47a0      	blx	r4
                  ancillary, entry->param);

               //A matching entry has been found
               error = NO_ERROR;
 800690e:	2300      	movs	r3, #0
 8006910:	83fb      	strh	r3, [r7, #30]
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	3301      	adds	r3, #1
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b09      	cmp	r3, #9
 800691c:	d9cc      	bls.n	80068b8 <udpInvokeRxCallback+0x18>
      UDP_MIB_INC_COUNTER32(udpInDatagrams, 1);
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
 800691e:	8bfb      	ldrh	r3, [r7, #30]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3724      	adds	r7, #36	; 0x24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd90      	pop	{r4, r7, pc}
 8006928:	2000b25c 	.word	0x2000b25c

0800692c <udpDumpHeader>:
 * @brief Dump UDP header for debugging purpose
 * @param[in] datagram Pointer to the UDP header
 **/

void udpDumpHeader(const UdpHeader *datagram)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
   //Dump UDP header contents
   TRACE_DEBUG("  Source Port = %" PRIu16 "\r\n", ntohs(datagram->srcPort));
   TRACE_DEBUG("  Destination Port = %" PRIu16 "\r\n", ntohs(datagram->destPort));
   TRACE_DEBUG("  Length = %" PRIu16 "\r\n", ntohs(datagram->length));
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(datagram->checksum));
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <dhcpClientStateInit>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInit(DhcpClientContext *context)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	2b00      	cmp	r3, #0
 8006954:	d018      	beq.n	8006988 <dhcpClientStateInit+0x48>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <dhcpClientStateInit+0x48>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8006960:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006964:	2000      	movs	r0, #0
 8006966:	f7fc fba3 	bl	80030b0 <netGetRandRange>
 800696a:	4603      	mov	r3, r0
 800696c:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 800696e:	f7fa fbf8 	bl	8001162 <osGetSystemTime>
 8006972:	4602      	mov	r2, r0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	651a      	str	r2, [r3, #80]	; 0x50
         //Clear flag
         context->timeoutEventDone = FALSE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30

         //Switch to the SELECTING state
         dhcpClientChangeState(context, DHCP_STATE_SELECTING, delay);
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	2101      	movs	r1, #1
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 fe5c 	bl	8007640 <dhcpClientChangeState>
      }
   }
}
 8006988:	bf00      	nop
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <dhcpClientStateSelecting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateSelecting(DhcpClientContext *context)
{
 8006990:	b590      	push	{r4, r7, lr}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8006998:	f7fa fbe3 	bl	8001162 <osGetSystemTime>
 800699c:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	4413      	add	r3, r2
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	db34      	blt.n	8006a1a <dhcpClientStateSelecting+0x8a>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <dhcpClientStateSelecting+0x42>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 80069b8:	f7fc fb54 	bl	8003064 <netGetRand>
 80069bc:	4602      	mov	r2, r0
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fb0a 	bl	8006fdc <dhcpClientSendDiscover>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_DISCOVER_INIT_RT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80069ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80069d0:	e010      	b.n	80069f4 <dhcpClientStateSelecting+0x64>
      }
      else
      {
         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fb02 	bl	8006fdc <dhcpClientSendDiscover>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069dc:	005a      	lsls	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_DISCOVER_MAX_RT)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80069ea:	d903      	bls.n	80069f4 <dhcpClientStateSelecting+0x64>
            context->retransmitTimeout = DHCP_CLIENT_DISCOVER_MAX_RT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80069f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }

      //Save the time at which the message was sent
      context->timestamp = time;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	635a      	str	r2, [r3, #52]	; 0x34

      //The timeout value should be randomized by the value of a uniform
      //number chosen from the range -1 to +1
      context->timeout = context->retransmitTimeout +
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
         netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 80069fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a02:	4809      	ldr	r0, [pc, #36]	; (8006a28 <dhcpClientStateSelecting+0x98>)
 8006a04:	f7fc fb54 	bl	80030b0 <netGetRandRange>
 8006a08:	4603      	mov	r3, r0
      context->timeout = context->retransmitTimeout +
 8006a0a:	18e2      	adds	r2, r4, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

      //Increment retransmission counter
      context->retransmitCount++;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	641a      	str	r2, [r3, #64]	; 0x40
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fdbe 	bl	800759c <dhcpClientCheckTimeout>
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd90      	pop	{r4, r7, pc}
 8006a28:	fffffc18 	.word	0xfffffc18

08006a2c <dhcpClientStateRequesting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRequesting(DhcpClientContext *context)
{
 8006a2c:	b590      	push	{r4, r7, lr}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8006a34:	f7fa fb95 	bl	8001162 <osGetSystemTime>
 8006a38:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	4413      	add	r3, r2
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	db51      	blt.n	8006af0 <dhcpClientStateRequesting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11f      	bne.n	8006a94 <dhcpClientStateRequesting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8006a54:	f7fc fb06 	bl	8003064 <netGetRand>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb90 	bl	8007184 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006a6a:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8006a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006a7a:	4821      	ldr	r0, [pc, #132]	; (8006b00 <dhcpClientStateRequesting+0xd4>)
 8006a7c:	f7fc fb18 	bl	80030b0 <netGetRandRange>
 8006a80:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8006a82:	18e2      	adds	r2, r4, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	641a      	str	r2, [r3, #64]	; 0x40
 8006a92:	e02d      	b.n	8006af0 <dhcpClientStateRequesting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d824      	bhi.n	8006ae6 <dhcpClientStateRequesting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fb71 	bl	8007184 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa6:	005a      	lsls	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab0:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8006ab4:	d903      	bls.n	8006abe <dhcpClientStateRequesting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8006abc:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8006ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006acc:	480c      	ldr	r0, [pc, #48]	; (8006b00 <dhcpClientStateRequesting+0xd4>)
 8006ace:	f7fc faef 	bl	80030b0 <netGetRandRange>
 8006ad2:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8006ad4:	18e2      	adds	r2, r4, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ae4:	e004      	b.n	8006af0 <dhcpClientStateRequesting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2100      	movs	r1, #0
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fda8 	bl	8007640 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fd53 	bl	800759c <dhcpClientCheckTimeout>
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd90      	pop	{r4, r7, pc}
 8006afe:	bf00      	nop
 8006b00:	fffffc18 	.word	0xfffffc18

08006b04 <dhcpClientStateInitReboot>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInitReboot(DhcpClientContext *context)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <dhcpClientStateInitReboot+0x48>
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d013      	beq.n	8006b4c <dhcpClientStateInitReboot+0x48>
      {
         //The client should wait for a random time to desynchronize
         //the use of DHCP at startup
         delay = netGetRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8006b24:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b28:	2000      	movs	r0, #0
 8006b2a:	f7fc fac1 	bl	80030b0 <netGetRandRange>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	60bb      	str	r3, [r7, #8]

         //Record the time at which the client started the address
         //acquisition process
         context->configStartTime = osGetSystemTime();
 8006b32:	f7fa fb16 	bl	8001162 <osGetSystemTime>
 8006b36:	4602      	mov	r2, r0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	651a      	str	r2, [r3, #80]	; 0x50
         //Clear flag
         context->timeoutEventDone = FALSE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30

         //Switch to the REBOOTING state
         dhcpClientChangeState(context, DHCP_STATE_REBOOTING, delay);
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	2104      	movs	r1, #4
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fd7a 	bl	8007640 <dhcpClientChangeState>
      }
   }
}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <dhcpClientStateRebooting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebooting(DhcpClientContext *context)
{
 8006b54:	b590      	push	{r4, r7, lr}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8006b5c:	f7fa fb01 	bl	8001162 <osGetSystemTime>
 8006b60:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	4413      	add	r3, r2
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	db51      	blt.n	8006c18 <dhcpClientStateRebooting+0xc4>
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11f      	bne.n	8006bbc <dhcpClientStateRebooting+0x68>
      {
         //A transaction identifier is used by the client to
         //match incoming DHCP messages with pending requests
         context->transactionId = netGetRand();
 8006b7c:	f7fc fa72 	bl	8003064 <netGetRand>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	64da      	str	r2, [r3, #76]	; 0x4c

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fafc 	bl	8007184 <dhcpClientSendRequest>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8006b9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ba2:	4821      	ldr	r0, [pc, #132]	; (8006c28 <dhcpClientStateRebooting+0xd4>)
 8006ba4:	f7fc fa84 	bl	80030b0 <netGetRandRange>
 8006ba8:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8006baa:	18e2      	adds	r2, r4, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8006bba:	e02d      	b.n	8006c18 <dhcpClientStateRebooting+0xc4>
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d824      	bhi.n	8006c0e <dhcpClientStateRebooting+0xba>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fadd 	bl	8007184 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	005a      	lsls	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd8:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8006bdc:	d903      	bls.n	8006be6 <dhcpClientStateRebooting+0x92>
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8006be4:	63da      	str	r2, [r3, #60]	; 0x3c

         //Save the time at which the message was sent
         context->timestamp = time;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	635a      	str	r2, [r3, #52]	; 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = context->retransmitTimeout +
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
            netGetRandRange(-DHCP_CLIENT_RAND_FACTOR, DHCP_CLIENT_RAND_FACTOR);
 8006bf0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006bf4:	480c      	ldr	r0, [pc, #48]	; (8006c28 <dhcpClientStateRebooting+0xd4>)
 8006bf6:	f7fc fa5b 	bl	80030b0 <netGetRandRange>
 8006bfa:	4603      	mov	r3, r0
         context->timeout = context->retransmitTimeout +
 8006bfc:	18e2      	adds	r2, r4, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006c0c:	e004      	b.n	8006c18 <dhcpClientStateRebooting+0xc4>
      }
      else
      {
         //If the client does not receive a response within a reasonable
         //period of time, then it restarts the initialization procedure
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2100      	movs	r1, #0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fd14 	bl	8007640 <dhcpClientChangeState>
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fcbf 	bl	800759c <dhcpClientCheckTimeout>
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd90      	pop	{r4, r7, pc}
 8006c26:	bf00      	nop
 8006c28:	fffffc18 	.word	0xfffffc18

08006c2c <dhcpClientStateProbing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateProbing(DhcpClientContext *context)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	617b      	str	r3, [r7, #20]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	613b      	str	r3, [r7, #16]

   //Get current time
   time = osGetSystemTime();
 8006c40:	f7fa fa8f 	bl	8001162 <osGetSystemTime>
 8006c44:	60f8      	str	r0, [r7, #12]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	4413      	add	r3, r2
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	db46      	blt.n	8006ce6 <dhcpClientStateProbing+0xba>
   {
      //The address is already in use?
      if(interface->ipv4Context.addrList[i].conflict)
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d008      	beq.n	8006c82 <dhcpClientStateProbing+0x56>
      {
         //If the client detects that the address is already in use, the
         //client must send a DHCPDECLINE message to the server and
         //restarts the configuration process
         dhcpClientSendDecline(context);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fbbd 	bl	80073f0 <dhcpClientSendDecline>

         //The client should wait a minimum of ten seconds before
         //restarting the configuration process to avoid excessive
         //network traffic in case of looping
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fce0 	bl	8007640 <dhcpClientChangeState>

         //The client transitions to the BOUND state
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
      }
   }
}
 8006c80:	e031      	b.n	8006ce6 <dhcpClientStateProbing+0xba>
      else if(context->retransmitCount < DHCP_CLIENT_PROBE_NUM)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d11a      	bne.n	8006cc0 <dhcpClientStateProbing+0x94>
         arpSendProbe(interface, interface->ipv4Context.addrList[i].addr);
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6978      	ldr	r0, [r7, #20]
 8006ca2:	f002 fcfb 	bl	800969c <arpSendProbe>
         context->timestamp = time;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	635a      	str	r2, [r3, #52]	; 0x34
         context->timeout = DHCP_CLIENT_PROBE_DELAY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cb2:	639a      	str	r2, [r3, #56]	; 0x38
         context->retransmitCount++;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006cbe:	e012      	b.n	8006ce6 <dhcpClientStateProbing+0xba>
         interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 8006cc0:	6979      	ldr	r1, [r7, #20]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
         dhcpClientDumpConfig(context);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fd50 	bl	800777c <dhcpClientDumpConfig>
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2106      	movs	r1, #6
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fcad 	bl	8007640 <dhcpClientChangeState>
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <dhcpClientStateBound>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateBound(DhcpClientContext *context)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
   systime_t t1;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8006cf8:	f7fa fa33 	bl	8001162 <osGetSystemTime>
 8006cfc:	60b8      	str	r0, [r7, #8]

   //A client will never attempt to extend the lifetime
   //of the address when T1 set to 0xFFFFFFFF
   if(context->t1 != DHCP_INFINITE_TIME)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d06:	d01f      	beq.n	8006d48 <dhcpClientStateBound+0x58>
   {
      //Convert T1 to milliseconds
      if(context->t1 < (MAX_DELAY / 1000))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	4a10      	ldr	r2, [pc, #64]	; (8006d50 <dhcpClientStateBound+0x60>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d807      	bhi.n	8006d22 <dhcpClientStateBound+0x32>
      {
         t1 = context->t1 * 1000;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e002      	b.n	8006d28 <dhcpClientStateBound+0x38>
      }
      else
      {
         t1 = MAX_DELAY;
 8006d22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d26:	60fb      	str	r3, [r7, #12]
      }

      //Check the time elapsed since the lease was obtained
      if(timeCompare(time, context->leaseStartTime + t1) >= 0)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db07      	blt.n	8006d48 <dhcpClientStateBound+0x58>
      {
         //Record the time at which the client started the address renewal process
         context->configStartTime = time;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	651a      	str	r2, [r3, #80]	; 0x50

         //Enter the RENEWING state
         dhcpClientChangeState(context, DHCP_STATE_RENEWING, 0);
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2107      	movs	r1, #7
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fc7c 	bl	8007640 <dhcpClientChangeState>
      }
   }
}
 8006d48:	bf00      	nop
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	0020c49a 	.word	0x0020c49a

08006d54 <dhcpClientStateRenewing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRenewing(DhcpClientContext *context)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
   systime_t t2;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8006d5c:	f7fa fa01 	bl	8001162 <osGetSystemTime>
 8006d60:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	4413      	add	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db43      	blt.n	8006dfc <dhcpClientStateRenewing+0xa8>
   {
      //Convert T2 to milliseconds
      if(context->t2 < (MAX_DELAY / 1000))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d78:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <dhcpClientStateRenewing+0xb0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d807      	bhi.n	8006d8e <dhcpClientStateRenewing+0x3a>
      {
         t2 = context->t2 * 1000;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e002      	b.n	8006d94 <dhcpClientStateRenewing+0x40>
      }
      else
      {
         t2 = MAX_DELAY;
 8006d8e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006d92:	60fb      	str	r3, [r7, #12]
      }

      //Check whether T2 timer has expired
      if(timeCompare(time, context->leaseStartTime + t2) < 0)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da26      	bge.n	8006df2 <dhcpClientStateRenewing+0x9e>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <dhcpClientStateRenewing+0x62>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 8006dac:	f7fc f95a 	bl	8003064 <netGetRand>
 8006db0:	4602      	mov	r2, r0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	64da      	str	r2, [r3, #76]	; 0x4c
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f9e4 	bl	8007184 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	635a      	str	r2, [r3, #52]	; 0x34

         //Compute the remaining time until T2 expires
         context->timeout = context->leaseStartTime + t2 - time;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	441a      	add	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	1ad2      	subs	r2, r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38

         //The client should wait one-half of the remaining time until T2, down to
         //a minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	4a0c      	ldr	r2, [pc, #48]	; (8006e08 <dhcpClientStateRenewing+0xb4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d904      	bls.n	8006de6 <dhcpClientStateRenewing+0x92>
            context->timeout /= 2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	085a      	lsrs	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38

         //Increment retransmission counter
         context->retransmitCount++;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	641a      	str	r2, [r3, #64]	; 0x40
      {
         //If no DHCPACK arrives before time T2, the client moves to REBINDING
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
      }
   }
}
 8006df0:	e004      	b.n	8006dfc <dhcpClientStateRenewing+0xa8>
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
 8006df2:	2200      	movs	r2, #0
 8006df4:	2108      	movs	r1, #8
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fc22 	bl	8007640 <dhcpClientChangeState>
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	0020c49a 	.word	0x0020c49a
 8006e08:	0001d4c0 	.word	0x0001d4c0

08006e0c <dhcpClientStateRebinding>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebinding(DhcpClientContext *context)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
   //Point to the underlying network interface
   interface = context->settings.interface;
#endif

   //Get current time
   time = osGetSystemTime();
 8006e14:	f7fa f9a5 	bl	8001162 <osGetSystemTime>
 8006e18:	60b8      	str	r0, [r7, #8]

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	4413      	add	r3, r2
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	db46      	blt.n	8006eba <dhcpClientStateRebinding+0xae>
   {
      //Convert the lease time to milliseconds
      if(context->leaseTime < (MAX_DELAY / 1000))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e30:	4a24      	ldr	r2, [pc, #144]	; (8006ec4 <dhcpClientStateRebinding+0xb8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d807      	bhi.n	8006e46 <dhcpClientStateRebinding+0x3a>
      {
         leaseTime = context->leaseTime * 1000;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	e002      	b.n	8006e4c <dhcpClientStateRebinding+0x40>
      }
      else
      {
         leaseTime = MAX_DELAY;
 8006e46:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006e4a:	60fb      	str	r3, [r7, #12]
      }

      //Check whether the lease has expired
      if(timeCompare(time, context->leaseStartTime + leaseTime) < 0)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da26      	bge.n	8006eaa <dhcpClientStateRebinding+0x9e>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <dhcpClientStateRebinding+0x62>
         {
            //A transaction identifier is used by the client to
            //match incoming DHCP messages with pending requests
            context->transactionId = netGetRand();
 8006e64:	f7fc f8fe 	bl	8003064 <netGetRand>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	64da      	str	r2, [r3, #76]	; 0x4c
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f988 	bl	8007184 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	635a      	str	r2, [r3, #52]	; 0x34

         //Compute the remaining time until the lease expires
         context->timeout = context->leaseStartTime + leaseTime - time;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	441a      	add	r2, r3
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38

         //The client should wait one-half of the remaining lease time, down to a
         //minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	4a0e      	ldr	r2, [pc, #56]	; (8006ec8 <dhcpClientStateRebinding+0xbc>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d904      	bls.n	8006e9e <dhcpClientStateRebinding+0x92>
         {
            context->timeout /= 2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	085a      	lsrs	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
         }

         //Increment retransmission counter
         context->retransmitCount++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40
         //If the lease expires before the client receives a DHCPACK, the client
         //moves to INIT state
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }
}
 8006ea8:	e007      	b.n	8006eba <dhcpClientStateRebinding+0xae>
         dhcpClientResetConfig(context);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fc16 	bl	80076dc <dhcpClientResetConfig>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fbc3 	bl	8007640 <dhcpClientChangeState>
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0020c49a 	.word	0x0020c49a
 8006ec8:	0001d4c0 	.word	0x0001d4c0

08006ecc <dhcpClientTick>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientTick(DhcpClientContext *context)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
   //Make sure the DHCP client has been properly instantiated
   if(context != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d043      	beq.n	8006f62 <dhcpClientTick+0x96>
   {
      //DHCP client finite state machine
      switch(context->state)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d839      	bhi.n	8006f58 <dhcpClientTick+0x8c>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <dhcpClientTick+0x20>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006f11 	.word	0x08006f11
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f21 	.word	0x08006f21
 8006ef8:	08006f29 	.word	0x08006f29
 8006efc:	08006f31 	.word	0x08006f31
 8006f00:	08006f39 	.word	0x08006f39
 8006f04:	08006f41 	.word	0x08006f41
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f51 	.word	0x08006f51
      //INIT state?
      case DHCP_STATE_INIT:
         //This is the initialization state, where a client begins the process
         //of acquiring a lease. It also returns here when a lease ends, or
         //when a lease negotiation fails
         dhcpClientStateInit(context);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f7ff fd15 	bl	8006940 <dhcpClientStateInit>
         break;
 8006f16:	e025      	b.n	8006f64 <dhcpClientTick+0x98>

      //SELECTING state?
      case DHCP_STATE_SELECTING:
         //The client is waiting to receive DHCPOFFER messages from one or more
         //DHCP servers, so it can choose one
         dhcpClientStateSelecting(context);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fd39 	bl	8006990 <dhcpClientStateSelecting>
         break;
 8006f1e:	e021      	b.n	8006f64 <dhcpClientTick+0x98>

      //REQUESTING state?
      case DHCP_STATE_REQUESTING:
         //The client is waiting to hear back from the server to which it sent
         //its request
         dhcpClientStateRequesting(context);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fd83 	bl	8006a2c <dhcpClientStateRequesting>
         break;
 8006f26:	e01d      	b.n	8006f64 <dhcpClientTick+0x98>

      //INIT REBOOT state?
      case DHCP_STATE_INIT_REBOOT:
         //When a client that already has a valid lease starts up after a
         //power-down or reboot, it starts here instead of the INIT state
         dhcpClientStateInitReboot(context);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fdeb 	bl	8006b04 <dhcpClientStateInitReboot>
         break;
 8006f2e:	e019      	b.n	8006f64 <dhcpClientTick+0x98>

      //REBOOTING state?
      case DHCP_STATE_REBOOTING:
         //A client that has rebooted with an assigned address is waiting for
         //a confirming reply from a server
         dhcpClientStateRebooting(context);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fe0f 	bl	8006b54 <dhcpClientStateRebooting>
         break;
 8006f36:	e015      	b.n	8006f64 <dhcpClientTick+0x98>

      //PROBING state?
      case DHCP_STATE_PROBING:
         //The client probes the newly received address
         dhcpClientStateProbing(context);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fe77 	bl	8006c2c <dhcpClientStateProbing>
         break;
 8006f3e:	e011      	b.n	8006f64 <dhcpClientTick+0x98>

      //BOUND state?
      case DHCP_STATE_BOUND:
         //Client has a valid lease and is in its normal operating state
         dhcpClientStateBound(context);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fed5 	bl	8006cf0 <dhcpClientStateBound>
         break;
 8006f46:	e00d      	b.n	8006f64 <dhcpClientTick+0x98>
      //RENEWING state?
      case DHCP_STATE_RENEWING:
         //Client is trying to renew its lease. It regularly sends DHCPREQUEST
         //messages with the server that gave it its current lease specified,
         //and waits for a reply
         dhcpClientStateRenewing(context);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff ff03 	bl	8006d54 <dhcpClientStateRenewing>
         break;
 8006f4e:	e009      	b.n	8006f64 <dhcpClientTick+0x98>
      case DHCP_STATE_REBINDING:
         //The client has failed to renew its lease with the server that
         //originally granted it, and now seeks a lease extension with any
         //server that can hear it. It periodically sends DHCPREQUEST messages
         //with no server specified until it gets a reply or the lease ends
         dhcpClientStateRebinding(context);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7ff ff5b 	bl	8006e0c <dhcpClientStateRebinding>
         break;
 8006f56:	e005      	b.n	8006f64 <dhcpClientTick+0x98>

      //Invalid state?
      default:
         //Switch to the default state
         context->state = DHCP_STATE_INIT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         break;
 8006f60:	e000      	b.n	8006f64 <dhcpClientTick+0x98>
      }
   }
 8006f62:	bf00      	nop
}
 8006f64:	bf00      	nop
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <dhcpClientLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientLinkChangeEvent(DhcpClientContext *context)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
   NetInterface *interface;

   //Make sure the DHCP client has been properly instantiated
   if(context == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d02a      	beq.n	8006fd0 <dhcpClientLinkChangeEvent+0x64>
      return;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]

   //Check whether the DHCP client is running
   if(context->running)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <dhcpClientLinkChangeEvent+0x22>
   {
      //The host address is no longer valid
      dhcpClientResetConfig(context);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fba7 	bl	80076dc <dhcpClientResetConfig>
      mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif
   }

   //Check whether the client already has a valid lease
   if(context->state >= DHCP_STATE_INIT_REBOOT)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d904      	bls.n	8006fa2 <dhcpClientLinkChangeEvent+0x36>
   {
      //Switch to the INIT-REBOOT state
      context->state = DHCP_STATE_INIT_REBOOT;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006fa0:	e003      	b.n	8006faa <dhcpClientLinkChangeEvent+0x3e>
   }
   else
   {
      //Switch to the INIT state
      context->state = DHCP_STATE_INIT;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   }

   //Any registered callback?
   if(context->settings.linkChangeEvent != NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00f      	beq.n	8006fd2 <dhcpClientLinkChangeEvent+0x66>
   {
      //Release exclusive access
      osReleaseMutex(&netMutex);
 8006fb2:	4809      	ldr	r0, [pc, #36]	; (8006fd8 <dhcpClientLinkChangeEvent+0x6c>)
 8006fb4:	f7fa f8c6 	bl	8001144 <osReleaseMutex>
      //Invoke user callback function
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8006fc8:	4803      	ldr	r0, [pc, #12]	; (8006fd8 <dhcpClientLinkChangeEvent+0x6c>)
 8006fca:	f7fa f8ac 	bl	8001126 <osAcquireMutex>
 8006fce:	e000      	b.n	8006fd2 <dhcpClientLinkChangeEvent+0x66>
      return;
 8006fd0:	bf00      	nop
   }
}
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20009168 	.word	0x20009168

08006fdc <dhcpClientSendDiscover>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDiscover(DhcpClientContext *context)
{
 8006fdc:	b5b0      	push	{r4, r5, r7, lr}
 8006fde:	b098      	sub	sp, #96	; 0x60
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_DISCOVER;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	72fb      	strb	r3, [r7, #11]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	64fb      	str	r3, [r7, #76]	; 0x4c
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8006fee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006ff0:	f7fc f979 	bl	80032e6 <nicGetLogicalInterface>
 8006ff4:	64b8      	str	r0, [r7, #72]	; 0x48

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 8006ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	f44f 7009 	mov.w	r0, #548	; 0x224
 8007000:	f7ff fb77 	bl	80066f2 <udpAllocBuffer>
 8007004:	6478      	str	r0, [r7, #68]	; 0x44
   //Failed to allocate buffer?
   if(buffer == NULL)
 8007006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <dhcpClientSendDiscover+0x34>
      return ERROR_OUT_OF_MEMORY;
 800700c:	2364      	movs	r3, #100	; 0x64
 800700e:	e0b2      	b.n	8007176 <dhcpClientSendDiscover+0x19a>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	4619      	mov	r1, r3
 8007014:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007016:	f7fb fb12 	bl	800263e <netBufferAt>
 800701a:	6438      	str	r0, [r7, #64]	; 0x40
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 800701c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007020:	2100      	movs	r1, #0
 8007022:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007024:	f008 ff97 	bl	800ff56 <memset>

   //Format DHCPDISCOVER message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8007028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800702a:	2201      	movs	r2, #1
 800702c:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 800702e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007030:	2201      	movs	r2, #1
 8007032:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8007034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007036:	2206      	movs	r2, #6
 8007038:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703e:	4618      	mov	r0, r3
 8007040:	f7f9 ff1b 	bl	8000e7a <swapInt32>
 8007044:	4602      	mov	r2, r0
 8007046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007048:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fad6 	bl	80075fc <dhcpClientComputeElapsedTime>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007056:	811a      	strh	r2, [r3, #8]
   message->flags = HTONS(DHCP_FLAG_BROADCAST);
 8007058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800705a:	2200      	movs	r2, #0
 800705c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007060:	729a      	strb	r2, [r3, #10]
 8007062:	2200      	movs	r2, #0
 8007064:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 8007066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007068:	2200      	movs	r2, #0
 800706a:	731a      	strb	r2, [r3, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	735a      	strb	r2, [r3, #13]
 8007070:	2200      	movs	r2, #0
 8007072:	739a      	strb	r2, [r3, #14]
 8007074:	2200      	movs	r2, #0
 8007076:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 8007078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707c:	331c      	adds	r3, #28
 800707e:	32cc      	adds	r2, #204	; 0xcc
 8007080:	6810      	ldr	r0, [r2, #0]
 8007082:	6018      	str	r0, [r3, #0]
 8007084:	8892      	ldrh	r2, [r2, #4]
 8007086:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8007088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708a:	2200      	movs	r2, #0
 800708c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8007090:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8007094:	2200      	movs	r2, #0
 8007096:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800709a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800709e:	2200      	movs	r2, #0
 80070a0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80070a4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80070a8:	2200      	movs	r2, #0
 80070aa:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80070ae:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 80070b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 80070ba:	23f1      	movs	r3, #241	; 0xf1
 80070bc:	637b      	str	r3, [r7, #52]	; 0x34

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 80070be:	f107 030b 	add.w	r3, r7, #11
 80070c2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80070c6:	2201      	movs	r2, #1
 80070c8:	9200      	str	r2, [sp, #0]
 80070ca:	2235      	movs	r2, #53	; 0x35
 80070cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80070ce:	f000 fc5b 	bl	8007988 <dhcpAddOption>
      &type, sizeof(type));

   //Check whether rapid commit is enabled
   if(context->settings.rapidCommit)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <dhcpClientSendDiscover+0x110>
   {
      //Include the Rapid Commit option if the client is prepared
      //to perform the DHCPDISCOVER-DHCPACK message exchange
      dhcpAddOption(message, &length, DHCP_OPT_RAPID_COMMIT, NULL, 0);
 80070da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80070de:	2300      	movs	r3, #0
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	2250      	movs	r2, #80	; 0x50
 80070e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80070e8:	f000 fc4e 	bl	8007988 <dhcpAddOption>
   }

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d007      	beq.n	8007104 <dhcpClientSendDiscover+0x128>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1c      	ldr	r4, [r3, #32]
 80070f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070fc:	2301      	movs	r3, #1
 80070fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	47a0      	blx	r4
         DHCP_MSG_TYPE_DISCOVER);
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 8007104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007106:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800710a:	bf38      	it	cc
 800710c:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 8007110:	637b      	str	r3, [r7, #52]	; 0x34

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8007112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007116:	4413      	add	r3, r2
 8007118:	4619      	mov	r1, r3
 800711a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800711c:	f7fb f9e9 	bl	80024f2 <netBufferSetLength>

   //DHCP messages broadcast by a client prior to that client obtaining its
   //IP address must have the source address field in the IP header set to 0
   //(refer to RFC 2131, section 4.1)
   srcIpAddr.length = sizeof(Ipv4Addr);
 8007120:	2304      	movs	r3, #4
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8007124:	2300      	movs	r3, #0
 8007126:	633b      	str	r3, [r7, #48]	; 0x30

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 8007128:	2304      	movs	r3, #4
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 800712c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <dhcpClientSendDiscover+0x1a4>)
 8007134:	f107 040c 	add.w	r4, r7, #12
 8007138:	461d      	mov	r5, r3
 800713a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800713c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800713e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007142:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDISCOVER message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800714c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007150:	f107 020c 	add.w	r2, r7, #12
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	2343      	movs	r3, #67	; 0x43
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	4603      	mov	r3, r0
 8007162:	2244      	movs	r2, #68	; 0x44
 8007164:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007166:	f7ff fa1b 	bl	80065a0 <udpSendBuffer>
 800716a:	4603      	mov	r3, r0
 800716c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800716e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007170:	f7fb f98e 	bl	8002490 <netBufferFree>
   //Return status code
   return error;
 8007174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8007176:	4618      	mov	r0, r3
 8007178:	3750      	adds	r7, #80	; 0x50
 800717a:	46bd      	mov	sp, r7
 800717c:	bdb0      	pop	{r4, r5, r7, pc}
 800717e:	bf00      	nop
 8007180:	080117a0 	.word	0x080117a0

08007184 <dhcpClientSendRequest>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendRequest(DhcpClientContext *context)
{
 8007184:	b5b0      	push	{r4, r5, r7, lr}
 8007186:	b09a      	sub	sp, #104	; 0x68
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_REQUEST;
 800718c:	2303      	movs	r3, #3
 800718e:	73fb      	strb	r3, [r7, #15]

   //Point to the underlying network interface
   interface = context->settings.interface;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	657b      	str	r3, [r7, #84]	; 0x54
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8007196:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007198:	f7fc f8a5 	bl	80032e6 <nicGetLogicalInterface>
 800719c:	6538      	str	r0, [r7, #80]	; 0x50

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 80071a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80071a8:	4619      	mov	r1, r3
 80071aa:	f44f 7009 	mov.w	r0, #548	; 0x224
 80071ae:	f7ff faa0 	bl	80066f2 <udpAllocBuffer>
 80071b2:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate buffer?
   if(buffer == NULL)
 80071b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <dhcpClientSendRequest+0x3a>
      return ERROR_OUT_OF_MEMORY;
 80071ba:	2364      	movs	r3, #100	; 0x64
 80071bc:	e110      	b.n	80073e0 <dhcpClientSendRequest+0x25c>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 80071be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c0:	4619      	mov	r1, r3
 80071c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80071c4:	f7fb fa3b 	bl	800263e <netBufferAt>
 80071c8:	6478      	str	r0, [r7, #68]	; 0x44
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 80071ca:	f44f 7209 	mov.w	r2, #548	; 0x224
 80071ce:	2100      	movs	r1, #0
 80071d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071d2:	f008 fec0 	bl	800ff56 <memset>

   //Format DHCPREQUEST message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 80071d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d8:	2201      	movs	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 80071dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071de:	2201      	movs	r2, #1
 80071e0:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 80071e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e4:	2206      	movs	r2, #6
 80071e6:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 fe44 	bl	8000e7a <swapInt32>
 80071f2:	4602      	mov	r2, r0
 80071f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071f6:	605a      	str	r2, [r3, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9ff 	bl	80075fc <dhcpClientComputeElapsedTime>
 80071fe:	4603      	mov	r3, r0
 8007200:	461a      	mov	r2, r3
 8007202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007204:	811a      	strh	r2, [r3, #8]

   //The client IP address must be included if the client is fully configured
   //and can respond to ARP requests
   if(context->state == DHCP_STATE_RENEWING ||
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800720c:	2b07      	cmp	r3, #7
 800720e:	d004      	beq.n	800721a <dhcpClientSendRequest+0x96>
      context->state == DHCP_STATE_REBINDING)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   if(context->state == DHCP_STATE_RENEWING ||
 8007216:	2b08      	cmp	r3, #8
 8007218:	d111      	bne.n	800723e <dhcpClientSendRequest+0xba>
   {
      message->flags = 0;
 800721a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721c:	2200      	movs	r2, #0
 800721e:	729a      	strb	r2, [r3, #10]
 8007220:	2200      	movs	r2, #0
 8007222:	72da      	strb	r2, [r3, #11]
      message->ciaddr = interface->ipv4Context.addrList[i].addr;
 8007224:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007226:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800723a:	60da      	str	r2, [r3, #12]
 800723c:	e00f      	b.n	800725e <dhcpClientSendRequest+0xda>
   }
   else
   {
      message->flags = HTONS(DHCP_FLAG_BROADCAST);
 800723e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007240:	2200      	movs	r2, #0
 8007242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007246:	729a      	strb	r2, [r3, #10]
 8007248:	2200      	movs	r2, #0
 800724a:	72da      	strb	r2, [r3, #11]
      message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	2200      	movs	r2, #0
 8007250:	731a      	strb	r2, [r3, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	735a      	strb	r2, [r3, #13]
 8007256:	2200      	movs	r2, #0
 8007258:	739a      	strb	r2, [r3, #14]
 800725a:	2200      	movs	r2, #0
 800725c:	73da      	strb	r2, [r3, #15]
   }

   //Client hardware address
   message->chaddr = logicalInterface->macAddr;
 800725e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007262:	331c      	adds	r3, #28
 8007264:	32cc      	adds	r2, #204	; 0xcc
 8007266:	6810      	ldr	r0, [r2, #0]
 8007268:	6018      	str	r0, [r3, #0]
 800726a:	8892      	ldrh	r2, [r2, #4]
 800726c:	809a      	strh	r2, [r3, #4]
   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 800726e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007270:	2200      	movs	r2, #0
 8007272:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8007276:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800727a:	2200      	movs	r2, #0
 800727c:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8007280:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8007284:	2200      	movs	r2, #0
 8007286:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800728a:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800728e:	2200      	movs	r2, #0
 8007290:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8007294:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 8007298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729a:	22ff      	movs	r2, #255	; 0xff
 800729c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 80072a0:	23f1      	movs	r3, #241	; 0xf1
 80072a2:	63bb      	str	r3, [r7, #56]	; 0x38

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 80072a4:	f107 030f 	add.w	r3, r7, #15
 80072a8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80072ac:	2201      	movs	r2, #1
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	2235      	movs	r2, #53	; 0x35
 80072b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072b4:	f000 fb68 	bl	8007988 <dhcpAddOption>
      &type, sizeof(type));

   //Server Identifier option
   if(context->state == DHCP_STATE_REQUESTING)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d109      	bne.n	80072d6 <dhcpClientSendRequest+0x152>
   {
      dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
         &context->serverIpAddr, sizeof(Ipv4Addr));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3344      	adds	r3, #68	; 0x44
      dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 80072c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80072ca:	2204      	movs	r2, #4
 80072cc:	9200      	str	r2, [sp, #0]
 80072ce:	2236      	movs	r2, #54	; 0x36
 80072d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072d2:	f000 fb59 	bl	8007988 <dhcpAddOption>
   }

   //Requested IP Address option
   if(context->state == DHCP_STATE_REQUESTING ||
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d004      	beq.n	80072ea <dhcpClientSendRequest+0x166>
      context->state == DHCP_STATE_REBOOTING)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   if(context->state == DHCP_STATE_REQUESTING ||
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d109      	bne.n	80072fe <dhcpClientSendRequest+0x17a>
   {
      dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
         &context->requestedIpAddr, sizeof(Ipv4Addr));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3348      	adds	r3, #72	; 0x48
      dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 80072ee:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80072f2:	2204      	movs	r2, #4
 80072f4:	9200      	str	r2, [sp, #0]
 80072f6:	2232      	movs	r2, #50	; 0x32
 80072f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072fa:	f000 fb45 	bl	8007988 <dhcpAddOption>
   }

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d007      	beq.n	8007316 <dhcpClientSendRequest+0x192>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1c      	ldr	r4, [r3, #32]
 800730a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800730e:	2303      	movs	r3, #3
 8007310:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	47a0      	blx	r4
         DHCP_MSG_TYPE_REQUEST);
   }

   //Parameter Request List option
   if(dhcpGetOption(message, length, DHCP_OPT_PARAM_REQUEST_LIST) == NULL)
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2237      	movs	r2, #55	; 0x37
 800731a:	4619      	mov	r1, r3
 800731c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800731e:	f000 fb92 	bl	8007a46 <dhcpGetOption>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d108      	bne.n	800733a <dhcpClientSendRequest+0x1b6>
   {
      //Use the default list of requested options
      dhcpAddOption(message, &length, DHCP_OPT_PARAM_REQUEST_LIST,
 8007328:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800732c:	2307      	movs	r3, #7
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	4b2d      	ldr	r3, [pc, #180]	; (80073e8 <dhcpClientSendRequest+0x264>)
 8007332:	2237      	movs	r2, #55	; 0x37
 8007334:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007336:	f000 fb27 	bl	8007988 <dhcpAddOption>
         dhcpOptionList, sizeof(dhcpOptionList));
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007340:	bf38      	it	cc
 8007342:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8007348:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	4413      	add	r3, r2
 800734e:	4619      	mov	r1, r3
 8007350:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007352:	f7fb f8ce 	bl	80024f2 <netBufferSetLength>

   //IP address is being renewed?
   if(context->state == DHCP_STATE_RENEWING)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800735c:	2b07      	cmp	r3, #7
 800735e:	d112      	bne.n	8007386 <dhcpClientSendRequest+0x202>
   {
      //Set source IP address
      srcIpAddr.length = sizeof(Ipv4Addr);
 8007360:	2304      	movs	r3, #4
 8007362:	633b      	str	r3, [r7, #48]	; 0x30
      srcIpAddr.ipv4Addr = interface->ipv4Context.addrList[i].addr;
 8007364:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007368:	4613      	mov	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	440b      	add	r3, r1
 8007372:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34

      //The client transmits the message directly to the server that initially
      //granted the lease
      destIpAddr.length = sizeof(Ipv4Addr);
 800737a:	2304      	movs	r3, #4
 800737c:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = context->serverIpAddr;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007384:	e008      	b.n	8007398 <dhcpClientSendRequest+0x214>
   else
   {
      //DHCP messages broadcast by a client prior to that client obtaining its
      //IP address must have the source address field in the IP header set to 0
      //(refer to RFC 2131, section 4.1)
      srcIpAddr.length = sizeof(Ipv4Addr);
 8007386:	2304      	movs	r3, #4
 8007388:	633b      	str	r3, [r7, #48]	; 0x30
      srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 800738a:	2300      	movs	r3, #0
 800738c:	637b      	str	r3, [r7, #52]	; 0x34

      //Broadcast the message
      destIpAddr.length = sizeof(Ipv4Addr);
 800738e:	2304      	movs	r3, #4
 8007390:	62bb      	str	r3, [r7, #40]	; 0x28
      destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8007392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007396:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <dhcpClientSendRequest+0x268>)
 800739a:	f107 0410 	add.w	r4, r7, #16
 800739e:	461d      	mov	r5, r3
 80073a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80073a8:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DHCPREQUEST message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 80073ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80073b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80073b6:	f107 0210 	add.w	r2, r7, #16
 80073ba:	9203      	str	r2, [sp, #12]
 80073bc:	9302      	str	r3, [sp, #8]
 80073be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2343      	movs	r3, #67	; 0x43
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	4603      	mov	r3, r0
 80073c8:	2244      	movs	r2, #68	; 0x44
 80073ca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80073cc:	f7ff f8e8 	bl	80065a0 <udpSendBuffer>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 80073d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80073d8:	f7fb f85a 	bl	8002490 <netBufferFree>
   //Return status code
   return error;
 80073dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3758      	adds	r7, #88	; 0x58
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bdb0      	pop	{r4, r5, r7, pc}
 80073e8:	080117c8 	.word	0x080117c8
 80073ec:	080117a0 	.word	0x080117a0

080073f0 <dhcpClientSendDecline>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDecline(DhcpClientContext *context)
{
 80073f0:	b5b0      	push	{r4, r5, r7, lr}
 80073f2:	b098      	sub	sp, #96	; 0x60
 80073f4:	af04      	add	r7, sp, #16
 80073f6:	6078      	str	r0, [r7, #4]
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_DECLINE;
 80073f8:	2304      	movs	r3, #4
 80073fa:	72fb      	strb	r3, [r7, #11]

   //Point to the underlying network interface
   interface = context->settings.interface;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	64fb      	str	r3, [r7, #76]	; 0x4c
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8007402:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007404:	f7fb ff6f 	bl	80032e6 <nicGetLogicalInterface>
 8007408:	64b8      	str	r0, [r7, #72]	; 0x48

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 800740a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800740e:	4619      	mov	r1, r3
 8007410:	f44f 7009 	mov.w	r0, #548	; 0x224
 8007414:	f7ff f96d 	bl	80066f2 <udpAllocBuffer>
 8007418:	6478      	str	r0, [r7, #68]	; 0x44
   //Failed to allocate buffer?
   if(buffer == NULL)
 800741a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <dhcpClientSendDecline+0x34>
      return ERROR_OUT_OF_MEMORY;
 8007420:	2364      	movs	r3, #100	; 0x64
 8007422:	e0b5      	b.n	8007590 <dhcpClientSendDecline+0x1a0>

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset);
 8007424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007426:	4619      	mov	r1, r3
 8007428:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800742a:	f7fb f908 	bl	800263e <netBufferAt>
 800742e:	6438      	str	r0, [r7, #64]	; 0x40
   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 8007430:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007434:	2100      	movs	r1, #0
 8007436:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007438:	f008 fd8d 	bl	800ff56 <memset>

   //Format DHCPDECLINE message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 800743c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8007442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007444:	2201      	movs	r2, #1
 8007446:	705a      	strb	r2, [r3, #1]
   message->hlen = sizeof(MacAddr);
 8007448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744a:	2206      	movs	r2, #6
 800744c:	709a      	strb	r2, [r3, #2]
   message->xid = htonl(context->transactionId);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007452:	4618      	mov	r0, r3
 8007454:	f7f9 fd11 	bl	8000e7a <swapInt32>
 8007458:	4602      	mov	r2, r0
 800745a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800745c:	605a      	str	r2, [r3, #4]
   message->secs = 0;
 800745e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007460:	2200      	movs	r2, #0
 8007462:	721a      	strb	r2, [r3, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	725a      	strb	r2, [r3, #9]
   message->flags = 0;
 8007468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800746a:	2200      	movs	r2, #0
 800746c:	729a      	strb	r2, [r3, #10]
 800746e:	2200      	movs	r2, #0
 8007470:	72da      	strb	r2, [r3, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 8007472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007474:	2200      	movs	r2, #0
 8007476:	731a      	strb	r2, [r3, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	735a      	strb	r2, [r3, #13]
 800747c:	2200      	movs	r2, #0
 800747e:	739a      	strb	r2, [r3, #14]
 8007480:	2200      	movs	r2, #0
 8007482:	73da      	strb	r2, [r3, #15]
   message->chaddr = logicalInterface->macAddr;
 8007484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007486:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007488:	331c      	adds	r3, #28
 800748a:	32cc      	adds	r2, #204	; 0xcc
 800748c:	6810      	ldr	r0, [r2, #0]
 800748e:	6018      	str	r0, [r3, #0]
 8007490:	8892      	ldrh	r2, [r2, #4]
 8007492:	809a      	strh	r2, [r3, #4]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8007494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007496:	2200      	movs	r2, #0
 8007498:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800749c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80074a0:	2200      	movs	r2, #0
 80074a2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80074a6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80074aa:	2200      	movs	r2, #0
 80074ac:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80074b0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80074b4:	2200      	movs	r2, #0
 80074b6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80074ba:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 80074be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 80074c6:	23f1      	movs	r3, #241	; 0xf1
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 80074ca:	f107 030b 	add.w	r3, r7, #11
 80074ce:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80074d2:	2201      	movs	r2, #1
 80074d4:	9200      	str	r2, [sp, #0]
 80074d6:	2235      	movs	r2, #53	; 0x35
 80074d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80074da:	f000 fa55 	bl	8007988 <dhcpAddOption>
      &type, sizeof(type));

   //Server Identifier option
   dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
      &context->serverIpAddr, sizeof(Ipv4Addr));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3344      	adds	r3, #68	; 0x44
   dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 80074e2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80074e6:	2204      	movs	r2, #4
 80074e8:	9200      	str	r2, [sp, #0]
 80074ea:	2236      	movs	r2, #54	; 0x36
 80074ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80074ee:	f000 fa4b 	bl	8007988 <dhcpAddOption>

   //Requested IP Address option
   dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
      &context->requestedIpAddr, sizeof(Ipv4Addr));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	3348      	adds	r3, #72	; 0x48
   dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 80074f6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80074fa:	2204      	movs	r2, #4
 80074fc:	9200      	str	r2, [sp, #0]
 80074fe:	2232      	movs	r2, #50	; 0x32
 8007500:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007502:	f000 fa41 	bl	8007988 <dhcpAddOption>

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d007      	beq.n	800751e <dhcpClientSendDecline+0x12e>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1c      	ldr	r4, [r3, #32]
 8007512:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007516:	2304      	movs	r3, #4
 8007518:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	47a0      	blx	r4
         DHCP_MSG_TYPE_DECLINE);
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007524:	bf38      	it	cc
 8007526:	f44f 7396 	movcc.w	r3, #300	; 0x12c
 800752a:	637b      	str	r3, [r7, #52]	; 0x34

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800752c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	4413      	add	r3, r2
 8007532:	4619      	mov	r1, r3
 8007534:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007536:	f7fa ffdc 	bl	80024f2 <netBufferSetLength>

   //Use the unspecified address as source address
   srcIpAddr.length = sizeof(Ipv4Addr);
 800753a:	2304      	movs	r3, #4
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 800753e:	2300      	movs	r3, #0
 8007540:	633b      	str	r3, [r7, #48]	; 0x30

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 8007542:	2304      	movs	r3, #4
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8007546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <dhcpClientSendDecline+0x1a8>)
 800754e:	f107 040c 	add.w	r4, r7, #12
 8007552:	461d      	mov	r5, r3
 8007554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007558:	e895 0003 	ldmia.w	r5, {r0, r1}
 800755c:	e884 0003 	stmia.w	r4, {r0, r1}

   //Broadcast DHCPDECLINE message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007566:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800756a:	f107 020c 	add.w	r2, r7, #12
 800756e:	9203      	str	r2, [sp, #12]
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	2343      	movs	r3, #67	; 0x43
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	4603      	mov	r3, r0
 800757c:	2244      	movs	r2, #68	; 0x44
 800757e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007580:	f7ff f80e 	bl	80065a0 <udpSendBuffer>
 8007584:	4603      	mov	r3, r0
 8007586:	87fb      	strh	r3, [r7, #62]	; 0x3e
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8007588:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800758a:	f7fa ff81 	bl	8002490 <netBufferFree>
   //Return status code
   return error;
 800758e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
}
 8007590:	4618      	mov	r0, r3
 8007592:	3750      	adds	r7, #80	; 0x50
 8007594:	46bd      	mov	sp, r7
 8007596:	bdb0      	pop	{r4, r5, r7, pc}
 8007598:	080117a0 	.word	0x080117a0

0800759c <dhcpClientCheckTimeout>:
 * @brief Manage DHCP configuration timeout
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientCheckTimeout(DhcpClientContext *context)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]

   //Get current time
   time = osGetSystemTime();
 80075aa:	f7f9 fdda 	bl	8001162 <osGetSystemTime>
 80075ae:	60b8      	str	r0, [r7, #8]

   //Any registered callback?
   if(context->settings.timeoutEvent != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d01a      	beq.n	80075ee <dhcpClientCheckTimeout+0x52>
   {
      //DHCP configuration timeout?
      if(timeCompare(time, context->configStartTime + context->settings.timeout) >= 0)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4413      	add	r3, r2
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db11      	blt.n	80075ee <dhcpClientCheckTimeout+0x52>
      {
         //Ensure the callback function is only called once
         if(!context->timeoutEventDone)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10d      	bne.n	80075ee <dhcpClientCheckTimeout+0x52>
         {
            //Release exclusive access
            osReleaseMutex(&netMutex);
 80075d2:	4809      	ldr	r0, [pc, #36]	; (80075f8 <dhcpClientCheckTimeout+0x5c>)
 80075d4:	f7f9 fdb6 	bl	8001144 <osReleaseMutex>
            //Invoke user callback function
            context->settings.timeoutEvent(context, interface);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	68f9      	ldr	r1, [r7, #12]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
            //Get exclusive access
            osAcquireMutex(&netMutex);
 80075e2:	4805      	ldr	r0, [pc, #20]	; (80075f8 <dhcpClientCheckTimeout+0x5c>)
 80075e4:	f7f9 fd9f 	bl	8001126 <osAcquireMutex>

            //Set flag
            context->timeoutEventDone = TRUE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
         }
      }
   }
}
 80075ee:	bf00      	nop
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20009168 	.word	0x20009168

080075fc <dhcpClientComputeElapsedTime>:
 * @param[in] context Pointer to the DHCP client context
 * @return The elapsed time expressed in seconds
 **/

uint16_t dhcpClientComputeElapsedTime(DhcpClientContext *context)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
   systime_t time;

   //Compute the time elapsed since the DHCP configuration process started
   time = (osGetSystemTime() - context->configStartTime) / 1000;
 8007604:	f7f9 fdad 	bl	8001162 <osGetSystemTime>
 8007608:	4602      	mov	r2, r0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	4a0a      	ldr	r2, [pc, #40]	; (800763c <dhcpClientComputeElapsedTime+0x40>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	60fb      	str	r3, [r7, #12]

   //The value 0xFFFF is used to represent any elapsed time values
   //greater than the largest time value that can be represented
   time = MIN(time, 0xFFFF);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007620:	4293      	cmp	r3, r2
 8007622:	bf28      	it	cs
 8007624:	4613      	movcs	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]

   //Convert the 16-bit value to network byte order
   return htons(time);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	b29b      	uxth	r3, r3
 800762c:	4618      	mov	r0, r3
 800762e:	f7f9 fc16 	bl	8000e5e <swapInt16>
 8007632:	4603      	mov	r3, r0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	10624dd3 	.word	0x10624dd3

08007640 <dhcpClientChangeState>:
 * @param[in] delay Initial delay
 **/

void dhcpClientChangeState(DhcpClientContext *context,
   DhcpState newState, systime_t delay)
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 800764e:	f7f9 fd88 	bl	8001162 <osGetSystemTime>
 8007652:	6178      	str	r0, [r7, #20]

#if (DHCP_TRACE_LEVEL >= TRACE_LEVEL_INFO)
   //Sanity check
   if(newState <= DHCP_STATE_REBINDING)
 8007654:	7afb      	ldrb	r3, [r7, #11]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d813      	bhi.n	8007682 <dhcpClientChangeState+0x42>
         "RENEWING",
         "REBINDING"
      };

      //Debug message
      TRACE_INFO("%s: DHCP client %s state\r\n",
 800765a:	f7f9 fcca 	bl	8000ff2 <osSuspendAllTasks>
 800765e:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <dhcpClientChangeState+0x8c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68dc      	ldr	r4, [r3, #12]
 8007664:	2100      	movs	r1, #0
 8007666:	6978      	ldr	r0, [r7, #20]
 8007668:	f7f9 fc20 	bl	8000eac <formatSystemTime>
 800766c:	4602      	mov	r2, r0
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	4917      	ldr	r1, [pc, #92]	; (80076d0 <dhcpClientChangeState+0x90>)
 8007672:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007676:	4917      	ldr	r1, [pc, #92]	; (80076d4 <dhcpClientChangeState+0x94>)
 8007678:	4620      	mov	r0, r4
 800767a:	f008 fb8f 	bl	800fd9c <fiprintf>
 800767e:	f7f9 fcc3 	bl	8001008 <osResumeAllTasks>
         formatSystemTime(time, NULL), stateLabel[newState]);
   }
#endif

   //Set time stamp
   context->timestamp = time;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	635a      	str	r2, [r3, #52]	; 0x34
   //Set initial delay
   context->timeout = delay;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	639a      	str	r2, [r3, #56]	; 0x38
   //Reset retransmission counter
   context->retransmitCount = 0;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	641a      	str	r2, [r3, #64]	; 0x40
   //Switch to the new state
   context->state = newState;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	7afa      	ldrb	r2, [r7, #11]
 8007698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   //Any registered callback?
   if(context->settings.stateChangeEvent != NULL)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <dhcpClientChangeState+0x82>
   {
      NetInterface *interface;

      //Point to the underlying network interface
      interface = context->settings.interface;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	613b      	str	r3, [r7, #16]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 80076aa:	480b      	ldr	r0, [pc, #44]	; (80076d8 <dhcpClientChangeState+0x98>)
 80076ac:	f7f9 fd4a 	bl	8001144 <osReleaseMutex>
      //Invoke user callback function
      context->settings.stateChangeEvent(context, interface, newState);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	69db      	ldr	r3, [r3, #28]
 80076b4:	7afa      	ldrb	r2, [r7, #11]
 80076b6:	6939      	ldr	r1, [r7, #16]
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 80076bc:	4806      	ldr	r0, [pc, #24]	; (80076d8 <dhcpClientChangeState+0x98>)
 80076be:	f7f9 fd32 	bl	8001126 <osAcquireMutex>
   }
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd90      	pop	{r4, r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000034 	.word	0x20000034
 80076d0:	20000004 	.word	0x20000004
 80076d4:	080114b4 	.word	0x080114b4
 80076d8:	20009168 	.word	0x20009168

080076dc <dhcpClientResetConfig>:
 * @brief Reset DHCP configuration
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientResetConfig(DhcpClientContext *context)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
   uint_t i;
   uint_t j;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	613b      	str	r3, [r7, #16]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]

   //The host address is not longer valid
   interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 80076f0:	6939      	ldr	r1, [r7, #16]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	4613      	mov	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	4413      	add	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
   interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8007706:	6939      	ldr	r1, [r7, #16]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8007718:	2200      	movs	r2, #0
 800771a:	701a      	strb	r2, [r3, #0]

   //Clear subnet mask
   interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 800771c:	6939      	ldr	r1, [r7, #16]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	440b      	add	r3, r1
 800772a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]

   //The default gateway is no longer valid
   interface->ipv4Context.addrList[i].defaultGateway = IPV4_UNSPECIFIED_ADDR;
 8007732:	6939      	ldr	r1, [r7, #16]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10f      	bne.n	8007770 <dhcpClientResetConfig+0x94>
   {
      //Loop through the list of DNS servers
      for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8007750:	2300      	movs	r3, #0
 8007752:	617b      	str	r3, [r7, #20]
 8007754:	e009      	b.n	800776a <dhcpClientResetConfig+0x8e>
      {
         //The DNS server is no longer valid
         interface->ipv4Context.dnsServerList[j] = IPV4_UNSPECIFIED_ADDR;
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	337a      	adds	r3, #122	; 0x7a
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
      for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	3301      	adds	r3, #1
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d9f2      	bls.n	8007756 <dhcpClientResetConfig+0x7a>
      }
   }
}
 8007770:	bf00      	nop
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <dhcpClientDumpConfig>:
 * @brief Dump DHCP configuration for debugging purpose
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientDumpConfig(DhcpClientContext *context)
{
 800777c:	b5b0      	push	{r4, r5, r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
   uint_t j;
   NetInterface *interface;
   Ipv4Context *ipv4Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	613b      	str	r3, [r7, #16]
   //Point to the IPv4 context
   ipv4Context = &interface->ipv4Context;
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8007790:	60fb      	str	r3, [r7, #12]

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	60bb      	str	r3, [r7, #8]

   //Debug message
   TRACE_INFO("\r\n");
 8007798:	f7f9 fc2b 	bl	8000ff2 <osSuspendAllTasks>
 800779c:	4b6e      	ldr	r3, [pc, #440]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	2202      	movs	r2, #2
 80077a4:	2101      	movs	r1, #1
 80077a6:	486d      	ldr	r0, [pc, #436]	; (800795c <dhcpClientDumpConfig+0x1e0>)
 80077a8:	f008 fb6a 	bl	800fe80 <fwrite>
 80077ac:	f7f9 fc2c 	bl	8001008 <osResumeAllTasks>
   TRACE_INFO("DHCP configuration:\r\n");
 80077b0:	f7f9 fc1f 	bl	8000ff2 <osSuspendAllTasks>
 80077b4:	4b68      	ldr	r3, [pc, #416]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2215      	movs	r2, #21
 80077bc:	2101      	movs	r1, #1
 80077be:	4868      	ldr	r0, [pc, #416]	; (8007960 <dhcpClientDumpConfig+0x1e4>)
 80077c0:	f008 fb5e 	bl	800fe80 <fwrite>
 80077c4:	f7f9 fc20 	bl	8001008 <osResumeAllTasks>

   //Lease start time
   TRACE_INFO("  Lease Start Time = %s\r\n",
 80077c8:	f7f9 fc13 	bl	8000ff2 <osSuspendAllTasks>
 80077cc:	4b62      	ldr	r3, [pc, #392]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68dc      	ldr	r4, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	2100      	movs	r1, #0
 80077d8:	4618      	mov	r0, r3
 80077da:	f7f9 fb67 	bl	8000eac <formatSystemTime>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	4960      	ldr	r1, [pc, #384]	; (8007964 <dhcpClientDumpConfig+0x1e8>)
 80077e4:	4620      	mov	r0, r4
 80077e6:	f008 fad9 	bl	800fd9c <fiprintf>
 80077ea:	f7f9 fc0d 	bl	8001008 <osResumeAllTasks>
      formatSystemTime(context->leaseStartTime, NULL));

   //Lease time
   TRACE_INFO("  Lease Time = %" PRIu32 "s\r\n", context->leaseTime);
 80077ee:	f7f9 fc00 	bl	8000ff2 <osSuspendAllTasks>
 80077f2:	4b59      	ldr	r3, [pc, #356]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68d8      	ldr	r0, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fc:	461a      	mov	r2, r3
 80077fe:	495a      	ldr	r1, [pc, #360]	; (8007968 <dhcpClientDumpConfig+0x1ec>)
 8007800:	f008 facc 	bl	800fd9c <fiprintf>
 8007804:	f7f9 fc00 	bl	8001008 <osResumeAllTasks>
   //Renewal time
   TRACE_INFO("  T1 = %" PRIu32 "s\r\n", context->t1);
 8007808:	f7f9 fbf3 	bl	8000ff2 <osSuspendAllTasks>
 800780c:	4b52      	ldr	r3, [pc, #328]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68d8      	ldr	r0, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007816:	461a      	mov	r2, r3
 8007818:	4954      	ldr	r1, [pc, #336]	; (800796c <dhcpClientDumpConfig+0x1f0>)
 800781a:	f008 fabf 	bl	800fd9c <fiprintf>
 800781e:	f7f9 fbf3 	bl	8001008 <osResumeAllTasks>
   //Rebinding time
   TRACE_INFO("  T2 = %" PRIu32 "s\r\n", context->t2);
 8007822:	f7f9 fbe6 	bl	8000ff2 <osSuspendAllTasks>
 8007826:	4b4c      	ldr	r3, [pc, #304]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68d8      	ldr	r0, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007830:	461a      	mov	r2, r3
 8007832:	494f      	ldr	r1, [pc, #316]	; (8007970 <dhcpClientDumpConfig+0x1f4>)
 8007834:	f008 fab2 	bl	800fd9c <fiprintf>
 8007838:	f7f9 fbe6 	bl	8001008 <osResumeAllTasks>

   //Host address
   TRACE_INFO("  IPv4 Address = %s\r\n",
 800783c:	f7f9 fbd9 	bl	8000ff2 <osSuspendAllTasks>
 8007840:	4b45      	ldr	r3, [pc, #276]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68dc      	ldr	r4, [r3, #12]
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3310      	adds	r3, #16
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2100      	movs	r1, #0
 800785a:	4618      	mov	r0, r3
 800785c:	f003 f800 	bl	800a860 <ipv4AddrToString>
 8007860:	4603      	mov	r3, r0
 8007862:	461a      	mov	r2, r3
 8007864:	4943      	ldr	r1, [pc, #268]	; (8007974 <dhcpClientDumpConfig+0x1f8>)
 8007866:	4620      	mov	r0, r4
 8007868:	f008 fa98 	bl	800fd9c <fiprintf>
 800786c:	f7f9 fbcc 	bl	8001008 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].addr, NULL));

   //Subnet mask
   TRACE_INFO("  Subnet Mask = %s\r\n",
 8007870:	f7f9 fbbf 	bl	8000ff2 <osSuspendAllTasks>
 8007874:	4b38      	ldr	r3, [pc, #224]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68dc      	ldr	r4, [r3, #12]
 800787a:	68f9      	ldr	r1, [r7, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	331c      	adds	r3, #28
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f002 ffe6 	bl	800a860 <ipv4AddrToString>
 8007894:	4603      	mov	r3, r0
 8007896:	461a      	mov	r2, r3
 8007898:	4937      	ldr	r1, [pc, #220]	; (8007978 <dhcpClientDumpConfig+0x1fc>)
 800789a:	4620      	mov	r0, r4
 800789c:	f008 fa7e 	bl	800fd9c <fiprintf>
 80078a0:	f7f9 fbb2 	bl	8001008 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].subnetMask, NULL));

   //Default gateway
   TRACE_INFO("  Default Gateway = %s\r\n",
 80078a4:	f7f9 fba5 	bl	8000ff2 <osSuspendAllTasks>
 80078a8:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68dc      	ldr	r4, [r3, #12]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3320      	adds	r3, #32
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2100      	movs	r1, #0
 80078c2:	4618      	mov	r0, r3
 80078c4:	f002 ffcc 	bl	800a860 <ipv4AddrToString>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	492b      	ldr	r1, [pc, #172]	; (800797c <dhcpClientDumpConfig+0x200>)
 80078ce:	4620      	mov	r0, r4
 80078d0:	f008 fa64 	bl	800fd9c <fiprintf>
 80078d4:	f7f9 fb98 	bl	8001008 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].defaultGateway, NULL));

   //DNS servers
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	e01b      	b.n	8007916 <dhcpClientDumpConfig+0x19a>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", j + 1,
 80078de:	f7f9 fb88 	bl	8000ff2 <osSuspendAllTasks>
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68dc      	ldr	r4, [r3, #12]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	1c5d      	adds	r5, r3, #1
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	3308      	adds	r3, #8
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f002 ffb0 	bl	800a860 <ipv4AddrToString>
 8007900:	4603      	mov	r3, r0
 8007902:	462a      	mov	r2, r5
 8007904:	491e      	ldr	r1, [pc, #120]	; (8007980 <dhcpClientDumpConfig+0x204>)
 8007906:	4620      	mov	r0, r4
 8007908:	f008 fa48 	bl	800fd9c <fiprintf>
 800790c:	f7f9 fb7c 	bl	8001008 <osResumeAllTasks>
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	3301      	adds	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d9e0      	bls.n	80078de <dhcpClientDumpConfig+0x162>
         ipv4AddrToString(ipv4Context->dnsServerList[j], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", interface->ipv4Context.linkMtu);
 800791c:	f7f9 fb69 	bl	8000ff2 <osSuspendAllTasks>
 8007920:	4b0d      	ldr	r3, [pc, #52]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68d8      	ldr	r0, [r3, #12]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800792c:	461a      	mov	r2, r3
 800792e:	4915      	ldr	r1, [pc, #84]	; (8007984 <dhcpClientDumpConfig+0x208>)
 8007930:	f008 fa34 	bl	800fd9c <fiprintf>
 8007934:	f7f9 fb68 	bl	8001008 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 8007938:	f7f9 fb5b 	bl	8000ff2 <osSuspendAllTasks>
 800793c:	4b06      	ldr	r3, [pc, #24]	; (8007958 <dhcpClientDumpConfig+0x1dc>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2202      	movs	r2, #2
 8007944:	2101      	movs	r1, #1
 8007946:	4805      	ldr	r0, [pc, #20]	; (800795c <dhcpClientDumpConfig+0x1e0>)
 8007948:	f008 fa9a 	bl	800fe80 <fwrite>
 800794c:	f7f9 fb5c 	bl	8001008 <osResumeAllTasks>
#endif
}
 8007950:	bf00      	nop
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bdb0      	pop	{r4, r5, r7, pc}
 8007958:	20000034 	.word	0x20000034
 800795c:	080114d0 	.word	0x080114d0
 8007960:	080114d4 	.word	0x080114d4
 8007964:	080114ec 	.word	0x080114ec
 8007968:	08011508 	.word	0x08011508
 800796c:	08011520 	.word	0x08011520
 8007970:	08011530 	.word	0x08011530
 8007974:	08011540 	.word	0x08011540
 8007978:	08011558 	.word	0x08011558
 800797c:	08011570 	.word	0x08011570
 8007980:	0801158c 	.word	0x0801158c
 8007984:	080115a4 	.word	0x080115a4

08007988 <dhcpAddOption>:
 * @return Error code
 **/

error_t dhcpAddOption(DhcpMessage *message, size_t *messageLen,
   uint8_t optionCode, const void *optionValue, size_t optionLen)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	71fb      	strb	r3, [r7, #7]
   size_t n;
   DhcpOption *option;

   //Check parameters
   if(message == NULL || messageLen == NULL)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <dhcpAddOption+0x1c>
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <dhcpAddOption+0x20>
      return ERROR_INVALID_PARAMETER;
 80079a4:	2302      	movs	r3, #2
 80079a6:	e04a      	b.n	8007a3e <dhcpAddOption+0xb6>

   //Check the length of the DHCP message
   if(*messageLen < (sizeof(DhcpMessage) + sizeof(uint8_t)))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2bf0      	cmp	r3, #240	; 0xf0
 80079ae:	d801      	bhi.n	80079b4 <dhcpAddOption+0x2c>
      return ERROR_INVALID_LENGTH;
 80079b0:	23ec      	movs	r3, #236	; 0xec
 80079b2:	e044      	b.n	8007a3e <dhcpAddOption+0xb6>

   //Check the length of the option
   if(optionLen > 0 && optionValue == NULL)
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <dhcpAddOption+0x3c>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <dhcpAddOption+0x3c>
      return ERROR_INVALID_PARAMETER;
 80079c0:	2302      	movs	r3, #2
 80079c2:	e03c      	b.n	8007a3e <dhcpAddOption+0xb6>

   if(optionLen > UINT8_MAX)
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	2bff      	cmp	r3, #255	; 0xff
 80079c8:	d901      	bls.n	80079ce <dhcpAddOption+0x46>
      return ERROR_INVALID_LENGTH;
 80079ca:	23ec      	movs	r3, #236	; 0xec
 80079cc:	e037      	b.n	8007a3e <dhcpAddOption+0xb6>

   //Ensure that the length of the resulting message will not exceed the
   //maximum DHCP message size
   if((*messageLen + sizeof(DhcpOption) + optionLen) > DHCP_MAX_MSG_SIZE)
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	4413      	add	r3, r2
 80079d6:	3302      	adds	r3, #2
 80079d8:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 80079dc:	d902      	bls.n	80079e4 <dhcpAddOption+0x5c>
      return ERROR_BUFFER_OVERFLOW;
 80079de:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80079e2:	e02c      	b.n	8007a3e <dhcpAddOption+0xb6>

   //Retrieve the total length of the options field, excluding the end option
   n = *messageLen - sizeof(DhcpMessage) - sizeof(uint8_t);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3bf1      	subs	r3, #241	; 0xf1
 80079ea:	617b      	str	r3, [r7, #20]

   //Point to the buffer where to format the option
   option = (DhcpOption *) (message->options + n);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4413      	add	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]

   //Set option code
   option->code = optionCode;
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	79fa      	ldrb	r2, [r7, #7]
 80079fc:	701a      	strb	r2, [r3, #0]
   //Set option length
   option->length = (uint8_t) optionLen;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	705a      	strb	r2, [r3, #1]
   //Copy option value
   osMemcpy(option->value, optionValue, optionLen);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3302      	adds	r3, #2
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f008 fa79 	bl	800ff06 <memcpy>

   //Determine the length of the options field
   n += sizeof(DhcpOption) + option->length;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3302      	adds	r3, #2
 8007a20:	617b      	str	r3, [r7, #20]

   //Always terminate the options field with 255
   message->options[n++] = DHCP_OPT_END;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	617a      	str	r2, [r7, #20]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0

   //Update the length of the DHCPv6 message
   *messageLen = sizeof(DhcpMessage) + n;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	601a      	str	r2, [r3, #0]

   //Successful processing
   return NO_ERROR;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <dhcpGetOption>:
 *   option is returned. Otherwise NULL pointer is returned
 **/

DhcpOption *dhcpGetOption(const DhcpMessage *message, size_t length,
   uint8_t optionCode)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b087      	sub	sp, #28
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	4613      	mov	r3, r2
 8007a52:	71fb      	strb	r3, [r7, #7]
   size_t i;
   DhcpOption *option;

   //Make sure the DHCP header is valid
   if(length >= sizeof(DhcpMessage))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2bef      	cmp	r3, #239	; 0xef
 8007a58:	d93c      	bls.n	8007ad4 <dhcpGetOption+0x8e>
   {
      //Get the length of the options field
      length -= sizeof(DhcpMessage);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3bf0      	subs	r3, #240	; 0xf0
 8007a5e:	60bb      	str	r3, [r7, #8]

      //Loop through the list of options
      for(i = 0; i < length; i++)
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	e02c      	b.n	8007ac0 <dhcpGetOption+0x7a>
      {
         //Point to the current option
         option = (DhcpOption *) (message->options + i);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f103 02f0 	add.w	r2, r3, #240	; 0xf0
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

         //Check option code
         if(option->code == DHCP_OPT_PAD)
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01f      	beq.n	8007aba <dhcpGetOption+0x74>
         {
            //The pad option can be used to cause subsequent fields to align
            //on word boundaries
         }
         else if(option->code == DHCP_OPT_END)
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	2bff      	cmp	r3, #255	; 0xff
 8007a80:	d023      	beq.n	8007aca <dhcpGetOption+0x84>
            break;
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	3301      	adds	r3, #1
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d920      	bls.n	8007ace <dhcpGetOption+0x88>
            {
               break;
            }

            //Check the length of the option
            if((i + sizeof(DhcpOption) + option->length) > length)
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	461a      	mov	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	4413      	add	r3, r2
 8007a96:	3302      	adds	r3, #2
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d319      	bcc.n	8007ad2 <dhcpGetOption+0x8c>
            {
               break;
            }

            //Matching option code?
            if(option->code == optionCode)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	79fa      	ldrb	r2, [r7, #7]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d101      	bne.n	8007aac <dhcpGetOption+0x66>
            {
               return option;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	e014      	b.n	8007ad6 <dhcpGetOption+0x90>
            }

            //Jump to the next option
            i += option->length + 1;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
      for(i = 0; i < length; i++)
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	3301      	adds	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3ce      	bcc.n	8007a66 <dhcpGetOption+0x20>
 8007ac8:	e004      	b.n	8007ad4 <dhcpGetOption+0x8e>
            break;
 8007aca:	bf00      	nop
 8007acc:	e002      	b.n	8007ad4 <dhcpGetOption+0x8e>
               break;
 8007ace:	bf00      	nop
 8007ad0:	e000      	b.n	8007ad4 <dhcpGetOption+0x8e>
               break;
 8007ad2:	bf00      	nop
         }
      }
   }

   //The specified option code does not exist
   return NULL;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
   //Initialize DNS cache
   osMemset(dnsCache, 0, sizeof(dnsCache));
 8007ae8:	f44f 7250 	mov.w	r2, #832	; 0x340
 8007aec:	2100      	movs	r1, #0
 8007aee:	4803      	ldr	r0, [pc, #12]	; (8007afc <dnsInit+0x18>)
 8007af0:	f008 fa31 	bl	800ff56 <memset>

   //Successful initialization
   return NO_ERROR;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	2000b304 	.word	0x2000b304

08007b00 <dnsFlushCache>:
 * @brief Flush DNS cache
 * @param[in] interface Underlying network interface
 **/

void dnsFlushCache(NetInterface *interface)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
   uint_t i;
   DnsCacheEntry *entry;

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	e015      	b.n	8007b3a <dnsFlushCache+0x3a>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2268      	movs	r2, #104	; 0x68
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <dnsFlushCache+0x4c>)
 8007b18:	4413      	add	r3, r2
 8007b1a:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != DNS_STATE_NONE)
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <dnsFlushCache+0x34>
      {
         //Delete DNS entries only for the given network interface
         if(entry->interface == interface)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d102      	bne.n	8007b34 <dnsFlushCache+0x34>
            dnsDeleteEntry(entry);
 8007b2e:	68b8      	ldr	r0, [r7, #8]
 8007b30:	f000 f80e 	bl	8007b50 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3301      	adds	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2b07      	cmp	r3, #7
 8007b3e:	d9e6      	bls.n	8007b0e <dnsFlushCache+0xe>
      }
   }
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	2000b304 	.word	0x2000b304

08007b50 <dnsDeleteEntry>:
 * @brief Delete the specified DNS cache entry
 * @param[in] entry Pointer to the DNS cache entry to be deleted
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
   //Make sure the specified entry is valid
   if(entry != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d012      	beq.n	8007b84 <dnsDeleteEntry+0x34>
   {
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //DNS resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	789b      	ldrb	r3, [r3, #2]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10b      	bne.n	8007b7e <dnsDeleteEntry+0x2e>
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d107      	bne.n	8007b7e <dnsDeleteEntry+0x2e>
         {
            //Unregister user callback
            udpDetachRxCallback(entry->interface, entry->port);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	899b      	ldrh	r3, [r3, #12]
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fe fe5f 	bl	800683c <udpDetachRxCallback>
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	701a      	strb	r2, [r3, #0]
   }
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 8007b92:	f7f9 fae6 	bl	8001162 <osGetSystemTime>
 8007b96:	6078      	str	r0, [r7, #4]

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	e079      	b.n	8007c92 <dnsTick+0x106>
   {
      //Point to the current entry
      entry = &dnsCache[i];
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2268      	movs	r2, #104	; 0x68
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	4a3f      	ldr	r2, [pc, #252]	; (8007ca4 <dnsTick+0x118>)
 8007ba8:	4413      	add	r3, r2
 8007baa:	603b      	str	r3, [r7, #0]

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d15b      	bne.n	8007c6c <dnsTick+0xe0>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	4413      	add	r3, r2
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	db62      	blt.n	8007c8c <dnsTick+0x100>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d025      	beq.n	8007c1a <dnsTick+0x8e>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d105      	bne.n	8007be2 <dnsTick+0x56>
               {
                  //Retransmit DNS query
                  error = dnsSendQuery(entry);
 8007bd6:	6838      	ldr	r0, [r7, #0]
 8007bd8:	f000 f866 	bl	8007ca8 <dnsSendQuery>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	81fb      	strh	r3, [r7, #14]
 8007be0:	e001      	b.n	8007be6 <dnsTick+0x5a>
               }
               else
#endif
               //Unknown protocol?
               {
                  error = ERROR_FAILURE;
 8007be2:	2301      	movs	r3, #1
 8007be4:	81fb      	strh	r3, [r7, #14]
               }

               //Query message successfully sent?
               if(!error)
 8007be6:	89fb      	ldrh	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d112      	bne.n	8007c12 <dnsTick+0x86>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	659a      	str	r2, [r3, #88]	; 0x58
                  //The timeout value is doubled for each subsequent retransmission
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	bf28      	it	cs
 8007c00:	461a      	movcs	r2, r3
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c0a:	1e5a      	subs	r2, r3, #1
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	665a      	str	r2, [r3, #100]	; 0x64
 8007c10:	e03c      	b.n	8007c8c <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8007c12:	6838      	ldr	r0, [r7, #0]
 8007c14:	f7ff ff9c 	bl	8007b50 <dnsDeleteEntry>
 8007c18:	e038      	b.n	8007c8c <dnsTick+0x100>
               }
            }
#if (DNS_CLIENT_SUPPORT == ENABLED)
            //DNS resolver?
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	789b      	ldrb	r3, [r3, #2]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d120      	bne.n	8007c64 <dnsTick+0xd8>
            {
               //Select the next DNS server
               entry->dnsServerIndex++;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	609a      	str	r2, [r3, #8]
               //Initialize retransmission counter
               entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2203      	movs	r2, #3
 8007c30:	665a      	str	r2, [r3, #100]	; 0x64
               //Send DNS query
               error = dnsSendQuery(entry);
 8007c32:	6838      	ldr	r0, [r7, #0]
 8007c34:	f000 f838 	bl	8007ca8 <dnsSendQuery>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	81fb      	strh	r3, [r7, #14]

               //DNS message successfully sent?
               if(!error)
 8007c3c:	89fb      	ldrh	r3, [r7, #14]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10c      	bne.n	8007c5c <dnsTick+0xd0>
               {
                  //Save the time at which the query message was sent
                  entry->timestamp = time;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	659a      	str	r2, [r3, #88]	; 0x58
                  //Set timeout value
                  entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c4e:	65da      	str	r2, [r3, #92]	; 0x5c
                  //Decrement retransmission counter
                  entry->retransmitCount--;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	665a      	str	r2, [r3, #100]	; 0x64
 8007c5a:	e017      	b.n	8007c8c <dnsTick+0x100>
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 8007c5c:	6838      	ldr	r0, [r7, #0]
 8007c5e:	f7ff ff77 	bl	8007b50 <dnsDeleteEntry>
 8007c62:	e013      	b.n	8007c8c <dnsTick+0x100>
            }
#endif
            else
            {
               //The maximum number of retransmissions has been exceeded
               dnsDeleteEntry(entry);
 8007c64:	6838      	ldr	r0, [r7, #0]
 8007c66:	f7ff ff73 	bl	8007b50 <dnsDeleteEntry>
 8007c6a:	e00f      	b.n	8007c8c <dnsTick+0x100>
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d10b      	bne.n	8007c8c <dnsTick+0x100>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7c:	4413      	add	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	db02      	blt.n	8007c8c <dnsTick+0x100>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8007c86:	6838      	ldr	r0, [r7, #0]
 8007c88:	f7ff ff62 	bl	8007b50 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b07      	cmp	r3, #7
 8007c96:	d982      	bls.n	8007b9e <dnsTick+0x12>
         }
      }
   }
}
 8007c98:	bf00      	nop
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000b304 	.word	0x2000b304

08007ca8 <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 8007ca8:	b5b0      	push	{r4, r5, r7, lr}
 8007caa:	b096      	sub	sp, #88	; 0x58
 8007cac:	af04      	add	r7, sp, #16
 8007cae:	6078      	str	r0, [r7, #4]
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d11e      	bne.n	8007cf6 <dnsSendQuery+0x4e>
   {
      //Point to the IPv4 context
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44

      //Select the relevant DNS server
      while(1)
      {
         //Out of range index?
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d902      	bls.n	8007cd0 <dnsSendQuery+0x28>
            return ERROR_NO_DNS_SERVER;
 8007cca:	f240 2325 	movw	r3, #549	; 0x225
 8007cce:	e0ce      	b.n	8007e6e <dnsSendQuery+0x1c6>

         //Copy the address of the DNS server
         destIpAddr.length = sizeof(Ipv4Addr);
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
         destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerIndex];
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cda:	3308      	adds	r3, #8
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28

         //Make sure the IP address is valid
         if(destIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR)
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <dnsSendQuery+0x52>
            break;

         //Select the next DNS server in the list
         entry->dnsServerIndex++;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	609a      	str	r2, [r3, #8]
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 8007cf4:	e7e5      	b.n	8007cc2 <dnsSendQuery+0x1a>
   else
#endif
   //Invalid host type?
   {
      //Report an error
      return ERROR_INVALID_PARAMETER;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e0b9      	b.n	8007e6e <dnsSendQuery+0x1c6>
            break;
 8007cfa:	bf00      	nop
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8007cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d00:	4619      	mov	r1, r3
 8007d02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007d06:	f7fe fcf4 	bl	80066f2 <udpAllocBuffer>
 8007d0a:	6438      	str	r0, [r7, #64]	; 0x40
   //Failed to allocate buffer?
   if(buffer == NULL)
 8007d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <dnsSendQuery+0x6e>
      return ERROR_OUT_OF_MEMORY;
 8007d12:	2364      	movs	r3, #100	; 0x64
 8007d14:	e0ab      	b.n	8007e6e <dnsSendQuery+0x1c6>

   //Point to the DNS header
   message = netBufferAt(buffer, offset);
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d1c:	f7fa fc8f 	bl	800263e <netBufferAt>
 8007d20:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Format DNS query message
   message->id = htons(entry->id);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	89db      	ldrh	r3, [r3, #14]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7f9 f899 	bl	8000e5e <swapInt16>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d32:	801a      	strh	r2, [r3, #0]
   message->qr = 0;
 8007d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d36:	7893      	ldrb	r3, [r2, #2]
 8007d38:	f36f 13c7 	bfc	r3, #7, #1
 8007d3c:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 8007d3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d40:	7893      	ldrb	r3, [r2, #2]
 8007d42:	f36f 03c6 	bfc	r3, #3, #4
 8007d46:	7093      	strb	r3, [r2, #2]
   message->aa = 0;
 8007d48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d4a:	7893      	ldrb	r3, [r2, #2]
 8007d4c:	f36f 0382 	bfc	r3, #2, #1
 8007d50:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 8007d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d54:	7893      	ldrb	r3, [r2, #2]
 8007d56:	f36f 0341 	bfc	r3, #1, #1
 8007d5a:	7093      	strb	r3, [r2, #2]
   message->rd = 1;
 8007d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d5e:	7893      	ldrb	r3, [r2, #2]
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	7093      	strb	r3, [r2, #2]
   message->ra = 0;
 8007d66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d68:	78d3      	ldrb	r3, [r2, #3]
 8007d6a:	f36f 13c7 	bfc	r3, #7, #1
 8007d6e:	70d3      	strb	r3, [r2, #3]
   message->z = 0;
 8007d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d72:	78d3      	ldrb	r3, [r2, #3]
 8007d74:	f36f 1306 	bfc	r3, #4, #3
 8007d78:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 8007d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d7c:	78d3      	ldrb	r3, [r2, #3]
 8007d7e:	f36f 0303 	bfc	r3, #0, #4
 8007d82:	70d3      	strb	r3, [r2, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 8007d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d86:	2200      	movs	r2, #0
 8007d88:	711a      	strb	r2, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f042 0201 	orr.w	r2, r2, #1
 8007d90:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 8007d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d94:	2200      	movs	r2, #0
 8007d96:	719a      	strb	r2, [r3, #6]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 8007d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9e:	2200      	movs	r2, #0
 8007da0:	721a      	strb	r2, [r3, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	2200      	movs	r2, #0
 8007daa:	729a      	strb	r2, [r3, #10]
 8007dac:	2200      	movs	r2, #0
 8007dae:	72da      	strb	r2, [r3, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);
 8007db0:	230c      	movs	r3, #12
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f103 0210 	add.w	r2, r3, #16
 8007dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dbc:	330c      	adds	r3, #12
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f000 f85f 	bl	8007e84 <dnsEncodeName>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dca:	4413      	add	r3, r2
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8007dce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	4413      	add	r3, r2
 8007dd4:	637b      	str	r3, [r7, #52]	; 0x34

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	785b      	ldrb	r3, [r3, #1]
 8007dda:	2b10      	cmp	r3, #16
 8007ddc:	d10d      	bne.n	8007dfa <dnsSendQuery+0x152>
   {
      //Fill in question structure
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	2200      	movs	r2, #0
 8007df0:	709a      	strb	r2, [r3, #2]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	70da      	strb	r2, [r3, #3]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8007e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e04:	4413      	add	r3, r2
 8007e06:	4619      	mov	r1, r3
 8007e08:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e0a:	f7fa fb72 	bl	80024f2 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 8007e0e:	f7f9 f8f0 	bl	8000ff2 <osSuspendAllTasks>
 8007e12:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <dnsSendQuery+0x1d0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e1a:	4918      	ldr	r1, [pc, #96]	; (8007e7c <dnsSendQuery+0x1d4>)
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f007 ffbd 	bl	800fd9c <fiprintf>
 8007e22:	f7f9 f8f1 	bl	8001008 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8007e26:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <dnsSendQuery+0x1d8>)
 8007e28:	f107 040c 	add.w	r4, r7, #12
 8007e2c:	461d      	mov	r5, r3
 8007e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e36:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send DNS query message
   error = udpSendBuffer(entry->interface, NULL, entry->port, &destIpAddr,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6858      	ldr	r0, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	8999      	ldrh	r1, [r3, #12]
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8007e48:	f107 020c 	add.w	r2, r7, #12
 8007e4c:	9203      	str	r2, [sp, #12]
 8007e4e:	9302      	str	r3, [sp, #8]
 8007e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	2335      	movs	r3, #53	; 0x35
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	4623      	mov	r3, r4
 8007e5a:	460a      	mov	r2, r1
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	f7fe fb9f 	bl	80065a0 <udpSendBuffer>
 8007e62:	4603      	mov	r3, r0
 8007e64:	867b      	strh	r3, [r7, #50]	; 0x32
      DNS_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8007e66:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e68:	f7fa fb12 	bl	8002490 <netBufferFree>
   //Return status code
   return error;
 8007e6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3748      	adds	r7, #72	; 0x48
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bdb0      	pop	{r4, r5, r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000034 	.word	0x20000034
 8007e7c:	08011680 	.word	0x08011680
 8007e80:	080117a0 	.word	0x080117a0

08007e84 <dnsEncodeName>:
 * @param[out] dest Pointer to the encoded domain name (optional parameter)
 * @return Length of the encoded domain name
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
   uint_t i = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
   size_t length = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60bb      	str	r3, [r7, #8]

   //Parse input name
   while(1)
   {
      //End of string detected?
      if(src[i] == '\0')
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d11b      	bne.n	8007eda <dnsEncodeName+0x56>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d002      	beq.n	8007eae <dnsEncodeName+0x2a>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b3f      	cmp	r3, #63	; 0x3f
 8007eac:	d901      	bls.n	8007eb2 <dnsEncodeName+0x2e>
            return 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e04d      	b.n	8007f4e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <dnsEncodeName+0x48>
         {
            dest[0] = i;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	701a      	strb	r2, [r3, #0]
            dest[i + 1] = 0;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3302      	adds	r3, #2
 8007ed4:	60bb      	str	r3, [r7, #8]

         //Stop parsing the input string
         return length;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	e039      	b.n	8007f4e <dnsEncodeName+0xca>
      }
      //Separator detected?
      else if(src[i] == '.')
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee4:	d123      	bne.n	8007f2e <dnsEncodeName+0xaa>
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d002      	beq.n	8007ef2 <dnsEncodeName+0x6e>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b3f      	cmp	r3, #63	; 0x3f
 8007ef0:	d901      	bls.n	8007ef6 <dnsEncodeName+0x72>
            return 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	e02b      	b.n	8007f4e <dnsEncodeName+0xca>

         //Save label length
         if(dest != NULL)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <dnsEncodeName+0x80>
            dest[0] = i;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	701a      	strb	r2, [r3, #0]

         //Adjust the length of the resulting string
         length += i + 1;
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4413      	add	r3, r2
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60bb      	str	r3, [r7, #8]

         //Advance write pointer
         if(dest != NULL)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d004      	beq.n	8007f1e <dnsEncodeName+0x9a>
            dest += i + 1;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	603b      	str	r3, [r7, #0]

         //Prepare to decode the next label
         src += i + 1;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	607b      	str	r3, [r7, #4]
         i = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e7b3      	b.n	8007e96 <dnsEncodeName+0x12>
      }
      //Any other character?
      else
      {
         //Copy current character
         if(dest != NULL)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d008      	beq.n	8007f46 <dnsEncodeName+0xc2>
            dest[i + 1] = src[i];
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	441a      	add	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	6839      	ldr	r1, [r7, #0]
 8007f40:	440b      	add	r3, r1
 8007f42:	7812      	ldrb	r2, [r2, #0]
 8007f44:	701a      	strb	r2, [r3, #0]

         //Point to the next character
         i++;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	60fb      	str	r3, [r7, #12]
      if(src[i] == '\0')
 8007f4c:	e7a3      	b.n	8007e96 <dnsEncodeName+0x12>
      }
   }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3714      	adds	r7, #20
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message,
   size_t length, size_t pos, char_t *dest, uint_t level)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b08a      	sub	sp, #40	; 0x28
 8007f5e:	af02      	add	r7, sp, #8
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	2b03      	cmp	r3, #3
 8007f6c:	d901      	bls.n	8007f72 <dnsParseName+0x18>
      return 0;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e08d      	b.n	800808e <dnsParseName+0x134>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 8007f76:	e084      	b.n	8008082 <dnsParseName+0x128>
   {
      //End marker found?
      if(src[pos] == 0)
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4413      	add	r3, r2
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d108      	bne.n	8007f96 <dnsParseName+0x3c>
      {
         //Properly terminate the string
         if(dest != NULL)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <dnsParseName+0x36>
            *dest = '\0';
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3301      	adds	r3, #1
 8007f94:	e07b      	b.n	800808e <dnsParseName+0x134>
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2bbf      	cmp	r3, #191	; 0xbf
 8007fa0:	d92a      	bls.n	8007ff8 <dnsParseName+0x9e>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d801      	bhi.n	8007fb0 <dnsParseName+0x56>
            return 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e06e      	b.n	800808e <dnsParseName+0x134>

         //Read the most significant byte of the pointer
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	021b      	lsls	r3, r3, #8
 8007fba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007fc2:	617b      	str	r3, [r7, #20]
         //Read the least significant byte of the pointer
         pointer |= src[pos + 1];
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	69fa      	ldr	r2, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]

         //Decode the remaining part of the domain name
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff ffb9 	bl	8007f5a <dnsParseName>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <dnsParseName+0x98>
         {
            //Domain name decoding failed
            return 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e04d      	b.n	800808e <dnsParseName+0x134>
         }

         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e04a      	b.n	800808e <dnsParseName+0x134>
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 8007ff8:	69fa      	ldr	r2, [r7, #28]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b3e      	cmp	r3, #62	; 0x3e
 8008002:	d836      	bhi.n	8008072 <dnsParseName+0x118>
      {
         //Get the length of the current label
         n = src[pos++];
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	4413      	add	r3, r2
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	61bb      	str	r3, [r7, #24]

         //Malformed DNS message?
         if((pos + n) > length)
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	4413      	add	r3, r2
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	429a      	cmp	r2, r3
 800801c:	d201      	bcs.n	8008022 <dnsParseName+0xc8>
            return 0;
 800801e:	2300      	movs	r3, #0
 8008020:	e035      	b.n	800808e <dnsParseName+0x134>

         //The last parameter is optional
         if(dest != NULL)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01f      	beq.n	8008068 <dnsParseName+0x10e>
         {
            //Copy current label
            osMemcpy(dest, src + pos, n);
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	4619      	mov	r1, r3
 8008032:	6838      	ldr	r0, [r7, #0]
 8008034:	f007 ff67 	bl	800ff06 <memcpy>

            //Advance read pointer
            pos += n;
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	4413      	add	r3, r2
 800803e:	607b      	str	r3, [r7, #4]
            //Advance write pointer
            dest += n;
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	4413      	add	r3, r2
 8008046:	603b      	str	r3, [r7, #0]

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	429a      	cmp	r2, r3
 800804e:	d218      	bcs.n	8008082 <dnsParseName+0x128>
 8008050:	69fa      	ldr	r2, [r7, #28]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4413      	add	r3, r2
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d012      	beq.n	8008082 <dnsParseName+0x128>
               *(dest++) = '.';
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	603a      	str	r2, [r7, #0]
 8008062:	222e      	movs	r2, #46	; 0x2e
 8008064:	701a      	strb	r2, [r3, #0]
 8008066:	e00c      	b.n	8008082 <dnsParseName+0x128>
         }
         else
         {
            //Advance read pointer
            pos += n;
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	4413      	add	r3, r2
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	e007      	b.n	8008082 <dnsParseName+0x128>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <dnsParseName+0x124>
            *dest = '\0';
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
         //Domain name decoding failed
         return 0;
 800807e:	2300      	movs	r3, #0
 8008080:	e005      	b.n	800808e <dnsParseName+0x134>
   while(pos < length)
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	f4ff af76 	bcc.w	8007f78 <dnsParseName+0x1e>
      }
   }

   //Domain name decoding failed
   return 0;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3720      	adds	r7, #32
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length,
   size_t pos, const char_t *name, uint_t level)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b08a      	sub	sp, #40	; 0x28
 800809a:	af02      	add	r7, sp, #8
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	607a      	str	r2, [r7, #4]
 80080a2:	603b      	str	r3, [r7, #0]
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d902      	bls.n	80080b0 <dnsCompareName+0x1a>
      return -2;
 80080aa:	f06f 0301 	mvn.w	r3, #1
 80080ae:	e076      	b.n	800819e <dnsCompareName+0x108>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	61fb      	str	r3, [r7, #28]

   //Parse encoded domain name
   while(pos < length)
 80080b4:	e06d      	b.n	8008192 <dnsCompareName+0xfc>
   {
      //Retrieve the length of the current label
      n = p[pos];
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4413      	add	r3, r2
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	61bb      	str	r3, [r7, #24]

      //End marker found?
      if(n == 0)
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d108      	bne.n	80080d8 <dnsCompareName+0x42>
      {
         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0')
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <dnsCompareName+0x3e>
            return -1;
 80080ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d2:	e064      	b.n	800819e <dnsCompareName+0x108>

         //The domain names match each other
         return 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e062      	b.n	800819e <dnsCompareName+0x108>
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	2bbf      	cmp	r3, #191	; 0xbf
 80080dc:	d925      	bls.n	800812a <dnsCompareName+0x94>
      {
         //Malformed DNS message?
         if((pos + 1) >= length)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3301      	adds	r3, #1
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d801      	bhi.n	80080ec <dnsCompareName+0x56>
            return FALSE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e058      	b.n	800819e <dnsCompareName+0x108>

         //Read the most significant byte of the pointer
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	021b      	lsls	r3, r3, #8
 80080f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80080fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80080fe:	613b      	str	r3, [r7, #16]
         //Read the least significant byte of the pointer
         pointer |= p[pos + 1];
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3301      	adds	r3, #1
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]

         //Compare the remaining part
         res = dnsCompareName(message, length, pointer, name, level + 1);
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	3301      	adds	r3, #1
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	693a      	ldr	r2, [r7, #16]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff ffb9 	bl	8008096 <dnsCompareName>
 8008124:	6178      	str	r0, [r7, #20]

         //Return comparison result
         return res;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	e039      	b.n	800819e <dnsCompareName+0x108>
      }
      else
      {
         //Advance data pointer
         pos++;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3301      	adds	r3, #1
 800812e:	607b      	str	r3, [r7, #4]

         //Malformed DNS message?
         if((pos + n) > length)
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	4413      	add	r3, r2
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	429a      	cmp	r2, r3
 800813a:	d202      	bcs.n	8008142 <dnsCompareName+0xac>
            return -2;
 800813c:	f06f 0301 	mvn.w	r3, #1
 8008140:	e02d      	b.n	800819e <dnsCompareName+0x108>

         //Compare current label
         res = osStrncasecmp((char_t *) p + pos, name, n);
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4413      	add	r3, r2
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	6839      	ldr	r1, [r7, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f008 fa17 	bl	8010580 <strncasecmp>
 8008152:	6178      	str	r0, [r7, #20]
         //Any mismatch?
         if(res)
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <dnsCompareName+0xc8>
            return res;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	e01f      	b.n	800819e <dnsCompareName+0x108>

         //Advance data pointer
         pos += n;
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	4413      	add	r3, r2
 8008164:	607b      	str	r3, [r7, #4]
         name += n;
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	4413      	add	r3, r2
 800816c:	603b      	str	r3, [r7, #0]

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <dnsCompareName+0xee>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b2e      	cmp	r3, #46	; 0x2e
 800817c:	d002      	beq.n	8008184 <dnsCompareName+0xee>
            return -1;
 800817e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008182:	e00c      	b.n	800819e <dnsCompareName+0x108>

         //Skip the separator character, if any
         if(*name == '.')
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b2e      	cmp	r3, #46	; 0x2e
 800818a:	d102      	bne.n	8008192 <dnsCompareName+0xfc>
            name++;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	3301      	adds	r3, #1
 8008190:	603b      	str	r3, [r7, #0]
   while(pos < length)
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d38d      	bcc.n	80080b6 <dnsCompareName+0x20>
      }
   }

   //Malformed DNS message
   return -2;
 800819a:	f06f 0301 	mvn.w	r3, #1
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <enc28j60Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60Init(NetInterface *interface)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
   uint8_t revisionId;
   Enc28j60Context *context;

   //Debug message
   TRACE_INFO("Initializing ENC28J60 Ethernet controller...\r\n");
 80081b0:	f7f8 ff1f 	bl	8000ff2 <osSuspendAllTasks>
 80081b4:	4ba4      	ldr	r3, [pc, #656]	; (8008448 <enc28j60Init+0x2a0>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	222e      	movs	r2, #46	; 0x2e
 80081bc:	2101      	movs	r1, #1
 80081be:	48a3      	ldr	r0, [pc, #652]	; (800844c <enc28j60Init+0x2a4>)
 80081c0:	f007 fe5e 	bl	800fe80 <fwrite>
 80081c4:	f7f8 ff20 	bl	8001008 <osResumeAllTasks>

   //Initialize SPI
   interface->spiDriver->init();
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4798      	blx	r3
   //Initialize external interrupt line
   interface->extIntDriver->init();
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4798      	blx	r3

   //Issue a system reset
   enc28j60SoftReset(interface);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fba6 	bl	800892a <enc28j60SoftReset>

   //After issuing the reset command, wait at least 1ms in firmware
   //for the device to be ready
   sleep(10);
 80081de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e002      	b.n	80081ec <enc28j60Init+0x44>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1f9      	bne.n	80081e6 <enc28j60Init+0x3e>

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3344      	adds	r3, #68	; 0x44
 80081f6:	617b      	str	r3, [r7, #20]

   //Initialize driver specific variables
   context->currentBank = UINT16_MAX;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081fe:	801a      	strh	r2, [r3, #0]
   context->nextPacket = ENC28J60_RX_BUFFER_START;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2200      	movs	r2, #0
 8008204:	805a      	strh	r2, [r3, #2]

   //Read silicon revision ID
   revisionId = enc28j60ReadReg(interface, ENC28J60_EREVID);
 8008206:	f240 3112 	movw	r1, #786	; 0x312
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fc14 	bl	8008a38 <enc28j60ReadReg>
 8008210:	4603      	mov	r3, r0
 8008212:	74fb      	strb	r3, [r7, #19]

   //Debug message
   TRACE_INFO("ENC28J60 revision ID: 0x%02X\r\n", revisionId);
 8008214:	f7f8 feed 	bl	8000ff2 <osSuspendAllTasks>
 8008218:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <enc28j60Init+0x2a0>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	7cfa      	ldrb	r2, [r7, #19]
 8008220:	498b      	ldr	r1, [pc, #556]	; (8008450 <enc28j60Init+0x2a8>)
 8008222:	4618      	mov	r0, r3
 8008224:	f007 fdba 	bl	800fd9c <fiprintf>
 8008228:	f7f8 feee 	bl	8001008 <osResumeAllTasks>

   //Disable CLKOUT output
   enc28j60WriteReg(interface, ENC28J60_ECOCON, ENC28J60_ECOCON_COCON_DISABLED);
 800822c:	2200      	movs	r2, #0
 800822e:	f240 3115 	movw	r1, #789	; 0x315
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fbd3 	bl	80089de <enc28j60WriteReg>

   //Set the MAC address of the station
   enc28j60WriteReg(interface, ENC28J60_MAADR5, interface->macAddr.b[0]);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 800823e:	461a      	mov	r2, r3
 8008240:	f241 3104 	movw	r1, #4868	; 0x1304
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fbca 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR4, interface->macAddr.b[1]);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8008250:	461a      	mov	r2, r3
 8008252:	f241 3105 	movw	r1, #4869	; 0x1305
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fbc1 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR3, interface->macAddr.b[2]);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
 8008262:	461a      	mov	r2, r3
 8008264:	f241 3102 	movw	r1, #4866	; 0x1302
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fbb8 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR2, interface->macAddr.b[3]);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 30cf 	ldrb.w	r3, [r3, #207]	; 0xcf
 8008274:	461a      	mov	r2, r3
 8008276:	f241 3103 	movw	r1, #4867	; 0x1303
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fbaf 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR1, interface->macAddr.b[4]);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8008286:	461a      	mov	r2, r3
 8008288:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fba6 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAADR0, interface->macAddr.b[5]);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 8008298:	461a      	mov	r2, r3
 800829a:	f241 3101 	movw	r1, #4865	; 0x1301
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb9d 	bl	80089de <enc28j60WriteReg>

   //Set receive buffer location
   enc28j60WriteReg(interface, ENC28J60_ERXSTL, LSB(ENC28J60_RX_BUFFER_START));
 80082a4:	2200      	movs	r2, #0
 80082a6:	2108      	movs	r1, #8
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fb98 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXSTH, MSB(ENC28J60_RX_BUFFER_START));
 80082ae:	2200      	movs	r2, #0
 80082b0:	2109      	movs	r1, #9
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fb93 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXNDL, LSB(ENC28J60_RX_BUFFER_STOP));
 80082b8:	22ff      	movs	r2, #255	; 0xff
 80082ba:	210a      	movs	r1, #10
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb8e 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXNDH, MSB(ENC28J60_RX_BUFFER_STOP));
 80082c2:	2217      	movs	r2, #23
 80082c4:	210b      	movs	r1, #11
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fb89 	bl	80089de <enc28j60WriteReg>

   //The ERXRDPT register defines a location within the FIFO where the receive
   //hardware is forbidden to write to
   enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));
 80082cc:	22ff      	movs	r2, #255	; 0xff
 80082ce:	210c      	movs	r1, #12
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fb84 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));
 80082d6:	2217      	movs	r2, #23
 80082d8:	210d      	movs	r1, #13
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fb7f 	bl	80089de <enc28j60WriteReg>

   //Configure the receive filters
   enc28j60WriteReg(interface, ENC28J60_ERXFCON, ENC28J60_ERXFCON_UCEN |
 80082e0:	22a5      	movs	r2, #165	; 0xa5
 80082e2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fb79 	bl	80089de <enc28j60WriteReg>
      ENC28J60_ERXFCON_CRCEN | ENC28J60_ERXFCON_HTEN | ENC28J60_ERXFCON_BCEN);

   //Initialize the hash table
   enc28j60WriteReg(interface, ENC28J60_EHT0, 0x00);
 80082ec:	2200      	movs	r2, #0
 80082ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fb73 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT1, 0x00);
 80082f8:	2200      	movs	r2, #0
 80082fa:	f240 1101 	movw	r1, #257	; 0x101
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fb6d 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT2, 0x00);
 8008304:	2200      	movs	r2, #0
 8008306:	f44f 7181 	mov.w	r1, #258	; 0x102
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fb67 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT3, 0x00);
 8008310:	2200      	movs	r2, #0
 8008312:	f240 1103 	movw	r1, #259	; 0x103
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fb61 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT4, 0x00);
 800831c:	2200      	movs	r2, #0
 800831e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fb5b 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT5, 0x00);
 8008328:	2200      	movs	r2, #0
 800832a:	f240 1105 	movw	r1, #261	; 0x105
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fb55 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT6, 0x00);
 8008334:	2200      	movs	r2, #0
 8008336:	f44f 7183 	mov.w	r1, #262	; 0x106
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fb4f 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT7, 0x00);
 8008340:	2200      	movs	r2, #0
 8008342:	f240 1107 	movw	r1, #263	; 0x107
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fb49 	bl	80089de <enc28j60WriteReg>

   //Pull the MAC out of reset
   enc28j60WriteReg(interface, ENC28J60_MACON2, 0x00);
 800834c:	2200      	movs	r2, #0
 800834e:	f241 2101 	movw	r1, #4609	; 0x1201
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb43 	bl	80089de <enc28j60WriteReg>

   //Enable the MAC to receive frames
   enc28j60WriteReg(interface, ENC28J60_MACON1, ENC28J60_MACON1_TXPAUS |
 8008358:	220d      	movs	r2, #13
 800835a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fb3d 	bl	80089de <enc28j60WriteReg>
      ENC28J60_MACON1_RXPAUS | ENC28J60_MACON1_MARXEN);

   //Enable automatic padding, always append a valid CRC and check frame
   //length. MAC can operate in half-duplex or full-duplex mode
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WriteReg(interface, ENC28J60_MACON3, ENC28J60_MACON3_PADCFG_AUTO |
 8008364:	22b3      	movs	r2, #179	; 0xb3
 8008366:	f241 2102 	movw	r1, #4610	; 0x1202
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb37 	bl	80089de <enc28j60WriteReg>
      ENC28J60_MACON3_TXCRCEN | ENC28J60_MACON3_FRMLNEN);
#endif

   //When the medium is occupied, the MAC will wait indefinitely for it to
   //become free when attempting to transmit
   enc28j60WriteReg(interface, ENC28J60_MACON4, ENC28J60_MACON4_DEFER);
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	f241 2103 	movw	r1, #4611	; 0x1203
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 fb31 	bl	80089de <enc28j60WriteReg>

   //Maximum frame length that can be received or transmitted
   enc28j60WriteReg(interface, ENC28J60_MAMXFLL, LSB(ENC28J60_ETH_RX_BUFFER_SIZE));
 800837c:	2200      	movs	r2, #0
 800837e:	f241 210a 	movw	r1, #4618	; 0x120a
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb2b 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAMXFLH, MSB(ENC28J60_ETH_RX_BUFFER_SIZE));
 8008388:	2206      	movs	r2, #6
 800838a:	f241 210b 	movw	r1, #4619	; 0x120b
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fb25 	bl	80089de <enc28j60WriteReg>

   //Configure the back-to-back inter-packet gap register
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WriteReg(interface, ENC28J60_MABBIPG, ENC28J60_MABBIPG_DEFAULT_FD);
 8008394:	2215      	movs	r2, #21
 8008396:	f241 2104 	movw	r1, #4612	; 0x1204
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fb1f 	bl	80089de <enc28j60WriteReg>
#else
   enc28j60WriteReg(interface, ENC28J60_MABBIPG, ENC28J60_MABBIPG_DEFAULT_HD);
#endif

   //Configure the non-back-to-back inter-packet gap register
   enc28j60WriteReg(interface, ENC28J60_MAIPGL, ENC28J60_MAIPGL_DEFAULT);
 80083a0:	2212      	movs	r2, #18
 80083a2:	f241 2106 	movw	r1, #4614	; 0x1206
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fb19 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_MAIPGH, ENC28J60_MAIPGH_DEFAULT);
 80083ac:	220c      	movs	r2, #12
 80083ae:	f241 2107 	movw	r1, #4615	; 0x1207
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fb13 	bl	80089de <enc28j60WriteReg>

   //Collision window register
   enc28j60WriteReg(interface, ENC28J60_MACLCON2,
 80083b8:	2237      	movs	r2, #55	; 0x37
 80083ba:	f241 2109 	movw	r1, #4617	; 0x1209
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb0d 	bl	80089de <enc28j60WriteReg>
      ENC28J60_MACLCON2_COLWIN_DEFAULT);

   //Set the PHY to the proper duplex mode
#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
   enc28j60WritePhyReg(interface, ENC28J60_PHCON1, ENC28J60_PHCON1_PDPXMD);
 80083c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb67 	bl	8008aa0 <enc28j60WritePhyReg>
#else
   enc28j60WritePhyReg(interface, ENC28J60_PHCON1, 0x0000);
#endif

   //Disable half-duplex loopback in PHY
   enc28j60WritePhyReg(interface, ENC28J60_PHCON2, ENC28J60_PHCON2_HDLDIS);
 80083d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d6:	f243 0110 	movw	r1, #12304	; 0x3010
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fb60 	bl	8008aa0 <enc28j60WritePhyReg>

   //LEDA displays link status and LEDB displays TX/RX activity
   enc28j60WritePhyReg(interface, ENC28J60_PHLCON,
 80083e0:	f240 4272 	movw	r2, #1138	; 0x472
 80083e4:	f243 0114 	movw	r1, #12308	; 0x3014
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb59 	bl	8008aa0 <enc28j60WritePhyReg>
      ENC28J60_PHLCON_LACFG_LINK | ENC28J60_PHLCON_LBCFG_TX_RX |
      ENC28J60_PHLCON_LFRQ_40_MS | ENC28J60_PHLCON_STRCH);

   //Clear interrupt flags
   enc28j60WriteReg(interface, ENC28J60_EIR, 0x00);
 80083ee:	2200      	movs	r2, #0
 80083f0:	211c      	movs	r1, #28
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 faf3 	bl	80089de <enc28j60WriteReg>

   //Configure interrupts as desired
   enc28j60WriteReg(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE |
 80083f8:	22da      	movs	r2, #218	; 0xda
 80083fa:	211b      	movs	r1, #27
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 faee 	bl	80089de <enc28j60WriteReg>
      ENC28J60_EIE_PKTIE | ENC28J60_EIE_LINKIE | ENC28J60_EIE_TXIE |
      ENC28J60_EIE_TXERIE);

   //Configure PHY interrupts as desired
   enc28j60WritePhyReg(interface, ENC28J60_PHIE, ENC28J60_PHIE_PLNKIE |
 8008402:	2212      	movs	r2, #18
 8008404:	f243 0112 	movw	r1, #12306	; 0x3012
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fb49 	bl	8008aa0 <enc28j60WritePhyReg>
      ENC28J60_PHIE_PGEIE);

   //Set RXEN to enable reception
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_RXEN);
 800840e:	2204      	movs	r2, #4
 8008410:	211f      	movs	r1, #31
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fc48 	bl	8008ca8 <enc28j60SetBit>

   //Dump registers for debugging purpose
   enc28j60DumpReg(interface);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fcd5 	bl	8008dc8 <enc28j60DumpReg>
   enc28j60DumpPhyReg(interface);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fcdc 	bl	8008ddc <enc28j60DumpPhyReg>

   //Accept any packets from the upper layer
   osSetEvent(&interface->nicTxEvent);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3354      	adds	r3, #84	; 0x54
 8008428:	4618      	mov	r0, r3
 800842a:	f7f8 fe24 	bl	8001076 <osSetEvent>

   //Force the TCP/IP stack to poll the link state at startup
   interface->nicEvent = TRUE;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   //Notify the TCP/IP stack of the event
   osSetEvent(&netEvent);
 8008436:	4807      	ldr	r0, [pc, #28]	; (8008454 <enc28j60Init+0x2ac>)
 8008438:	f7f8 fe1d 	bl	8001076 <osSetEvent>

   //Successful initialization
   return NO_ERROR;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000034 	.word	0x20000034
 800844c:	080116cc 	.word	0x080116cc
 8008450:	080116fc 	.word	0x080116fc
 8008454:	200091b4 	.word	0x200091b4

08008458 <enc28j60Tick>:
 * @brief ENC28J60 timer handler
 * @param[in] interface Underlying network interface
 **/

void enc28j60Tick(NetInterface *interface)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <enc28j60EnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void enc28j60EnableIrq(NetInterface *interface)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
   //Enable interrupts
   interface->extIntDriver->enableIrq();
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4798      	blx	r3
}
 800847c:	bf00      	nop
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <enc28j60DisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void enc28j60DisableIrq(NetInterface *interface)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
   //Disable interrupts
   interface->extIntDriver->disableIrq();
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	4798      	blx	r3
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <enc28j60IrqHandler>:
 * @param[in] interface Underlying network interface
 * @return TRUE if a higher priority task must be woken. Else FALSE is returned
 **/

bool_t enc28j60IrqHandler(NetInterface *interface)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
   bool_t flag;
   uint8_t status;

   //This flag will be set if a higher priority task must be woken
   flag = FALSE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	60fb      	str	r3, [r7, #12]

   //Clear the INTIE bit, immediately after an interrupt event
   enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE);
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	211b      	movs	r1, #27
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc24 	bl	8008cfa <enc28j60ClearBit>

   //Read interrupt status register
   status = enc28j60ReadReg(interface, ENC28J60_EIR);
 80084b2:	211c      	movs	r1, #28
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 fabf 	bl	8008a38 <enc28j60ReadReg>
 80084ba:	4603      	mov	r3, r0
 80084bc:	72fb      	strb	r3, [r7, #11]

   //Link status change?
   if((status & ENC28J60_EIR_LINKIF) != 0)
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00f      	beq.n	80084e8 <enc28j60IrqHandler+0x4c>
   {
      //Disable LINKIE interrupt
      enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_LINKIE);
 80084c8:	2210      	movs	r2, #16
 80084ca:	211b      	movs	r1, #27
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fc14 	bl	8008cfa <enc28j60ClearBit>

      //Set event flag
      interface->nicEvent = TRUE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Notify the TCP/IP stack of the event
      flag |= osSetEventFromIsr(&netEvent);
 80084da:	481e      	ldr	r0, [pc, #120]	; (8008554 <enc28j60IrqHandler+0xb8>)
 80084dc:	f7f8 fdf8 	bl	80010d0 <osSetEventFromIsr>
 80084e0:	4602      	mov	r2, r0
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	60fb      	str	r3, [r7, #12]
   }

   //Packet received?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 80084e8:	f240 1119 	movw	r1, #281	; 0x119
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 faa3 	bl	8008a38 <enc28j60ReadReg>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00f      	beq.n	8008518 <enc28j60IrqHandler+0x7c>
   {
      //Disable PKTIE interrupt
      enc28j60ClearBit(interface, ENC28J60_EIE, ENC28J60_EIE_PKTIE);
 80084f8:	2240      	movs	r2, #64	; 0x40
 80084fa:	211b      	movs	r1, #27
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fbfc 	bl	8008cfa <enc28j60ClearBit>

      //Set event flag
      interface->nicEvent = TRUE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      //Notify the TCP/IP stack of the event
      flag |= osSetEventFromIsr(&netEvent);
 800850a:	4812      	ldr	r0, [pc, #72]	; (8008554 <enc28j60IrqHandler+0xb8>)
 800850c:	f7f8 fde0 	bl	80010d0 <osSetEventFromIsr>
 8008510:	4602      	mov	r2, r0
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
   }

   //Packet transmission complete?
   if((status & (ENC28J60_EIR_TXIF | ENC28J60_EIE_TXERIE)) != 0)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	f003 030a 	and.w	r3, r3, #10
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00d      	beq.n	800853e <enc28j60IrqHandler+0xa2>
   {
      //Clear interrupt flags
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_TXIF |
 8008522:	220a      	movs	r2, #10
 8008524:	211c      	movs	r1, #28
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fbe7 	bl	8008cfa <enc28j60ClearBit>
         ENC28J60_EIE_TXERIE);

      //Notify the TCP/IP stack that the transmitter is ready to send
      flag |= osSetEventFromIsr(&interface->nicTxEvent);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3354      	adds	r3, #84	; 0x54
 8008530:	4618      	mov	r0, r3
 8008532:	f7f8 fdcd 	bl	80010d0 <osSetEventFromIsr>
 8008536:	4602      	mov	r2, r0
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
   }

   //Once the interrupt has been serviced, the INTIE bit is set again to
   //re-enable interrupts
   enc28j60SetBit(interface, ENC28J60_EIE, ENC28J60_EIE_INTIE);
 800853e:	2280      	movs	r2, #128	; 0x80
 8008540:	211b      	movs	r1, #27
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fbb0 	bl	8008ca8 <enc28j60SetBit>

   //A higher priority task must be woken?
   return flag;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	200091b4 	.word	0x200091b4

08008558 <enc28j60EventHandler>:
 * @brief ENC28J60 event handler
 * @param[in] interface Underlying network interface
 **/

void enc28j60EventHandler(NetInterface *interface)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
   error_t error;
   uint16_t status;
   uint16_t value;

   //Read interrupt status register
   status = enc28j60ReadReg(interface, ENC28J60_EIR);
 8008560:	211c      	movs	r1, #28
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 fa68 	bl	8008a38 <enc28j60ReadReg>
 8008568:	4603      	mov	r3, r0
 800856a:	81fb      	strh	r3, [r7, #14]

   //Check whether the link state has changed
   if((status & ENC28J60_EIR_LINKIF) != 0)
 800856c:	89fb      	ldrh	r3, [r7, #14]
 800856e:	f003 0310 	and.w	r3, r3, #16
 8008572:	2b00      	cmp	r3, #0
 8008574:	d029      	beq.n	80085ca <enc28j60EventHandler+0x72>
   {
      //Clear PHY interrupts flags
      enc28j60ReadPhyReg(interface, ENC28J60_PHIR);
 8008576:	f243 0113 	movw	r1, #12307	; 0x3013
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 fac5 	bl	8008b0a <enc28j60ReadPhyReg>
      //Clear interrupt flag
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_LINKIF);
 8008580:	2210      	movs	r2, #16
 8008582:	211c      	movs	r1, #28
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fbb8 	bl	8008cfa <enc28j60ClearBit>
      //Read PHY status register
      value = enc28j60ReadPhyReg(interface, ENC28J60_PHSTAT2);
 800858a:	f243 0111 	movw	r1, #12305	; 0x3011
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fabb 	bl	8008b0a <enc28j60ReadPhyReg>
 8008594:	4603      	mov	r3, r0
 8008596:	81bb      	strh	r3, [r7, #12]

      //Check link state
      if((value & ENC28J60_PHSTAT2_LSTAT) != 0)
 8008598:	89bb      	ldrh	r3, [r7, #12]
 800859a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <enc28j60EventHandler+0x64>
      {
         //Link speed
         interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a19      	ldr	r2, [pc, #100]	; (800860c <enc28j60EventHandler+0xb4>)
 80085a6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

#if (ENC28J60_FULL_DUPLEX_SUPPORT == ENABLED)
         //Full-duplex mode
         interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
#else
         //Half-duplex mode
         interface->duplexMode = NIC_HALF_DUPLEX_MODE;
#endif
         //Link is up
         interface->linkState = TRUE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80085ba:	e003      	b.n	80085c4 <enc28j60EventHandler+0x6c>
      }
      else
      {
         //Link is down
         interface->linkState = FALSE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      }

      //Process link state change event
      nicNotifyLinkChange(interface);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f7fa ff91 	bl	80034ec <nicNotifyLinkChange>
   }

   //Check whether a packet has been received?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 80085ca:	f240 1119 	movw	r1, #281	; 0x119
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa32 	bl	8008a38 <enc28j60ReadReg>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <enc28j60EventHandler+0xa0>
   {
      //Clear interrupt flag
      enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_PKTIF);
 80085da:	2240      	movs	r2, #64	; 0x40
 80085dc:	211c      	movs	r1, #28
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fb8b 	bl	8008cfa <enc28j60ClearBit>

      //Process all pending packets
      do
      {
         //Read incoming packet
         error = enc28j60ReceivePacket(interface);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 f87b 	bl	80086e0 <enc28j60ReceivePacket>
 80085ea:	4603      	mov	r3, r0
 80085ec:	817b      	strh	r3, [r7, #10]

         //No more data in the receive buffer?
      } while(error != ERROR_BUFFER_EMPTY);
 80085ee:	897b      	ldrh	r3, [r7, #10]
 80085f0:	f240 1209 	movw	r2, #265	; 0x109
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d1f5      	bne.n	80085e4 <enc28j60EventHandler+0x8c>
   }

   //Re-enable LINKIE and PKTIE interrupts
   enc28j60SetBit(interface, ENC28J60_EIE, ENC28J60_EIE_LINKIE |
 80085f8:	2250      	movs	r2, #80	; 0x50
 80085fa:	211b      	movs	r1, #27
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fb53 	bl	8008ca8 <enc28j60SetBit>
      ENC28J60_EIE_PKTIE);
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	00989680 	.word	0x00989680

08008610 <enc28j60SendPacket>:
 * @return Error code
 **/

error_t enc28j60SendPacket(NetInterface *interface,
   const NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
   size_t length;

   //Retrieve the length of the packet
   length = netBufferGetLength(buffer) - offset;
 800861e:	68b8      	ldr	r0, [r7, #8]
 8008620:	f7f9 ff45 	bl	80024ae <netBufferGetLength>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	617b      	str	r3, [r7, #20]

   //Check the frame length
   if(length > 1536)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008632:	d906      	bls.n	8008642 <enc28j60SendPacket+0x32>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3354      	adds	r3, #84	; 0x54
 8008638:	4618      	mov	r0, r3
 800863a:	f7f8 fd1c 	bl	8001076 <osSetEvent>
      //Report an error
      return ERROR_INVALID_LENGTH;
 800863e:	23ec      	movs	r3, #236	; 0xec
 8008640:	e04a      	b.n	80086d8 <enc28j60SendPacket+0xc8>
   }

   //Make sure the link is up before transmitting the frame
   if(!interface->linkState)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d106      	bne.n	800865a <enc28j60SendPacket+0x4a>
   {
      //The transmitter can accept another packet
      osSetEvent(&interface->nicTxEvent);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3354      	adds	r3, #84	; 0x54
 8008650:	4618      	mov	r0, r3
 8008652:	f7f8 fd10 	bl	8001076 <osSetEvent>
      //Drop current packet
      return NO_ERROR;
 8008656:	2300      	movs	r3, #0
 8008658:	e03e      	b.n	80086d8 <enc28j60SendPacket+0xc8>
   }

   //It is recommended to reset the transmit logic before
   //attempting to transmit a packet
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST);
 800865a:	2280      	movs	r2, #128	; 0x80
 800865c:	211f      	movs	r1, #31
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fb22 	bl	8008ca8 <enc28j60SetBit>
   enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST);
 8008664:	2280      	movs	r2, #128	; 0x80
 8008666:	211f      	movs	r1, #31
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 fb46 	bl	8008cfa <enc28j60ClearBit>

   //Interrupt flags should be cleared after the reset is completed
   enc28j60ClearBit(interface, ENC28J60_EIR, ENC28J60_EIR_TXIF |
 800866e:	220a      	movs	r2, #10
 8008670:	211c      	movs	r1, #28
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 fb41 	bl	8008cfa <enc28j60ClearBit>
      ENC28J60_EIR_TXERIF);

   //Set transmit buffer location
   enc28j60WriteReg(interface, ENC28J60_ETXSTL, LSB(ENC28J60_TX_BUFFER_START));
 8008678:	2200      	movs	r2, #0
 800867a:	2104      	movs	r1, #4
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f9ae 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ETXSTH, MSB(ENC28J60_TX_BUFFER_START));
 8008682:	2218      	movs	r2, #24
 8008684:	2105      	movs	r1, #5
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f9a9 	bl	80089de <enc28j60WriteReg>

   //Point to start of transmit buffer
   enc28j60WriteReg(interface, ENC28J60_EWRPTL, LSB(ENC28J60_TX_BUFFER_START));
 800868c:	2200      	movs	r2, #0
 800868e:	2102      	movs	r1, #2
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f000 f9a4 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EWRPTH, MSB(ENC28J60_TX_BUFFER_START));
 8008696:	2218      	movs	r2, #24
 8008698:	2103      	movs	r1, #3
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 f99f 	bl	80089de <enc28j60WriteReg>

   //Copy the data to the transmit buffer
   enc28j60WriteBuffer(interface, buffer, offset);
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68b9      	ldr	r1, [r7, #8]
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 fa71 	bl	8008b8c <enc28j60WriteBuffer>

   //ETXND should point to the last byte in the data payload
   enc28j60WriteReg(interface, ENC28J60_ETXNDL, LSB(ENC28J60_TX_BUFFER_START + length));
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	2106      	movs	r1, #6
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f993 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_ETXNDH, MSB(ENC28J60_TX_BUFFER_START + length));
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	2107      	movs	r1, #7
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f989 	bl	80089de <enc28j60WriteReg>

   //Start transmission
   enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS);
 80086cc:	2208      	movs	r2, #8
 80086ce:	211f      	movs	r1, #31
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fae9 	bl	8008ca8 <enc28j60SetBit>

   //Successful processing
   return NO_ERROR;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <enc28j60ReceivePacket>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60ReceivePacket(NetInterface *interface)
{
 80086e0:	b590      	push	{r4, r7, lr}
 80086e2:	b08b      	sub	sp, #44	; 0x2c
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
   uint16_t status;
   uint8_t header[6];
   Enc28j60Context *context;

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3344      	adds	r3, #68	; 0x44
 80086ec:	623b      	str	r3, [r7, #32]

   //Any packet pending in the receive buffer?
   if(enc28j60ReadReg(interface, ENC28J60_EPKTCNT) != 0)
 80086ee:	f240 1119 	movw	r1, #281	; 0x119
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9a0 	bl	8008a38 <enc28j60ReadReg>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d073      	beq.n	80087e6 <enc28j60ReceivePacket+0x106>
   {
      //Point to the start of the received packet
      enc28j60WriteReg(interface, ENC28J60_ERDPTL, LSB(context->nextPacket));
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	885b      	ldrh	r3, [r3, #2]
 8008702:	b2db      	uxtb	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	2100      	movs	r1, #0
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 f968 	bl	80089de <enc28j60WriteReg>
      enc28j60WriteReg(interface, ENC28J60_ERDPTH, MSB(context->nextPacket));
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	885b      	ldrh	r3, [r3, #2]
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	b29b      	uxth	r3, r3
 8008716:	b2db      	uxtb	r3, r3
 8008718:	461a      	mov	r2, r3
 800871a:	2101      	movs	r1, #1
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f95e 	bl	80089de <enc28j60WriteReg>

      //The packet is preceded by a 6-byte header
      enc28j60ReadBuffer(interface, header, sizeof(header));
 8008722:	f107 0318 	add.w	r3, r7, #24
 8008726:	2206      	movs	r2, #6
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa91 	bl	8008c52 <enc28j60ReadBuffer>

      //The first two bytes are the address of the next packet
      context->nextPacket = LOAD16LE(header);
 8008730:	7e3b      	ldrb	r3, [r7, #24]
 8008732:	b21a      	sxth	r2, r3
 8008734:	7e7b      	ldrb	r3, [r7, #25]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	b21b      	sxth	r3, r3
 800873a:	4313      	orrs	r3, r2
 800873c:	b21b      	sxth	r3, r3
 800873e:	b29a      	uxth	r2, r3
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	805a      	strh	r2, [r3, #2]
      //Get the length of the received packet
      length = LOAD16LE(header + 2);
 8008744:	7ebb      	ldrb	r3, [r7, #26]
 8008746:	b21a      	sxth	r2, r3
 8008748:	7efb      	ldrb	r3, [r7, #27]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	b21b      	sxth	r3, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	b21b      	sxth	r3, r3
 8008752:	84bb      	strh	r3, [r7, #36]	; 0x24
      //Get the receive status vector (RSV)
      status = LOAD16LE(header + 4);
 8008754:	7f3b      	ldrb	r3, [r7, #28]
 8008756:	b21a      	sxth	r2, r3
 8008758:	7f7b      	ldrb	r3, [r7, #29]
 800875a:	021b      	lsls	r3, r3, #8
 800875c:	b21b      	sxth	r3, r3
 800875e:	4313      	orrs	r3, r2
 8008760:	b21b      	sxth	r3, r3
 8008762:	83fb      	strh	r3, [r7, #30]

      //Make sure no error occurred
      if((status & ENC28J60_RSV_RECEIVED_OK) != 0)
 8008764:	8bfb      	ldrh	r3, [r7, #30]
 8008766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00f      	beq.n	800878e <enc28j60ReceivePacket+0xae>
      {
         //Limit the number of data to read
         length = MIN(length, ENC28J60_ETH_RX_BUFFER_SIZE);
 800876e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008770:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008774:	bf28      	it	cs
 8008776:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
 800877a:	84bb      	strh	r3, [r7, #36]	; 0x24
         //Read the Ethernet frame
         enc28j60ReadBuffer(interface, temp, length);
 800877c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800877e:	461a      	mov	r2, r3
 8008780:	4927      	ldr	r1, [pc, #156]	; (8008820 <enc28j60ReceivePacket+0x140>)
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fa65 	bl	8008c52 <enc28j60ReadBuffer>
         //Valid packet received
         error = NO_ERROR;
 8008788:	2300      	movs	r3, #0
 800878a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800878c:	e002      	b.n	8008794 <enc28j60ReceivePacket+0xb4>
      }
      else
      {
         //The received packet contains an error
         error = ERROR_INVALID_PACKET;
 800878e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008792:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      //Advance the ERXRDPT pointer, taking care to wrap back at the end of the
      //received memory buffer
      if(context->nextPacket == ENC28J60_RX_BUFFER_START)
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	885b      	ldrh	r3, [r3, #2]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d10a      	bne.n	80087b2 <enc28j60ReceivePacket+0xd2>
      {
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(ENC28J60_RX_BUFFER_STOP));
 800879c:	22ff      	movs	r2, #255	; 0xff
 800879e:	210c      	movs	r1, #12
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f91c 	bl	80089de <enc28j60WriteReg>
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(ENC28J60_RX_BUFFER_STOP));
 80087a6:	2217      	movs	r2, #23
 80087a8:	210d      	movs	r1, #13
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f917 	bl	80089de <enc28j60WriteReg>
 80087b0:	e013      	b.n	80087da <enc28j60ReceivePacket+0xfa>
      }
      else
      {
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTL, LSB(context->nextPacket - 1));
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	885b      	ldrh	r3, [r3, #2]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	210c      	movs	r1, #12
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f90c 	bl	80089de <enc28j60WriteReg>
         enc28j60WriteReg(interface, ENC28J60_ERXRDPTH, MSB(context->nextPacket - 1));
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	885b      	ldrh	r3, [r3, #2]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	121b      	asrs	r3, r3, #8
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	210d      	movs	r1, #13
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f902 	bl	80089de <enc28j60WriteReg>
      }

      //Decrement the packet counter
      enc28j60SetBit(interface, ENC28J60_ECON2, ENC28J60_ECON2_PKTDEC);
 80087da:	2240      	movs	r2, #64	; 0x40
 80087dc:	211e      	movs	r1, #30
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa62 	bl	8008ca8 <enc28j60SetBit>
 80087e4:	e002      	b.n	80087ec <enc28j60ReceivePacket+0x10c>
   }
   else
   {
      //No more data in the receive buffer
      error = ERROR_BUFFER_EMPTY;
 80087e6:	f240 1309 	movw	r3, #265	; 0x109
 80087ea:	84fb      	strh	r3, [r7, #38]	; 0x26
   }

   //Check whether a valid packet has been received
   if(!error)
 80087ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d110      	bne.n	8008814 <enc28j60ReceivePacket+0x134>
   {
      NetRxAncillary ancillary;

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_RX_ANCILLARY;
 80087f2:	4a0c      	ldr	r2, [pc, #48]	; (8008824 <enc28j60ReceivePacket+0x144>)
 80087f4:	f107 0308 	add.w	r3, r7, #8
 80087f8:	4614      	mov	r4, r2
 80087fa:	6820      	ldr	r0, [r4, #0]
 80087fc:	6861      	ldr	r1, [r4, #4]
 80087fe:	68a2      	ldr	r2, [r4, #8]
 8008800:	c307      	stmia	r3!, {r0, r1, r2}
 8008802:	7b22      	ldrb	r2, [r4, #12]
 8008804:	701a      	strb	r2, [r3, #0]

      //Pass the packet to the upper layer
      nicProcessPacket(interface, temp, length, &ancillary);
 8008806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008808:	f107 0308 	add.w	r3, r7, #8
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <enc28j60ReceivePacket+0x140>)
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7fa fe38 	bl	8003484 <nicProcessPacket>
   }

   //Return status code
   return error;
 8008814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8008816:	4618      	mov	r0, r3
 8008818:	372c      	adds	r7, #44	; 0x2c
 800881a:	46bd      	mov	sp, r7
 800881c:	bd90      	pop	{r4, r7, pc}
 800881e:	bf00      	nop
 8008820:	2000032c 	.word	0x2000032c
 8008824:	080117b8 	.word	0x080117b8

08008828 <enc28j60UpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t enc28j60UpdateMacAddrFilter(NetInterface *interface)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]

   //Debug message
   TRACE_DEBUG("Updating MAC filter...\r\n");

   //Clear hash table
   osMemset(hashTable, 0, sizeof(hashTable));
 8008830:	f107 0308 	add.w	r3, r7, #8
 8008834:	2208      	movs	r2, #8
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f007 fb8c 	bl	800ff56 <memset>

   //The MAC address filter contains the list of MAC addresses to accept
   //when receiving an Ethernet frame
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	e032      	b.n	80088aa <enc28j60UpdateMacAddrFilter+0x82>
   {
      //Point to the current entry
      entry = &interface->macAddrFilter[i];
 8008844:	69fa      	ldr	r2, [r7, #28]
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	33d0      	adds	r3, #208	; 0xd0
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	3304      	adds	r3, #4
 8008856:	61bb      	str	r3, [r7, #24]

      //Valid entry?
      if(entry->refCount > 0)
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d021      	beq.n	80088a4 <enc28j60UpdateMacAddrFilter+0x7c>
      {
         //Compute CRC over the current MAC address
         crc = enc28j60CalcCrc(&entry->addr, sizeof(MacAddr));
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2106      	movs	r1, #6
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fa71 	bl	8008d4c <enc28j60CalcCrc>
 800886a:	6178      	str	r0, [r7, #20]
         //Calculate the corresponding index in the table
         k = (crc >> 23) & 0x3F;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	0ddb      	lsrs	r3, r3, #23
 8008870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008874:	613b      	str	r3, [r7, #16]
         //Update hash table contents
         hashTable[k / 8] |= (1 << (k % 8));
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	08db      	lsrs	r3, r3, #3
 800887a:	f107 0220 	add.w	r2, r7, #32
 800887e:	441a      	add	r2, r3
 8008880:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8008884:	b251      	sxtb	r1, r2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	f002 0207 	and.w	r2, r2, #7
 800888c:	2001      	movs	r0, #1
 800888e:	fa00 f202 	lsl.w	r2, r0, r2
 8008892:	b252      	sxtb	r2, r2
 8008894:	430a      	orrs	r2, r1
 8008896:	b252      	sxtb	r2, r2
 8008898:	b2d2      	uxtb	r2, r2
 800889a:	f107 0120 	add.w	r1, r7, #32
 800889e:	440b      	add	r3, r1
 80088a0:	f803 2c18 	strb.w	r2, [r3, #-24]
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3301      	adds	r3, #1
 80088a8:	61fb      	str	r3, [r7, #28]
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	2b0b      	cmp	r3, #11
 80088ae:	d9c9      	bls.n	8008844 <enc28j60UpdateMacAddrFilter+0x1c>
      }
   }

   //Write the hash table to the ENC28J60 controller
   enc28j60WriteReg(interface, ENC28J60_EHT0, hashTable[0]);
 80088b0:	7a3b      	ldrb	r3, [r7, #8]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f890 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT1, hashTable[1]);
 80088be:	7a7b      	ldrb	r3, [r7, #9]
 80088c0:	461a      	mov	r2, r3
 80088c2:	f240 1101 	movw	r1, #257	; 0x101
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f889 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT2, hashTable[2]);
 80088cc:	7abb      	ldrb	r3, [r7, #10]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f882 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT3, hashTable[3]);
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	461a      	mov	r2, r3
 80088de:	f240 1103 	movw	r1, #259	; 0x103
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f87b 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT4, hashTable[4]);
 80088e8:	7b3b      	ldrb	r3, [r7, #12]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f874 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT5, hashTable[5]);
 80088f6:	7b7b      	ldrb	r3, [r7, #13]
 80088f8:	461a      	mov	r2, r3
 80088fa:	f240 1105 	movw	r1, #261	; 0x105
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f86d 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT6, hashTable[6]);
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	461a      	mov	r2, r3
 8008908:	f44f 7183 	mov.w	r1, #262	; 0x106
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f866 	bl	80089de <enc28j60WriteReg>
   enc28j60WriteReg(interface, ENC28J60_EHT7, hashTable[7]);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	461a      	mov	r2, r3
 8008916:	f240 1107 	movw	r1, #263	; 0x107
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f85f 	bl	80089de <enc28j60WriteReg>
   TRACE_DEBUG("  EHT1 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT5));
   TRACE_DEBUG("  EHT2 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT6));
   TRACE_DEBUG("  EHT3 = %02" PRIX8 "\r\n", enc28j60ReadReg(interface, ENC28J60_EHT7));

   //Successful processing
   return NO_ERROR;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <enc28j60SoftReset>:
 * @brief ENC28J60 controller reset
 * @param[in] interface Underlying network interface
 **/

void enc28j60SoftReset(NetInterface *interface)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_SRC);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	20ff      	movs	r0, #255	; 0xff
 8008942:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	4798      	blx	r3
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <enc28j60SelectBank>:
 * @param[in] interface Underlying network interface
 * @param[in] address Register address
 **/

void enc28j60SelectBank(NetInterface *interface, uint16_t address)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	807b      	strh	r3, [r7, #2]
   uint16_t bank;
   Enc28j60Context *context;

   //Point to the driver context
   context = (Enc28j60Context *) interface->nicContext;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3344      	adds	r3, #68	; 0x44
 8008964:	60fb      	str	r3, [r7, #12]

   //Get the bank number from the specified address
   bank = address & REG_BANK_MASK;
 8008966:	887b      	ldrh	r3, [r7, #2]
 8008968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800896c:	817b      	strh	r3, [r7, #10]

   //Rewrite the bank number only if a change is detected
   if(bank != context->currentBank)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	897a      	ldrh	r2, [r7, #10]
 8008974:	429a      	cmp	r2, r3
 8008976:	d02e      	beq.n	80089d6 <enc28j60SelectBank+0x82>
   {
      //Select the relevant bank
      if(bank == BANK_0)
 8008978:	897b      	ldrh	r3, [r7, #10]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <enc28j60SelectBank+0x36>
      {
         //Select bank 0
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1 |
 800897e:	2203      	movs	r2, #3
 8008980:	211f      	movs	r1, #31
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9b9 	bl	8008cfa <enc28j60ClearBit>
 8008988:	e022      	b.n	80089d0 <enc28j60SelectBank+0x7c>
            ENC28J60_ECON1_BSEL0);
      }
      else if(bank == BANK_1)
 800898a:	897b      	ldrh	r3, [r7, #10]
 800898c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008990:	d10a      	bne.n	80089a8 <enc28j60SelectBank+0x54>
      {
         //Select bank 1
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL0);
 8008992:	2201      	movs	r2, #1
 8008994:	211f      	movs	r1, #31
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f986 	bl	8008ca8 <enc28j60SetBit>
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1);
 800899c:	2202      	movs	r2, #2
 800899e:	211f      	movs	r1, #31
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f9aa 	bl	8008cfa <enc28j60ClearBit>
 80089a6:	e013      	b.n	80089d0 <enc28j60SelectBank+0x7c>
      }
      else if(bank == BANK_2)
 80089a8:	897b      	ldrh	r3, [r7, #10]
 80089aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ae:	d10a      	bne.n	80089c6 <enc28j60SelectBank+0x72>
      {
         //Select bank 2
         enc28j60ClearBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL0);
 80089b0:	2201      	movs	r2, #1
 80089b2:	211f      	movs	r1, #31
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f9a0 	bl	8008cfa <enc28j60ClearBit>
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1);
 80089ba:	2202      	movs	r2, #2
 80089bc:	211f      	movs	r1, #31
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f972 	bl	8008ca8 <enc28j60SetBit>
 80089c4:	e004      	b.n	80089d0 <enc28j60SelectBank+0x7c>
      }
      else
      {
         //Select bank 3
         enc28j60SetBit(interface, ENC28J60_ECON1, ENC28J60_ECON1_BSEL1 |
 80089c6:	2203      	movs	r2, #3
 80089c8:	211f      	movs	r1, #31
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f96c 	bl	8008ca8 <enc28j60SetBit>
            ENC28J60_ECON1_BSEL0);
      }

      //Save bank number
      context->currentBank = bank;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	897a      	ldrh	r2, [r7, #10]
 80089d4:	801a      	strh	r2, [r3, #0]
   }
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <enc28j60WriteReg>:
 * @param[in] address Register address
 * @param[in] data Register value
 **/

void enc28j60WriteReg(NetInterface *interface, uint16_t address, uint8_t data)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b082      	sub	sp, #8
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	807b      	strh	r3, [r7, #2]
 80089ea:	4613      	mov	r3, r2
 80089ec:	707b      	strb	r3, [r7, #1]
   //Make sure the corresponding bank is selected
   enc28j60SelectBank(interface, address);
 80089ee:	887b      	ldrh	r3, [r7, #2]
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff ffae 	bl	8008954 <enc28j60SelectBank>

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_WCR | (address & REG_ADDR_MASK));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	b252      	sxtb	r2, r2
 8008a0a:	f002 021f 	and.w	r2, r2, #31
 8008a0e:	b252      	sxtb	r2, r2
 8008a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a14:	b252      	sxtb	r2, r2
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
   //Write register value
   interface->spiDriver->transfer(data);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	787a      	ldrb	r2, [r7, #1]
 8008a24:	4610      	mov	r0, r2
 8008a26:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	4798      	blx	r3
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <enc28j60ReadReg>:
 * @param[in] address Register address
 * @return Register value
 **/

uint8_t enc28j60ReadReg(NetInterface *interface, uint16_t address)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	807b      	strh	r3, [r7, #2]
   uint16_t data;

   //Make sure the corresponding bank is selected
   enc28j60SelectBank(interface, address);
 8008a44:	887b      	ldrh	r3, [r7, #2]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff83 	bl	8008954 <enc28j60SelectBank>

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_RCR | (address & REG_ADDR_MASK));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	887a      	ldrh	r2, [r7, #2]
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	f002 021f 	and.w	r2, r2, #31
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	4610      	mov	r0, r2
 8008a68:	4798      	blx	r3

   //When reading MAC or MII registers, a dummy byte is first shifted out
   if((address & REG_TYPE_MASK) != ETH_REG_TYPE)
 8008a6a:	887b      	ldrh	r3, [r7, #2]
 8008a6c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d004      	beq.n	8008a7e <enc28j60ReadReg+0x46>
   {
      interface->spiDriver->transfer(0x00);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	4798      	blx	r3
   }

   //Read register contents
   data = interface->spiDriver->transfer(0x00);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	2000      	movs	r0, #0
 8008a86:	4798      	blx	r3
 8008a88:	4603      	mov	r3, r0
 8008a8a:	81fb      	strh	r3, [r7, #14]

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	4798      	blx	r3

   //Return register contents
   return data;
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	b2db      	uxtb	r3, r3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <enc28j60WritePhyReg>:
 * @param[in] data Register value
 **/

void enc28j60WritePhyReg(NetInterface *interface, uint16_t address,
   uint16_t data)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	807b      	strh	r3, [r7, #2]
 8008aac:	4613      	mov	r3, r2
 8008aae:	803b      	strh	r3, [r7, #0]
   //Write register address
   enc28j60WriteReg(interface, ENC28J60_MIREGADR, address & REG_ADDR_MASK);
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 031f 	and.w	r3, r3, #31
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	461a      	mov	r2, r3
 8008abc:	f242 2114 	movw	r1, #8724	; 0x2214
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff ff8c 	bl	80089de <enc28j60WriteReg>

   //Write the lower 8 bits
   enc28j60WriteReg(interface, ENC28J60_MIWRL, LSB(data));
 8008ac6:	883b      	ldrh	r3, [r7, #0]
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	f242 2116 	movw	r1, #8726	; 0x2216
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff ff84 	bl	80089de <enc28j60WriteReg>
   //Write the upper 8 bits
   enc28j60WriteReg(interface, ENC28J60_MIWRH, MSB(data));
 8008ad6:	883b      	ldrh	r3, [r7, #0]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f242 2117 	movw	r1, #8727	; 0x2217
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f7ff ff7a 	bl	80089de <enc28j60WriteReg>

   //Wait until the PHY register has been written
   while((enc28j60ReadReg(interface, ENC28J60_MISTAT) & ENC28J60_MISTAT_BUSY) != 0)
 8008aea:	bf00      	nop
 8008aec:	f242 310a 	movw	r1, #8970	; 0x230a
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff ffa1 	bl	8008a38 <enc28j60ReadReg>
 8008af6:	4603      	mov	r3, r0
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1f5      	bne.n	8008aec <enc28j60WritePhyReg+0x4c>
   {
   }
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <enc28j60ReadPhyReg>:
 * @param[in] address PHY register address
 * @return Register value
 **/

uint16_t enc28j60ReadPhyReg(NetInterface *interface, uint16_t address)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	807b      	strh	r3, [r7, #2]
   uint16_t data;

   //Write register address
   enc28j60WriteReg(interface, ENC28J60_MIREGADR, address & REG_ADDR_MASK);
 8008b16:	887b      	ldrh	r3, [r7, #2]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 031f 	and.w	r3, r3, #31
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	f242 2114 	movw	r1, #8724	; 0x2214
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7ff ff59 	bl	80089de <enc28j60WriteReg>

   //Start read operation
   enc28j60WriteReg(interface, ENC28J60_MICMD, ENC28J60_MICMD_MIIRD);
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f242 2112 	movw	r1, #8722	; 0x2212
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ff53 	bl	80089de <enc28j60WriteReg>
   //Wait for the read operation to complete
   while((enc28j60ReadReg(interface, ENC28J60_MISTAT) & ENC28J60_MISTAT_BUSY) != 0)
 8008b38:	bf00      	nop
 8008b3a:	f242 310a 	movw	r1, #8970	; 0x230a
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f7ff ff7a 	bl	8008a38 <enc28j60ReadReg>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1f5      	bne.n	8008b3a <enc28j60ReadPhyReg+0x30>
   {
   }

   //Clear command register
   enc28j60WriteReg(interface, ENC28J60_MICMD, 0);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f242 2112 	movw	r1, #8722	; 0x2212
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff ff42 	bl	80089de <enc28j60WriteReg>

   //Read the lower 8 bits
   data = enc28j60ReadReg(interface, ENC28J60_MIRDL);
 8008b5a:	f242 2118 	movw	r1, #8728	; 0x2218
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7ff ff6a 	bl	8008a38 <enc28j60ReadReg>
 8008b64:	4603      	mov	r3, r0
 8008b66:	81fb      	strh	r3, [r7, #14]
   //Read the upper 8 bits
   data |= enc28j60ReadReg(interface, ENC28J60_MIRDH) << 8;
 8008b68:	f242 2119 	movw	r1, #8729	; 0x2219
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f7ff ff63 	bl	8008a38 <enc28j60ReadReg>
 8008b72:	4603      	mov	r3, r0
 8008b74:	021b      	lsls	r3, r3, #8
 8008b76:	b21a      	sxth	r2, r3
 8008b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	81fb      	strh	r3, [r7, #14]

   //Return register contents
   return data;
 8008b82:	89fb      	ldrh	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <enc28j60WriteBuffer>:
 * @param[in] offset Offset to the first data byte
 **/

void enc28j60WriteBuffer(NetInterface *interface,
   const NetBuffer *buffer, size_t offset)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
   size_t j;
   size_t n;
   uint8_t *p;

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_WBM);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	207a      	movs	r0, #122	; 0x7a
 8008ba8:	4798      	blx	r3
   //Write per-packet control byte
   interface->spiDriver->transfer(0x00);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	4798      	blx	r3

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	e03e      	b.n	8008c38 <enc28j60WriteBuffer+0xac>
   {
      //Is there any data to copy from the current chunk?
      if(offset < buffer->chunk[i].length)
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	00db      	lsls	r3, r3, #3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	889b      	ldrh	r3, [r3, #4]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d227      	bcs.n	8008c1e <enc28j60WriteBuffer+0x92>
      {
         //Point to the first byte to be read
         p = (uint8_t *) buffer->chunk[i].address + offset;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	3201      	adds	r2, #1
 8008bd4:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4413      	add	r3, r2
 8008bdc:	617b      	str	r3, [r7, #20]
         //Compute the number of bytes to copy at a time
         n = buffer->chunk[i].length - offset;
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	3301      	adds	r3, #1
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	4413      	add	r3, r2
 8008be8:	889b      	ldrh	r3, [r3, #4]
 8008bea:	461a      	mov	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	613b      	str	r3, [r7, #16]

         //Copy data to SRAM buffer
         for(j = 0; j < n; j++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	61bb      	str	r3, [r7, #24]
 8008bf6:	e00b      	b.n	8008c10 <enc28j60WriteBuffer+0x84>
         {
            interface->spiDriver->transfer(p[j]);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	6979      	ldr	r1, [r7, #20]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	440a      	add	r2, r1
 8008c04:	7812      	ldrb	r2, [r2, #0]
 8008c06:	4610      	mov	r0, r2
 8008c08:	4798      	blx	r3
         for(j = 0; j < n; j++)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61bb      	str	r3, [r7, #24]
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3ef      	bcc.n	8008bf8 <enc28j60WriteBuffer+0x6c>
         }

         //Process the next block from the start
         offset = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	607b      	str	r3, [r7, #4]
 8008c1c:	e009      	b.n	8008c32 <enc28j60WriteBuffer+0xa6>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	3301      	adds	r3, #1
 8008c24:	00db      	lsls	r3, r3, #3
 8008c26:	4413      	add	r3, r2
 8008c28:	889b      	ldrh	r3, [r3, #4]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	1a9b      	subs	r3, r3, r2
 8008c30:	607b      	str	r3, [r7, #4]
   for(i = 0; i < buffer->chunkCount; i++)
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3301      	adds	r3, #1
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69fa      	ldr	r2, [r7, #28]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d3bb      	bcc.n	8008bba <enc28j60WriteBuffer+0x2e>
      }
   }

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	4798      	blx	r3
}
 8008c4a:	bf00      	nop
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <enc28j60ReadBuffer>:
 * @param[in] length Number of data to read
 **/

void enc28j60ReadBuffer(NetInterface *interface,
   uint8_t *data, size_t length)
{
 8008c52:	b590      	push	{r4, r7, lr}
 8008c54:	b087      	sub	sp, #28
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	60f8      	str	r0, [r7, #12]
 8008c5a:	60b9      	str	r1, [r7, #8]
 8008c5c:	607a      	str	r2, [r7, #4]
   size_t i;

   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	4798      	blx	r3

   //Write opcode
   interface->spiDriver->transfer(ENC28J60_CMD_RBM);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	203a      	movs	r0, #58	; 0x3a
 8008c6e:	4798      	blx	r3

   //Copy data from SRAM buffer
   for(i = 0; i < length; i++)
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
 8008c74:	e00c      	b.n	8008c90 <enc28j60ReadBuffer+0x3e>
   {
      data[i] = interface->spiDriver->transfer(0x00);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	68b9      	ldr	r1, [r7, #8]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	188c      	adds	r4, r1, r2
 8008c82:	2000      	movs	r0, #0
 8008c84:	4798      	blx	r3
 8008c86:	4603      	mov	r3, r0
 8008c88:	7023      	strb	r3, [r4, #0]
   for(i = 0; i < length; i++)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d3ee      	bcc.n	8008c76 <enc28j60ReadBuffer+0x24>
   }

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	4798      	blx	r3
}
 8008ca0:	bf00      	nop
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd90      	pop	{r4, r7, pc}

08008ca8 <enc28j60SetBit>:
 * @param[in] address Register address
 * @param[in] mask Bits to set in the target register
 **/

void enc28j60SetBit(NetInterface *interface, uint16_t address, uint16_t mask)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	803b      	strh	r3, [r7, #0]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_BFS | (address & REG_ADDR_MASK));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	887a      	ldrh	r2, [r7, #2]
 8008cc8:	b252      	sxtb	r2, r2
 8008cca:	f002 021f 	and.w	r2, r2, #31
 8008cce:	b252      	sxtb	r2, r2
 8008cd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cd4:	b252      	sxtb	r2, r2
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
   //Write bit mask
   interface->spiDriver->transfer(mask);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	883a      	ldrh	r2, [r7, #0]
 8008ce4:	b2d2      	uxtb	r2, r2
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	4798      	blx	r3
}
 8008cf2:	bf00      	nop
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <enc28j60ClearBit>:
 * @param[in] address Register address
 * @param[in] mask Bits to clear in the target register
 **/

void enc28j60ClearBit(NetInterface *interface, uint16_t address, uint16_t mask)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	460b      	mov	r3, r1
 8008d04:	807b      	strh	r3, [r7, #2]
 8008d06:	4613      	mov	r3, r2
 8008d08:	803b      	strh	r3, [r7, #0]
   //Pull the CS pin low
   interface->spiDriver->assertCs();
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	4798      	blx	r3

   //Write opcode and register address
   interface->spiDriver->transfer(ENC28J60_CMD_BFC | (address & REG_ADDR_MASK));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	887a      	ldrh	r2, [r7, #2]
 8008d1a:	b252      	sxtb	r2, r2
 8008d1c:	f002 021f 	and.w	r2, r2, #31
 8008d20:	b252      	sxtb	r2, r2
 8008d22:	f062 025f 	orn	r2, r2, #95	; 0x5f
 8008d26:	b252      	sxtb	r2, r2
 8008d28:	b2d2      	uxtb	r2, r2
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	4798      	blx	r3
   //Write bit mask
   interface->spiDriver->transfer(mask);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	883a      	ldrh	r2, [r7, #0]
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3

   //Terminate the operation by raising the CS pin
   interface->spiDriver->deassertCs();
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	4798      	blx	r3
}
 8008d44:	bf00      	nop
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <enc28j60CalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t enc28j60CalcCrc(const void *data, size_t length)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
   uint_t j;
   uint32_t crc;
   const uint8_t *p;

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60bb      	str	r3, [r7, #8]
   //CRC preset value
   crc = 0xFFFFFFFF;
 8008d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d5e:	60fb      	str	r3, [r7, #12]

   //Loop through data
   for(i = 0; i < length; i++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
 8008d64:	e023      	b.n	8008dae <enc28j60CalcCrc+0x62>
   {
      //The message is processed bit by bit
      for(j = 0; j < 8; j++)
 8008d66:	2300      	movs	r3, #0
 8008d68:	613b      	str	r3, [r7, #16]
 8008d6a:	e01a      	b.n	8008da2 <enc28j60CalcCrc+0x56>
      {
         //Update CRC value
         if((((crc >> 31) ^ (p[i] >> j)) & 0x01) != 0)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	0fdb      	lsrs	r3, r3, #31
 8008d70:	68b9      	ldr	r1, [r7, #8]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	440a      	add	r2, r1
 8008d76:	7812      	ldrb	r2, [r2, #0]
 8008d78:	4611      	mov	r1, r2
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	fa41 f202 	asr.w	r2, r1, r2
 8008d80:	4053      	eors	r3, r2
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <enc28j60CalcCrc+0x4a>
         {
            crc = (crc << 1) ^ 0x04C11DB7;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	005a      	lsls	r2, r3, #1
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <enc28j60CalcCrc+0x78>)
 8008d90:	4053      	eors	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e002      	b.n	8008d9c <enc28j60CalcCrc+0x50>
         }
         else
         {
            crc = crc << 1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
      for(j = 0; j < 8; j++)
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	613b      	str	r3, [r7, #16]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b07      	cmp	r3, #7
 8008da6:	d9e1      	bls.n	8008d6c <enc28j60CalcCrc+0x20>
   for(i = 0; i < length; i++)
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	3301      	adds	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d3d7      	bcc.n	8008d66 <enc28j60CalcCrc+0x1a>
         }
      }
   }

   //Return CRC value
   return crc;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	371c      	adds	r7, #28
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr
 8008dc4:	04c11db7 	.word	0x04c11db7

08008dc8 <enc28j60DumpReg>:
 * @brief Dump registers for debugging purpose
 * @param[in] interface Underlying network interface
 **/

void enc28j60DumpReg(NetInterface *interface)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
   }

   //Terminate with a line feed
   TRACE_DEBUG("\r\n");
#endif
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <enc28j60DumpPhyReg>:
 * @brief Dump PHY registers for debugging purpose
 * @param[in] interface Underlying network interface
 **/

void enc28j60DumpPhyReg(NetInterface *interface)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
   }

   //Terminate with a line feed
   TRACE_DEBUG("\r\n");
#endif
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <arpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t arpInit(NetInterface *interface)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
   //Initialize the ARP cache
   osMemset(interface->arpCache, 0, sizeof(interface->arpCache));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008dfe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008e02:	2100      	movs	r1, #0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f007 f8a6 	bl	800ff56 <memset>

   //Successful initialization
   return NO_ERROR;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <arpFlushCache>:
 * @brief Flush ARP cache
 * @param[in] interface Underlying network interface
 **/

void arpFlushCache(NetInterface *interface)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	e013      	b.n	8008e4a <arpFlushCache+0x36>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	4613      	mov	r3, r2
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	4413      	add	r3, r2
 8008e2a:	015b      	lsls	r3, r3, #5
 8008e2c:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	4413      	add	r3, r2
 8008e34:	60bb      	str	r3, [r7, #8]

      //Drop packets that are waiting for address resolution
      arpFlushQueuedPackets(interface, entry);
 8008e36:	68b9      	ldr	r1, [r7, #8]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8c4 	bl	8008fc6 <arpFlushQueuedPackets>
      //Release ARP entry
      entry->state = ARP_STATE_NONE;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b07      	cmp	r3, #7
 8008e4e:	d9e8      	bls.n	8008e22 <arpFlushCache+0xe>
   }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <arpCreateEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

ArpCacheEntry *arpCreateEntry(NetInterface *interface)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b086      	sub	sp, #24
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
   systime_t time;
   ArpCacheEntry *entry;
   ArpCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 8008e62:	f7f8 f97e 	bl	8001162 <osGetSystemTime>
 8008e66:	60f8      	str	r0, [r7, #12]

   //Keep track of the oldest entry
   oldestEntry = &interface->arpCache[0];
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008e6e:	613b      	str	r3, [r7, #16]

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	e023      	b.n	8008ebe <arpCreateEntry+0x64>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	005b      	lsls	r3, r3, #1
 8008e7c:	4413      	add	r3, r2
 8008e7e:	015b      	lsls	r3, r3, #5
 8008e80:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use or not
      if(entry->state == ARP_STATE_NONE)
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d106      	bne.n	8008ea0 <arpCreateEntry+0x46>
      {
         //Erase contents
         osMemset(entry, 0, sizeof(ArpCacheEntry));
 8008e92:	2260      	movs	r2, #96	; 0x60
 8008e94:	2100      	movs	r1, #0
 8008e96:	68b8      	ldr	r0, [r7, #8]
 8008e98:	f007 f85d 	bl	800ff56 <memset>
         //Return a pointer to the ARP entry
         return entry;
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	e01b      	b.n	8008ed8 <arpCreateEntry+0x7e>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	1ad2      	subs	r2, r2, r3
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	68f9      	ldr	r1, [r7, #12]
 8008eae:	1acb      	subs	r3, r1, r3
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d901      	bls.n	8008eb8 <arpCreateEntry+0x5e>
      {
         oldestEntry = entry;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	613b      	str	r3, [r7, #16]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b07      	cmp	r3, #7
 8008ec2:	d9d8      	bls.n	8008e76 <arpCreateEntry+0x1c>
      }
   }

   //Drop any pending packets
   arpFlushQueuedPackets(interface, oldestEntry);
 8008ec4:	6939      	ldr	r1, [r7, #16]
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f87d 	bl	8008fc6 <arpFlushQueuedPackets>
   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(ArpCacheEntry));
 8008ecc:	2260      	movs	r2, #96	; 0x60
 8008ece:	2100      	movs	r1, #0
 8008ed0:	6938      	ldr	r0, [r7, #16]
 8008ed2:	f007 f840 	bl	800ff56 <memset>
   //Return a pointer to the ARP entry
   return oldestEntry;
 8008ed6:	693b      	ldr	r3, [r7, #16]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <arpFindEntry>:
 * @return A pointer to the matching ARP entry is returned. NULL is returned
 *   if the specified IPv4 address could not be found in ARP cache
 **/

ArpCacheEntry *arpFindEntry(NetInterface *interface, Ipv4Addr ipAddr)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e017      	b.n	8008f20 <arpFindEntry+0x40>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	005b      	lsls	r3, r3, #1
 8008ef6:	4413      	add	r3, r2
 8008ef8:	015b      	lsls	r3, r3, #5
 8008efa:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	4413      	add	r3, r2
 8008f02:	60bb      	str	r3, [r7, #8]

      //Check whether the entry is currently in use
      if(entry->state != ARP_STATE_NONE)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d006      	beq.n	8008f1a <arpFindEntry+0x3a>
      {
         //Current entry matches the specified address?
         if(entry->ipAddr == ipAddr)
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	683a      	ldr	r2, [r7, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d101      	bne.n	8008f1a <arpFindEntry+0x3a>
            return entry;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	e006      	b.n	8008f28 <arpFindEntry+0x48>
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b07      	cmp	r3, #7
 8008f24:	d9e4      	bls.n	8008ef0 <arpFindEntry+0x10>
      }
   }

   //No matching entry in ARP cache...
   return NULL;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <arpSendQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpSendQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
   uint_t i;
   size_t length;
   ArpQueueItem *item;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d138      	bne.n	8008fb8 <arpSendQueuedPackets+0x84>
   {
      //Loop through the queued packets
      for(i = 0; i < entry->queueSize; i++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e030      	b.n	8008fae <arpSendQueuedPackets+0x7a>
      {
         //Point to the current queue item
         item = &entry->queue[i];
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	015b      	lsls	r3, r3, #5
 8008f50:	3318      	adds	r3, #24
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	3304      	adds	r3, #4
 8008f58:	613b      	str	r3, [r7, #16]

         //Retrieve the length of the IPv4 packet
         length = netBufferGetLength(item->buffer) - item->offset;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f9 faa5 	bl	80024ae <netBufferGetLength>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	60fb      	str	r3, [r7, #12]
         //Update IP statistics
         ipv4UpdateOutStats(interface, entry->ipAddr, length);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	68fa      	ldr	r2, [r7, #12]
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f002 fb86 	bl	800b688 <ipv4UpdateOutStats>

         //Send the IPv4 packet
         ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV4, item->buffer,
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	f103 0108 	add.w	r1, r3, #8
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	693a      	ldr	r2, [r7, #16]
 8008f8c:	3208      	adds	r2, #8
 8008f8e:	9201      	str	r2, [sp, #4]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7f8 f9e7 	bl	800136c <ethSendFrame>
            item->offset, &item->ancillary);

         //Release memory buffer
         netBufferFree(item->buffer);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7f9 fa74 	bl	8002490 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	3301      	adds	r3, #1
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	697a      	ldr	r2, [r7, #20]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d3c9      	bcc.n	8008f4c <arpSendQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <arpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpFlushQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	6039      	str	r1, [r7, #0]
   uint_t i;

   //Check current state
   if(entry->state == ARP_STATE_INCOMPLETE)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d113      	bne.n	8009000 <arpFlushQueuedPackets+0x3a>
   {
      //Drop packets that are waiting for address resolution
      for(i = 0; i < entry->queueSize; i++)
 8008fd8:	2300      	movs	r3, #0
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e00b      	b.n	8008ff6 <arpFlushQueuedPackets+0x30>
      {
         //Release memory buffer
         netBufferFree(entry->queue[i].buffer);
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	015b      	lsls	r3, r3, #5
 8008fe4:	4413      	add	r3, r2
 8008fe6:	331c      	adds	r3, #28
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 fa50 	bl	8002490 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d3ee      	bcc.n	8008fde <arpFlushQueuedPackets+0x18>
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	2200      	movs	r2, #0
 8009004:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <arpResolve>:
 * @param[in] macAddr Physical address matching the specified IPv4 address
 * @return Error code
 **/

error_t arpResolve(NetInterface *interface, Ipv4Addr ipAddr, MacAddr *macAddr)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
   error_t error;
   ArpCacheEntry *entry;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff ff5e 	bl	8008ee0 <arpFindEntry>
 8009024:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry has been found
   if(entry != NULL)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d02b      	beq.n	8009084 <arpResolve+0x74>
   {
      //Check the state of the ARP entry
      if(entry->state == ARP_STATE_INCOMPLETE)
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d103      	bne.n	800903c <arpResolve+0x2c>
      {
         //The address resolution is already in progress
         error = ERROR_IN_PROGRESS;
 8009034:	f240 2303 	movw	r3, #515	; 0x203
 8009038:	82fb      	strh	r3, [r7, #22]
 800903a:	e04c      	b.n	80090d6 <arpResolve+0xc6>
      }
      else if(entry->state == ARP_STATE_STALE)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b03      	cmp	r3, #3
 8009042:	d115      	bne.n	8009070 <arpResolve+0x60>
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	3308      	adds	r3, #8
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	6010      	str	r0, [r2, #0]
 800904e:	889b      	ldrh	r3, [r3, #4]
 8009050:	8093      	strh	r3, [r2, #4]

         //Start delay timer
         entry->timestamp = osGetSystemTime();
 8009052:	f7f8 f886 	bl	8001162 <osGetSystemTime>
 8009056:	4602      	mov	r2, r0
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	611a      	str	r2, [r3, #16]
         //Delay before sending the first probe
         entry->timeout = ARP_DELAY_FIRST_PROBE_TIME;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009062:	615a      	str	r2, [r3, #20]
         //Switch to the DELAY state
         entry->state = ARP_STATE_DELAY;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2204      	movs	r2, #4
 8009068:	701a      	strb	r2, [r3, #0]

         //Successful address resolution
         error = NO_ERROR;
 800906a:	2300      	movs	r3, #0
 800906c:	82fb      	strh	r3, [r7, #22]
 800906e:	e032      	b.n	80090d6 <arpResolve+0xc6>
      }
      else
      {
         //Copy the MAC address associated with the specified IPv4 address
         *macAddr = entry->macAddr;
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3308      	adds	r3, #8
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	6010      	str	r0, [r2, #0]
 800907a:	889b      	ldrh	r3, [r3, #4]
 800907c:	8093      	strh	r3, [r2, #4]

         //Successful address resolution
         error = NO_ERROR;
 800907e:	2300      	movs	r3, #0
 8009080:	82fb      	strh	r3, [r7, #22]
 8009082:	e028      	b.n	80090d6 <arpResolve+0xc6>
      }
   }
   else
   {
      //If no entry exists, then create a new one
      entry = arpCreateEntry(interface);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fee8 	bl	8008e5a <arpCreateEntry>
 800908a:	6138      	str	r0, [r7, #16]

      //ARP cache entry successfully created?
      if(entry != NULL)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d01f      	beq.n	80090d2 <arpResolve+0xc2>
      {
         //Record the IPv4 address whose MAC address is unknown
         entry->ipAddr = ipAddr;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	605a      	str	r2, [r3, #4]

         //Reset retransmission counter
         entry->retransmitCount = 0;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2200      	movs	r2, #0
 800909c:	619a      	str	r2, [r3, #24]
         //No packet are pending in the transmit queue
         entry->queueSize = 0;
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2200      	movs	r2, #0
 80090a2:	65da      	str	r2, [r3, #92]	; 0x5c

         //Send an ARP request
         arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	4a0d      	ldr	r2, [pc, #52]	; (80090e0 <arpResolve+0xd0>)
 80090aa:	4619      	mov	r1, r3
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fb71 	bl	8009794 <arpSendRequest>

         //Save the time at which the packet was sent
         entry->timestamp = osGetSystemTime();
 80090b2:	f7f8 f856 	bl	8001162 <osGetSystemTime>
 80090b6:	4602      	mov	r2, r0
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	611a      	str	r2, [r3, #16]
         //Set timeout value
         entry->timeout = ARP_REQUEST_TIMEOUT;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090c2:	615a      	str	r2, [r3, #20]
         //Enter INCOMPLETE state
         entry->state = ARP_STATE_INCOMPLETE;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2201      	movs	r2, #1
 80090c8:	701a      	strb	r2, [r3, #0]

         //The address resolution is in progress
         error = ERROR_IN_PROGRESS;
 80090ca:	f240 2303 	movw	r3, #515	; 0x203
 80090ce:	82fb      	strh	r3, [r7, #22]
 80090d0:	e001      	b.n	80090d6 <arpResolve+0xc6>
      }
      else
      {
         //Failed to create ARP cache entry...
         error = ERROR_OUT_OF_RESOURCES;
 80090d2:	2365      	movs	r3, #101	; 0x65
 80090d4:	82fb      	strh	r3, [r7, #22]
      }
   }

   //Return status code
   return error;
 80090d6:	8afb      	ldrh	r3, [r7, #22]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	08011758 	.word	0x08011758

080090e4 <arpEnqueuePacket>:
 * @return Error code
 **/

error_t arpEnqueuePacket(NetInterface *interface, Ipv4Addr ipAddr,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 80090e4:	b5b0      	push	{r4, r5, r7, lr}
 80090e6:	b08a      	sub	sp, #40	; 0x28
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
   uint_t i;
   size_t length;
   ArpCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f9 f9db 	bl	80024ae <netBufferGetLength>
 80090f8:	6178      	str	r0, [r7, #20]

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f7ff feef 	bl	8008ee0 <arpFindEntry>
 8009102:	6138      	str	r0, [r7, #16]

   //Check whether a matching entry exists
   if(entry != NULL)
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d073      	beq.n	80091f2 <arpEnqueuePacket+0x10e>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d16c      	bne.n	80091ec <arpEnqueuePacket+0x108>
      {
         //Check whether the packet queue is full
         if(entry->queueSize >= ARP_MAX_PENDING_PACKETS)
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d926      	bls.n	8009168 <arpEnqueuePacket+0x84>
         {
            //When the queue overflows, the new arrival should replace the oldest entry
            netBufferFree(entry->queue[0].buffer);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f9 f9b6 	bl	8002490 <netBufferFree>

            //Make room for the new packet
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8009124:	2301      	movs	r3, #1
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	e016      	b.n	8009158 <arpEnqueuePacket+0x74>
            {
               entry->queue[i - 1] = entry->queue[i];
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	3b01      	subs	r3, #1
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	015b      	lsls	r3, r3, #5
 8009132:	4413      	add	r3, r2
 8009134:	f103 0218 	add.w	r2, r3, #24
 8009138:	6939      	ldr	r1, [r7, #16]
 800913a:	69bb      	ldr	r3, [r7, #24]
 800913c:	015b      	lsls	r3, r3, #5
 800913e:	440b      	add	r3, r1
 8009140:	3318      	adds	r3, #24
 8009142:	1d14      	adds	r4, r2, #4
 8009144:	1d1d      	adds	r5, r3, #4
 8009146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800914a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800914e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	3301      	adds	r3, #1
 8009156:	61bb      	str	r3, [r7, #24]
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d9e5      	bls.n	800912a <arpEnqueuePacket+0x46>
            }

            //Adjust the number of pending packets
            entry->queueSize--;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009162:	1e5a      	subs	r2, r3, #1
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	65da      	str	r2, [r3, #92]	; 0x5c
         }

         //Index of the entry to be filled in
         i = entry->queueSize;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800916c:	61bb      	str	r3, [r7, #24]
         //Allocate a memory buffer to store the packet
         entry->queue[i].buffer = netBufferAlloc(length);
 800916e:	6978      	ldr	r0, [r7, #20]
 8009170:	f7f9 f95b 	bl	800242a <netBufferAlloc>
 8009174:	4601      	mov	r1, r0
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015b      	lsls	r3, r3, #5
 800917c:	4413      	add	r3, r2
 800917e:	331c      	adds	r3, #28
 8009180:	6019      	str	r1, [r3, #0]

         //Successful memory allocation?
         if(entry->queue[i].buffer != NULL)
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	015b      	lsls	r3, r3, #5
 8009188:	4413      	add	r3, r2
 800918a:	331c      	adds	r3, #28
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d029      	beq.n	80091e6 <arpEnqueuePacket+0x102>
         {
            //Copy the contents of the IPv4 packet
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	015b      	lsls	r3, r3, #5
 8009198:	4413      	add	r3, r2
 800919a:	331c      	adds	r3, #28
 800919c:	6818      	ldr	r0, [r3, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	2100      	movs	r1, #0
 80091a8:	f7f9 fb17 	bl	80027da <netBufferCopy>
            //Offset to the first byte of the IPv4 header
            entry->queue[i].offset = offset;
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	015b      	lsls	r3, r3, #5
 80091b2:	4413      	add	r3, r2
 80091b4:	3320      	adds	r3, #32
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	601a      	str	r2, [r3, #0]
            //Additional options passed to the stack along with the packet
            entry->queue[i].ancillary = *ancillary;
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	3301      	adds	r3, #1
 80091c0:	015b      	lsls	r3, r3, #5
 80091c2:	4413      	add	r3, r2
 80091c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091c6:	1d1c      	adds	r4, r3, #4
 80091c8:	4615      	mov	r5, r2
 80091ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80091d2:	e884 0003 	stmia.w	r4, {r0, r1}

            //Increment the number of queued packets
            entry->queueSize++;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	65da      	str	r2, [r3, #92]	; 0x5c
            //The packet was successfully enqueued
            error = NO_ERROR;
 80091e0:	2300      	movs	r3, #0
 80091e2:	83fb      	strh	r3, [r7, #30]
 80091e4:	e008      	b.n	80091f8 <arpEnqueuePacket+0x114>
         }
         else
         {
            //Failed to allocate memory
            error = ERROR_OUT_OF_MEMORY;
 80091e6:	2364      	movs	r3, #100	; 0x64
 80091e8:	83fb      	strh	r3, [r7, #30]
 80091ea:	e005      	b.n	80091f8 <arpEnqueuePacket+0x114>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 80091ec:	23e0      	movs	r3, #224	; 0xe0
 80091ee:	83fb      	strh	r3, [r7, #30]
 80091f0:	e002      	b.n	80091f8 <arpEnqueuePacket+0x114>
      }
   }
   else
   {
      //No matching entry in ARP cache
      error = ERROR_NOT_FOUND;
 80091f2:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80091f6:	83fb      	strh	r3, [r7, #30]
   }

   //Return status code
   return error;
 80091f8:	8bfb      	ldrh	r3, [r7, #30]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009204 <arpTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void arpTick(NetInterface *interface)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   ArpCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800920c:	f7f7 ffa9 	bl	8001162 <osGetSystemTime>
 8009210:	6138      	str	r0, [r7, #16]

   //Go through ARP cache
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8009212:	2300      	movs	r3, #0
 8009214:	617b      	str	r3, [r7, #20]
 8009216:	e098      	b.n	800934a <arpTick+0x146>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4613      	mov	r3, r2
 800921c:	005b      	lsls	r3, r3, #1
 800921e:	4413      	add	r3, r2
 8009220:	015b      	lsls	r3, r3, #5
 8009222:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	4413      	add	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]

      //INCOMPLETE state?
      if(entry->state == ARP_STATE_INCOMPLETE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d128      	bne.n	8009286 <arpTick+0x82>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	691a      	ldr	r2, [r3, #16]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	4413      	add	r3, r2
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	db7e      	blt.n	8009344 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_REQUESTS)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	699b      	ldr	r3, [r3, #24]
 8009254:	2b02      	cmp	r3, #2
 8009256:	d80e      	bhi.n	8009276 <arpTick+0x72>
            {
               //Retransmit ARP request
               arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	4a3f      	ldr	r2, [pc, #252]	; (800935c <arpTick+0x158>)
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fa97 	bl	8009794 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_REQUEST_TIMEOUT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009272:	615a      	str	r2, [r3, #20]
 8009274:	e066      	b.n	8009344 <arpTick+0x140>
            }
            else
            {
               //Drop packets that are waiting for address resolution
               arpFlushQueuedPackets(interface, entry);
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff fea4 	bl	8008fc6 <arpFlushQueuedPackets>
               //The entry should be deleted since address resolution has failed
               entry->state = ARP_STATE_NONE;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2200      	movs	r2, #0
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	e05e      	b.n	8009344 <arpTick+0x140>
            }
         }
      }
      //REACHABLE state?
      else if(entry->state == ARP_STATE_REACHABLE)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d111      	bne.n	80092b2 <arpTick+0xae>
      {
         //Periodically time out ARP cache entries
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	4413      	add	r3, r2
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	db51      	blt.n	8009344 <arpTick+0x140>
         {
            //Save current time
            entry->timestamp = osGetSystemTime();
 80092a0:	f7f7 ff5f 	bl	8001162 <osGetSystemTime>
 80092a4:	4602      	mov	r2, r0
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	611a      	str	r2, [r3, #16]
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2203      	movs	r2, #3
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e048      	b.n	8009344 <arpTick+0x140>
         }
      }
      //DELAY state?
      else if(entry->state == ARP_STATE_DELAY)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d11b      	bne.n	80092f2 <arpTick+0xee>
      {
         //Wait for the specified delay before sending the first probe
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	691a      	ldr	r2, [r3, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	4413      	add	r3, r2
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	db3b      	blt.n	8009344 <arpTick+0x140>
         {
            //Send a point-to-point ARP request to the host
            arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6859      	ldr	r1, [r3, #4]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	3308      	adds	r3, #8
 80092d4:	461a      	mov	r2, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa5c 	bl	8009794 <arpSendRequest>

            //Save the time at which the packet was sent
            entry->timestamp = time;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	611a      	str	r2, [r3, #16]
            //Set timeout value
            entry->timeout = ARP_PROBE_TIMEOUT;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80092e8:	615a      	str	r2, [r3, #20]
            //Switch to the PROBE state
            entry->state = ARP_STATE_PROBE;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2205      	movs	r2, #5
 80092ee:	701a      	strb	r2, [r3, #0]
 80092f0:	e028      	b.n	8009344 <arpTick+0x140>
         }
      }
      //PROBE state?
      else if(entry->state == ARP_STATE_PROBE)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	d124      	bne.n	8009344 <arpTick+0x140>
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	691a      	ldr	r2, [r3, #16]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	4413      	add	r3, r2
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	db1b      	blt.n	8009344 <arpTick+0x140>
         {
            //Increment retransmission counter
            entry->retransmitCount++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	619a      	str	r2, [r3, #24]

            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount < ARP_MAX_PROBES)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d80f      	bhi.n	800933e <arpTick+0x13a>
            {
               //Send a point-to-point ARP request to the host
               arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6859      	ldr	r1, [r3, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3308      	adds	r3, #8
 8009326:	461a      	mov	r2, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa33 	bl	8009794 <arpSendRequest>

               //Save the time at which the packet was sent
               entry->timestamp = time;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	611a      	str	r2, [r3, #16]
               //Set timeout value
               entry->timeout = ARP_PROBE_TIMEOUT;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f64e 2260 	movw	r2, #60000	; 0xea60
 800933a:	615a      	str	r2, [r3, #20]
 800933c:	e002      	b.n	8009344 <arpTick+0x140>
            }
            else
            {
               //The entry should be deleted since the host is not reachable anymore
               entry->state = ARP_STATE_NONE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	701a      	strb	r2, [r3, #0]
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	3301      	adds	r3, #1
 8009348:	617b      	str	r3, [r7, #20]
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b07      	cmp	r3, #7
 800934e:	f67f af63 	bls.w	8009218 <arpTick+0x14>
            }
         }
      }
   }
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	08011758 	.word	0x08011758

08009360 <arpProcessPacket>:
 * @param[in] length Packet length
 **/

void arpProcessPacket(NetInterface *interface, ArpPacket *arpPacket,
   size_t length)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
   bool_t validTarget;
   Ipv4AddrEntry *addrEntry;
   NetInterface *logicalInterface;

   //Discard invalid ARP packets
   if(length < sizeof(ArpPacket))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b1b      	cmp	r3, #27
 8009370:	d973      	bls.n	800945a <arpProcessPacket+0xfa>
      return;

   //Debug message
   TRACE_INFO("ARP packet received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpPacket);
 8009372:	68b8      	ldr	r0, [r7, #8]
 8009374:	f000 fb08 	bl	8009988 <arpDumpPacket>

   //Make sure the hardware type is valid
   if(arpPacket->hrd != HTONS(ARP_HARDWARE_TYPE_ETH))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	881b      	ldrh	r3, [r3, #0]
 800937c:	b29b      	uxth	r3, r3
 800937e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009382:	d16c      	bne.n	800945e <arpProcessPacket+0xfe>
      return;
   //Make sure the protocol type is valid
   if(arpPacket->pro != HTONS(ARP_PROTOCOL_TYPE_IPV4))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	885b      	ldrh	r3, [r3, #2]
 8009388:	b29b      	uxth	r3, r3
 800938a:	2b08      	cmp	r3, #8
 800938c:	d169      	bne.n	8009462 <arpProcessPacket+0x102>
      return;
   //Check the length of the hardware address
   if(arpPacket->hln != sizeof(MacAddr))
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	2b06      	cmp	r3, #6
 8009394:	d167      	bne.n	8009466 <arpProcessPacket+0x106>
      return;
   //Check the length of the protocol address
   if(arpPacket->pln != sizeof(Ipv4Addr))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	795b      	ldrb	r3, [r3, #5]
 800939a:	2b04      	cmp	r3, #4
 800939c:	d165      	bne.n	800946a <arpProcessPacket+0x10a>
      return;

   //The target protocol address must a valid address assigned to the interface
   //or a tentative address whose uniqueness on a link is being verified
   validTarget = FALSE;
 800939e:	2300      	movs	r3, #0
 80093a0:	61bb      	str	r3, [r7, #24]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	e03c      	b.n	8009422 <arpProcessPacket+0xc2>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 80093a8:	69fa      	ldr	r2, [r7, #28]
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80093b6:	68fa      	ldr	r2, [r7, #12]
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(addrEntry->state != IPV4_ADDR_STATE_INVALID)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	791b      	ldrb	r3, [r3, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d02a      	beq.n	800941c <arpProcessPacket+0xbc>
      {
         //Check whether the sender protocol address matches the IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->spa)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d11b      	bne.n	800940c <arpProcessPacket+0xac>
         {
            //Tentative address?
            if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	791b      	ldrb	r3, [r3, #4]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d103      	bne.n	80093e4 <arpProcessPacket+0x84>
            {
               //If the host receives any ARP packet where the sender IP
               //address is the address being probed for, then this is a
               //conflicting ARP packet
               addrEntry->conflict = TRUE;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2201      	movs	r2, #1
 80093e0:	609a      	str	r2, [r3, #8]
               //Exit immediately
               return;
 80093e2:	e043      	b.n	800946c <arpProcessPacket+0x10c>
            }
            else
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f7f9 ff7e 	bl	80032e6 <nicGetLogicalInterface>
 80093ea:	6138      	str	r0, [r7, #16]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpPacket->sha, &logicalInterface->macAddr))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f103 0008 	add.w	r0, r3, #8
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	33cc      	adds	r3, #204	; 0xcc
 80093f6:	2206      	movs	r2, #6
 80093f8:	4619      	mov	r1, r3
 80093fa:	f006 fd76 	bl	800feea <memcmp>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d003      	beq.n	800940c <arpProcessPacket+0xac>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2201      	movs	r2, #1
 8009408:	609a      	str	r2, [r3, #8]
                  //Exit immediately
                  return;
 800940a:	e02f      	b.n	800946c <arpProcessPacket+0x10c>
            }
         }

         //Check whether the target protocol address matches an IP address
         //assigned to the interface
         if(addrEntry->addr == arpPacket->tpa)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	d101      	bne.n	800941c <arpProcessPacket+0xbc>
         {
            validTarget = TRUE;
 8009418:	2301      	movs	r3, #1
 800941a:	61bb      	str	r3, [r7, #24]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	3301      	adds	r3, #1
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0bf      	beq.n	80093a8 <arpProcessPacket+0x48>
         }
      }
   }

   //Valid target protocol address?
   if(validTarget)
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01e      	beq.n	800946c <arpProcessPacket+0x10c>
   {
      //Check operation code
      switch(ntohs(arpPacket->op))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	b29b      	uxth	r3, r3
 8009434:	4618      	mov	r0, r3
 8009436:	f7f7 fd12 	bl	8000e5e <swapInt16>
 800943a:	4603      	mov	r3, r0
 800943c:	2b01      	cmp	r3, #1
 800943e:	d002      	beq.n	8009446 <arpProcessPacket+0xe6>
 8009440:	2b02      	cmp	r3, #2
 8009442:	d005      	beq.n	8009450 <arpProcessPacket+0xf0>
      //Unknown operation code?
      default:
         //Debug message
         TRACE_INFO("Unknown operation code!\r\n");
         //Discard incoming packet
         break;
 8009444:	e012      	b.n	800946c <arpProcessPacket+0x10c>
         arpProcessRequest(interface, arpPacket);
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f812 	bl	8009472 <arpProcessRequest>
         break;
 800944e:	e00d      	b.n	800946c <arpProcessPacket+0x10c>
         arpProcessReply(interface, arpPacket);
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f000 f872 	bl	800953c <arpProcessReply>
         break;
 8009458:	e008      	b.n	800946c <arpProcessPacket+0x10c>
      return;
 800945a:	bf00      	nop
 800945c:	e006      	b.n	800946c <arpProcessPacket+0x10c>
      return;
 800945e:	bf00      	nop
 8009460:	e004      	b.n	800946c <arpProcessPacket+0x10c>
      return;
 8009462:	bf00      	nop
 8009464:	e002      	b.n	800946c <arpProcessPacket+0x10c>
      return;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <arpProcessPacket+0x10c>
      return;
 800946a:	bf00      	nop
      }
   }
}
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <arpProcessRequest>:
 * @param[in] interface Underlying network interface
 * @param[in] arpRequest Incoming ARP request
 **/

void arpProcessRequest(NetInterface *interface, ArpPacket *arpRequest)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b086      	sub	sp, #24
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Request received...\r\n");

   //Check sender protocol address
   if(ipv4IsBroadcastAddr(interface, arpRequest->spa))
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 ffb3 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d14e      	bne.n	800952e <arpProcessRequest+0xbc>
      return;
   if(ipv4IsMulticastAddr(arpRequest->spa))
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8009496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800949a:	2be0      	cmp	r3, #224	; 0xe0
 800949c:	d049      	beq.n	8009532 <arpProcessRequest+0xc0>
      return;

   //Initialize flag
   validTarget = TRUE;
 800949e:	2301      	movs	r3, #1
 80094a0:	613b      	str	r3, [r7, #16]

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e031      	b.n	800950c <arpProcessRequest+0x9a>
   {
      //Point to the current entry
      addrEntry = &interface->ipv4Context.addrList[i];
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	4413      	add	r3, r2
 80094ba:	3304      	adds	r3, #4
 80094bc:	60fb      	str	r3, [r7, #12]

      //Tentative address?
      if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d11f      	bne.n	8009506 <arpProcessRequest+0x94>
      {
         //Check whether the target IP address is an address being probed for
         if(addrEntry->addr == arpRequest->tpa)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d119      	bne.n	8009506 <arpProcessRequest+0x94>
         {
            //The target protocol address is a tentative address
            validTarget = FALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	613b      	str	r3, [r7, #16]

            //ARP probe received?
            if(arpRequest->spa == IPV4_UNSPECIFIED_ADDR)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d112      	bne.n	8009506 <arpProcessRequest+0x94>
            {
               //Point to the logical interface
               logicalInterface = nicGetLogicalInterface(interface);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7f9 ff00 	bl	80032e6 <nicGetLogicalInterface>
 80094e6:	60b8      	str	r0, [r7, #8]

               //If the sender hardware address does not match the hardware
               //address of that interface, then this is a conflicting ARP
               //packet
               if(!macCompAddr(&arpRequest->sha, &logicalInterface->macAddr))
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f103 0008 	add.w	r0, r3, #8
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	33cc      	adds	r3, #204	; 0xcc
 80094f2:	2206      	movs	r2, #6
 80094f4:	4619      	mov	r1, r3
 80094f6:	f006 fcf8 	bl	800feea <memcmp>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <arpProcessRequest+0x94>
               {
                  //An address conflict has been detected...
                  addrEntry->conflict = TRUE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2201      	movs	r2, #1
 8009504:	609a      	str	r2, [r3, #8]
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	3301      	adds	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0ca      	beq.n	80094a8 <arpProcessRequest+0x36>
      }
   }

   //In all cases, the host must not respond to an ARP request for an address
   //being probed for
   if(validTarget)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00d      	beq.n	8009534 <arpProcessRequest+0xc2>
   {
      //Send ARP reply
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6999      	ldr	r1, [r3, #24]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	f8d3 200e 	ldr.w	r2, [r3, #14]
         &arpRequest->sha);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	3308      	adds	r3, #8
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f9ba 	bl	80098a0 <arpSendReply>
 800952c:	e002      	b.n	8009534 <arpProcessRequest+0xc2>
      return;
 800952e:	bf00      	nop
 8009530:	e000      	b.n	8009534 <arpProcessRequest+0xc2>
      return;
 8009532:	bf00      	nop
   }
}
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <arpProcessReply>:
 * @param[in] interface Underlying network interface
 * @param[in] arpReply Incoming ARP reply
 **/

void arpProcessReply(NetInterface *interface, ArpPacket *arpReply)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]

   //Debug message
   TRACE_INFO("ARP Reply received...\r\n");

   //Check sender protocol address
   if(arpReply->spa == IPV4_UNSPECIFIED_ADDR)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 8090 	beq.w	8009672 <arpProcessReply+0x136>
      return;
   if(ipv4IsBroadcastAddr(interface, arpReply->spa))
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	f8d3 300e 	ldr.w	r3, [r3, #14]
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 ff48 	bl	800b3f0 <ipv4IsBroadcastAddr>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 8087 	bne.w	8009676 <arpProcessReply+0x13a>
      return;
   if(ipv4IsMulticastAddr(arpReply->spa))
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f8d3 300e 	ldr.w	r3, [r3, #14]
 800956e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009572:	2be0      	cmp	r3, #224	; 0xe0
 8009574:	f000 8081 	beq.w	800967a <arpProcessReply+0x13e>
      return;

   //Check sender hardware address
   if(macCompAddr(&arpReply->sha, &MAC_UNSPECIFIED_ADDR))
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	2206      	movs	r2, #6
 800957e:	4945      	ldr	r1, [pc, #276]	; (8009694 <arpProcessReply+0x158>)
 8009580:	4618      	mov	r0, r3
 8009582:	f006 fcb2 	bl	800feea <memcmp>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d078      	beq.n	800967e <arpProcessReply+0x142>
      return;
   if(macCompAddr(&arpReply->sha, &MAC_BROADCAST_ADDR))
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	2206      	movs	r2, #6
 8009592:	4941      	ldr	r1, [pc, #260]	; (8009698 <arpProcessReply+0x15c>)
 8009594:	4618      	mov	r0, r3
 8009596:	f006 fca8 	bl	800feea <memcmp>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d070      	beq.n	8009682 <arpProcessReply+0x146>
      return;
   if(macIsMulticastAddr(&arpReply->sha))
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	7a1b      	ldrb	r3, [r3, #8]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d16c      	bne.n	8009686 <arpProcessReply+0x14a>
      return;

   //Check whether the target IP address is an address being probed for
   if(ipv4IsTentativeAddr(interface, arpReply->tpa))
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 ff5d 	bl	800b472 <ipv4IsTentativeAddr>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d165      	bne.n	800968a <arpProcessReply+0x14e>
      return;

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, arpReply->spa);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f8d3 300e 	ldr.w	r3, [r3, #14]
 80095c4:	4619      	mov	r1, r3
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f7ff fc8a 	bl	8008ee0 <arpFindEntry>
 80095cc:	60f8      	str	r0, [r7, #12]

   //Check whether a matching entry has been found
   if(entry != NULL)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d05b      	beq.n	800968c <arpProcessReply+0x150>
   {
      //Check current state
      if(entry->state == ARP_STATE_INCOMPLETE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d118      	bne.n	800960e <arpProcessReply+0xd2>
      {
         //Record the corresponding MAC address
         entry->macAddr = arpReply->sha;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	3308      	adds	r3, #8
 80095e2:	3208      	adds	r2, #8
 80095e4:	6810      	ldr	r0, [r2, #0]
 80095e6:	6018      	str	r0, [r3, #0]
 80095e8:	8892      	ldrh	r2, [r2, #4]
 80095ea:	809a      	strh	r2, [r3, #4]

         //Send all the packets that are pending for transmission
         arpSendQueuedPackets(interface, entry);
 80095ec:	68f9      	ldr	r1, [r7, #12]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fca0 	bl	8008f34 <arpSendQueuedPackets>

         //Save current time
         entry->timestamp = osGetSystemTime();
 80095f4:	f7f7 fdb5 	bl	8001162 <osGetSystemTime>
 80095f8:	4602      	mov	r2, r0
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009604:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2202      	movs	r2, #2
 800960a:	701a      	strb	r2, [r3, #0]
 800960c:	e03e      	b.n	800968c <arpProcessReply+0x150>
      }
      else if(entry->state == ARP_STATE_REACHABLE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d10f      	bne.n	8009636 <arpProcessReply+0xfa>
      {
         //Different link-layer address than cached?
         if(!macCompAddr(&arpReply->sha, &entry->macAddr))
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f103 0008 	add.w	r0, r3, #8
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3308      	adds	r3, #8
 8009620:	2206      	movs	r2, #6
 8009622:	4619      	mov	r1, r3
 8009624:	f006 fc61 	bl	800feea <memcmp>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d02e      	beq.n	800968c <arpProcessReply+0x150>
         {
            //Enter STALE state
            entry->state = ARP_STATE_STALE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2203      	movs	r2, #3
 8009632:	701a      	strb	r2, [r3, #0]
 8009634:	e02a      	b.n	800968c <arpProcessReply+0x150>
         }
      }
      else if(entry->state == ARP_STATE_PROBE)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b05      	cmp	r3, #5
 800963c:	d126      	bne.n	800968c <arpProcessReply+0x150>
      {
         //Record IPv4/MAC address pair
         entry->ipAddr = arpReply->spa;
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	f8d3 200e 	ldr.w	r2, [r3, #14]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	605a      	str	r2, [r3, #4]
         entry->macAddr = arpReply->sha;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	683a      	ldr	r2, [r7, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	3208      	adds	r2, #8
 8009650:	6810      	ldr	r0, [r2, #0]
 8009652:	6018      	str	r0, [r3, #0]
 8009654:	8892      	ldrh	r2, [r2, #4]
 8009656:	809a      	strh	r2, [r3, #4]

         //Save current time
         entry->timestamp = osGetSystemTime();
 8009658:	f7f7 fd83 	bl	8001162 <osGetSystemTime>
 800965c:	4602      	mov	r2, r0
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	611a      	str	r2, [r3, #16]
         //The validity of the ARP entry is limited in time
         entry->timeout = ARP_REACHABLE_TIME;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f64e 2260 	movw	r2, #60000	; 0xea60
 8009668:	615a      	str	r2, [r3, #20]
         //Switch to the REACHABLE state
         entry->state = ARP_STATE_REACHABLE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2202      	movs	r2, #2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e00c      	b.n	800968c <arpProcessReply+0x150>
      return;
 8009672:	bf00      	nop
 8009674:	e00a      	b.n	800968c <arpProcessReply+0x150>
      return;
 8009676:	bf00      	nop
 8009678:	e008      	b.n	800968c <arpProcessReply+0x150>
      return;
 800967a:	bf00      	nop
 800967c:	e006      	b.n	800968c <arpProcessReply+0x150>
      return;
 800967e:	bf00      	nop
 8009680:	e004      	b.n	800968c <arpProcessReply+0x150>
      return;
 8009682:	bf00      	nop
 8009684:	e002      	b.n	800968c <arpProcessReply+0x150>
      return;
 8009686:	bf00      	nop
 8009688:	e000      	b.n	800968c <arpProcessReply+0x150>
      return;
 800968a:	bf00      	nop
      }
   }
}
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	08011750 	.word	0x08011750
 8009698:	08011758 	.word	0x08011758

0800969c <arpSendProbe>:
 * @param[in] targetIpAddr Target IPv4 address
 * @return Error code
 **/

error_t arpSendProbe(NetInterface *interface, Ipv4Addr targetIpAddr)
{
 800969c:	b5b0      	push	{r4, r5, r7, lr}
 800969e:	b090      	sub	sp, #64	; 0x40
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
   ArpPacket *arpRequest;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7f9 fe1d 	bl	80032e6 <nicGetLogicalInterface>
 80096ac:	6378      	str	r0, [r7, #52]	; 0x34

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 80096ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096b2:	4619      	mov	r1, r3
 80096b4:	201c      	movs	r0, #28
 80096b6:	f7f7 ff8a 	bl	80015ce <ethAllocBuffer>
 80096ba:	6338      	str	r0, [r7, #48]	; 0x30
   //Failed to allocate buffer?
   if(buffer == NULL)
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <arpSendProbe+0x2a>
      return ERROR_OUT_OF_MEMORY;
 80096c2:	2364      	movs	r3, #100	; 0x64
 80096c4:	e05b      	b.n	800977e <arpSendProbe+0xe2>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	4619      	mov	r1, r3
 80096ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096cc:	f7f8 ffb7 	bl	800263e <netBufferAt>
 80096d0:	62f8      	str	r0, [r7, #44]	; 0x2c

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80096d2:	2001      	movs	r0, #1
 80096d4:	f7f7 fbc3 	bl	8000e5e <swapInt16>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 80096e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80096e4:	f7f7 fbbb 	bl	8000e5e <swapInt16>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	2206      	movs	r2, #6
 80096f4:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	2204      	movs	r2, #4
 80096fa:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7f7 fbae 	bl	8000e5e <swapInt16>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009708:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 800970a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800970e:	3308      	adds	r3, #8
 8009710:	32cc      	adds	r2, #204	; 0xcc
 8009712:	6810      	ldr	r0, [r2, #0]
 8009714:	6018      	str	r0, [r3, #0]
 8009716:	8892      	ldrh	r2, [r2, #4]
 8009718:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = IPV4_UNSPECIFIED_ADDR;
 800971a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971c:	2200      	movs	r2, #0
 800971e:	739a      	strb	r2, [r3, #14]
 8009720:	2200      	movs	r2, #0
 8009722:	73da      	strb	r2, [r3, #15]
 8009724:	2200      	movs	r2, #0
 8009726:	741a      	strb	r2, [r3, #16]
 8009728:	2200      	movs	r2, #0
 800972a:	745a      	strb	r2, [r3, #17]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972e:	4a16      	ldr	r2, [pc, #88]	; (8009788 <arpSendProbe+0xec>)
 8009730:	3312      	adds	r3, #18
 8009732:	6811      	ldr	r1, [r2, #0]
 8009734:	6019      	str	r1, [r3, #0]
 8009736:	8892      	ldrh	r2, [r2, #4]
 8009738:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Probe (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 8009740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009742:	f000 f921 	bl	8009988 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009746:	4b11      	ldr	r3, [pc, #68]	; (800978c <arpSendProbe+0xf0>)
 8009748:	f107 040c 	add.w	r4, r7, #12
 800974c:	461d      	mov	r5, r3
 800974e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009752:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009756:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, &MAC_BROADCAST_ADDR, ETH_TYPE_ARP, buffer,
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	f107 020c 	add.w	r2, r7, #12
 8009760:	9201      	str	r2, [sp, #4]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f640 0206 	movw	r2, #2054	; 0x806
 800976a:	4909      	ldr	r1, [pc, #36]	; (8009790 <arpSendProbe+0xf4>)
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7f7 fdfd 	bl	800136c <ethSendFrame>
 8009772:	4603      	mov	r3, r0
 8009774:	857b      	strh	r3, [r7, #42]	; 0x2a
      offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8009776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009778:	f7f8 fe8a 	bl	8002490 <netBufferFree>

   //Return status code
   return error;
 800977c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 800977e:	4618      	mov	r0, r3
 8009780:	3738      	adds	r7, #56	; 0x38
 8009782:	46bd      	mov	sp, r7
 8009784:	bdb0      	pop	{r4, r5, r7, pc}
 8009786:	bf00      	nop
 8009788:	08011750 	.word	0x08011750
 800978c:	080117a0 	.word	0x080117a0
 8009790:	08011758 	.word	0x08011758

08009794 <arpSendRequest>:
 * @return Error code
 **/

error_t arpSendRequest(NetInterface *interface, Ipv4Addr targetIpAddr,
   const MacAddr *destMacAddr)
{
 8009794:	b5b0      	push	{r4, r5, r7, lr}
 8009796:	b092      	sub	sp, #72	; 0x48
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
   Ipv4Addr senderIpAddr;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7f9 fd9f 	bl	80032e6 <nicGetLogicalInterface>
 80097a8:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Select the most appropriate sender IP address to be used
   error = ipv4SelectSourceAddr(&interface, targetIpAddr, &senderIpAddr);
 80097aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80097ae:	f107 030c 	add.w	r3, r7, #12
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	4618      	mov	r0, r3
 80097b6:	f001 fcab 	bl	800b110 <ipv4SelectSourceAddr>
 80097ba:	4603      	mov	r3, r0
 80097bc:	877b      	strh	r3, [r7, #58]	; 0x3a
   //No address assigned to the interface?
   if(error)
 80097be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <arpSendRequest+0x34>
      return error;
 80097c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80097c6:	e062      	b.n	800988e <arpSendRequest+0xfa>

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 80097c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80097cc:	4619      	mov	r1, r3
 80097ce:	201c      	movs	r0, #28
 80097d0:	f7f7 fefd 	bl	80015ce <ethAllocBuffer>
 80097d4:	6378      	str	r0, [r7, #52]	; 0x34
   //Failed to allocate buffer?
   if(buffer == NULL)
 80097d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <arpSendRequest+0x4c>
      return ERROR_OUT_OF_MEMORY;
 80097dc:	2364      	movs	r3, #100	; 0x64
 80097de:	e056      	b.n	800988e <arpSendRequest+0xfa>

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset);
 80097e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e2:	4619      	mov	r1, r3
 80097e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80097e6:	f7f8 ff2a 	bl	800263e <netBufferAt>
 80097ea:	6338      	str	r0, [r7, #48]	; 0x30

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80097ec:	2001      	movs	r0, #1
 80097ee:	f7f7 fb36 	bl	8000e5e <swapInt16>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	801a      	strh	r2, [r3, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 80097fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097fe:	f7f7 fb2e 	bl	8000e5e <swapInt16>
 8009802:	4603      	mov	r3, r0
 8009804:	461a      	mov	r2, r3
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	805a      	strh	r2, [r3, #2]
   arpRequest->hln = sizeof(MacAddr);
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	2206      	movs	r2, #6
 800980e:	711a      	strb	r2, [r3, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	2204      	movs	r2, #4
 8009814:	715a      	strb	r2, [r3, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 8009816:	2001      	movs	r0, #1
 8009818:	f7f7 fb21 	bl	8000e5e <swapInt16>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	80da      	strh	r2, [r3, #6]
   arpRequest->sha = logicalInterface->macAddr;
 8009824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009828:	3308      	adds	r3, #8
 800982a:	32cc      	adds	r2, #204	; 0xcc
 800982c:	6810      	ldr	r0, [r2, #0]
 800982e:	6018      	str	r0, [r3, #0]
 8009830:	8892      	ldrh	r2, [r2, #4]
 8009832:	809a      	strh	r2, [r3, #4]
   arpRequest->spa = senderIpAddr;
 8009834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009838:	f8c3 200e 	str.w	r2, [r3, #14]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	4a16      	ldr	r2, [pc, #88]	; (8009898 <arpSendRequest+0x104>)
 8009840:	3312      	adds	r3, #18
 8009842:	6811      	ldr	r1, [r2, #0]
 8009844:	6019      	str	r1, [r3, #0]
 8009846:	8892      	ldrh	r2, [r2, #4]
 8009848:	809a      	strh	r2, [r3, #4]
   arpRequest->tpa = targetIpAddr;
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Request (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);
 8009850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009852:	f000 f899 	bl	8009988 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <arpSendRequest+0x108>)
 8009858:	f107 0410 	add.w	r4, r7, #16
 800985c:	461d      	mov	r5, r3
 800985e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009862:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009866:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP request
   error = ethSendFrame(interface, destMacAddr, ETH_TYPE_ARP, buffer, offset,
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986e:	f107 0210 	add.w	r2, r7, #16
 8009872:	9201      	str	r2, [sp, #4]
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	f640 0206 	movw	r2, #2054	; 0x806
 800987c:	6879      	ldr	r1, [r7, #4]
 800987e:	f7f7 fd75 	bl	800136c <ethSendFrame>
 8009882:	4603      	mov	r3, r0
 8009884:	877b      	strh	r3, [r7, #58]	; 0x3a
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8009886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009888:	f7f8 fe02 	bl	8002490 <netBufferFree>

   //Return status code
   return error;
 800988c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
}
 800988e:	4618      	mov	r0, r3
 8009890:	3740      	adds	r7, #64	; 0x40
 8009892:	46bd      	mov	sp, r7
 8009894:	bdb0      	pop	{r4, r5, r7, pc}
 8009896:	bf00      	nop
 8009898:	08011750 	.word	0x08011750
 800989c:	080117a0 	.word	0x080117a0

080098a0 <arpSendReply>:
 * @return Error code
 **/

error_t arpSendReply(NetInterface *interface, Ipv4Addr senderIpAddr,
   Ipv4Addr targetIpAddr, const MacAddr *targetMacAddr)
{
 80098a0:	b5b0      	push	{r4, r5, r7, lr}
 80098a2:	b092      	sub	sp, #72	; 0x48
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	603b      	str	r3, [r7, #0]
   ArpPacket *arpReply;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7f9 fd19 	bl	80032e6 <nicGetLogicalInterface>
 80098b4:	63f8      	str	r0, [r7, #60]	; 0x3c

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 80098b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ba:	4619      	mov	r1, r3
 80098bc:	201c      	movs	r0, #28
 80098be:	f7f7 fe86 	bl	80015ce <ethAllocBuffer>
 80098c2:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate buffer?
   if(buffer == NULL)
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <arpSendReply+0x2e>
      return ERROR_OUT_OF_MEMORY;
 80098ca:	2364      	movs	r3, #100	; 0x64
 80098cc:	e056      	b.n	800997c <arpSendReply+0xdc>

   //Point to the beginning of the ARP packet
   arpReply = netBufferAt(buffer, offset);
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	4619      	mov	r1, r3
 80098d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098d4:	f7f8 feb3 	bl	800263e <netBufferAt>
 80098d8:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ARP reply
   arpReply->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 80098da:	2001      	movs	r0, #1
 80098dc:	f7f7 fabf 	bl	8000e5e <swapInt16>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e6:	801a      	strh	r2, [r3, #0]
   arpReply->pro = htons(ETH_TYPE_IPV4);
 80098e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80098ec:	f7f7 fab7 	bl	8000e5e <swapInt16>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461a      	mov	r2, r3
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	805a      	strh	r2, [r3, #2]
   arpReply->hln = sizeof(MacAddr);
 80098f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098fa:	2206      	movs	r2, #6
 80098fc:	711a      	strb	r2, [r3, #4]
   arpReply->pln = sizeof(Ipv4Addr);
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	2204      	movs	r2, #4
 8009902:	715a      	strb	r2, [r3, #5]
   arpReply->op = htons(ARP_OPCODE_ARP_REPLY);
 8009904:	2002      	movs	r0, #2
 8009906:	f7f7 faaa 	bl	8000e5e <swapInt16>
 800990a:	4603      	mov	r3, r0
 800990c:	461a      	mov	r2, r3
 800990e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009910:	80da      	strh	r2, [r3, #6]
   arpReply->sha = logicalInterface->macAddr;
 8009912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009916:	3308      	adds	r3, #8
 8009918:	32cc      	adds	r2, #204	; 0xcc
 800991a:	6810      	ldr	r0, [r2, #0]
 800991c:	6018      	str	r0, [r3, #0]
 800991e:	8892      	ldrh	r2, [r2, #4]
 8009920:	809a      	strh	r2, [r3, #4]
   arpReply->spa = senderIpAddr;
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	f8c3 200e 	str.w	r2, [r3, #14]
   arpReply->tha = *targetMacAddr;
 800992a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	3312      	adds	r3, #18
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	6019      	str	r1, [r3, #0]
 8009934:	8892      	ldrh	r2, [r2, #4]
 8009936:	809a      	strh	r2, [r3, #4]
   arpReply->tpa = targetIpAddr;
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	619a      	str	r2, [r3, #24]

   //Debug message
   TRACE_INFO("Sending ARP Reply (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpReply);
 800993e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009940:	f000 f822 	bl	8009988 <arpDumpPacket>

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009944:	4b0f      	ldr	r3, [pc, #60]	; (8009984 <arpSendReply+0xe4>)
 8009946:	f107 0414 	add.w	r4, r7, #20
 800994a:	461d      	mov	r5, r3
 800994c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800994e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009950:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009954:	e884 0003 	stmia.w	r4, {r0, r1}

   //Send ARP reply
   error = ethSendFrame(interface, targetMacAddr, ETH_TYPE_ARP, buffer, offset,
 8009958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995a:	f107 0214 	add.w	r2, r7, #20
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009964:	f640 0206 	movw	r2, #2054	; 0x806
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7f7 fcfe 	bl	800136c <ethSendFrame>
 8009970:	4603      	mov	r3, r0
 8009972:	867b      	strh	r3, [r7, #50]	; 0x32
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8009974:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009976:	f7f8 fd8b 	bl	8002490 <netBufferFree>

   //Return status code
   return error;
 800997a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
}
 800997c:	4618      	mov	r0, r3
 800997e:	3740      	adds	r7, #64	; 0x40
 8009980:	46bd      	mov	sp, r7
 8009982:	bdb0      	pop	{r4, r5, r7, pc}
 8009984:	080117a0 	.word	0x080117a0

08009988 <arpDumpPacket>:
 * @brief Dump ARP packet for debugging purpose
 * @param[in] arpPacket ARP header
 **/

void arpDumpPacket(const ArpPacket *arpPacket)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Opcode (op) = %" PRIu16 "\r\n", ntohs(arpPacket->op));
   TRACE_DEBUG("  Sender Hardware Address (sha) = %s\r\n", macAddrToString(&arpPacket->sha, NULL));
   TRACE_DEBUG("  Sender Protocol Address (spa) = %s\r\n", ipv4AddrToString(arpPacket->spa, NULL));
   TRACE_DEBUG("  Target Hardware Address (tha)= %s\r\n", macAddrToString(&arpPacket->tha, NULL));
   TRACE_DEBUG("  Target Protocol Address (tpa) = %s\r\n", ipv4AddrToString(arpPacket->tpa, NULL));
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <icmpProcessMessage>:
 **/

void icmpProcessMessage(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
   //Total number of ICMP messages which the entity received
   MIB2_INC_COUNTER32(icmpGroup.icmpInMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsInMsgs, 1);

   //Retrieve the length of the ICMP message
   length = netBufferGetLength(buffer) - offset;
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7f8 fd7f 	bl	80024ae <netBufferGetLength>
 80099b0:	4602      	mov	r2, r0
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	617b      	str	r3, [r7, #20]

   //Ensure the message length is correct
   if(length < sizeof(IcmpHeader))
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2b03      	cmp	r3, #3
 80099bc:	d922      	bls.n	8009a04 <icmpProcessMessage+0x68>
      //Silently discard incoming message
      return;
   }

   //Point to the ICMP message header
   header = netBufferAt(buffer, offset);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7f8 fe3c 	bl	800263e <netBufferAt>
 80099c6:	6138      	str	r0, [r7, #16]
   //Sanity check
   if(header == NULL)
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d01c      	beq.n	8009a08 <icmpProcessMessage+0x6c>
      return;

   //Debug message
   TRACE_INFO("ICMP message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpDumpMessage(header);
 80099ce:	6938      	ldr	r0, [r7, #16]
 80099d0:	f000 fa20 	bl	8009e14 <icmpDumpMessage>

   //Verify checksum value
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7f8 f96d 	bl	8001cb8 <ipCalcChecksumEx>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d113      	bne.n	8009a0c <icmpProcessMessage+0x70>
      //Drop incoming message
      return;
   }

   //Update ICMP statistics
   icmpUpdateInStats(header->type);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f000 f9ab 	bl	8009d44 <icmpUpdateInStats>

   //Check the type of ICMP message
   switch(header->type)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	2b08      	cmp	r3, #8
 80099f4:	d10c      	bne.n	8009a10 <icmpProcessMessage+0x74>
   {
   //Echo Request?
   case ICMP_TYPE_ECHO_REQUEST:
      //Process Echo Request message
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f80b 	bl	8009a18 <icmpProcessEchoRequest>
      break;
 8009a02:	e006      	b.n	8009a12 <icmpProcessMessage+0x76>
      return;
 8009a04:	bf00      	nop
 8009a06:	e004      	b.n	8009a12 <icmpProcessMessage+0x76>
      return;
 8009a08:	bf00      	nop
 8009a0a:	e002      	b.n	8009a12 <icmpProcessMessage+0x76>
      return;
 8009a0c:	bf00      	nop
 8009a0e:	e000      	b.n	8009a12 <icmpProcessMessage+0x76>
   //Unknown type?
   default:
      //Debug message
      TRACE_WARNING("Unknown ICMP message type!\r\n");
      //Discard incoming ICMP message
      break;
 8009a10:	bf00      	nop
   }
}
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8009a18:	b5b0      	push	{r4, r5, r7, lr}
 8009a1a:	b098      	sub	sp, #96	; 0x60
 8009a1c:	af02      	add	r7, sp, #8
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
 8009a24:	603b      	str	r3, [r7, #0]
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7f8 fd41 	bl	80024ae <netBufferGetLength>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	657b      	str	r3, [r7, #84]	; 0x54

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 8009a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a36:	2b07      	cmp	r3, #7
 8009a38:	f240 80b1 	bls.w	8009b9e <icmpProcessEchoRequest+0x186>
      return;

   //Point to the Echo Request header
   requestHeader = netBufferAt(request, requestOffset);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7f8 fdfd 	bl	800263e <netBufferAt>
 8009a44:	6538      	str	r0, [r7, #80]	; 0x50
   //Sanity check
   if(requestHeader == NULL)
 8009a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 80aa 	beq.w	8009ba2 <icmpProcessEchoRequest+0x18a>
      return;

   //Debug message
   TRACE_INFO("ICMP Echo Request message received (%" PRIuSIZE " bytes)...\r\n", requestLength);
   //Dump message contents for debugging purpose
   icmpDumpEchoMessage(requestHeader);
 8009a4e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009a50:	f000 f9ea 	bl	8009e28 <icmpDumpEchoMessage>

   //Check whether the destination address of the Echo Request message is
   //a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	f001 fcc7 	bl	800b3f0 <ipv4IsBroadcastAddr>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d105      	bne.n	8009a74 <icmpProcessEchoRequest+0x5c>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8009a70:	2be0      	cmp	r3, #224	; 0xe0
 8009a72:	d119      	bne.n	8009aa8 <icmpProcessEchoRequest+0x90>
   {
      Ipv4Addr ipAddr;

      //If support for broadcast Echo Request messages has been explicitly
      //disabled, then the host shall not respond to the incoming request
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f000 8093 	beq.w	8009ba6 <icmpProcessEchoRequest+0x18e>
         return;

      //The source address of the reply must be a unicast address belonging to
      //the interface on which the broadcast Echo Request message was received
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	6819      	ldr	r1, [r3, #0]
 8009a84:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009a88:	f107 030c 	add.w	r3, r7, #12
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f001 fb3f 	bl	800b110 <ipv4SelectSourceAddr>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
         &ipAddr);
      //Any error to report?
      if(error)
 8009a98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 8084 	bne.w	8009baa <icmpProcessEchoRequest+0x192>
         return;

      //Copy the resulting source IP address
      replyPseudoHeader.srcAddr = ipAddr;
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	633b      	str	r3, [r7, #48]	; 0x30
   {
 8009aa6:	e002      	b.n	8009aae <icmpProcessEchoRequest+0x96>
   }
   else
   {
      //The destination address of the Echo Request message is a unicast address
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	633b      	str	r3, [r7, #48]	; 0x30
   }

   //Allocate memory to hold the Echo Reply message
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 8009aae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	2008      	movs	r0, #8
 8009ab6:	f7f8 f9a7 	bl	8001e08 <ipAllocBuffer>
 8009aba:	64b8      	str	r0, [r7, #72]	; 0x48
   //Failed to allocate memory?
   if(reply == NULL)
 8009abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d075      	beq.n	8009bae <icmpProcessEchoRequest+0x196>
      return;

   //Point to the Echo Reply header
   replyHeader = netBufferAt(reply, replyOffset);
 8009ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009ac8:	f7f8 fdb9 	bl	800263e <netBufferAt>
 8009acc:	6478      	str	r0, [r7, #68]	; 0x44

   //Format Echo Reply header
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 8009ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
   replyHeader->code = 0;
 8009ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	705a      	strb	r2, [r3, #1]
   replyHeader->checksum = 0;
 8009ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009adc:	2200      	movs	r2, #0
 8009ade:	709a      	strb	r2, [r3, #2]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	70da      	strb	r2, [r3, #3]
   replyHeader->identifier = requestHeader->identifier;
 8009ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae6:	889b      	ldrh	r3, [r3, #4]
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aec:	809a      	strh	r2, [r3, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 8009aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af0:	88db      	ldrh	r3, [r3, #6]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af6:	80da      	strh	r2, [r3, #6]

   //Point to the first data byte
   requestOffset += sizeof(IcmpEchoMessage);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	3308      	adds	r3, #8
 8009afc:	603b      	str	r3, [r7, #0]
   requestLength -= sizeof(IcmpEchoMessage);
 8009afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b00:	3b08      	subs	r3, #8
 8009b02:	657b      	str	r3, [r7, #84]	; 0x54

   //Copy data
   error = netBufferConcat(reply, request, requestOffset, requestLength);
 8009b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b0c:	f7f8 fdca 	bl	80026a4 <netBufferConcat>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

   //Check status code
   if(!error)
 8009b16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d13b      	bne.n	8009b96 <icmpProcessEchoRequest+0x17e>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      replyLength = netBufferGetLength(reply) - replyOffset;
 8009b1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b20:	f7f8 fcc5 	bl	80024ae <netBufferGetLength>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	643b      	str	r3, [r7, #64]	; 0x40
      //Calculate ICMP header checksum
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b30:	4619      	mov	r1, r3
 8009b32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b34:	f7f8 f8c0 	bl	8001cb8 <ipCalcChecksumEx>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b3e:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	637b      	str	r3, [r7, #52]	; 0x34
      replyPseudoHeader.reserved = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
      replyPseudoHeader.length = htons(replyLength);
 8009b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7f7 f981 	bl	8000e5e <swapInt16>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	877b      	strh	r3, [r7, #58]	; 0x3a

      //Update ICMP statistics
      icmpUpdateOutStats(ICMP_TYPE_ECHO_REPLY);
 8009b60:	2000      	movs	r0, #0
 8009b62:	f000 f923 	bl	8009dac <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Echo Reply message (%" PRIuSIZE " bytes)...\r\n", replyLength);
      //Dump message contents for debugging purpose
      icmpDumpEchoMessage(replyHeader);
 8009b66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009b68:	f000 f95e 	bl	8009e28 <icmpDumpEchoMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009b6c:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <icmpProcessEchoRequest+0x1a0>)
 8009b6e:	f107 0414 	add.w	r4, r7, #20
 8009b72:	461d      	mov	r5, r3
 8009b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009b78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b7c:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send Echo Reply message
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b84:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009b88:	f107 0314 	add.w	r3, r7, #20
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b92:	f000 fbcf 	bl	800a334 <ipv4SendDatagram>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
 8009b96:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009b98:	f7f8 fc7a 	bl	8002490 <netBufferFree>
 8009b9c:	e008      	b.n	8009bb0 <icmpProcessEchoRequest+0x198>
      return;
 8009b9e:	bf00      	nop
 8009ba0:	e006      	b.n	8009bb0 <icmpProcessEchoRequest+0x198>
      return;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <icmpProcessEchoRequest+0x198>
         return;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <icmpProcessEchoRequest+0x198>
         return;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <icmpProcessEchoRequest+0x198>
      return;
 8009bae:	bf00      	nop
}
 8009bb0:	3758      	adds	r7, #88	; 0x58
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	080117a0 	.word	0x080117a0

08009bbc <icmpSendErrorMessage>:
 * @return Error code
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type, uint8_t code,
   uint8_t parameter, const NetBuffer *ipPacket, size_t ipPacketOffset)
{
 8009bbc:	b5b0      	push	{r4, r5, r7, lr}
 8009bbe:	b094      	sub	sp, #80	; 0x50
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4603      	mov	r3, r0
 8009bcc:	70fb      	strb	r3, [r7, #3]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70bb      	strb	r3, [r7, #2]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	707b      	strb	r3, [r7, #1]
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8009bd6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bd8:	f7f8 fc69 	bl	80024ae <netBufferGetLength>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	643b      	str	r3, [r7, #64]	; 0x40

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 8009be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be6:	2b13      	cmp	r3, #19
 8009be8:	d801      	bhi.n	8009bee <icmpSendErrorMessage+0x32>
      return ERROR_INVALID_LENGTH;
 8009bea:	23ec      	movs	r3, #236	; 0xec
 8009bec:	e0a4      	b.n	8009d38 <icmpSendErrorMessage+0x17c>

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset);
 8009bee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009bf0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009bf2:	f7f8 fd24 	bl	800263e <netBufferAt>
 8009bf6:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Sanity check
   if(ipHeader == NULL)
 8009bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <icmpSendErrorMessage+0x46>
      return ERROR_FAILURE;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e09a      	b.n	8009d38 <icmpSendErrorMessage+0x17c>

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8009c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 fbf1 	bl	800b3f0 <ipv4IsBroadcastAddr>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d105      	bne.n	8009c20 <icmpSendErrorMessage+0x64>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8009c1c:	2be0      	cmp	r3, #224	; 0xe0
 8009c1e:	d101      	bne.n	8009c24 <icmpSendErrorMessage+0x68>
   {
      //Report an error
      return ERROR_INVALID_ADDRESS;
 8009c20:	23e4      	movs	r3, #228	; 0xe4
 8009c22:	e089      	b.n	8009d38 <icmpSendErrorMessage+0x17c>
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 8009c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	3302      	adds	r3, #2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c34:	4293      	cmp	r3, r2
 8009c36:	bf28      	it	cs
 8009c38:	4613      	movcs	r3, r2
 8009c3a:	643b      	str	r3, [r7, #64]	; 0x40

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 8009c3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c40:	4619      	mov	r1, r3
 8009c42:	2008      	movs	r0, #8
 8009c44:	f7f8 f8e0 	bl	8001e08 <ipAllocBuffer>
 8009c48:	63b8      	str	r0, [r7, #56]	; 0x38
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d101      	bne.n	8009c54 <icmpSendErrorMessage+0x98>
      return ERROR_OUT_OF_MEMORY;
 8009c50:	2364      	movs	r3, #100	; 0x64
 8009c52:	e071      	b.n	8009d38 <icmpSendErrorMessage+0x17c>

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset);
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	4619      	mov	r1, r3
 8009c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c5a:	f7f8 fcf0 	bl	800263e <netBufferAt>
 8009c5e:	6378      	str	r0, [r7, #52]	; 0x34

   //Format ICMP message
   icmpHeader->type = type;
 8009c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	701a      	strb	r2, [r3, #0]
   icmpHeader->code = code;
 8009c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c68:	78ba      	ldrb	r2, [r7, #2]
 8009c6a:	705a      	strb	r2, [r3, #1]
   icmpHeader->checksum = 0;
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c6e:	2200      	movs	r2, #0
 8009c70:	709a      	strb	r2, [r3, #2]
 8009c72:	2200      	movs	r2, #0
 8009c74:	70da      	strb	r2, [r3, #3]
   icmpHeader->parameter = parameter;
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	787a      	ldrb	r2, [r7, #1]
 8009c7a:	711a      	strb	r2, [r3, #4]
   icmpHeader->unused[0] = 0;
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	2200      	movs	r2, #0
 8009c80:	715a      	strb	r2, [r3, #5]
   icmpHeader->unused[1] = 0;
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	2200      	movs	r2, #0
 8009c86:	719a      	strb	r2, [r3, #6]
   icmpHeader->unused[2] = 0;
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	71da      	strb	r2, [r3, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 8009c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c96:	f7f8 fd05 	bl	80026a4 <netBufferConcat>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Check status code
   if(!error)
 8009ca0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d142      	bne.n	8009d2e <icmpSendErrorMessage+0x172>
   {
      NetTxAncillary ancillary;

      //Get the length of the resulting message
      length = netBufferGetLength(icmpMessage) - offset;
 8009ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009caa:	f7f8 fc00 	bl	80024ae <netBufferGetLength>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	643b      	str	r3, [r7, #64]	; 0x40
      //Message checksum calculation
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cbe:	f7f7 fffb 	bl	8001cb8 <ipCalcChecksumEx>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	805a      	strh	r2, [r3, #2]

      //Format IPv4 pseudo header
      pseudoHeader.srcAddr = ipHeader->destAddr;
 8009cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	627b      	str	r3, [r7, #36]	; 0x24
      pseudoHeader.destAddr = ipHeader->srcAddr;
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	62bb      	str	r3, [r7, #40]	; 0x28
      pseudoHeader.reserved = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
      pseudoHeader.length = htons(length);
 8009ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7f7 f8b9 	bl	8000e5e <swapInt16>
 8009cec:	4603      	mov	r3, r0
 8009cee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      //Update ICMP statistics
      icmpUpdateOutStats(type);
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f000 f85a 	bl	8009dac <icmpUpdateOutStats>

      //Debug message
      TRACE_INFO("Sending ICMP Error message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message contents for debugging purpose
      icmpDumpErrorMessage(icmpHeader);
 8009cf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009cfa:	f000 f89f 	bl	8009e3c <icmpDumpErrorMessage>

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009cfe:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <icmpSendErrorMessage+0x184>)
 8009d00:	f107 040c 	add.w	r4, r7, #12
 8009d04:	461d      	mov	r5, r3
 8009d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009d0e:	e884 0003 	stmia.w	r4, {r0, r1}

      //Send ICMP Error message
      error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 8009d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d14:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8009d18:	f107 030c 	add.w	r3, r7, #12
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb06 	bl	800a334 <ipv4SendDatagram>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 8009d2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d30:	f7f8 fbae 	bl	8002490 <netBufferFree>

   //Return status code
   return error;
 8009d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3748      	adds	r7, #72	; 0x48
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8009d40:	080117a0 	.word	0x080117a0

08009d44 <icmpUpdateInStats>:
 * @brief Update ICMP input statistics
 * @param[in] type ICMP message type
 **/

void icmpUpdateInStats(uint8_t type)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	71fb      	strb	r3, [r7, #7]
   //Check ICMP message type
   switch(type)
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	3b03      	subs	r3, #3
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d822      	bhi.n	8009d9c <icmpUpdateInStats+0x58>
 8009d56:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <icmpUpdateInStats+0x18>)
 8009d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5c:	08009d9d 	.word	0x08009d9d
 8009d60:	08009d9d 	.word	0x08009d9d
 8009d64:	08009d9d 	.word	0x08009d9d
 8009d68:	08009d9d 	.word	0x08009d9d
 8009d6c:	08009d9d 	.word	0x08009d9d
 8009d70:	08009d9d 	.word	0x08009d9d
 8009d74:	08009d9d 	.word	0x08009d9d
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009d9d 	.word	0x08009d9d
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009d9d 	.word	0x08009d9d
 8009d8c:	08009d9d 	.word	0x08009d9d
 8009d90:	08009d9d 	.word	0x08009d9d
 8009d94:	08009d9d 	.word	0x08009d9d
 8009d98:	08009d9d 	.word	0x08009d9d
      //Number of ICMP Address Mask Reply messages received
      MIB2_INC_COUNTER32(icmpGroup.icmpInAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8009d9c:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsInPkts[type], 1);
}
 8009d9e:	bf00      	nop
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop

08009dac <icmpUpdateOutStats>:
 * @brief Update ICMP output statistics
 * @param[in] type ICMPv6 message type
 **/

void icmpUpdateOutStats(uint8_t type)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	4603      	mov	r3, r0
 8009db4:	71fb      	strb	r3, [r7, #7]
   //Total number of ICMP messages which this entity attempted to send
   MIB2_INC_COUNTER32(icmpGroup.icmpOutMsgs, 1);
   IP_MIB_INC_COUNTER32(icmpStats.icmpStatsOutMsgs, 1);

   //Check ICMP message type
   switch(type)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	3b03      	subs	r3, #3
 8009dba:	2b0f      	cmp	r3, #15
 8009dbc:	d822      	bhi.n	8009e04 <icmpUpdateOutStats+0x58>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <icmpUpdateOutStats+0x18>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009e05 	.word	0x08009e05
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009e05 	.word	0x08009e05
 8009dd0:	08009e05 	.word	0x08009e05
 8009dd4:	08009e05 	.word	0x08009e05
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	08009e05 	.word	0x08009e05
 8009de0:	08009e05 	.word	0x08009e05
 8009de4:	08009e05 	.word	0x08009e05
 8009de8:	08009e05 	.word	0x08009e05
 8009dec:	08009e05 	.word	0x08009e05
 8009df0:	08009e05 	.word	0x08009e05
 8009df4:	08009e05 	.word	0x08009e05
 8009df8:	08009e05 	.word	0x08009e05
 8009dfc:	08009e05 	.word	0x08009e05
 8009e00:	08009e05 	.word	0x08009e05
      //Number of ICMP Address Mask Reply messages sent
      MIB2_INC_COUNTER32(icmpGroup.icmpOutAddrMaskReps, 1);
      break;
   default:
      //Just for sanity
      break;
 8009e04:	bf00      	nop
   }

   //Increment per-message type ICMP counter
   IP_MIB_INC_COUNTER32(icmpMsgStatsTable.icmpMsgStatsOutPkts[type], 1);
}
 8009e06:	bf00      	nop
 8009e08:	370c      	adds	r7, #12
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop

08009e14 <icmpDumpMessage>:
 * @brief Dump ICMP message for debugging purpose
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpMessage(const IcmpHeader *message)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <icmpDumpEchoMessage>:
 * @brief Dump ICMP Echo Request or Echo Reply message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpEchoMessage(const IcmpEchoMessage *message)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Identifier = 0x%04" PRIX16 "\r\n", ntohs(message->identifier));
   TRACE_DEBUG("  Sequence Number = 0x%04" PRIX16 "\r\n", ntohs(message->sequenceNumber));
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <icmpDumpErrorMessage>:
 * @brief Dump generic ICMP Error message
 * @param[in] message Pointer to the ICMP message
 **/

void icmpDumpErrorMessage(const IcmpErrorMessage *message)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
   //Dump ICMP message
   TRACE_DEBUG("  Type = %" PRIu8 "\r\n", message->type);
   TRACE_DEBUG("  Code = %" PRIu8 "\r\n", message->code);
   TRACE_DEBUG("  Checksum = 0x%04" PRIX16 "\r\n", ntohs(message->checksum));
   TRACE_DEBUG("  Parameter = %" PRIu8 "\r\n", message->parameter);
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7f9 fa4f 	bl	80032fc <nicGetPhysicalInterface>
 8009e5e:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8009e66:	60bb      	str	r3, [r7, #8]

   //Clear the IPv4 context
   osMemset(context, 0, sizeof(Ipv4Context));
 8009e68:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	68b8      	ldr	r0, [r7, #8]
 8009e70:	f006 f871 	bl	800ff56 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	601a      	str	r2, [r3, #0]
   context->isRouter = FALSE;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	605a      	str	r2, [r3, #4]

   //Broadcast ICMP Echo Request messages are allowed by default
   context->enableBroadcastEchoReq = TRUE;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2201      	movs	r2, #1
 8009e88:	609a      	str	r2, [r3, #8]

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	819a      	strh	r2, [r3, #12]

   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	2208      	movs	r2, #8
 8009e96:	2100      	movs	r1, #0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f006 f85c 	bl	800ff56 <memset>
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	332c      	adds	r3, #44	; 0x2c
 8009ea2:	2250      	movs	r2, #80	; 0x50
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f006 f855 	bl	800ff56 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	337c      	adds	r3, #124	; 0x7c
 8009eb0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f006 f84d 	bl	800ff56 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <ipv4SetHostAddr>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddr(NetInterface *interface, Ipv4Addr addr)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
   //Set IPv4 host address
   return ipv4SetHostAddrEx(interface, 0, addr);
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f805 	bl	8009ee4 <ipv4SetHostAddrEx>
 8009eda:	4603      	mov	r3, r0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <ipv4SetHostAddrEx>:
 * @param[in] addr IPv4 host address
 * @return Error code
 **/

error_t ipv4SetHostAddrEx(NetInterface *interface, uint_t index, Ipv4Addr addr)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
   Ipv4AddrEntry *entry;

   //Check parameters
   if(interface == NULL)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d101      	bne.n	8009efa <ipv4SetHostAddrEx+0x16>
      return ERROR_INVALID_PARAMETER;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e02e      	b.n	8009f58 <ipv4SetHostAddrEx+0x74>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d002      	beq.n	8009f06 <ipv4SetHostAddrEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8009f00:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009f04:	e028      	b.n	8009f58 <ipv4SetHostAddrEx+0x74>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f0c:	2be0      	cmp	r3, #224	; 0xe0
 8009f0e:	d101      	bne.n	8009f14 <ipv4SetHostAddrEx+0x30>
      return ERROR_INVALID_ADDRESS;
 8009f10:	23e4      	movs	r3, #228	; 0xe4
 8009f12:	e021      	b.n	8009f58 <ipv4SetHostAddrEx+0x74>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8009f14:	4812      	ldr	r0, [pc, #72]	; (8009f60 <ipv4SetHostAddrEx+0x7c>)
 8009f16:	f7f7 f906 	bl	8001126 <osAcquireMutex>

   //Point to the corresponding entry
   entry = &interface->ipv4Context.addrList[index];
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	617b      	str	r3, [r7, #20]

   //Set up host address
   entry->addr = addr;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
   //Clear conflict flag
   entry->conflict = FALSE;
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	609a      	str	r2, [r3, #8]

   //Check whether the new host address is valid
   if(addr != IPV4_UNSPECIFIED_ADDR)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <ipv4SetHostAddrEx+0x66>
   {
      //The use of the IPv4 address is now unrestricted
      entry->state = IPV4_ADDR_STATE_VALID;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2202      	movs	r2, #2
 8009f46:	711a      	strb	r2, [r3, #4]
 8009f48:	e002      	b.n	8009f50 <ipv4SetHostAddrEx+0x6c>
   }
   else
   {
      //The IPv4 address is no longer valid
      entry->state = IPV4_ADDR_STATE_INVALID;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	711a      	strb	r2, [r3, #4]
   //Restart mDNS probing process
   mdnsResponderStartProbing(interface->mdnsResponderContext);
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 8009f50:	4803      	ldr	r0, [pc, #12]	; (8009f60 <ipv4SetHostAddrEx+0x7c>)
 8009f52:	f7f7 f8f7 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20009168 	.word	0x20009168

08009f64 <ipv4SetSubnetMask>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMask(NetInterface *interface, Ipv4Addr mask)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
   //Set subnet mask
   return ipv4SetSubnetMaskEx(interface, 0, mask);
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f806 	bl	8009f84 <ipv4SetSubnetMaskEx>
 8009f78:	4603      	mov	r3, r0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <ipv4SetSubnetMaskEx>:
 * @param[in] mask Subnet mask
 * @return Error code
 **/

error_t ipv4SetSubnetMaskEx(NetInterface *interface, uint_t index, Ipv4Addr mask)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <ipv4SetSubnetMaskEx+0x16>
      return ERROR_INVALID_PARAMETER;
 8009f96:	2302      	movs	r3, #2
 8009f98:	e017      	b.n	8009fca <ipv4SetSubnetMaskEx+0x46>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <ipv4SetSubnetMaskEx+0x22>
      return ERROR_OUT_OF_RANGE;
 8009fa0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009fa4:	e011      	b.n	8009fca <ipv4SetSubnetMaskEx+0x46>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 8009fa6:	480b      	ldr	r0, [pc, #44]	; (8009fd4 <ipv4SetSubnetMaskEx+0x50>)
 8009fa8:	f7f7 f8bd 	bl	8001126 <osAcquireMutex>
   //Set up subnet mask
   interface->ipv4Context.addrList[index].subnetMask = mask;
 8009fac:	68f9      	ldr	r1, [r7, #12]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	440b      	add	r3, r1
 8009fba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 8009fc2:	4804      	ldr	r0, [pc, #16]	; (8009fd4 <ipv4SetSubnetMaskEx+0x50>)
 8009fc4:	f7f7 f8be 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20009168 	.word	0x20009168

08009fd8 <ipv4SetDefaultGateway>:
 * @param[in] addr Default gateway address
 * @return Error code
 **/

error_t ipv4SetDefaultGateway(NetInterface *interface, Ipv4Addr addr)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
   //Set default gateway
   return ipv4SetDefaultGatewayEx(interface, 0, addr);
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f806 	bl	8009ff8 <ipv4SetDefaultGatewayEx>
 8009fec:	4603      	mov	r3, r0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <ipv4SetDefaultGatewayEx>:
 * @return Error code
 **/

error_t ipv4SetDefaultGatewayEx(NetInterface *interface, uint_t index,
   Ipv4Addr addr)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
   //Check parameters
   if(interface == NULL)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <ipv4SetDefaultGatewayEx+0x16>
      return ERROR_INVALID_PARAMETER;
 800a00a:	2302      	movs	r3, #2
 800a00c:	e01e      	b.n	800a04c <ipv4SetDefaultGatewayEx+0x54>

   //Make sure that the index is valid
   if(index >= IPV4_ADDR_LIST_SIZE)
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <ipv4SetDefaultGatewayEx+0x22>
      return ERROR_OUT_OF_RANGE;
 800a014:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a018:	e018      	b.n	800a04c <ipv4SetDefaultGatewayEx+0x54>

   //The IPv4 address must be a valid unicast address
   if(ipv4IsMulticastAddr(addr))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a020:	2be0      	cmp	r3, #224	; 0xe0
 800a022:	d101      	bne.n	800a028 <ipv4SetDefaultGatewayEx+0x30>
      return ERROR_INVALID_ADDRESS;
 800a024:	23e4      	movs	r3, #228	; 0xe4
 800a026:	e011      	b.n	800a04c <ipv4SetDefaultGatewayEx+0x54>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800a028:	480a      	ldr	r0, [pc, #40]	; (800a054 <ipv4SetDefaultGatewayEx+0x5c>)
 800a02a:	f7f7 f87c 	bl	8001126 <osAcquireMutex>
   //Set up default gateway address
   interface->ipv4Context.addrList[index].defaultGateway = addr;
 800a02e:	68f9      	ldr	r1, [r7, #12]
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	440b      	add	r3, r1
 800a03c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	601a      	str	r2, [r3, #0]
   //Release exclusive access
   osReleaseMutex(&netMutex);
 800a044:	4803      	ldr	r0, [pc, #12]	; (800a054 <ipv4SetDefaultGatewayEx+0x5c>)
 800a046:	f7f7 f87d 	bl	8001144 <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20009168 	.word	0x20009168

0800a058 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7f9 f94b 	bl	80032fc <nicGetPhysicalInterface>
 800a066:	60f8      	str	r0, [r7, #12]

   //Point to the IPv4 context
   context = &interface->ipv4Context;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800a06e:	60bb      	str	r3, [r7, #8]

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	601a      	str	r2, [r3, #0]

#if (ETH_SUPPORT == ENABLED)
   //Flush ARP cache contents
   arpFlushCache(interface);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fe feca 	bl	8008e14 <arpFlushCache>
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 ff66 	bl	800af52 <ipv4FlushFragQueue>
   autoIpLinkChangeEvent(interface->autoIpContext);
#endif

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fc ff6d 	bl	8006f6c <dhcpClientLinkChangeEvent>
#endif
}
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <ipv4ProcessPacket>:
 *   the packet
 **/

void ipv4ProcessPacket(NetInterface *interface, Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b08a      	sub	sp, #40	; 0x28
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
   error_t error;

   //Initialize status code
   error = NO_ERROR;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Start of exception handling block
   do
   {
      //Ensure the packet length is greater than 20 bytes
      if(length < sizeof(Ipv4Header))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b13      	cmp	r3, #19
 800a0b0:	d802      	bhi.n	800a0b8 <ipv4ProcessPacket+0x1e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 800a0b2:	23ec      	movs	r3, #236	; 0xec
 800a0b4:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a0b6:	e09e      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Debug message
      TRACE_INFO("IPv4 packet received (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump IP header contents for debugging purpose
      ipv4DumpHeader(packet);
 800a0b8:	68b8      	ldr	r0, [r7, #8]
 800a0ba:	f000 fbfd 	bl	800a8b8 <ipv4DumpHeader>

      //A packet whose version number is not 4 must be silently discarded
      if(packet->version != IPV4_VERSION)
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	f023 030f 	bic.w	r3, r3, #15
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b40      	cmp	r3, #64	; 0x40
 800a0ca:	d002      	beq.n	800a0d2 <ipv4ProcessPacket+0x38>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800a0cc:	23d4      	movs	r3, #212	; 0xd4
 800a0ce:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a0d0:	e091      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Valid IPv4 header shall contains more than five 32-bit words
      if(packet->headerLength < 5)
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d802      	bhi.n	800a0e6 <ipv4ProcessPacket+0x4c>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800a0e0:	23d4      	movs	r3, #212	; 0xd4
 800a0e2:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a0e4:	e087      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Ensure the total length is correct before processing the packet
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f6 feb6 	bl	8000e5e <swapInt16>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	429a      	cmp	r2, r3
 800a104:	da02      	bge.n	800a10c <ipv4ProcessPacket+0x72>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800a106:	23d4      	movs	r3, #212	; 0xd4
 800a108:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a10a:	e074      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Truncated packet?
      if(length < ntohs(packet->totalLength))
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	885b      	ldrh	r3, [r3, #2]
 800a110:	b29b      	uxth	r3, r3
 800a112:	4618      	mov	r0, r3
 800a114:	f7f6 fea3 	bl	8000e5e <swapInt16>
 800a118:	4603      	mov	r3, r0
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4293      	cmp	r3, r2
 800a120:	d202      	bcs.n	800a128 <ipv4ProcessPacket+0x8e>
      {
         //Discard the received packet
         error = ERROR_INVALID_LENGTH;
 800a122:	23ec      	movs	r3, #236	; 0xec
 800a124:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a126:	e066      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Source address filtering
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	4619      	mov	r1, r3
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 ff79 	bl	800b026 <ipv4CheckSourceAddr>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <ipv4ProcessPacket+0xa6>
      {
         //Discard the received packet
         error = ERROR_INVALID_HEADER;
 800a13a:	23d4      	movs	r3, #212	; 0xd4
 800a13c:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a13e:	e05a      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }
      else
#endif
      {
         //Destination address filtering
         error = ipv4CheckDestAddr(interface, packet->destAddr);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	4619      	mov	r1, r3
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f000 ff85 	bl	800b056 <ipv4CheckDestAddr>
 800a14c:	4603      	mov	r3, r0
 800a14e:	84fb      	strh	r3, [r7, #38]	; 0x26
         }
#endif
      }

      //Invalid destination address?
      if(error)
 800a150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <ipv4ProcessPacket+0xc2>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800a156:	23e4      	movs	r3, #228	; 0xe4
 800a158:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a15a:	e04c      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Packets addressed to a tentative address should be silently discarded
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	4619      	mov	r1, r3
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f001 f985 	bl	800b472 <ipv4IsTentativeAddr>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <ipv4ProcessPacket+0xda>
      {
         //Discard the received packet
         error = ERROR_INVALID_ADDRESS;
 800a16e:	23e4      	movs	r3, #228	; 0xe4
 800a170:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a172:	e040      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //The host must verify the IP header checksum on every received datagram
      //and silently discard every datagram that has a bad checksum (refer to
      //RFC 1122, section 3.2.1.2)
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4619      	mov	r1, r3
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f7f7 fd0e 	bl	8001ba4 <ipCalcChecksum>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <ipv4ProcessPacket+0xfa>
      {
         //Debug message
         TRACE_WARNING("Wrong IP header checksum!\r\n");

         //Discard incoming packet
         error = ERROR_INVALID_HEADER;
 800a18e:	23d4      	movs	r3, #212	; 0xd4
 800a190:	84fb      	strh	r3, [r7, #38]	; 0x26
         break;
 800a192:	e030      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      }

      //Update IP statistics
      ipv4UpdateInStats(interface, packet->destAddr, length);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	4619      	mov	r1, r3
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f001 fa63 	bl	800b668 <ipv4UpdateInStats>

      //Convert the total length from network byte order
      length = ntohs(packet->totalLength);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	885b      	ldrh	r3, [r3, #2]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7f6 fe58 	bl	8000e5e <swapInt16>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	607b      	str	r3, [r7, #4]

      //A fragmented packet was received?
      if((ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK)) != 0)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	88db      	ldrh	r3, [r3, #6]
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f7f6 fe50 	bl	8000e5e <swapInt16>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d006      	beq.n	800a1d6 <ipv4ProcessPacket+0x13c>
      {
#if (IPV4_FRAG_SUPPORT == ENABLED)
         //Reassemble the original datagram
         ipv4ReassembleDatagram(interface, packet, length, ancillary);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	68b9      	ldr	r1, [r7, #8]
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f000 fc07 	bl	800a9e2 <ipv4ReassembleDatagram>
 800a1d4:	e00f      	b.n	800a1f6 <ipv4ProcessPacket+0x15c>
      else
      {
         NetBuffer1 buffer;

         //Unfragmented datagrams fit in a single chunk
         buffer.chunkCount = 1;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	617b      	str	r3, [r7, #20]
         buffer.maxChunkCount = 1;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	61bb      	str	r3, [r7, #24]
         buffer.chunk[0].address = packet;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	61fb      	str	r3, [r7, #28]
         buffer.chunk[0].length = (uint16_t) length;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	843b      	strh	r3, [r7, #32]

         //Pass the IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer, ancillary);
 800a1e8:	f107 0314 	add.w	r3, r7, #20
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 f80c 	bl	800a20e <ipv4ProcessDatagram>

      //End of exception handling block
   } while(0);

   //Invalid IPv4 packet received?
   if(error)
 800a1f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d004      	beq.n	800a206 <ipv4ProcessPacket+0x16c>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 800a1fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1fe:	4619      	mov	r1, r3
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f001 fa51 	bl	800b6a8 <ipv4UpdateErrorStats>
   }
}
 800a206:	bf00      	nop
 800a208:	3728      	adds	r7, #40	; 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <ipv4ProcessDatagram>:
 *   the packet
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer,
   NetRxAncillary *ancillary)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b08e      	sub	sp, #56	; 0x38
 800a212:	af02      	add	r7, sp, #8
 800a214:	60f8      	str	r0, [r7, #12]
 800a216:	60b9      	str	r1, [r7, #8]
 800a218:	607a      	str	r2, [r7, #4]
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer);
 800a21a:	68b8      	ldr	r0, [r7, #8]
 800a21c:	f7f8 f947 	bl	80024ae <netBufferGetLength>
 800a220:	62b8      	str	r0, [r7, #40]	; 0x28

   //Point to the IPv4 header
   header = netBufferAt(buffer, 0);
 800a222:	2100      	movs	r1, #0
 800a224:	68b8      	ldr	r0, [r7, #8]
 800a226:	f7f8 fa0a 	bl	800263e <netBufferAt>
 800a22a:	6278      	str	r0, [r7, #36]	; 0x24
   //Sanity check
   if(header == NULL)
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d07c      	beq.n	800a32c <ipv4ProcessDatagram+0x11e>
      return;

   //Debug message
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);
 800a232:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a234:	f000 fb40 	bl	800a8b8 <ipv4DumpHeader>

   //Get the offset to the payload
   offset = header->headerLength * 4;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a240:	b2db      	uxtb	r3, r3
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	623b      	str	r3, [r7, #32]
   //Compute the length of the payload
   length -= header->headerLength * 4;
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	461a      	mov	r2, r3
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	1a9b      	subs	r3, r3, r2
 800a258:	62bb      	str	r3, [r7, #40]	; 0x28

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800a25a:	230c      	movs	r3, #12
 800a25c:	613b      	str	r3, [r7, #16]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 800a25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	617b      	str	r3, [r7, #20]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	61bb      	str	r3, [r7, #24]
   pseudoHeader.ipv4Data.reserved = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	773b      	strb	r3, [r7, #28]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a270:	7a5b      	ldrb	r3, [r3, #9]
 800a272:	777b      	strb	r3, [r7, #29]
   pseudoHeader.ipv4Data.length = htons(length);
 800a274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a276:	b29b      	uxth	r3, r3
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f6 fdf0 	bl	8000e5e <swapInt16>
 800a27e:	4603      	mov	r3, r0
 800a280:	83fb      	strh	r3, [r7, #30]

   //Save TTL value
   ancillary->ttl = header->timeToLive;
 800a282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a284:	7a1a      	ldrb	r2, [r3, #8]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	701a      	strb	r2, [r3, #0]
#if defined(IPV4_DATAGRAM_FORWARD_HOOK)
   IPV4_DATAGRAM_FORWARD_HOOK(interface, &pseudoHeader, buffer, offset);
#endif

   //Check the protocol field
   switch(header->protocol)
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	7a5b      	ldrb	r3, [r3, #9]
 800a28e:	2b11      	cmp	r3, #17
 800a290:	d01d      	beq.n	800a2ce <ipv4ProcessDatagram+0xc0>
 800a292:	2b11      	cmp	r3, #17
 800a294:	dc27      	bgt.n	800a2e6 <ipv4ProcessDatagram+0xd8>
 800a296:	2b01      	cmp	r3, #1
 800a298:	d002      	beq.n	800a2a0 <ipv4ProcessDatagram+0x92>
 800a29a:	2b06      	cmp	r3, #6
 800a29c:	d00b      	beq.n	800a2b6 <ipv4ProcessDatagram+0xa8>
 800a29e:	e022      	b.n	800a2e6 <ipv4ProcessDatagram+0xd8>
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 800a2a0:	f107 0310 	add.w	r3, r7, #16
 800a2a4:	1d19      	adds	r1, r3, #4
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fb76 	bl	800999c <icmpProcessMessage>
      rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
         ancillary);
#endif

      //No error to report
      error = NO_ERROR;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Continue processing
      break;
 800a2b4:	e01a      	b.n	800a2ec <ipv4ProcessDatagram+0xde>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset, ancillary);
 800a2b6:	f107 0110 	add.w	r1, r7, #16
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	6a3b      	ldr	r3, [r7, #32]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7f9 f9ca 	bl	800365c <tcpProcessSegment>
      //No error to report
      error = NO_ERROR;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Continue processing
      break;
 800a2cc:	e00e      	b.n	800a2ec <ipv4ProcessDatagram+0xde>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset,
 800a2ce:	f107 0110 	add.w	r1, r7, #16
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	6a3b      	ldr	r3, [r7, #32]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7fc f80e 	bl	80062fc <udpProcessDatagram>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ancillary);
      //Continue processing
      break;
 800a2e4:	e002      	b.n	800a2ec <ipv4ProcessDatagram+0xde>
      //Allow raw sockets to process IPv4 packets
      error = rawSocketProcessIpPacket(interface, &pseudoHeader, buffer, offset,
         ancillary);
#else
      //Report an error
      error = ERROR_PROTOCOL_UNREACHABLE;
 800a2e6:	23d1      	movs	r3, #209	; 0xd1
 800a2e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif
      //Continue processing
      break;
 800a2ea:	bf00      	nop
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 800a2ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2ee:	2bd1      	cmp	r3, #209	; 0xd1
 800a2f0:	d10e      	bne.n	800a310 <ipv4ProcessDatagram+0x102>
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 800a2f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f001 f9d6 	bl	800b6a8 <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	2202      	movs	r2, #2
 800a308:	2103      	movs	r1, #3
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff fc56 	bl	8009bbc <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 800a310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a312:	2bd2      	cmp	r3, #210	; 0xd2
 800a314:	d10b      	bne.n	800a32e <ipv4ProcessDatagram+0x120>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800a316:	2300      	movs	r3, #0
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	2300      	movs	r3, #0
 800a320:	2203      	movs	r2, #3
 800a322:	2103      	movs	r1, #3
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f7ff fc49 	bl	8009bbc <icmpSendErrorMessage>
 800a32a:	e000      	b.n	800a32e <ipv4ProcessDatagram+0x120>
      return;
 800a32c:	bf00      	nop
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 800a32e:	3730      	adds	r7, #48	; 0x30
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <ipv4SendDatagram>:
 * @return Error code
 **/

error_t ipv4SendDatagram(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b08c      	sub	sp, #48	; 0x30
 800a338:	af04      	add	r7, sp, #16
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
 800a340:	603b      	str	r3, [r7, #0]
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutRequests, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutRequests, 1);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutRequests, 1);

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7f8 f8b3 	bl	80024ae <netBufferGetLength>
 800a348:	4602      	mov	r2, r0
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	61bb      	str	r3, [r7, #24]

   //Identification field is primarily used to identify fragments of an
   //original IP datagram
   id = interface->ipv4Context.identification++;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 31d8 	ldrh.w	r3, [r3, #472]	; 0x1d8
 800a356:	1c5a      	adds	r2, r3, #1
 800a358:	b291      	uxth	r1, r2
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	f8a2 11d8 	strh.w	r1, [r2, #472]	; 0x1d8
 800a360:	82fb      	strh	r3, [r7, #22]

   //If the payload length is smaller than the network interface MTU then no
   //fragmentation is needed
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	f103 0214 	add.w	r2, r3, #20
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a36e:	429a      	cmp	r2, r3
 800a370:	d80e      	bhi.n	800a390 <ipv4SendDatagram+0x5c>
   {
      //Send data as is
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer, offset,
 800a372:	8afa      	ldrh	r2, [r7, #22]
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	2300      	movs	r3, #0
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f815 	bl	800a3b4 <ipv4SendPacket>
 800a38a:	4603      	mov	r3, r0
 800a38c:	83fb      	strh	r3, [r7, #30]
 800a38e:	e00b      	b.n	800a3a8 <ipv4SendDatagram+0x74>
   //must fragment the data
   else
   {
#if (IPV4_FRAG_SUPPORT == ENABLED)
      //Fragment IP datagram into smaller packets
      error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer, offset,
 800a390:	8afa      	ldrh	r2, [r7, #22]
 800a392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 fa94 	bl	800a8cc <ipv4FragmentDatagram>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	83fb      	strh	r3, [r7, #30]
      error = ERROR_MESSAGE_TOO_LONG;
#endif
   }

   //Return status code
   return error;
 800a3a8:	8bfb      	ldrh	r3, [r7, #30]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface, Ipv4PseudoHeader *pseudoHeader,
   uint16_t fragId, size_t fragOffset, NetBuffer *buffer, size_t offset,
   NetTxAncillary *ancillary)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08c      	sub	sp, #48	; 0x30
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	80fb      	strh	r3, [r7, #6]
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Check whether an IP Router Alert option should be added
   if(ancillary->routerAlert)
 800a3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00c      	beq.n	800a3e6 <ipv4SendPacket+0x32>
   {
      //Add an IP Router Alert option
      error = ipv4AddRouterAlertOption(buffer, &offset);
 800a3cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d4:	f000 fdfc 	bl	800afd0 <ipv4AddRouterAlertOption>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	84fb      	strh	r3, [r7, #38]	; 0x26
      //Any error to report?
      if(error)
 800a3dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <ipv4SendPacket+0x32>
         return error;
 800a3e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3e4:	e154      	b.n	800a690 <ipv4SendPacket+0x2dc>
   }

   //Is there enough space for the IPv4 header?
   if(offset < sizeof(Ipv4Header))
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e8:	2b13      	cmp	r3, #19
 800a3ea:	d801      	bhi.n	800a3f0 <ipv4SendPacket+0x3c>
      return ERROR_INVALID_PARAMETER;
 800a3ec:	2302      	movs	r3, #2
 800a3ee:	e14f      	b.n	800a690 <ipv4SendPacket+0x2dc>

   //Make room for the header
   offset -= sizeof(Ipv4Header);
 800a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f2:	3b14      	subs	r3, #20
 800a3f4:	637b      	str	r3, [r7, #52]	; 0x34
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 800a3f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3f8:	f7f8 f859 	bl	80024ae <netBufferGetLength>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	623b      	str	r3, [r7, #32]

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset);
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	4619      	mov	r1, r3
 800a408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a40a:	f7f8 f918 	bl	800263e <netBufferAt>
 800a40e:	61f8      	str	r0, [r7, #28]

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	7813      	ldrb	r3, [r2, #0]
 800a414:	2104      	movs	r1, #4
 800a416:	f361 1307 	bfi	r3, r1, #4, #4
 800a41a:	7013      	strb	r3, [r2, #0]
   packet->headerLength = 5;
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	7813      	ldrb	r3, [r2, #0]
 800a420:	2105      	movs	r1, #5
 800a422:	f361 0303 	bfi	r3, r1, #0, #4
 800a426:	7013      	strb	r3, [r2, #0]
   packet->typeOfService = 0;
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	2200      	movs	r2, #0
 800a42c:	705a      	strb	r2, [r3, #1]
   packet->totalLength = htons(length);
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	b29b      	uxth	r3, r3
 800a432:	4618      	mov	r0, r3
 800a434:	f7f6 fd13 	bl	8000e5e <swapInt16>
 800a438:	4603      	mov	r3, r0
 800a43a:	461a      	mov	r2, r3
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	805a      	strh	r2, [r3, #2]
   packet->identification = htons(fragId);
 800a440:	88fb      	ldrh	r3, [r7, #6]
 800a442:	4618      	mov	r0, r3
 800a444:	f7f6 fd0b 	bl	8000e5e <swapInt16>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	809a      	strh	r2, [r3, #4]
   packet->fragmentOffset = htons(fragOffset);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	b29b      	uxth	r3, r3
 800a454:	4618      	mov	r0, r3
 800a456:	f7f6 fd02 	bl	8000e5e <swapInt16>
 800a45a:	4603      	mov	r3, r0
 800a45c:	461a      	mov	r2, r3
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	80da      	strh	r2, [r3, #6]
   packet->timeToLive = ancillary->ttl;
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	721a      	strb	r2, [r3, #8]
   packet->protocol = pseudoHeader->protocol;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	7a5a      	ldrb	r2, [r3, #9]
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	725a      	strb	r2, [r3, #9]
   packet->headerChecksum = 0;
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2200      	movs	r2, #0
 800a476:	729a      	strb	r2, [r3, #10]
 800a478:	2200      	movs	r2, #0
 800a47a:	72da      	strb	r2, [r3, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	60da      	str	r2, [r3, #12]
   packet->destAddr = pseudoHeader->destAddr;
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	611a      	str	r2, [r3, #16]

   //The IHL field is the length of the IP packet header in 32-bit words, and
   //thus points to the beginning of the data. Note that the minimum value for
   //a correct header is 5 (refer to RFC 791, section 3.1)
   if(ancillary->routerAlert)
 800a48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d005      	beq.n	800a4a0 <ipv4SendPacket+0xec>
   {
      packet->headerLength = 6;
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	7813      	ldrb	r3, [r2, #0]
 800a498:	2106      	movs	r1, #6
 800a49a:	f361 0303 	bfi	r3, r1, #0, #4
 800a49e:	7013      	strb	r3, [r2, #0]
   }

   //Check whether the TTL value is zero
   if(packet->timeToLive == 0)
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	7a1b      	ldrb	r3, [r3, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <ipv4SendPacket+0xfa>
   {
      //Use default Time-To-Live value
      packet->timeToLive = IPV4_DEFAULT_TTL;
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	2240      	movs	r2, #64	; 0x40
 800a4ac:	721a      	strb	r2, [r3, #8]
   //Set DSCP field
   packet->typeOfService = (ancillary->dscp << 2) & 0xFC;
#endif

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 800a4ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
      packet->headerLength * 4);
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	009b      	lsls	r3, r3, #2
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4c0:	f7f7 fbfa 	bl	8001cb8 <ipCalcChecksumEx>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	815a      	strh	r2, [r3, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fda7 	bl	800b026 <ipv4CheckSourceAddr>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Invalid source address?
   if(error)
 800a4dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <ipv4SendPacket+0x132>
      return error;
 800a4e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4e4:	e0d4      	b.n	800a690 <ipv4SendPacket+0x2dc>

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <ipv4SendPacket+0x140>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 800a4ee:	23e4      	movs	r3, #228	; 0xe4
 800a4f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a4f2:	e0cc      	b.n	800a68e <ipv4SendPacket+0x2da>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 ffe5 	bl	800b4c8 <ipv4IsLocalHostAddr>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d003      	beq.n	800a50c <ipv4SendPacket+0x158>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 800a504:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a508:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a50a:	e0c0      	b.n	800a68e <ipv4SendPacket+0x2da>
   }
   else
   {
#if (ETH_SUPPORT == ENABLED)
      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7f8 fef5 	bl	80032fc <nicGetPhysicalInterface>
 800a512:	61b8      	str	r0, [r7, #24]

      //Ethernet interface?
      if(physicalInterface->nicDriver != NULL &&
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f000 80b4 	beq.w	800a686 <ipv4SendPacket+0x2d2>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a522:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 800a524:	2b01      	cmp	r3, #1
 800a526:	f040 80ae 	bne.w	800a686 <ipv4SendPacket+0x2d2>
      {
         Ipv4Addr destIpAddr;

         //Get the destination IPv4 address
         destIpAddr = pseudoHeader->destAddr;
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	617b      	str	r3, [r7, #20]

         //Perform address resolution
         if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	3312      	adds	r3, #18
 800a534:	2206      	movs	r2, #6
 800a536:	4958      	ldr	r1, [pc, #352]	; (800a698 <ipv4SendPacket+0x2e4>)
 800a538:	4618      	mov	r0, r3
 800a53a:	f005 fcd6 	bl	800feea <memcmp>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <ipv4SendPacket+0x196>
         {
            //The destination address is already resolved
            error = NO_ERROR;
 800a544:	2300      	movs	r3, #0
 800a546:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a548:	e06d      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	4619      	mov	r1, r3
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 ff4e 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d009      	beq.n	800a56e <ipv4SendPacket+0x1ba>
         {
            //Use of the broadcast MAC address to send the packet
            ancillary->destMacAddr = MAC_BROADCAST_ADDR;
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	4a4f      	ldr	r2, [pc, #316]	; (800a69c <ipv4SendPacket+0x2e8>)
 800a55e:	3312      	adds	r3, #18
 800a560:	6811      	ldr	r1, [r2, #0]
 800a562:	6019      	str	r1, [r3, #0]
 800a564:	8892      	ldrh	r2, [r2, #4]
 800a566:	809a      	strh	r2, [r3, #4]
            //Successful address resolution
            error = NO_ERROR;
 800a568:	2300      	movs	r3, #0
 800a56a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a56c:	e05b      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else if(ipv4IsMulticastAddr(destIpAddr))
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a574:	2be0      	cmp	r3, #224	; 0xe0
 800a576:	d109      	bne.n	800a58c <ipv4SendPacket+0x1d8>
         {
            //Map IPv4 multicast address to MAC-layer multicast address
            error = ipv4MapMulticastAddrToMac(destIpAddr, &ancillary->destMacAddr);
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	3312      	adds	r3, #18
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f001 f843 	bl	800b60c <ipv4MapMulticastAddrToMac>
 800a586:	4603      	mov	r3, r0
 800a588:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a58a:	e04c      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a596:	4293      	cmp	r3, r2
 800a598:	d005      	beq.n	800a5a6 <ipv4SendPacket+0x1f2>
            ipv4IsLinkLocalAddr(destIpAddr))
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	b29b      	uxth	r3, r3
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 800a59e:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d109      	bne.n	800a5ba <ipv4SendPacket+0x206>
         {
            //Packets with a link-local source or destination address are not
            //routable off the link
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	3312      	adds	r3, #18
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f7fe fd2e 	bl	8009010 <arpResolve>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a5b8:	e035      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else if(ipv4IsOnLink(interface, destIpAddr))
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 fee7 	bl	800b392 <ipv4IsOnLink>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <ipv4SendPacket+0x22a>
         {
            //Resolve destination address before sending the packet
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800a5ca:	6979      	ldr	r1, [r7, #20]
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	3312      	adds	r3, #18
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7fe fd1c 	bl	8009010 <arpResolve>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a5dc:	e023      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else if(ancillary->dontRoute)
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <ipv4SendPacket+0x246>
         {
            //Do not send the packet via a gateway
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800a5e6:	6979      	ldr	r1, [r7, #20]
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	3312      	adds	r3, #18
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7fe fd0e 	bl	8009010 <arpResolve>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a5f8:	e015      	b.n	800a626 <ipv4SendPacket+0x272>
         }
         else
         {
            //Default gateway selection
            error = ipv4SelectDefaultGateway(interface, pseudoHeader->srcAddr,
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f107 0214 	add.w	r2, r7, #20
 800a602:	4619      	mov	r1, r3
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fe8f 	bl	800b328 <ipv4SelectDefaultGateway>
 800a60a:	4603      	mov	r3, r0
 800a60c:	84fb      	strh	r3, [r7, #38]	; 0x26
               &destIpAddr);

            //Check status code
            if(!error)
 800a60e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a610:	2b00      	cmp	r3, #0
 800a612:	d108      	bne.n	800a626 <ipv4SendPacket+0x272>
            {
               //Use the selected gateway to forward the packet
               error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 800a614:	6979      	ldr	r1, [r7, #20]
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	3312      	adds	r3, #18
 800a61a:	461a      	mov	r2, r3
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7fe fcf7 	bl	8009010 <arpResolve>
 800a622:	4603      	mov	r3, r0
 800a624:	84fb      	strh	r3, [r7, #38]	; 0x26
               IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutNoRoutes, 1);
            }
         }

         //Successful address resolution?
         if(error == NO_ERROR)
 800a626:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d118      	bne.n	800a65e <ipv4SendPacket+0x2aa>
         {
            //Update IP statistics
            ipv4UpdateOutStats(interface, destIpAddr, length);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	4619      	mov	r1, r3
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f001 f828 	bl	800b688 <ipv4UpdateOutStats>

            //Debug message
            TRACE_INFO("Sending IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 800a638:	69f8      	ldr	r0, [r7, #28]
 800a63a:	f000 f93d 	bl	800a8b8 <ipv4DumpHeader>

            //Send Ethernet frame
            error = ethSendFrame(interface, &ancillary->destMacAddr,
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	f103 0112 	add.w	r1, r3, #18
 800a644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a648:	9201      	str	r2, [sp, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7f6 fe8a 	bl	800136c <ethSendFrame>
 800a658:	4603      	mov	r3, r0
 800a65a:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 800a65c:	e016      	b.n	800a68c <ipv4SendPacket+0x2d8>
               ETH_TYPE_IPV4, buffer, offset, ancillary);
         }
         else if(error == ERROR_IN_PROGRESS)
 800a65e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a660:	f240 2203 	movw	r2, #515	; 0x203
 800a664:	4293      	cmp	r3, r2
 800a666:	d111      	bne.n	800a68c <ipv4SendPacket+0x2d8>
         {
            //Debug message
            TRACE_INFO("Enqueuing IPv4 packet (%" PRIuSIZE " bytes)...\r\n", length);
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(packet);
 800a668:	69f8      	ldr	r0, [r7, #28]
 800a66a:	f000 f925 	bl	800a8b8 <ipv4DumpHeader>

            //Enqueue packets waiting for address resolution
            error = arpEnqueuePacket(interface, destIpAddr, buffer, offset,
 800a66e:	6979      	ldr	r1, [r7, #20]
 800a670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	4613      	mov	r3, r2
 800a678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7fe fd32 	bl	80090e4 <arpEnqueuePacket>
 800a680:	4603      	mov	r3, r0
 800a682:	84fb      	strh	r3, [r7, #38]	; 0x26
      {
 800a684:	e002      	b.n	800a68c <ipv4SendPacket+0x2d8>
      else
#endif
      //Unknown interface type?
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 800a686:	2307      	movs	r3, #7
 800a688:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a68a:	e000      	b.n	800a68e <ipv4SendPacket+0x2da>
      {
 800a68c:	bf00      	nop
      }
   }

   //Return status code
   return error;
 800a68e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a690:	4618      	mov	r0, r3
 800a692:	3728      	adds	r7, #40	; 0x28
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	08011750 	.word	0x08011750
 800a69c:	08011758 	.word	0x08011758

0800a6a0 <ipv4JoinMulticastGroup>:
 * @param[in] groupAddr IPv4 address identifying the host group to join
 * @return Error code
 **/

error_t ipv4JoinMulticastGroup(NetInterface *interface, Ipv4Addr groupAddr)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	; 0x28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
   NetInterface *physicalInterface;
   MacAddr macAddr;
#endif

   //The IPv4 address must be a valid multicast address
   if(!ipv4IsMulticastAddr(groupAddr))
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6b0:	2be0      	cmp	r3, #224	; 0xe0
 800a6b2:	d001      	beq.n	800a6b8 <ipv4JoinMulticastGroup+0x18>
      return ERROR_INVALID_ADDRESS;
 800a6b4:	23e4      	movs	r3, #228	; 0xe4
 800a6b6:	e065      	b.n	800a784 <ipv4JoinMulticastGroup+0xe4>

#if (ETH_SUPPORT == ENABLED)
   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7f8 fe1f 	bl	80032fc <nicGetPhysicalInterface>
 800a6be:	61b8      	str	r0, [r7, #24]
#endif

   //Initialize error code
   error = NO_ERROR;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	84fb      	strh	r3, [r7, #38]	; 0x26
   //Keep track of the first free entry
   firstFreeEntry = NULL;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61fb      	str	r3, [r7, #28]

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	623b      	str	r3, [r7, #32]
 800a6cc:	e022      	b.n	800a714 <ipv4JoinMulticastGroup+0x74>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];
 800a6ce:	6a3a      	ldr	r2, [r7, #32]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	3308      	adds	r3, #8
 800a6e2:	617b      	str	r3, [r7, #20]

      //Valid entry?
      if(entry->refCount > 0)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <ipv4JoinMulticastGroup+0x64>
      {
         //Check whether the table already contains the specified IPv4 address
         if(entry->addr == groupAddr)
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d10b      	bne.n	800a70e <ipv4JoinMulticastGroup+0x6e>
         {
            //Increment the reference count
            entry->refCount++;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	605a      	str	r2, [r3, #4]
            //Successful processing
            return NO_ERROR;
 800a700:	2300      	movs	r3, #0
 800a702:	e03f      	b.n	800a784 <ipv4JoinMulticastGroup+0xe4>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d101      	bne.n	800a70e <ipv4JoinMulticastGroup+0x6e>
            firstFreeEntry = entry;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	61fb      	str	r3, [r7, #28]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	3301      	adds	r3, #1
 800a712:	623b      	str	r3, [r7, #32]
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	2b03      	cmp	r3, #3
 800a718:	d9d9      	bls.n	800a6ce <ipv4JoinMulticastGroup+0x2e>
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <ipv4JoinMulticastGroup+0x84>
   {
      //A new entry cannot be added
      return ERROR_FAILURE;
 800a720:	2301      	movs	r3, #1
 800a722:	e02f      	b.n	800a784 <ipv4JoinMulticastGroup+0xe4>
   }

#if (ETH_SUPPORT == ENABLED)
   //Map the IPv4 multicast address to a MAC-layer address
   ipv4MapMulticastAddrToMac(groupAddr, &macAddr);
 800a724:	f107 030c 	add.w	r3, r7, #12
 800a728:	4619      	mov	r1, r3
 800a72a:	6838      	ldr	r0, [r7, #0]
 800a72c:	f000 ff6e 	bl	800b60c <ipv4MapMulticastAddrToMac>
   //Add the corresponding address to the MAC filter table
   error = ethAcceptMacAddr(interface, &macAddr);
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	4619      	mov	r1, r3
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7f6 feb4 	bl	80014a4 <ethAcceptMacAddr>
 800a73c:	4603      	mov	r3, r0
 800a73e:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Check status code
   if(!error)
 800a740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a742:	2b00      	cmp	r3, #0
 800a744:	d114      	bne.n	800a770 <ipv4JoinMulticastGroup+0xd0>
   {
      //Virtual interface?
      if(interface != physicalInterface)
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d010      	beq.n	800a770 <ipv4JoinMulticastGroup+0xd0>
      {
         //Configure the physical interface to accept the MAC address
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 800a74e:	f107 030c 	add.w	r3, r7, #12
 800a752:	4619      	mov	r1, r3
 800a754:	69b8      	ldr	r0, [r7, #24]
 800a756:	f7f6 fea5 	bl	80014a4 <ethAcceptMacAddr>
 800a75a:	4603      	mov	r3, r0
 800a75c:	84fb      	strh	r3, [r7, #38]	; 0x26

         //Any error to report?
         if(error)
 800a75e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <ipv4JoinMulticastGroup+0xd0>
         {
            //Clean up side effects
            ethDropMacAddr(interface, &macAddr);
 800a764:	f107 030c 	add.w	r3, r7, #12
 800a768:	4619      	mov	r1, r3
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7f6 feec 	bl	8001548 <ethDropMacAddr>
      }
   }
#endif

   //MAC filter table successfully updated?
   if(!error)
 800a770:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a772:	2b00      	cmp	r3, #0
 800a774:	d105      	bne.n	800a782 <ipv4JoinMulticastGroup+0xe2>
   {
      //Now we can safely add a new entry to the table
      firstFreeEntry->addr = groupAddr;
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	601a      	str	r2, [r3, #0]
      //Initialize the reference count
      firstFreeEntry->refCount = 1;
 800a77c:	69fb      	ldr	r3, [r7, #28]
 800a77e:	2201      	movs	r2, #1
 800a780:	605a      	str	r2, [r3, #4]
      igmpHostJoinGroup(interface, firstFreeEntry);
#endif
   }

   //Return status code
   return error;
 800a782:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a784:	4618      	mov	r0, r3
 800a786:	3728      	adds	r7, #40	; 0x28
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <ipv4StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv4 address
 * @return Error code
 **/

error_t ipv4StringToAddr(const char_t *str, Ipv4Addr *ipAddr)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
   error_t error;
   int_t i = 0;
 800a796:	2300      	movs	r3, #0
 800a798:	613b      	str	r3, [r7, #16]
   int_t value = -1;
 800a79a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a79e:	60fb      	str	r3, [r7, #12]

   //Parse input string
   while(1)
   {
      //Decimal digit found?
      if(osIsdigit(*str))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	4a2d      	ldr	r2, [pc, #180]	; (800a85c <ipv4StringToAddr+0xd0>)
 800a7a8:	4413      	add	r3, r2
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d015      	beq.n	800a7e0 <ipv4StringToAddr+0x54>
      {
         //First digit to be decoded?
         if(value < 0)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da01      	bge.n	800a7be <ipv4StringToAddr+0x32>
            value = 0;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]

         //Update the value of the current byte
         value = (value * 10) + (*str - '0');
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	4413      	add	r3, r2
 800a7c6:	005b      	lsls	r3, r3, #1
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	3b30      	subs	r3, #48	; 0x30
 800a7d0:	4413      	add	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]

         //The resulting value shall be in range 0 to 255
         if(value > 255)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2bff      	cmp	r3, #255	; 0xff
 800a7d8:	dd35      	ble.n	800a846 <ipv4StringToAddr+0xba>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800a7da:	2369      	movs	r3, #105	; 0x69
 800a7dc:	82fb      	strh	r3, [r7, #22]
            break;
 800a7de:	e036      	b.n	800a84e <ipv4StringToAddr+0xc2>
         }
      }
      //Dot separator found?
      else if(*str == '.' && i < 4)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e6:	d115      	bne.n	800a814 <ipv4StringToAddr+0x88>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	dc12      	bgt.n	800a814 <ipv4StringToAddr+0x88>
      {
         //Each dot must be preceded by a valid number
         if(value < 0)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da02      	bge.n	800a7fa <ipv4StringToAddr+0x6e>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800a7f4:	2369      	movs	r3, #105	; 0x69
 800a7f6:	82fb      	strh	r3, [r7, #22]
            break;
 800a7f8:	e029      	b.n	800a84e <ipv4StringToAddr+0xc2>
         }

         //Save the current byte
         ((uint8_t *) ipAddr)[i++] = value;
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	1c5a      	adds	r2, r3, #1
 800a7fe:	613a      	str	r2, [r7, #16]
 800a800:	461a      	mov	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	4413      	add	r3, r2
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]
         //Prepare to decode the next byte
         value = -1;
 800a80c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e018      	b.n	800a846 <ipv4StringToAddr+0xba>
      }
      //End of string detected?
      else if(*str == '\0' && i == 3)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d111      	bne.n	800a840 <ipv4StringToAddr+0xb4>
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d10e      	bne.n	800a840 <ipv4StringToAddr+0xb4>
      {
         //The NULL character must be preceded by a valid number
         if(value < 0)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	da02      	bge.n	800a82e <ipv4StringToAddr+0xa2>
         {
            //The conversion failed
            error = ERROR_INVALID_SYNTAX;
 800a828:	2369      	movs	r3, #105	; 0x69
 800a82a:	82fb      	strh	r3, [r7, #22]
            //The conversion succeeded
            error = NO_ERROR;
         }

         //We are done
         break;
 800a82c:	e00f      	b.n	800a84e <ipv4StringToAddr+0xc2>
            ((uint8_t *) ipAddr)[i] = value;
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	683a      	ldr	r2, [r7, #0]
 800a832:	4413      	add	r3, r2
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	b2d2      	uxtb	r2, r2
 800a838:	701a      	strb	r2, [r3, #0]
            error = NO_ERROR;
 800a83a:	2300      	movs	r3, #0
 800a83c:	82fb      	strh	r3, [r7, #22]
         break;
 800a83e:	e006      	b.n	800a84e <ipv4StringToAddr+0xc2>
      }
      //Invalid character...
      else
      {
         //The conversion failed
         error = ERROR_INVALID_SYNTAX;
 800a840:	2369      	movs	r3, #105	; 0x69
 800a842:	82fb      	strh	r3, [r7, #22]
         break;
 800a844:	e003      	b.n	800a84e <ipv4StringToAddr+0xc2>
      }

      //Point to the next character
      str++;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3301      	adds	r3, #1
 800a84a:	607b      	str	r3, [r7, #4]
      if(osIsdigit(*str))
 800a84c:	e7a8      	b.n	800a7a0 <ipv4StringToAddr+0x14>
   }

   //Return status code
   return error;
 800a84e:	8afb      	ldrh	r3, [r7, #22]
}
 800a850:	4618      	mov	r0, r3
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	08011834 	.word	0x08011834

0800a860 <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b086      	sub	sp, #24
 800a864:	af02      	add	r7, sp, #8
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <ipv4AddrToString+0x14>
      str = buffer;
 800a870:	4b0f      	ldr	r3, [pc, #60]	; (800a8b0 <ipv4AddrToString+0x50>)
 800a872:	603b      	str	r3, [r7, #0]

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 800a874:	1d3b      	adds	r3, r7, #4
 800a876:	60fb      	str	r3, [r7, #12]
   //Format IPv4 address
   osSprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	4619      	mov	r1, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	4618      	mov	r0, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3302      	adds	r3, #2
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3303      	adds	r3, #3
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	9200      	str	r2, [sp, #0]
 800a898:	4603      	mov	r3, r0
 800a89a:	460a      	mov	r2, r1
 800a89c:	4905      	ldr	r1, [pc, #20]	; (800a8b4 <ipv4AddrToString+0x54>)
 800a89e:	6838      	ldr	r0, [r7, #0]
 800a8a0:	f005 fe4e 	bl	8010540 <siprintf>

   //Return a pointer to the formatted string
   return str;
 800a8a4:	683b      	ldr	r3, [r7, #0]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	2000092c 	.word	0x2000092c
 800a8b4:	0801171c 	.word	0x0801171c

0800a8b8 <ipv4DumpHeader>:
 * @brief Dump IPv4 header for debugging purpose
 * @param[in] ipHeader Pointer to the IPv4 header
 **/

void ipv4DumpHeader(const Ipv4Header *ipHeader)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, NetTxAncillary *ancillary)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b090      	sub	sp, #64	; 0x40
 800a8d0:	af04      	add	r7, sp, #16
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	4613      	mov	r3, r2
 800a8da:	80fb      	strh	r3, [r7, #6]
   //transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 800a8dc:	6838      	ldr	r0, [r7, #0]
 800a8de:	f7f7 fde6 	bl	80024ae <netBufferGetLength>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	1ad3      	subs	r3, r2, r3
 800a8e8:	623b      	str	r3, [r7, #32]

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 800a8ea:	f107 0314 	add.w	r3, r7, #20
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f7f7 fa89 	bl	8001e08 <ipAllocBuffer>
 800a8f6:	61f8      	str	r0, [r7, #28]
   //Failed to allocate memory?
   if(!fragment)
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <ipv4FragmentDatagram+0x36>
      return ERROR_OUT_OF_MEMORY;
 800a8fe:	2364      	movs	r3, #100	; 0x64
 800a900:	e06b      	b.n	800a9da <ipv4FragmentDatagram+0x10e>

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a908:	3b14      	subs	r3, #20
 800a90a:	61bb      	str	r3, [r7, #24]
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f023 0307 	bic.w	r3, r3, #7
 800a912:	61bb      	str	r3, [r7, #24]

   //Initialize error code
   error = NO_ERROR;
 800a914:	2300      	movs	r3, #0
 800a916:	85fb      	strh	r3, [r7, #46]	; 0x2e

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 800a918:	2300      	movs	r3, #0
 800a91a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a91c:	e051      	b.n	800a9c2 <ipv4FragmentDatagram+0xf6>
   {
      //Flush the contents of the fragment
      error = netBufferSetLength(fragment, fragmentOffset);
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	4619      	mov	r1, r3
 800a922:	69f8      	ldr	r0, [r7, #28]
 800a924:	f7f7 fde5 	bl	80024f2 <netBufferSetLength>
 800a928:	4603      	mov	r3, r0
 800a92a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      //Sanity check
      if(error)
 800a92c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d14c      	bne.n	800a9cc <ipv4FragmentDatagram+0x100>
         break;

      //Process the last fragment?
      if((payloadLen - offset) <= maxFragmentSize)
 800a932:	6a3a      	ldr	r2, [r7, #32]
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	69ba      	ldr	r2, [r7, #24]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d31d      	bcc.n	800a97a <ipv4FragmentDatagram+0xae>
      {
         //Size of the current fragment
         length = payloadLen - offset;
 800a93e:	6a3a      	ldr	r2, [r7, #32]
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800a946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	441a      	add	r2, r3
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	69f8      	ldr	r0, [r7, #28]
 800a952:	f7f7 fea7 	bl	80026a4 <netBufferConcat>

         //Do not set the MF flag for the last fragment
         error = ipv4SendPacket(interface, pseudoHeader, id, offset / 8,
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	08d8      	lsrs	r0, r3, #3
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	88f9      	ldrh	r1, [r7, #6]
 800a95e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a960:	9202      	str	r2, [sp, #8]
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	9300      	str	r3, [sp, #0]
 800a968:	4603      	mov	r3, r0
 800a96a:	460a      	mov	r2, r1
 800a96c:	68b9      	ldr	r1, [r7, #8]
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fd20 	bl	800a3b4 <ipv4SendPacket>
 800a974:	4603      	mov	r3, r0
 800a976:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a978:	e01c      	b.n	800a9b4 <ipv4FragmentDatagram+0xe8>
            fragment, fragmentOffset, ancillary);
      }
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	627b      	str	r3, [r7, #36]	; 0x24
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800a97e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a982:	441a      	add	r2, r3
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	6839      	ldr	r1, [r7, #0]
 800a988:	69f8      	ldr	r0, [r7, #28]
 800a98a:	f7f7 fe8b 	bl	80026a4 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
            (offset / 8), fragment, fragmentOffset, ancillary);
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	08db      	lsrs	r3, r3, #3
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
 800a992:	f443 5000 	orr.w	r0, r3, #8192	; 0x2000
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	88f9      	ldrh	r1, [r7, #6]
 800a99a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a99c:	9202      	str	r2, [sp, #8]
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	460a      	mov	r2, r1
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	68f8      	ldr	r0, [r7, #12]
 800a9ac:	f7ff fd02 	bl	800a3b4 <ipv4SendPacket>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      //Failed to send current IP packet?
      if(error)
 800a9b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10a      	bne.n	800a9d0 <ipv4FragmentDatagram+0x104>
   for(offset = 0; offset < payloadLen; offset += length)
 800a9ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	4413      	add	r3, r2
 800a9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d3a9      	bcc.n	800a91e <ipv4FragmentDatagram+0x52>
 800a9ca:	e002      	b.n	800a9d2 <ipv4FragmentDatagram+0x106>
         break;
 800a9cc:	bf00      	nop
 800a9ce:	e000      	b.n	800a9d2 <ipv4FragmentDatagram+0x106>
         break;
 800a9d0:	bf00      	nop
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 800a9d2:	69f8      	ldr	r0, [r7, #28]
 800a9d4:	f7f7 fd5c 	bl	8002490 <netBufferFree>
   //Return status code
   return error;
 800a9d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3730      	adds	r7, #48	; 0x30
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <ipv4ReassembleDatagram>:
 *   the packet
 **/

void ipv4ReassembleDatagram(NetInterface *interface, const Ipv4Header *packet,
   size_t length, NetRxAncillary *ancillary)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b08c      	sub	sp, #48	; 0x30
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
 800a9ee:	603b      	str	r3, [r7, #0]
   MIB2_INC_COUNTER32(ipGroup.ipReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmReqds, 1);

   //Get the length of the payload
   length -= packet->headerLength * 4;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	1a9b      	subs	r3, r3, r2
 800aa02:	607b      	str	r3, [r7, #4]
   //Convert the fragment offset from network byte order
   offset = ntohs(packet->fragmentOffset);
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	88db      	ldrh	r3, [r3, #6]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7f6 fa27 	bl	8000e5e <swapInt16>
 800aa10:	4603      	mov	r3, r0
 800aa12:	84fb      	strh	r3, [r7, #38]	; 0x26

   //Every fragment except the last must contain a multiple of 8 bytes of data
   if((offset & IPV4_FLAG_MF) && (length % 8))
 800aa14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <ipv4ReassembleDatagram+0x48>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f003 0307 	and.w	r3, r3, #7
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 8170 	bne.w	800ad0a <ipv4ReassembleDatagram+0x328>
      //Drop the incoming fragment
      return;
   }

   //Calculate the index of the first byte
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 800aa2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	84bb      	strh	r3, [r7, #36]	; 0x24
   //Calculate the index immediately following the last byte
   dataLast = dataFirst + (uint16_t) length;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa3c:	4413      	add	r3, r2
 800aa3e:	847b      	strh	r3, [r7, #34]	; 0x22

   //Search for a matching IP datagram being reassembled
   frag = ipv4SearchFragQueue(interface, packet);
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 f9c9 	bl	800adda <ipv4SearchFragQueue>
 800aa48:	61f8      	str	r0, [r7, #28]

   //No matching entry in the reassembly queue?
   if(frag == NULL)
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 815e 	beq.w	800ad0e <ipv4ReassembleDatagram+0x32c>
      //Drop the incoming fragment
      return;
   }

   //The very first fragment requires special handling
   if(!(offset & IPV4_OFFSET_MASK))
 800aa52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d132      	bne.n	800aac2 <ipv4ReassembleDatagram+0xe0>
   {
      //Calculate the length of the IP header including options
      frag->headerLength = packet->headerLength * 4;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	605a      	str	r2, [r3, #4]

      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	4413      	add	r3, r2
 800aa78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa7c:	d906      	bls.n	800aa8c <ipv4ReassembleDatagram+0xaa>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	3310      	adds	r3, #16
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7f7 fd34 	bl	80024f2 <netBufferSetLength>
         //Exit immediately
         return;
 800aa8a:	e141      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      }

      //Make sure the IP header entirely fits in the first chunk
      if(frag->headerLength > frag->buffer.chunk[0].size)
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	69fa      	ldr	r2, [r7, #28]
 800aa92:	8bd2      	ldrh	r2, [r2, #30]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d906      	bls.n	800aaa6 <ipv4ReassembleDatagram+0xc4>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	3310      	adds	r3, #16
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7f7 fd27 	bl	80024f2 <netBufferSetLength>
         //Exit immediately
         return;
 800aaa4:	e134      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      }

      //Fix the length of the first chunk
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	839a      	strh	r2, [r3, #28]
      //Always take the IP header from the first fragment
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	f103 0010 	add.w	r0, r3, #16
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	2100      	movs	r1, #0
 800aabe:	f7f7 ff89 	bl	80029d4 <netBufferWrite>
   }

   //It may be necessary to increase the size of the buffer...
   if(dataLast > frag->dataLen)
 800aac2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d927      	bls.n	800ab1c <ipv4ReassembleDatagram+0x13a>
   {
      //Enforce the size of the reconstructed datagram
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aad2:	4413      	add	r3, r2
 800aad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aad8:	d906      	bls.n	800aae8 <ipv4ReassembleDatagram+0x106>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	3310      	adds	r3, #16
 800aade:	2100      	movs	r1, #0
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7f7 fd06 	bl	80024f2 <netBufferSetLength>
         //Exit immediately
         return;
 800aae6:	e113      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      }

      //Adjust the size of the reconstructed datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + dataLast + sizeof(Ipv4HoleDesc));
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aaf4:	4413      	add	r3, r2
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800aaf6:	3306      	adds	r3, #6
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f7f7 fcfa 	bl	80024f2 <netBufferSetLength>
 800aafe:	4603      	mov	r3, r0
 800ab00:	837b      	strh	r3, [r7, #26]

      //Any error to report?
      if(error)
 800ab02:	8b7b      	ldrh	r3, [r7, #26]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d006      	beq.n	800ab16 <ipv4ReassembleDatagram+0x134>
         MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

         //Drop the reconstructed datagram
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	3310      	adds	r3, #16
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7f7 fcef 	bl	80024f2 <netBufferSetLength>
         //Exit immediately
         return;
 800ab14:	e0fc      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      }

      //Actual length of the payload
      frag->dataLen = dataLast;
 800ab16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	609a      	str	r2, [r3, #8]
   }

   //Select the first hole descriptor from the list
   hole = ipv4FindHole(frag, frag->firstHole);
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	899b      	ldrh	r3, [r3, #12]
 800ab20:	4619      	mov	r1, r3
 800ab22:	69f8      	ldr	r0, [r7, #28]
 800ab24:	f000 fa35 	bl	800af92 <ipv4FindHole>
 800ab28:	62f8      	str	r0, [r7, #44]	; 0x2c
   //Keep track of the previous hole in the list
   prevHole = NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	62bb      	str	r3, [r7, #40]	; 0x28

   //Iterate through the hole descriptors
   while(hole != NULL)
 800ab2e:	e08b      	b.n	800ac48 <ipv4ReassembleDatagram+0x266>
   {
      //Save lower and upper boundaries for later use
      uint16_t holeFirst = hole->first;
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	781a      	ldrb	r2, [r3, #0]
 800ab34:	785b      	ldrb	r3, [r3, #1]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	827b      	strh	r3, [r7, #18]
      uint16_t holeLast = hole->last;
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	789a      	ldrb	r2, [r3, #2]
 800ab40:	78db      	ldrb	r3, [r3, #3]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	4313      	orrs	r3, r2
 800ab46:	823b      	strh	r3, [r7, #16]

      //Check whether the newly arrived fragment interacts with this hole in
      //some way
      if(dataFirst < holeLast && dataLast > holeFirst)
 800ab48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab4a:	8a3b      	ldrh	r3, [r7, #16]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d269      	bcs.n	800ac24 <ipv4ReassembleDatagram+0x242>
 800ab50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ab52:	8a7b      	ldrh	r3, [r7, #18]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d965      	bls.n	800ac24 <ipv4ReassembleDatagram+0x242>
      {
         //The current descriptor is no longer valid. We will destroy it, and
         //in the next two steps, we will determine whether or not it is
         //necessary to create any new hole descriptors
         if(prevHole != NULL)
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <ipv4ReassembleDatagram+0x188>
            prevHole->next = hole->next;
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	889b      	ldrh	r3, [r3, #4]
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	809a      	strh	r2, [r3, #4]
 800ab68:	e004      	b.n	800ab74 <ipv4ReassembleDatagram+0x192>
         else
            frag->firstHole = hole->next;
 800ab6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6c:	889b      	ldrh	r3, [r3, #4]
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	819a      	strh	r2, [r3, #12]

         //Is there still a hole at the beginning of the segment?
         if(dataFirst > holeFirst)
 800ab74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab76:	8a7b      	ldrh	r3, [r7, #18]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d924      	bls.n	800abc6 <ipv4ReassembleDatagram+0x1e4>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, holeFirst);
 800ab7c:	8a7b      	ldrh	r3, [r7, #18]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	69f8      	ldr	r0, [r7, #28]
 800ab82:	f000 fa06 	bl	800af92 <ipv4FindHole>
 800ab86:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = holeFirst;
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	8a7a      	ldrh	r2, [r7, #18]
 800ab8c:	801a      	strh	r2, [r3, #0]
            hole->last = dataFirst;
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ab92:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00a      	beq.n	800abb0 <ipv4ReassembleDatagram+0x1ce>
            {
               hole->next = prevHole->next;
 800ab9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9c:	889b      	ldrh	r3, [r3, #4]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba2:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800aba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba6:	881b      	ldrh	r3, [r3, #0]
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abac:	809a      	strh	r2, [r3, #4]
 800abae:	e008      	b.n	800abc2 <ipv4ReassembleDatagram+0x1e0>
            }
            else
            {
               hole->next = frag->firstHole;
 800abb0:	69fb      	ldr	r3, [r7, #28]
 800abb2:	899a      	ldrh	r2, [r3, #12]
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800abc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc4:	62bb      	str	r3, [r7, #40]	; 0x28
         }

         //Is there still a hole at the end of the segment?
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800abc6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abc8:	8a3b      	ldrh	r3, [r7, #16]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d22d      	bcs.n	800ac2a <ipv4ReassembleDatagram+0x248>
 800abce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800abd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d028      	beq.n	800ac2a <ipv4ReassembleDatagram+0x248>
         {
            //Create a new entry that describes this hole
            hole = ipv4FindHole(frag, dataLast);
 800abd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abda:	4619      	mov	r1, r3
 800abdc:	69f8      	ldr	r0, [r7, #28]
 800abde:	f000 f9d8 	bl	800af92 <ipv4FindHole>
 800abe2:	62f8      	str	r0, [r7, #44]	; 0x2c
            hole->first = dataLast;
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800abe8:	801a      	strh	r2, [r3, #0]
            hole->last = holeLast;
 800abea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abec:	8a3a      	ldrh	r2, [r7, #16]
 800abee:	805a      	strh	r2, [r3, #2]

            //Insert the newly created entry into the hole descriptor list
            if(prevHole != NULL)
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <ipv4ReassembleDatagram+0x22a>
            {
               hole->next = prevHole->next;
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	889b      	ldrh	r3, [r3, #4]
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	809a      	strh	r2, [r3, #4]
               prevHole->next = hole->first;
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	809a      	strh	r2, [r3, #4]
 800ac0a:	e008      	b.n	800ac1e <ipv4ReassembleDatagram+0x23c>
            }
            else
            {
               hole->next = frag->firstHole;
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	899a      	ldrh	r2, [r3, #12]
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	809a      	strh	r2, [r3, #4]
               frag->firstHole = hole->first;
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	819a      	strh	r2, [r3, #12]
            }

            //Always keep track of the previous hole
            prevHole = hole;
 800ac1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800ac22:	e002      	b.n	800ac2a <ipv4ReassembleDatagram+0x248>
         }
      }
      else
      {
         //The newly arrived fragment does not interact with the current hole
         prevHole = hole;
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac28:	e000      	b.n	800ac2c <ipv4ReassembleDatagram+0x24a>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF))
 800ac2a:	bf00      	nop
      }

      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 800ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d003      	beq.n	800ac3a <ipv4ReassembleDatagram+0x258>
 800ac32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac34:	889b      	ldrh	r3, [r3, #4]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	e001      	b.n	800ac3e <ipv4ReassembleDatagram+0x25c>
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	899b      	ldrh	r3, [r3, #12]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	69f8      	ldr	r0, [r7, #28]
 800ac42:	f000 f9a6 	bl	800af92 <ipv4FindHole>
 800ac46:	62f8      	str	r0, [r7, #44]	; 0x2c
   while(hole != NULL)
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f47f af70 	bne.w	800ab30 <ipv4ReassembleDatagram+0x14e>
   }

   //Copy data from the fragment to the reassembly buffer
   netBufferWrite((NetBuffer *) &frag->buffer,
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	f103 0010 	add.w	r0, r3, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	685a      	ldr	r2, [r3, #4]
   netBufferWrite((NetBuffer *) &frag->buffer,
 800ac5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5c:	18d1      	adds	r1, r2, r3
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	461a      	mov	r2, r3
   netBufferWrite((NetBuffer *) &frag->buffer,
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	441a      	add	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f7f7 feaf 	bl	80029d4 <netBufferWrite>

   //Dump hole descriptor list
   ipv4DumpHoleList(frag);
 800ac76:	69f8      	ldr	r0, [r7, #28]
 800ac78:	f000 f9a0 	bl	800afbc <ipv4DumpHoleList>

   //If the hole descriptor list is empty, the reassembly process is now
   //complete
   if(!ipv4FindHole(frag, frag->firstHole))
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	899b      	ldrh	r3, [r3, #12]
 800ac80:	4619      	mov	r1, r3
 800ac82:	69f8      	ldr	r0, [r7, #28]
 800ac84:	f000 f985 	bl	800af92 <ipv4FindHole>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d140      	bne.n	800ad10 <ipv4ReassembleDatagram+0x32e>
   {
      //Discard the extra hole descriptor that follows the reconstructed
      //datagram
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	f103 0010 	add.w	r0, r3, #16
         frag->headerLength + frag->dataLen);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	689b      	ldr	r3, [r3, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800ac9c:	4413      	add	r3, r2
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f7f7 fc27 	bl	80024f2 <netBufferSetLength>
 800aca4:	4603      	mov	r3, r0
 800aca6:	837b      	strh	r3, [r7, #26]

      //Check status code
      if(error)
 800aca8:	8b7b      	ldrh	r3, [r7, #26]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d126      	bne.n	800acfc <ipv4ReassembleDatagram+0x31a>
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);
      }
      else
      {
         //Point to the IP header
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	3310      	adds	r3, #16
 800acb2:	2100      	movs	r1, #0
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f7 fcc2 	bl	800263e <netBufferAt>
 800acba:	6178      	str	r0, [r7, #20]

         //Fix IP header
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	4413      	add	r3, r2
 800acca:	b29b      	uxth	r3, r3
 800accc:	4618      	mov	r0, r3
 800acce:	f7f6 f8c6 	bl	8000e5e <swapInt16>
 800acd2:	4603      	mov	r3, r0
 800acd4:	461a      	mov	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	805a      	strh	r2, [r3, #2]
         datagram->fragmentOffset = 0;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	2200      	movs	r2, #0
 800acde:	719a      	strb	r2, [r3, #6]
 800ace0:	2200      	movs	r2, #0
 800ace2:	71da      	strb	r2, [r3, #7]
         datagram->headerChecksum = 0;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2200      	movs	r2, #0
 800ace8:	729a      	strb	r2, [r3, #10]
 800acea:	2200      	movs	r2, #0
 800acec:	72da      	strb	r2, [r3, #11]
         MIB2_INC_COUNTER32(ipGroup.ipReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmOKs, 1);
         IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmOKs, 1);

         //Pass the original IPv4 datagram to the higher protocol layer
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer, ancillary);
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	3310      	adds	r3, #16
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4619      	mov	r1, r3
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff fa89 	bl	800a20e <ipv4ProcessDatagram>
      }

      //Release previously allocated memory
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	3310      	adds	r3, #16
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f7 fbf5 	bl	80024f2 <netBufferSetLength>
 800ad08:	e002      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      return;
 800ad0a:	bf00      	nop
 800ad0c:	e000      	b.n	800ad10 <ipv4ReassembleDatagram+0x32e>
      return;
 800ad0e:	bf00      	nop
   }
}
 800ad10:	3730      	adds	r7, #48	; 0x30
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <ipv4FragTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void ipv4FragTick(NetInterface *interface)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b08a      	sub	sp, #40	; 0x28
 800ad1a:	af02      	add	r7, sp, #8
 800ad1c:	6078      	str	r0, [r7, #4]
   uint_t i;
   systime_t time;
   Ipv4HoleDesc *hole;

   //Get current time
   time = osGetSystemTime();
 800ad1e:	f7f6 fa20 	bl	8001162 <osGetSystemTime>
 800ad22:	61b8      	str	r0, [r7, #24]

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
 800ad28:	e04f      	b.n	800adca <ipv4FragTick+0xb4>
   {
      //Point to the current entry in the reassembly queue
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 800ad2a:	69fa      	ldr	r2, [r7, #28]
 800ad2c:	4613      	mov	r3, r2
 800ad2e:	009b      	lsls	r3, r3, #2
 800ad30:	4413      	add	r3, r2
 800ad32:	011b      	lsls	r3, r3, #4
 800ad34:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	617b      	str	r3, [r7, #20]

      //Make sure the entry is currently in use
      if(frag->buffer.chunkCount > 0)
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	691b      	ldr	r3, [r3, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d03d      	beq.n	800adc4 <ipv4FragTick+0xae>
      {
         //If the timer runs out, the partially-reassembled datagram must be
         //discarded and ICMP Time Exceeded message sent to the source host
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	f643 2297 	movw	r2, #14999	; 0x3a97
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d935      	bls.n	800adc4 <ipv4FragTick+0xae>
         {
            //Debug message
            TRACE_INFO("IPv4 fragment reassembly timeout...\r\n");
            //Dump IP header contents for debugging purpose
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff fdab 	bl	800a8b8 <ipv4DumpHeader>
            MIB2_INC_COUNTER32(ipGroup.ipReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsReasmFails, 1);
            IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsReasmFails, 1);

            //Point to the first hole descriptor
            hole = ipv4FindHole(frag, frag->firstHole);
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	899b      	ldrh	r3, [r3, #12]
 800ad66:	4619      	mov	r1, r3
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	f000 f912 	bl	800af92 <ipv4FindHole>
 800ad6e:	6138      	str	r0, [r7, #16]

            //Make sure the fragment zero has been received before sending an
            //ICMP message
            if(hole != NULL && hole->first > 0)
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d020      	beq.n	800adb8 <ipv4FragTick+0xa2>
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d01b      	beq.n	800adb8 <ipv4FragTick+0xa2>
            {
               //Fix the size of the reconstructed datagram
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f103 0010 	add.w	r0, r3, #16
                  frag->headerLength + hole->first);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	8812      	ldrh	r2, [r2, #0]
 800ad8e:	b292      	uxth	r2, r2
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800ad90:	4413      	add	r3, r2
 800ad92:	4619      	mov	r1, r3
 800ad94:	f7f7 fbad 	bl	80024f2 <netBufferSetLength>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	81fb      	strh	r3, [r7, #14]

               //Check status code
               if(!error)
 800ad9c:	89fb      	ldrh	r3, [r7, #14]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10a      	bne.n	800adb8 <ipv4FragTick+0xa2>
               {
                  //Send an ICMP Time Exceeded message
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
                     ICMP_CODE_REASSEMBLY_TIME_EXCEEDED, 0, (NetBuffer *) &frag->buffer, 0);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	3310      	adds	r3, #16
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 800ada6:	2200      	movs	r2, #0
 800ada8:	9201      	str	r2, [sp, #4]
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	2300      	movs	r3, #0
 800adae:	2201      	movs	r2, #1
 800adb0:	210b      	movs	r1, #11
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7fe ff02 	bl	8009bbc <icmpSendErrorMessage>
               }
            }

            //Drop the partially reconstructed datagram
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	3310      	adds	r3, #16
 800adbc:	2100      	movs	r1, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f7 fb97 	bl	80024f2 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	3301      	adds	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d9ac      	bls.n	800ad2a <ipv4FragTick+0x14>
         }
      }
   }
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <ipv4SearchFragQueue>:
 * @return Matching fragment descriptor
 **/

Ipv4FragDesc *ipv4SearchFragQueue(NetInterface *interface,
   const Ipv4Header *packet)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b088      	sub	sp, #32
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	6039      	str	r1, [r7, #0]
   Ipv4Header *datagram;
   Ipv4FragDesc *frag;
   Ipv4HoleDesc *hole;

   //Search for a matching IP datagram being reassembled
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800ade4:	2300      	movs	r3, #0
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	e03b      	b.n	800ae62 <ipv4SearchFragQueue+0x88>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 800adea:	69fa      	ldr	r2, [r7, #28]
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	4413      	add	r3, r2
 800adfc:	3308      	adds	r3, #8
 800adfe:	61bb      	str	r3, [r7, #24]

      //Check whether the current entry is used?
      if(frag->buffer.chunkCount > 0)
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d029      	beq.n	800ae5c <ipv4SearchFragQueue+0x82>
      {
         //Point to the corresponding datagram
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0);
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	3310      	adds	r3, #16
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7f7 fc15 	bl	800263e <netBufferAt>
 800ae14:	60f8      	str	r0, [r7, #12]

         //Check source and destination addresses
         if(datagram->srcAddr != packet->srcAddr)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68da      	ldr	r2, [r3, #12]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d115      	bne.n	800ae4e <ipv4SearchFragQueue+0x74>
            continue;
         if(datagram->destAddr != packet->destAddr)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	691a      	ldr	r2, [r3, #16]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d111      	bne.n	800ae52 <ipv4SearchFragQueue+0x78>
            continue;
         //Compare identification and protocol fields
         if(datagram->identification != packet->identification)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	889b      	ldrh	r3, [r3, #4]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	889b      	ldrh	r3, [r3, #4]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d10b      	bne.n	800ae56 <ipv4SearchFragQueue+0x7c>
            continue;
         if(datagram->protocol != packet->protocol)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	7a5a      	ldrb	r2, [r3, #9]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	7a5b      	ldrb	r3, [r3, #9]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d107      	bne.n	800ae5a <ipv4SearchFragQueue+0x80>
            continue;

         //A matching entry has been found in the reassembly queue
         return frag;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	e07d      	b.n	800af4a <ipv4SearchFragQueue+0x170>
            continue;
 800ae4e:	bf00      	nop
 800ae50:	e004      	b.n	800ae5c <ipv4SearchFragQueue+0x82>
            continue;
 800ae52:	bf00      	nop
 800ae54:	e002      	b.n	800ae5c <ipv4SearchFragQueue+0x82>
            continue;
 800ae56:	bf00      	nop
 800ae58:	e000      	b.n	800ae5c <ipv4SearchFragQueue+0x82>
            continue;
 800ae5a:	bf00      	nop
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	61fb      	str	r3, [r7, #28]
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	2b03      	cmp	r3, #3
 800ae66:	d9c0      	bls.n	800adea <ipv4SearchFragQueue+0x10>
      }
   }

   //If the current packet does not match an existing entry in the reassembly
   //queue, then create a new entry
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	e069      	b.n	800af42 <ipv4SearchFragQueue+0x168>
   {
      //Point to the current entry in the reassembly queue
      frag = &interface->ipv4Context.fragQueue[i];
 800ae6e:	69fa      	ldr	r2, [r7, #28]
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	011b      	lsls	r3, r3, #4
 800ae78:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	4413      	add	r3, r2
 800ae80:	3308      	adds	r3, #8
 800ae82:	61bb      	str	r3, [r7, #24]

      //The current entry is free?
      if(!frag->buffer.chunkCount)
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d157      	bne.n	800af3c <ipv4SearchFragQueue+0x162>
      {
         //Number of chunks that comprise the reassembly buffer
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	2207      	movs	r2, #7
 800ae90:	615a      	str	r2, [r3, #20]

         //Allocate sufficient memory to hold the IPv4 header and
         //the first hole descriptor
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	3310      	adds	r3, #16
 800ae96:	f240 6106 	movw	r1, #1542	; 0x606
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f7 fb29 	bl	80024f2 <netBufferSetLength>
 800aea0:	4603      	mov	r3, r0
 800aea2:	82fb      	strh	r3, [r7, #22]
            NET_MEM_POOL_BUFFER_SIZE + sizeof(Ipv4HoleDesc));

         //Failed to allocate memory?
         if(error)
 800aea4:	8afb      	ldrh	r3, [r7, #22]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <ipv4SearchFragQueue+0xe0>
         {
            //Clean up side effects
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	3310      	adds	r3, #16
 800aeae:	2100      	movs	r1, #0
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7f7 fb1e 	bl	80024f2 <netBufferSetLength>
            //Exit immediately
            return NULL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e047      	b.n	800af4a <ipv4SearchFragQueue+0x170>
         }

         //Initial length of the reconstructed datagram
         frag->headerLength = packet->headerLength * 4;
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	461a      	mov	r2, r3
 800aec8:	69bb      	ldr	r3, [r7, #24]
 800aeca:	605a      	str	r2, [r3, #4]
         frag->dataLen = 0;
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	2200      	movs	r2, #0
 800aed0:	609a      	str	r2, [r3, #8]

         //Fix the length of the first chunk
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	839a      	strh	r2, [r3, #28]
         //Copy IPv4 header from the incoming fragment
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 800aedc:	69bb      	ldr	r3, [r7, #24]
 800aede:	f103 0010 	add.w	r0, r3, #16
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	683a      	ldr	r2, [r7, #0]
 800aee8:	2100      	movs	r1, #0
 800aeea:	f7f7 fd73 	bl	80029d4 <netBufferWrite>

         //Save current time
         frag->timestamp = osGetSystemTime();
 800aeee:	f7f6 f938 	bl	8001162 <osGetSystemTime>
 800aef2:	4602      	mov	r2, r0
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	601a      	str	r2, [r3, #0]
         //Create a new entry in the hole descriptor list
         frag->firstHole = 0;
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	2200      	movs	r2, #0
 800aefc:	819a      	strh	r2, [r3, #12]

         //Point to first hole descriptor
         hole = ipv4FindHole(frag, frag->firstHole);
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	899b      	ldrh	r3, [r3, #12]
 800af02:	4619      	mov	r1, r3
 800af04:	69b8      	ldr	r0, [r7, #24]
 800af06:	f000 f844 	bl	800af92 <ipv4FindHole>
 800af0a:	6138      	str	r0, [r7, #16]
         //The entry describes the datagram as being completely missing
         hole->first = 0;
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	2200      	movs	r2, #0
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	2200      	movs	r2, #0
 800af14:	705a      	strb	r2, [r3, #1]
         hole->last = IPV4_INFINITY;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af1c:	709a      	strb	r2, [r3, #2]
 800af1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af22:	70da      	strb	r2, [r3, #3]
         hole->next = IPV4_INFINITY;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af2a:	711a      	strb	r2, [r3, #4]
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af30:	715a      	strb	r2, [r3, #5]

         //Dump hole descriptor list
         ipv4DumpHoleList(frag);
 800af32:	69b8      	ldr	r0, [r7, #24]
 800af34:	f000 f842 	bl	800afbc <ipv4DumpHoleList>

         //Return the matching fragment descriptor
         return frag;
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	e006      	b.n	800af4a <ipv4SearchFragQueue+0x170>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	3301      	adds	r3, #1
 800af40:	61fb      	str	r3, [r7, #28]
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	2b03      	cmp	r3, #3
 800af46:	d992      	bls.n	800ae6e <ipv4SearchFragQueue+0x94>
      }
   }

   //The reassembly queue is full
   return NULL;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	e010      	b.n	800af82 <ipv4FlushFragQueue+0x30>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	4613      	mov	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	011b      	lsls	r3, r3, #4
 800af6a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	4413      	add	r3, r2
 800af72:	3308      	adds	r3, #8
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f7f7 fabb 	bl	80024f2 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	3301      	adds	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d9eb      	bls.n	800af60 <ipv4FlushFragQueue+0xe>
   }
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the specified
 *   offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b082      	sub	sp, #8
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	460b      	mov	r3, r1
 800af9c:	807b      	strh	r3, [r7, #2]
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f103 0010 	add.w	r0, r3, #16
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	887b      	ldrh	r3, [r7, #2]
 800afaa:	4413      	add	r3, r2
 800afac:	4619      	mov	r1, r3
 800afae:	f7f7 fb46 	bl	800263e <netBufferAt>
 800afb2:	4603      	mov	r3, r0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <ipv4DumpHoleList>:
 * @brief Dump hole descriptor list
 * @param[in] frag IPv4 fragment descriptor
 **/

void ipv4DumpHoleList(Ipv4FragDesc *frag)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
      TRACE_DEBUG("  %" PRIu16 " - %" PRIu16 "\r\n", hole->first, hole->last);
      //Select the next hole descriptor from the list
      hole = ipv4FindHole(frag, hole->next);
   }
#endif
}
 800afc4:	bf00      	nop
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <ipv4AddRouterAlertOption>:
 * @param[in,out] offset Offset to the first payload byte
 * @return Error code
 **/

error_t ipv4AddRouterAlertOption(NetBuffer *buffer, size_t *offset)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
   error_t error;
   Ipv4Option *option;

   //Make sure there is enough room to add the option
   if(*offset >= sizeof(uint32_t))
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d91a      	bls.n	800b018 <ipv4AddRouterAlertOption+0x48>
   {
      //Make room for the IPv4 option
      *offset -= sizeof(uint32_t);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	1f1a      	subs	r2, r3, #4
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]
      //Point to the IPv4 option
      option = netBufferAt(buffer, *offset);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7f7 fb23 	bl	800263e <netBufferAt>
 800aff8:	60b8      	str	r0, [r7, #8]

      //Format Router Alert option
      option->type = IPV4_OPTION_RTRALT;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2294      	movs	r2, #148	; 0x94
 800affe:	701a      	strb	r2, [r3, #0]
      option->length = sizeof(uint32_t);
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2204      	movs	r2, #4
 800b004:	705a      	strb	r2, [r3, #1]
      option->value[0] = 0;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2200      	movs	r2, #0
 800b00a:	709a      	strb	r2, [r3, #2]
      option->value[1] = 0;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2200      	movs	r2, #0
 800b010:	70da      	strb	r2, [r3, #3]

      //Successful processing
      error = NO_ERROR;
 800b012:	2300      	movs	r3, #0
 800b014:	81fb      	strh	r3, [r7, #14]
 800b016:	e001      	b.n	800b01c <ipv4AddRouterAlertOption+0x4c>
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 800b018:	2302      	movs	r3, #2
 800b01a:	81fb      	strh	r3, [r7, #14]
   }

   //Return status code
   return error;
 800b01c:	89fb      	ldrh	r3, [r7, #14]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <ipv4CheckSourceAddr>:
 * @param[in] ipAddr Source IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckSourceAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	6039      	str	r1, [r7, #0]
   //Broadcast and multicast addresses must not be used as source address
   //(refer to RFC 1122, section 3.2.1.3)
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9dc 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d104      	bne.n	800b048 <ipv4CheckSourceAddr+0x22>
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b044:	2be0      	cmp	r3, #224	; 0xe0
 800b046:	d101      	bne.n	800b04c <ipv4CheckSourceAddr+0x26>
   {
      //Debug message
      TRACE_WARNING("Wrong source IPv4 address!\r\n");
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
 800b048:	23e4      	movs	r3, #228	; 0xe4
 800b04a:	e000      	b.n	800b04e <ipv4CheckSourceAddr+0x28>
   }

   //The source address is acceptable
   return NO_ERROR;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <ipv4CheckDestAddr>:
 * @param[in] ipAddr Destination IPv4 address to be checked
 * @return Error code
 **/

error_t ipv4CheckDestAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b086      	sub	sp, #24
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
   error_t error;
   uint_t i;

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;
 800b060:	23e4      	movs	r3, #228	; 0xe4
 800b062:	82fb      	strh	r3, [r7, #22]

   //Broadcast address?
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f9c2 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d002      	beq.n	800b078 <ipv4CheckDestAddr+0x22>
   {
      //Always accept broadcast address
      error = NO_ERROR;
 800b072:	2300      	movs	r3, #0
 800b074:	82fb      	strh	r3, [r7, #22]
 800b076:	e045      	b.n	800b104 <ipv4CheckDestAddr+0xae>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b07e:	2be0      	cmp	r3, #224	; 0xe0
 800b080:	d120      	bne.n	800b0c4 <ipv4CheckDestAddr+0x6e>
   {
      //Go through the multicast filter table
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800b082:	2300      	movs	r3, #0
 800b084:	613b      	str	r3, [r7, #16]
 800b086:	e019      	b.n	800b0bc <ipv4CheckDestAddr+0x66>
      {
         Ipv4FilterEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	4413      	add	r3, r2
 800b09a:	3308      	adds	r3, #8
 800b09c:	60bb      	str	r3, [r7, #8]

         //Valid entry?
         if(entry->refCount > 0)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d007      	beq.n	800b0b6 <ipv4CheckDestAddr+0x60>
         {
            //Check whether the destination IPv4 address matches
            //a relevant multicast address
            if(entry->addr == ipAddr)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	683a      	ldr	r2, [r7, #0]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d102      	bne.n	800b0b6 <ipv4CheckDestAddr+0x60>
            {
               //The multicast address is acceptable
               error = NO_ERROR;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	82fb      	strh	r3, [r7, #22]
               //Stop immediately
               break;
 800b0b4:	e026      	b.n	800b104 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d9e2      	bls.n	800b088 <ipv4CheckDestAddr+0x32>
 800b0c2:	e01f      	b.n	800b104 <ipv4CheckDestAddr+0xae>
   }
   //Unicast address?
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
 800b0c8:	e019      	b.n	800b0fe <ipv4CheckDestAddr+0xa8>
      {
         Ipv4AddrEntry *entry;

         //Point to the current entry
         entry = &interface->ipv4Context.addrList[i];
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	4413      	add	r3, r2
 800b0dc:	3304      	adds	r3, #4
 800b0de:	60fb      	str	r3, [r7, #12]

         //Valid entry?
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	791b      	ldrb	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d007      	beq.n	800b0f8 <ipv4CheckDestAddr+0xa2>
         {
            //Check whether the destination address matches a valid unicast
            //address assigned to the interface
            if(entry->addr == ipAddr)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d102      	bne.n	800b0f8 <ipv4CheckDestAddr+0xa2>
            {
               //The destination address is acceptable
               error = NO_ERROR;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	82fb      	strh	r3, [r7, #22]
               //We are done
               break;
 800b0f6:	e005      	b.n	800b104 <ipv4CheckDestAddr+0xae>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0e2      	beq.n	800b0ca <ipv4CheckDestAddr+0x74>
         }
      }
   }

   //Return status code
   return error;
 800b104:	8afb      	ldrh	r3, [r7, #22]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3718      	adds	r7, #24
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <ipv4SelectSourceAddr>:
 * @return Error code
 **/

error_t ipv4SelectSourceAddr(NetInterface **interface,
   Ipv4Addr destAddr, Ipv4Addr *srcAddr)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b08d      	sub	sp, #52	; 0x34
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
   NetInterface *bestInterface;
   Ipv4AddrEntry *currentAddr;
   Ipv4AddrEntry *bestAddr;

   //Initialize variables
   bestInterface = NULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	623b      	str	r3, [r7, #32]
   bestAddr = NULL;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800b124:	2300      	movs	r3, #0
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
 800b128:	e0e2      	b.n	800b2f0 <ipv4SelectSourceAddr+0x1e0>
   {
      //Point to the current interface
      currentInterface = &netInterface[i];
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	f240 628c 	movw	r2, #1676	; 0x68c
 800b130:	fb02 f303 	mul.w	r3, r2, r3
 800b134:	33e0      	adds	r3, #224	; 0xe0
 800b136:	4a7b      	ldr	r2, [pc, #492]	; (800b324 <ipv4SelectSourceAddr+0x214>)
 800b138:	4413      	add	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]

      //A network interface may be provided as a hint
      if(*interface != currentInterface && *interface != NULL)
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	429a      	cmp	r2, r3
 800b144:	d004      	beq.n	800b150 <ipv4SelectSourceAddr+0x40>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f040 80cc 	bne.w	800b2e8 <ipv4SelectSourceAddr+0x1d8>
         //Select the next interface in the list
         continue;
      }

      //A sort of the candidate source addresses is being performed
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 800b150:	2300      	movs	r3, #0
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
 800b154:	e0c3      	b.n	800b2de <ipv4SelectSourceAddr+0x1ce>
      {
         //Point to the current entry
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 800b156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	4413      	add	r3, r2
 800b168:	3304      	adds	r3, #4
 800b16a:	617b      	str	r3, [r7, #20]

         //Check the state of the address
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	791b      	ldrb	r3, [r3, #4]
 800b170:	2b02      	cmp	r3, #2
 800b172:	f040 80b1 	bne.w	800b2d8 <ipv4SelectSourceAddr+0x1c8>
         {
            //Select the first address as default
            if(bestAddr == NULL)
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d104      	bne.n	800b186 <ipv4SelectSourceAddr+0x76>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800b184:	e0a8      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer same address
            if(bestAddr->addr == destAddr)
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68ba      	ldr	r2, [r7, #8]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	f000 8098 	beq.w	800b2c2 <ipv4SelectSourceAddr+0x1b2>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->addr == destAddr)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d104      	bne.n	800b1a6 <ipv4SelectSourceAddr+0x96>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800b1a4:	e098      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
            }

            //Check whether the destination address matches the default gateway
            if(bestAddr->defaultGateway == destAddr)
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	68ba      	ldr	r2, [r7, #8]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	f000 808a 	beq.w	800b2c6 <ipv4SelectSourceAddr+0x1b6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway == destAddr)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d104      	bne.n	800b1c6 <ipv4SelectSourceAddr+0xb6>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800b1c4:	e088      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
            }

            //Prefer appropriate scope
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 f9ca 	bl	800b564 <ipv4GetAddrScope>
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f9c4 	bl	800b564 <ipv4GetAddrScope>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	429c      	cmp	r4, r3
 800b1e0:	d210      	bcs.n	800b204 <ipv4SelectSourceAddr+0xf4>
            {
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f000 f9bc 	bl	800b564 <ipv4GetAddrScope>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	68b8      	ldr	r0, [r7, #8]
 800b1f0:	f000 f9b8 	bl	800b564 <ipv4GetAddrScope>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	429c      	cmp	r4, r3
 800b1f8:	d367      	bcc.n	800b2ca <ipv4SelectSourceAddr+0x1ba>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800b202:	e062      	b.n	800b2ca <ipv4SelectSourceAddr+0x1ba>
            }
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 f9ab 	bl	800b564 <ipv4GetAddrScope>
 800b20e:	4604      	mov	r4, r0
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f9a5 	bl	800b564 <ipv4GetAddrScope>
 800b21a:	4603      	mov	r3, r0
 800b21c:	429c      	cmp	r4, r3
 800b21e:	d210      	bcs.n	800b242 <ipv4SelectSourceAddr+0x132>
            {
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4618      	mov	r0, r3
 800b226:	f000 f99d 	bl	800b564 <ipv4GetAddrScope>
 800b22a:	4604      	mov	r4, r0
 800b22c:	68b8      	ldr	r0, [r7, #8]
 800b22e:	f000 f999 	bl	800b564 <ipv4GetAddrScope>
 800b232:	4603      	mov	r3, r0
 800b234:	429c      	cmp	r4, r3
 800b236:	d24a      	bcs.n	800b2ce <ipv4SelectSourceAddr+0x1be>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	61fb      	str	r3, [r7, #28]
               }

               //Select the next address in the list
               continue;
 800b240:	e045      	b.n	800b2ce <ipv4SelectSourceAddr+0x1be>
            }

            //If the destination address lies on one of the subnets to which
            //the host is directly connected, the corresponding source address
            //may be chosen (refer to RFC 1122, section 3.3.4.3)
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	405a      	eors	r2, r3
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	4013      	ands	r3, r2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d11b      	bne.n	800b28c <ipv4SelectSourceAddr+0x17c>
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	405a      	eors	r2, r3
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	4013      	ands	r3, r2
 800b262:	2b00      	cmp	r3, #0
 800b264:	d135      	bne.n	800b2d2 <ipv4SelectSourceAddr+0x1c2>
               {
                  //Use longest subnet mask
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f9ae 	bl	800b5cc <ipv4GetPrefixLength>
 800b270:	4604      	mov	r4, r0
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 800b272:	69fb      	ldr	r3, [r7, #28]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 f9a8 	bl	800b5cc <ipv4GetPrefixLength>
 800b27c:	4603      	mov	r3, r0
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 800b27e:	429c      	cmp	r4, r3
 800b280:	d927      	bls.n	800b2d2 <ipv4SelectSourceAddr+0x1c2>
                  {
                     //Give the current source address the higher precedence
                     bestInterface = currentInterface;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	623b      	str	r3, [r7, #32]
                     bestAddr = currentAddr;
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	61fb      	str	r3, [r7, #28]
                  }
               }

               //Select the next address in the list
               continue;
 800b28a:	e022      	b.n	800b2d2 <ipv4SelectSourceAddr+0x1c2>
            }
            else
            {
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	405a      	eors	r2, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	4013      	ands	r3, r2
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d104      	bne.n	800b2a8 <ipv4SelectSourceAddr+0x198>
               {
                  //Give the current source address the higher precedence
                  bestInterface = currentInterface;
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	623b      	str	r3, [r7, #32]
                  bestAddr = currentAddr;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	61fb      	str	r3, [r7, #28]

                  //Select the next address in the list
                  continue;
 800b2a6:	e017      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
            }

            //The default gateways may be consulted. If these gateways are
            //assigned to different interfaces, the interface corresponding
            //to the gateway with the highest preference may be chosen
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d112      	bne.n	800b2d6 <ipv4SelectSourceAddr+0x1c6>
            {
               //Select the next address in the list
               continue;
            }
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00f      	beq.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
            {
               //Give the current source address the higher precedence
               bestInterface = currentInterface;
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	623b      	str	r3, [r7, #32]
               bestAddr = currentAddr;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	61fb      	str	r3, [r7, #28]

               //Select the next address in the list
               continue;
 800b2c0:	e00a      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2c2:	bf00      	nop
 800b2c4:	e008      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2c6:	bf00      	nop
 800b2c8:	e006      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2ca:	bf00      	nop
 800b2cc:	e004      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2ce:	bf00      	nop
 800b2d0:	e002      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2d2:	bf00      	nop
 800b2d4:	e000      	b.n	800b2d8 <ipv4SelectSourceAddr+0x1c8>
               continue;
 800b2d6:	bf00      	nop
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	3301      	adds	r3, #1
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f43f af38 	beq.w	800b156 <ipv4SelectSourceAddr+0x46>
 800b2e6:	e000      	b.n	800b2ea <ipv4SelectSourceAddr+0x1da>
         continue;
 800b2e8:	bf00      	nop
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	f43f af19 	beq.w	800b12a <ipv4SelectSourceAddr+0x1a>
         }
      }
   }

   //Valid source address?
   if(bestAddr != NULL)
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <ipv4SelectSourceAddr+0x202>
   {
      //Return the out-going interface and the source address to be used
      *interface = bestInterface;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a3a      	ldr	r2, [r7, #32]
 800b302:	601a      	str	r2, [r3, #0]
      *srcAddr = bestAddr->addr;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	601a      	str	r2, [r3, #0]

      //Successful source address selection
      error = NO_ERROR;
 800b30c:	2300      	movs	r3, #0
 800b30e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b310:	e002      	b.n	800b318 <ipv4SelectSourceAddr+0x208>
   }
   else
   {
      //Report an error
      error = ERROR_NO_ADDRESS;
 800b312:	f240 13f7 	movw	r3, #503	; 0x1f7
 800b316:	85fb      	strh	r3, [r7, #46]	; 0x2e
   }

   //Return status code
   return error;
 800b318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3734      	adds	r7, #52	; 0x34
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd90      	pop	{r4, r7, pc}
 800b322:	bf00      	nop
 800b324:	20009168 	.word	0x20009168

0800b328 <ipv4SelectDefaultGateway>:
 * @return Error code
 **/

error_t ipv4SelectDefaultGateway(NetInterface *interface, Ipv4Addr srcAddr,
   Ipv4Addr *defaultGatewayAddr)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of default gateways
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b334:	2300      	movs	r3, #0
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e020      	b.n	800b37c <ipv4SelectDefaultGateway+0x54>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4413      	add	r3, r2
 800b34c:	3304      	adds	r3, #4
 800b34e:	613b      	str	r3, [r7, #16]

      //Check whether the gateway address is valid
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	791b      	ldrb	r3, [r3, #4]
 800b354:	2b02      	cmp	r3, #2
 800b356:	d10e      	bne.n	800b376 <ipv4SelectDefaultGateway+0x4e>
         entry->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	691b      	ldr	r3, [r3, #16]
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00a      	beq.n	800b376 <ipv4SelectDefaultGateway+0x4e>
      {
         //Under the strong ES model, the source address is included as a
         //parameter in order to select a gateway that is directly reachable
         //on the corresponding physical interface (refer to RFC 1122,
         //section 3.3.4.2)
         if(entry->addr == srcAddr)
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	429a      	cmp	r2, r3
 800b368:	d105      	bne.n	800b376 <ipv4SelectDefaultGateway+0x4e>
         {
            //Return the IPv4 address of the default gateway
            *defaultGatewayAddr = entry->defaultGateway;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	601a      	str	r2, [r3, #0]
            //Successful default gateway selection
            return NO_ERROR;
 800b372:	2300      	movs	r3, #0
 800b374:	e007      	b.n	800b386 <ipv4SelectDefaultGateway+0x5e>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	3301      	adds	r3, #1
 800b37a:	617b      	str	r3, [r7, #20]
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d0db      	beq.n	800b33a <ipv4SelectDefaultGateway+0x12>
         }
      }
   }

   //No default gateway found
   return ERROR_NO_ROUTE;
 800b382:	f44f 7302 	mov.w	r3, #520	; 0x208
}
 800b386:	4618      	mov	r0, r3
 800b388:	371c      	adds	r7, #28
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <ipv4IsOnLink>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is on-link, else FALSE
 **/

bool_t ipv4IsOnLink(NetInterface *interface, Ipv4Addr ipAddr)
{
 800b392:	b480      	push	{r7}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b39c:	2300      	movs	r3, #0
 800b39e:	60fb      	str	r3, [r7, #12]
 800b3a0:	e01c      	b.n	800b3dc <ipv4IsOnLink+0x4a>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	791b      	ldrb	r3, [r3, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <ipv4IsOnLink+0x44>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	405a      	eors	r2, r3
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <ipv4IsOnLink+0x44>
         {
            //The specified IPv4 address is on-link
            return TRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e006      	b.n	800b3e4 <ipv4IsOnLink+0x52>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0df      	beq.n	800b3a2 <ipv4IsOnLink+0x10>
         }
      }
   }

   //The specified IPv4 address is off-link
   return FALSE;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <ipv4IsBroadcastAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a broadcast address, else FALSE
 **/

bool_t ipv4IsBroadcastAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b400:	d101      	bne.n	800b406 <ipv4IsBroadcastAddr+0x16>
      return TRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	e02f      	b.n	800b466 <ipv4IsBroadcastAddr+0x76>

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b406:	2300      	movs	r3, #0
 800b408:	60fb      	str	r3, [r7, #12]
 800b40a:	e028      	b.n	800b45e <ipv4IsBroadcastAddr+0x6e>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	4613      	mov	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4413      	add	r3, r2
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	3304      	adds	r3, #4
 800b420:	60bb      	str	r3, [r7, #8]

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d016      	beq.n	800b458 <ipv4IsBroadcastAddr+0x68>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	405a      	eors	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	4013      	ands	r3, r2
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10d      	bne.n	800b458 <ipv4IsBroadcastAddr+0x68>
         {
            //Make sure the subnet mask is not 255.255.255.255
            if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b444:	d008      	beq.n	800b458 <ipv4IsBroadcastAddr+0x68>
            {
               //Directed broadcast address?
               if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	68da      	ldr	r2, [r3, #12]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b452:	d101      	bne.n	800b458 <ipv4IsBroadcastAddr+0x68>
               {
                  return TRUE;
 800b454:	2301      	movs	r3, #1
 800b456:	e006      	b.n	800b466 <ipv4IsBroadcastAddr+0x76>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3301      	adds	r3, #1
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0d3      	beq.n	800b40c <ipv4IsBroadcastAddr+0x1c>
         }
      }
   }

   //The specified IPv4 address is not a broadcast address
   return FALSE;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800b472:	b480      	push	{r7}
 800b474:	b085      	sub	sp, #20
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	6039      	str	r1, [r7, #0]
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b47c:	2300      	movs	r3, #0
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e018      	b.n	800b4b4 <ipv4IsTentativeAddr+0x42>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	4613      	mov	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	4413      	add	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	4413      	add	r3, r2
 800b494:	3304      	adds	r3, #4
 800b496:	60bb      	str	r3, [r7, #8]

      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	791b      	ldrb	r3, [r3, #4]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d106      	bne.n	800b4ae <ipv4IsTentativeAddr+0x3c>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d101      	bne.n	800b4ae <ipv4IsTentativeAddr+0x3c>
         {
            //The specified IPv4 address is a tentative address
            return TRUE;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e006      	b.n	800b4bc <ipv4IsTentativeAddr+0x4a>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d0e3      	beq.n	800b482 <ipv4IsTentativeAddr+0x10>
         }
      }
   }

   //The specified IPv4 address is not a tentative address
   return FALSE;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <ipv4IsLocalHostAddr>:
 * @return TRUE if the IPv4 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv4IsLocalHostAddr(Ipv4Addr ipAddr)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b089      	sub	sp, #36	; 0x24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
   bool_t flag;
   NetInterface *interface;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	2b7f      	cmp	r3, #127	; 0x7f
 800b4da:	d102      	bne.n	800b4e2 <ipv4IsLocalHostAddr+0x1a>
   {
      //The 127.0.0.0/8 block is assigned for use as the host loopback address.
      //A datagram sent by a higher-level protocol to an address anywhere within
      //this block loops back inside the host (refer to RFC 5735, section 3)
      flag = TRUE;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	e036      	b.n	800b550 <ipv4IsLocalHostAddr+0x88>
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	e02d      	b.n	800b544 <ipv4IsLocalHostAddr+0x7c>
      {
         //Point to the current interface
         interface = &netInterface[i];
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	f240 628c 	movw	r2, #1676	; 0x68c
 800b4ee:	fb02 f303 	mul.w	r3, r2, r3
 800b4f2:	33e0      	adds	r3, #224	; 0xe0
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	; (800b560 <ipv4IsLocalHostAddr+0x98>)
 800b4f6:	4413      	add	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]

         //Iterate through the list of addresses assigned to the interface
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	61bb      	str	r3, [r7, #24]
 800b4fe:	e018      	b.n	800b532 <ipv4IsLocalHostAddr+0x6a>
         {
            //Point to the current entry
            entry = &interface->ipv4Context.addrList[j];
 800b500:	69ba      	ldr	r2, [r7, #24]
 800b502:	4613      	mov	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800b50e:	693a      	ldr	r2, [r7, #16]
 800b510:	4413      	add	r3, r2
 800b512:	3304      	adds	r3, #4
 800b514:	60fb      	str	r3, [r7, #12]

            //Check whether the specified IPv4 address matches any address
            //assigned to the host
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	791b      	ldrb	r3, [r3, #4]
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d106      	bne.n	800b52c <ipv4IsLocalHostAddr+0x64>
               entry->addr == ipAddr)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d101      	bne.n	800b52c <ipv4IsLocalHostAddr+0x64>
            {
               flag = TRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	3301      	adds	r3, #1
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d102      	bne.n	800b53e <ipv4IsLocalHostAddr+0x76>
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0e0      	beq.n	800b500 <ipv4IsLocalHostAddr+0x38>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	3301      	adds	r3, #1
 800b542:	61fb      	str	r3, [r7, #28]
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d102      	bne.n	800b550 <ipv4IsLocalHostAddr+0x88>
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0cb      	beq.n	800b4e8 <ipv4IsLocalHostAddr+0x20>
         }
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
 800b550:	697b      	ldr	r3, [r7, #20]
}
 800b552:	4618      	mov	r0, r3
 800b554:	3724      	adds	r7, #36	; 0x24
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	20009168 	.word	0x20009168

0800b564 <ipv4GetAddrScope>:
 * @param[in] ipAddr IPv4 address
 * @return IPv4 address scope
 **/

uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b572:	d102      	bne.n	800b57a <ipv4GetAddrScope+0x16>
   {
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800b574:	2302      	movs	r3, #2
 800b576:	60fb      	str	r3, [r7, #12]
 800b578:	e021      	b.n	800b5be <ipv4GetAddrScope+0x5a>
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b580:	2be0      	cmp	r3, #224	; 0xe0
 800b582:	d10a      	bne.n	800b59a <ipv4GetAddrScope+0x36>
   {
      //Local Network Control Block?
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b58a:	2be0      	cmp	r3, #224	; 0xe0
 800b58c:	d102      	bne.n	800b594 <ipv4GetAddrScope+0x30>
      {
         //Addresses in the Local Network Control Block are used for protocol
         //control traffic that is not forwarded off link
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800b58e:	2302      	movs	r3, #2
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e014      	b.n	800b5be <ipv4GetAddrScope+0x5a>
      }
      //Any other multicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800b594:	2303      	movs	r3, #3
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	e011      	b.n	800b5be <ipv4GetAddrScope+0x5a>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b7f      	cmp	r3, #127	; 0x7f
 800b5a0:	d102      	bne.n	800b5a8 <ipv4GetAddrScope+0x44>
      {
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
 800b5a6:	e00a      	b.n	800b5be <ipv4GetAddrScope+0x5a>
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d102      	bne.n	800b5ba <ipv4GetAddrScope+0x56>
      {
         //IPv4 auto-configuration addresses, which have the prefix
         //169.254.0.0/16, are assigned link-local scope
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	e001      	b.n	800b5be <ipv4GetAddrScope+0x5a>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	60fb      	str	r3, [r7, #12]
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7f5 fc50 	bl	8000e7a <swapInt32>
 800b5da:	6078      	str	r0, [r7, #4]

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e00a      	b.n	800b5f8 <ipv4GetPrefixLength+0x2c>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 800b5e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	40da      	lsrs	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d006      	beq.n	800b600 <ipv4GetPrefixLength+0x34>
   for(i = 0; i < 32; i++)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b1f      	cmp	r3, #31
 800b5fc:	d9f1      	bls.n	800b5e2 <ipv4GetPrefixLength+0x16>
 800b5fe:	e000      	b.n	800b602 <ipv4GetPrefixLength+0x36>
         break;
 800b600:	bf00      	nop
   }

   //Return prefix length
   return i;
 800b602:	68fb      	ldr	r3, [r7, #12]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <ipv4MapMulticastAddrToMac>:
 * @param[out] macAddr Corresponding MAC-layer multicast address
 * @return Error code
 **/

error_t ipv4MapMulticastAddrToMac(Ipv4Addr ipAddr, MacAddr *macAddr)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
   uint8_t *p;

   //Ensure the specified IPv4 address is a valid host group address
   if(!ipv4IsMulticastAddr(ipAddr))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b61c:	2be0      	cmp	r3, #224	; 0xe0
 800b61e:	d001      	beq.n	800b624 <ipv4MapMulticastAddrToMac+0x18>
      return ERROR_INVALID_ADDRESS;
 800b620:	23e4      	movs	r3, #228	; 0xe4
 800b622:	e01b      	b.n	800b65c <ipv4MapMulticastAddrToMac+0x50>

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
 800b624:	1d3b      	adds	r3, r7, #4
 800b626:	60fb      	str	r3, [r7, #12]

   //An IP host group address is mapped to an Ethernet multicast address
   //by placing the low-order 23-bits of the IP address into the low-order
   //23 bits of the Ethernet multicast address 01-00-5E-00-00-00
   macAddr->b[0] = 0x01;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2201      	movs	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
   macAddr->b[1] = 0x00;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2200      	movs	r2, #0
 800b632:	705a      	strb	r2, [r3, #1]
   macAddr->b[2] = 0x5E;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	225e      	movs	r2, #94	; 0x5e
 800b638:	709a      	strb	r2, [r3, #2]
   macAddr->b[3] = p[1] & 0x7F;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3301      	adds	r3, #1
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b644:	b2da      	uxtb	r2, r3
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	70da      	strb	r2, [r3, #3]
   macAddr->b[4] = p[2];
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	789a      	ldrb	r2, [r3, #2]
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	711a      	strb	r2, [r3, #4]
   macAddr->b[5] = p[3];
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	78da      	ldrb	r2, [r3, #3]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	715a      	strb	r2, [r3, #5]

   //The specified host group address was successfully
   //mapped to a MAC-layer address
   return NO_ERROR;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <ipv4UpdateInStats>:
 * @param[in] length Length of the incoming IP packet
 **/

void ipv4UpdateInStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800b674:	68b9      	ldr	r1, [r7, #8]
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7ff feba 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 800b680:	bf00      	nop
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <ipv4UpdateOutStats>:
 * @param[in] length Length of the outgoing IP packet
 **/

void ipv4UpdateOutStats(NetInterface *interface, Ipv4Addr destIpAddr,
   size_t length)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
   //Check whether the destination address is a unicast, broadcast or multicast address
   if(ipv4IsBroadcastAddr(interface, destIpAddr))
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f7ff feaa 	bl	800b3f0 <ipv4IsBroadcastAddr>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 800b6a0:	bf00      	nop
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <ipv4UpdateErrorStats>:
 * @param[in] interface Underlying network interface
 * @param[in] error Status code describing the error
 **/

void ipv4UpdateErrorStats(NetInterface *interface, error_t error)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
   //Check error code
   switch(error)
 800b6b4:	887b      	ldrh	r3, [r7, #2]
 800b6b6:	3bd1      	subs	r3, #209	; 0xd1
 800b6b8:	2b1b      	cmp	r3, #27
 800b6ba:	d83b      	bhi.n	800b734 <ipv4UpdateErrorStats+0x8c>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <ipv4UpdateErrorStats+0x1c>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b735 	.word	0x0800b735
 800b6c8:	0800b735 	.word	0x0800b735
 800b6cc:	0800b735 	.word	0x0800b735
 800b6d0:	0800b735 	.word	0x0800b735
 800b6d4:	0800b735 	.word	0x0800b735
 800b6d8:	0800b735 	.word	0x0800b735
 800b6dc:	0800b735 	.word	0x0800b735
 800b6e0:	0800b735 	.word	0x0800b735
 800b6e4:	0800b735 	.word	0x0800b735
 800b6e8:	0800b735 	.word	0x0800b735
 800b6ec:	0800b735 	.word	0x0800b735
 800b6f0:	0800b735 	.word	0x0800b735
 800b6f4:	0800b735 	.word	0x0800b735
 800b6f8:	0800b735 	.word	0x0800b735
 800b6fc:	0800b735 	.word	0x0800b735
 800b700:	0800b735 	.word	0x0800b735
 800b704:	0800b735 	.word	0x0800b735
 800b708:	0800b735 	.word	0x0800b735
 800b70c:	0800b735 	.word	0x0800b735
 800b710:	0800b735 	.word	0x0800b735
 800b714:	0800b735 	.word	0x0800b735
 800b718:	0800b735 	.word	0x0800b735
 800b71c:	0800b735 	.word	0x0800b735
 800b720:	0800b735 	.word	0x0800b735
 800b724:	0800b735 	.word	0x0800b735
 800b728:	0800b735 	.word	0x0800b735
 800b72c:	0800b735 	.word	0x0800b735
 800b730:	0800b735 	.word	0x0800b735
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsInTruncatedPkts, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInTruncatedPkts, 1);
      break;
   default:
      //Just for sanity
      break;
 800b734:	bf00      	nop
   }
}
 800b736:	bf00      	nop
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop

0800b744 <llmnrResponderInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t llmnrResponderInit(NetInterface *interface)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Join the LLMNR IPv4 multicast group
   error = ipv4JoinMulticastGroup(interface, LLMNR_IPV4_MULTICAST_ADDR);
 800b74c:	490e      	ldr	r1, [pc, #56]	; (800b788 <llmnrResponderInit+0x44>)
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7fe ffa6 	bl	800a6a0 <ipv4JoinMulticastGroup>
 800b754:	4603      	mov	r3, r0
 800b756:	81fb      	strh	r3, [r7, #14]
   //Any error to report?
   if(error)
 800b758:	89fb      	ldrh	r3, [r7, #14]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <llmnrResponderInit+0x1e>
      return error;
 800b75e:	89fb      	ldrh	r3, [r7, #14]
 800b760:	e00e      	b.n	800b780 <llmnrResponderInit+0x3c>
   if(error)
      return error;
#endif

   //LLMNR responders must listen on UDP port 5355
   error = udpAttachRxCallback(interface, LLMNR_PORT, llmnrProcessQuery,
 800b762:	2300      	movs	r3, #0
 800b764:	4a09      	ldr	r2, [pc, #36]	; (800b78c <llmnrResponderInit+0x48>)
 800b766:	f241 41eb 	movw	r1, #5355	; 0x14eb
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7fb f830 	bl	80067d0 <udpAttachRxCallback>
 800b770:	4603      	mov	r3, r0
 800b772:	81fb      	strh	r3, [r7, #14]
      NULL);
   //Any error to report?
   if(error)
 800b774:	89fb      	ldrh	r3, [r7, #14]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <llmnrResponderInit+0x3a>
      return error;
 800b77a:	89fb      	ldrh	r3, [r7, #14]
 800b77c:	e000      	b.n	800b780 <llmnrResponderInit+0x3c>

   //Successful initialization
   return NO_ERROR;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	fc0000e0 	.word	0xfc0000e0
 800b78c:	0800b791 	.word	0x0800b791

0800b790 <llmnrProcessQuery>:

void llmnrProcessQuery(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 800b790:	b5b0      	push	{r4, r5, r7, lr}
 800b792:	b08e      	sub	sp, #56	; 0x38
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
   IpAddr destIpAddr;
   LlmnrHeader *message;
   DnsQuestion *question;

   //Retrieve the length of the LLMNR message
   length = netBufferGetLength(buffer) - offset;
 800b79e:	6838      	ldr	r0, [r7, #0]
 800b7a0:	f7f6 fe85 	bl	80024ae <netBufferGetLength>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c

   //Ensure the LLMNR message is valid
   if(length < sizeof(LlmnrHeader))
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	2b0b      	cmp	r3, #11
 800b7b0:	f240 80ab 	bls.w	800b90a <llmnrProcessQuery+0x17a>
      return;
   if(length > DNS_MESSAGE_MAX_SIZE)
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ba:	f200 80a8 	bhi.w	800b90e <llmnrProcessQuery+0x17e>
      return;

   //Point to the LLMNR message header
   message = netBufferAt(buffer, offset);
 800b7be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7c0:	6838      	ldr	r0, [r7, #0]
 800b7c2:	f7f6 ff3c 	bl	800263e <netBufferAt>
 800b7c6:	62b8      	str	r0, [r7, #40]	; 0x28
   //Sanity check
   if(message == NULL)
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80a1 	beq.w	800b912 <llmnrProcessQuery+0x182>
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 query received?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b0c      	cmp	r3, #12
 800b7d6:	f040 809e 	bne.w	800b916 <llmnrProcessQuery+0x186>
   {
      //Unicast UDP queries must be silently discarded (refer to RFC 4795,
      //section 2.4)
      if(!ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7e2:	2be0      	cmp	r3, #224	; 0xe0
 800b7e4:	f040 8099 	bne.w	800b91a <llmnrProcessQuery+0x18a>
         return;

      //A responder responds to a multicast query by sending a unicast UDP
      //response to the sender (refer to RFC 4795, section 2)
      destIpAddr.length = sizeof(Ipv4Addr);
 800b7e8:	2304      	movs	r3, #4
 800b7ea:	613b      	str	r3, [r7, #16]
      destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	617b      	str	r3, [r7, #20]
      //Discard the LLMNR query message
      return;
   }

   //Discard LLMNR responses received on port 5355
   if(message->qr)
 800b7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f4:	789b      	ldrb	r3, [r3, #2]
 800b7f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	f040 808e 	bne.w	800b91e <llmnrProcessQuery+0x18e>
      return;

   //LLMNR messages received with an opcode other than zero must be silently
   //ignored
   if(message->opcode != DNS_OPCODE_QUERY)
 800b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b804:	789b      	ldrb	r3, [r3, #2]
 800b806:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f040 8088 	bne.w	800b922 <llmnrProcessQuery+0x192>
      return;

   //LLMNR messages received with non-zero response codes must be silently
   //ignored
   if(message->rcode != DNS_RCODE_NO_ERROR)
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	78db      	ldrb	r3, [r3, #3]
 800b816:	f003 030f 	and.w	r3, r3, #15
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f040 8082 	bne.w	800b926 <llmnrProcessQuery+0x196>
      return;

   //LLMNR responders must silently discard LLMNR queries with QDCOUNT not
   //equal to one (refer to RFC 4795, section 2.1.1)
   if(ntohs(message->qdcount) != 1)
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	889b      	ldrh	r3, [r3, #4]
 800b826:	b29b      	uxth	r3, r3
 800b828:	4618      	mov	r0, r3
 800b82a:	f7f5 fb18 	bl	8000e5e <swapInt16>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b01      	cmp	r3, #1
 800b832:	d17a      	bne.n	800b92a <llmnrProcessQuery+0x19a>
      return;

   //LLMNR responders must silently discard LLMNR queries with ANCOUNT or
   //NSCOUNT not equal to zero
   if(ntohs(message->ancount) != 0 || ntohs(message->nscount) != 0)
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	88db      	ldrh	r3, [r3, #6]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f5 fb0f 	bl	8000e5e <swapInt16>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d173      	bne.n	800b92e <llmnrProcessQuery+0x19e>
 800b846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b848:	891b      	ldrh	r3, [r3, #8]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7f5 fb06 	bl	8000e5e <swapInt16>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d16a      	bne.n	800b92e <llmnrProcessQuery+0x19e>
      return;

   //Point to the first question
   pos = sizeof(LlmnrHeader);
 800b858:	230c      	movs	r3, #12
 800b85a:	627b      	str	r3, [r7, #36]	; 0x24

   //Parse resource record name
   n = dnsParseName((DnsHeader *) message, length, pos, NULL, 0);
 800b85c:	2300      	movs	r3, #0
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	2300      	movs	r3, #0
 800b862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b868:	f7fc fb77 	bl	8007f5a <dnsParseName>
 800b86c:	6238      	str	r0, [r7, #32]
   //Invalid name?
   if(n == 0)
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d05e      	beq.n	800b932 <llmnrProcessQuery+0x1a2>
      return;

   //Malformed LLMNR message?
   if((n + sizeof(DnsQuestion)) > length)
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	3304      	adds	r3, #4
 800b878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d35b      	bcc.n	800b936 <llmnrProcessQuery+0x1a6>
      return;

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, n);
 800b87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	4413      	add	r3, r2
 800b884:	61fb      	str	r3, [r7, #28]

   //Check the class of the query
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	885b      	ldrh	r3, [r3, #2]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f5 fae6 	bl	8000e5e <swapInt16>
 800b892:	4603      	mov	r3, r0
 800b894:	2b01      	cmp	r3, #1
 800b896:	d008      	beq.n	800b8aa <llmnrProcessQuery+0x11a>
      ntohs(question->qclass) == DNS_RR_CLASS_ANY)
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	885b      	ldrh	r3, [r3, #2]
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7f5 fadd 	bl	8000e5e <swapInt16>
 800b8a4:	4603      	mov	r3, r0
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 800b8a6:	2bff      	cmp	r3, #255	; 0xff
 800b8a8:	d146      	bne.n	800b938 <llmnrProcessQuery+0x1a8>
   {
      //Responders must respond to LLMNR queries for names and addresses for
      //which they are authoritative
      if(!dnsCompareName((DnsHeader *) message, length, pos,
         interface->hostname, 0))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3319      	adds	r3, #25
      if(!dnsCompareName((DnsHeader *) message, length, pos,
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	9200      	str	r2, [sp, #0]
 800b8b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8b8:	f7fc fbed 	bl	8008096 <dnsCompareName>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d13a      	bne.n	800b938 <llmnrProcessQuery+0x1a8>
      {
         //Responders must direct responses to the port from which the query
         //was sent
         destPort = ntohs(udpHeader->srcPort);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f5 fac8 	bl	8000e5e <swapInt16>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	837b      	strh	r3, [r7, #26]

         //Send LLMNR response
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	881b      	ldrh	r3, [r3, #0]
 800b8d6:	b29c      	uxth	r4, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7f5 fabd 	bl	8000e5e <swapInt16>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461d      	mov	r5, r3
            ntohs(question->qtype), ntohs(question->qclass));
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	885b      	ldrh	r3, [r3, #2]
 800b8ec:	b29b      	uxth	r3, r3
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7f5 fab5 	bl	8000e5e <swapInt16>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	8b7a      	ldrh	r2, [r7, #26]
 800b8f8:	f107 0110 	add.w	r1, r7, #16
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	9500      	str	r5, [sp, #0]
 800b900:	4623      	mov	r3, r4
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f000 f81c 	bl	800b940 <llmnrSendResponse>
 800b908:	e016      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b90a:	bf00      	nop
 800b90c:	e014      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b90e:	bf00      	nop
 800b910:	e012      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b912:	bf00      	nop
 800b914:	e010      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b916:	bf00      	nop
 800b918:	e00e      	b.n	800b938 <llmnrProcessQuery+0x1a8>
         return;
 800b91a:	bf00      	nop
 800b91c:	e00c      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b91e:	bf00      	nop
 800b920:	e00a      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b922:	bf00      	nop
 800b924:	e008      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b926:	bf00      	nop
 800b928:	e006      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b92a:	bf00      	nop
 800b92c:	e004      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b92e:	bf00      	nop
 800b930:	e002      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b932:	bf00      	nop
 800b934:	e000      	b.n	800b938 <llmnrProcessQuery+0x1a8>
      return;
 800b936:	bf00      	nop
      }
   }
}
 800b938:	3730      	adds	r7, #48	; 0x30
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b940 <llmnrSendResponse>:
 * @param[in] qclass Resource record class
 **/

error_t llmnrSendResponse(NetInterface *interface, const IpAddr *destIpAddr,
   uint16_t destPort, uint16_t id, uint16_t qtype, uint16_t qclass)
{
 800b940:	b5b0      	push	{r4, r5, r7, lr}
 800b942:	b096      	sub	sp, #88	; 0x58
 800b944:	af04      	add	r7, sp, #16
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4611      	mov	r1, r2
 800b94c:	461a      	mov	r2, r3
 800b94e:	460b      	mov	r3, r1
 800b950:	80fb      	strh	r3, [r7, #6]
 800b952:	4613      	mov	r3, r2
 800b954:	80bb      	strh	r3, [r7, #4]
   DnsQuestion *question;
   DnsResourceRecord *record;
   NetTxAncillary ancillary;

   //Initialize status code
   error = NO_ERROR;
 800b956:	2300      	movs	r3, #0
 800b958:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

   //Allocate a memory buffer to hold the LLMNR response message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800b95c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b960:	4619      	mov	r1, r3
 800b962:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b966:	f7fa fec4 	bl	80066f2 <udpAllocBuffer>
 800b96a:	63f8      	str	r0, [r7, #60]	; 0x3c
   //Failed to allocate buffer?
   if(buffer == NULL)
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <llmnrSendResponse+0x36>
      return ERROR_OUT_OF_MEMORY;
 800b972:	2364      	movs	r3, #100	; 0x64
 800b974:	e0f4      	b.n	800bb60 <llmnrSendResponse+0x220>

   //Point to the LLMNR header
   message = netBufferAt(buffer, offset);
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	4619      	mov	r1, r3
 800b97a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b97c:	f7f6 fe5f 	bl	800263e <netBufferAt>
 800b980:	63b8      	str	r0, [r7, #56]	; 0x38

   //Take the identifier from the query message
   message->id = id;
 800b982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b984:	88ba      	ldrh	r2, [r7, #4]
 800b986:	801a      	strh	r2, [r3, #0]

   //Format LLMNR response header
   message->qr = 1;
 800b988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b98a:	7893      	ldrb	r3, [r2, #2]
 800b98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b990:	7093      	strb	r3, [r2, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800b992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b994:	7893      	ldrb	r3, [r2, #2]
 800b996:	f36f 03c6 	bfc	r3, #3, #4
 800b99a:	7093      	strb	r3, [r2, #2]
   message->c = 0;
 800b99c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b99e:	7893      	ldrb	r3, [r2, #2]
 800b9a0:	f36f 0382 	bfc	r3, #2, #1
 800b9a4:	7093      	strb	r3, [r2, #2]
   message->tc = 0;
 800b9a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9a8:	7893      	ldrb	r3, [r2, #2]
 800b9aa:	f36f 0341 	bfc	r3, #1, #1
 800b9ae:	7093      	strb	r3, [r2, #2]
   message->t = 0;
 800b9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b2:	7893      	ldrb	r3, [r2, #2]
 800b9b4:	f36f 0300 	bfc	r3, #0, #1
 800b9b8:	7093      	strb	r3, [r2, #2]
   message->z = 0;
 800b9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9bc:	78d3      	ldrb	r3, [r2, #3]
 800b9be:	f36f 1307 	bfc	r3, #4, #4
 800b9c2:	70d3      	strb	r3, [r2, #3]
   message->rcode = DNS_RCODE_NO_ERROR;
 800b9c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9c6:	78d3      	ldrb	r3, [r2, #3]
 800b9c8:	f36f 0303 	bfc	r3, #0, #4
 800b9cc:	70d3      	strb	r3, [r2, #3]
   message->qdcount = HTONS(1);
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	711a      	strb	r2, [r3, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f042 0201 	orr.w	r2, r2, #1
 800b9da:	715a      	strb	r2, [r3, #5]
   message->ancount = 0;
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	2200      	movs	r2, #0
 800b9e0:	719a      	strb	r2, [r3, #6]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	71da      	strb	r2, [r3, #7]
   message->nscount = 0;
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	721a      	strb	r2, [r3, #8]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	725a      	strb	r2, [r3, #9]
   message->arcount = 0;
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	729a      	strb	r2, [r3, #10]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	72da      	strb	r2, [r3, #11]

   //Set the length of the LLMNR response message
   length = sizeof(DnsHeader);
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	643b      	str	r3, [r7, #64]	; 0x40

   //Encode the requested host name using the DNS name notation
   length += dnsEncodeName(interface->hostname,
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f103 0019 	add.w	r0, r3, #25
 800ba04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba08:	4413      	add	r3, r2
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	f7fc fa3a 	bl	8007e84 <dnsEncodeName>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba14:	4413      	add	r3, r2
 800ba16:	643b      	str	r3, [r7, #64]	; 0x40
      (uint8_t *) message + length);

   //Point to the corresponding entry
   question = DNS_GET_QUESTION(message, length);
 800ba18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba1c:	4413      	add	r3, r2
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34

   //Fill in resource record
   question->qtype = htons(qtype);
 800ba20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f5 fa1a 	bl	8000e5e <swapInt16>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba30:	801a      	strh	r2, [r3, #0]
   question->qclass = htons(qclass);
 800ba32:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7f5 fa11 	bl	8000e5e <swapInt16>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba42:	805a      	strh	r2, [r3, #2]

   //Update the length of the response message
   length += sizeof(DnsQuestion);
 800ba44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba46:	3304      	adds	r3, #4
 800ba48:	643b      	str	r3, [r7, #64]	; 0x40

#if (IPV4_SUPPORT == ENABLED)
   //A resource record requested?
   if(qtype == DNS_RR_TYPE_A || qtype == DNS_RR_TYPE_ANY)
 800ba4a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d003      	beq.n	800ba5a <llmnrSendResponse+0x11a>
 800ba52:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800ba56:	2bff      	cmp	r3, #255	; 0xff
 800ba58:	d146      	bne.n	800bae8 <llmnrSendResponse+0x1a8>
   {
      //Valid IPv4 host address?
      if(interface->ipv4Context.addrList[0].state == IPV4_ADDR_STATE_VALID)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 800ba60:	2b02      	cmp	r3, #2
 800ba62:	d141      	bne.n	800bae8 <llmnrSendResponse+0x1a8>
      {
         //Encode the host name using the DNS name notation
         length += dnsEncodeName(interface->hostname,
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f103 0019 	add.w	r0, r3, #25
 800ba6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6e:	4413      	add	r3, r2
 800ba70:	4619      	mov	r1, r3
 800ba72:	f7fc fa07 	bl	8007e84 <dnsEncodeName>
 800ba76:	4602      	mov	r2, r0
 800ba78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba7a:	4413      	add	r3, r2
 800ba7c:	643b      	str	r3, [r7, #64]	; 0x40
            (uint8_t *) message + length);

         //Point to the corresponding resource record
         record = DNS_GET_RESOURCE_RECORD(message, length);
 800ba7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba82:	4413      	add	r3, r2
 800ba84:	633b      	str	r3, [r7, #48]	; 0x30

         //Fill in resource record
         record->rtype = HTONS(DNS_RR_TYPE_A);
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f042 0201 	orr.w	r2, r2, #1
 800ba92:	705a      	strb	r2, [r3, #1]
         record->rclass = HTONS(DNS_RR_CLASS_IN);
 800ba94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba96:	2200      	movs	r2, #0
 800ba98:	709a      	strb	r2, [r3, #2]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f042 0201 	orr.w	r2, r2, #1
 800baa0:	70da      	strb	r2, [r3, #3]
         record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	2200      	movs	r2, #0
 800baa6:	711a      	strb	r2, [r3, #4]
 800baa8:	2200      	movs	r2, #0
 800baaa:	715a      	strb	r2, [r3, #5]
 800baac:	2200      	movs	r2, #0
 800baae:	719a      	strb	r2, [r3, #6]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f042 021e 	orr.w	r2, r2, #30
 800bab6:	71da      	strb	r2, [r3, #7]
         record->rdlength = HTONS(sizeof(Ipv4Addr));
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2200      	movs	r2, #0
 800babc:	721a      	strb	r2, [r3, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	f042 0204 	orr.w	r2, r2, #4
 800bac4:	725a      	strb	r2, [r3, #9]

         //Copy IPv4 address
         ipv4CopyAddr(record->rdata, &interface->ipv4Context.addrList[0].addr);
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	330a      	adds	r3, #10
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	f502 72ee 	add.w	r2, r2, #476	; 0x1dc
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	601a      	str	r2, [r3, #0]

         //Number of resource records in the answer section
         message->ancount++;
 800bad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad6:	88db      	ldrh	r3, [r3, #6]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	3301      	adds	r3, #1
 800badc:	b29a      	uxth	r2, r3
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	80da      	strh	r2, [r3, #6]

         //Update the length of the response message
         length += sizeof(DnsResourceRecord) + sizeof(Ipv4Addr);
 800bae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bae4:	330e      	adds	r3, #14
 800bae6:	643b      	str	r3, [r7, #64]	; 0x40
      }
   }
#endif

   //Valid LLMNR response?
   if(message->ancount > 0)
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	88db      	ldrh	r3, [r3, #6]
 800baec:	b29b      	uxth	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d031      	beq.n	800bb56 <llmnrSendResponse+0x216>
   {
      //The ANCOUNT field specifies the number of resource records in the
      //answer section
      message->ancount = htons(message->ancount);
 800baf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf4:	88db      	ldrh	r3, [r3, #6]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7f5 f9b0 	bl	8000e5e <swapInt16>
 800bafe:	4603      	mov	r3, r0
 800bb00:	461a      	mov	r2, r3
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	80da      	strh	r2, [r3, #6]

      //Adjust the length of the multi-part buffer
      netBufferSetLength(buffer, offset + length);
 800bb06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb10:	f7f6 fcef 	bl	80024f2 <netBufferSetLength>
      TRACE_INFO("Sending LLMNR message (%" PRIuSIZE " bytes)...\r\n", length);
      //Dump message
      dnsDumpMessage((DnsHeader *) message, length);

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800bb14:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <llmnrSendResponse+0x228>)
 800bb16:	f107 0414 	add.w	r4, r7, #20
 800bb1a:	461d      	mov	r5, r3
 800bb1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bb24:	e884 0003 	stmia.w	r4, {r0, r1}

      //For UDP responses, the Hop Limit field in the IPv6 header and the TTL
      //field in the IPV4 header MAY be set to any value. However, it is
      //recommended that the value 255 be used for compatibility with early
      //implementations (refer to RFC 4795, section 2.5)
      ancillary.ttl = LLMNR_DEFAULT_IP_TTL;
 800bb28:	23ff      	movs	r3, #255	; 0xff
 800bb2a:	753b      	strb	r3, [r7, #20]

      //This flag tells the stack that the destination is on a locally attached
      //network and not to perform a lookup of the routing table
      ancillary.dontRoute = TRUE;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	61bb      	str	r3, [r7, #24]

      //Send LLMNR response
      error = udpSendBuffer(interface, NULL, LLMNR_PORT, destIpAddr, destPort,
 800bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb32:	f107 0214 	add.w	r2, r7, #20
 800bb36:	9203      	str	r2, [sp, #12]
 800bb38:	9302      	str	r3, [sp, #8]
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	88fb      	ldrh	r3, [r7, #6]
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f241 42eb 	movw	r2, #5355	; 0x14eb
 800bb48:	2100      	movs	r1, #0
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	f7fa fd28 	bl	80065a0 <udpSendBuffer>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
         buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 800bb56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bb58:	f7f6 fc9a 	bl	8002490 <netBufferFree>

   //Return status code
   return error;
 800bb5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3748      	adds	r7, #72	; 0x48
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bdb0      	pop	{r4, r5, r7, pc}
 800bb68:	080117a0 	.word	0x080117a0

0800bb6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800bb70:	4b0e      	ldr	r3, [pc, #56]	; (800bbac <HAL_Init+0x40>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a0d      	ldr	r2, [pc, #52]	; (800bbac <HAL_Init+0x40>)
 800bb76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800bb7c:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <HAL_Init+0x40>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <HAL_Init+0x40>)
 800bb82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bb86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <HAL_Init+0x40>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a07      	ldr	r2, [pc, #28]	; (800bbac <HAL_Init+0x40>)
 800bb8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bb94:	2003      	movs	r0, #3
 800bb96:	f000 f8fc 	bl	800bd92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800bb9a:	200f      	movs	r0, #15
 800bb9c:	f7f4 fffe 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800bba0:	f7f4 ffd0 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	40023c00 	.word	0x40023c00

0800bbb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bbb4:	4b06      	ldr	r3, [pc, #24]	; (800bbd0 <HAL_IncTick+0x20>)
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <HAL_IncTick+0x24>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	4a04      	ldr	r2, [pc, #16]	; (800bbd4 <HAL_IncTick+0x24>)
 800bbc2:	6013      	str	r3, [r2, #0]
}
 800bbc4:	bf00      	nop
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	2000002c 	.word	0x2000002c
 800bbd4:	2000b64c 	.word	0x2000b64c

0800bbd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
  return uwTick;
 800bbdc:	4b03      	ldr	r3, [pc, #12]	; (800bbec <HAL_GetTick+0x14>)
 800bbde:	681b      	ldr	r3, [r3, #0]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop
 800bbec:	2000b64c 	.word	0x2000b64c

0800bbf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bbf8:	f7ff ffee 	bl	800bbd8 <HAL_GetTick>
 800bbfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc08:	d005      	beq.n	800bc16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <HAL_Delay+0x44>)
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4413      	add	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bc16:	bf00      	nop
 800bc18:	f7ff ffde 	bl	800bbd8 <HAL_GetTick>
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d8f7      	bhi.n	800bc18 <HAL_Delay+0x28>
  {
  }
}
 800bc28:	bf00      	nop
 800bc2a:	bf00      	nop
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	2000002c 	.word	0x2000002c

0800bc38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f003 0307 	and.w	r3, r3, #7
 800bc46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bc48:	4b0c      	ldr	r3, [pc, #48]	; (800bc7c <__NVIC_SetPriorityGrouping+0x44>)
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bc54:	4013      	ands	r3, r2
 800bc56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bc60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bc64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bc6a:	4a04      	ldr	r2, [pc, #16]	; (800bc7c <__NVIC_SetPriorityGrouping+0x44>)
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	60d3      	str	r3, [r2, #12]
}
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	e000ed00 	.word	0xe000ed00

0800bc80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bc80:	b480      	push	{r7}
 800bc82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bc84:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <__NVIC_GetPriorityGrouping+0x18>)
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	0a1b      	lsrs	r3, r3, #8
 800bc8a:	f003 0307 	and.w	r3, r3, #7
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	e000ed00 	.word	0xe000ed00

0800bc9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	db0b      	blt.n	800bcc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	f003 021f 	and.w	r2, r3, #31
 800bcb4:	4907      	ldr	r1, [pc, #28]	; (800bcd4 <__NVIC_EnableIRQ+0x38>)
 800bcb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcba:	095b      	lsrs	r3, r3, #5
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	fa00 f202 	lsl.w	r2, r0, r2
 800bcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bcc6:	bf00      	nop
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	e000e100 	.word	0xe000e100

0800bcd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	6039      	str	r1, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	db0a      	blt.n	800bd02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	490c      	ldr	r1, [pc, #48]	; (800bd24 <__NVIC_SetPriority+0x4c>)
 800bcf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcf6:	0112      	lsls	r2, r2, #4
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bd00:	e00a      	b.n	800bd18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	4908      	ldr	r1, [pc, #32]	; (800bd28 <__NVIC_SetPriority+0x50>)
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	f003 030f 	and.w	r3, r3, #15
 800bd0e:	3b04      	subs	r3, #4
 800bd10:	0112      	lsls	r2, r2, #4
 800bd12:	b2d2      	uxtb	r2, r2
 800bd14:	440b      	add	r3, r1
 800bd16:	761a      	strb	r2, [r3, #24]
}
 800bd18:	bf00      	nop
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	e000e100 	.word	0xe000e100
 800bd28:	e000ed00 	.word	0xe000ed00

0800bd2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b089      	sub	sp, #36	; 0x24
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f003 0307 	and.w	r3, r3, #7
 800bd3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	f1c3 0307 	rsb	r3, r3, #7
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	bf28      	it	cs
 800bd4a:	2304      	movcs	r3, #4
 800bd4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3304      	adds	r3, #4
 800bd52:	2b06      	cmp	r3, #6
 800bd54:	d902      	bls.n	800bd5c <NVIC_EncodePriority+0x30>
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	3b03      	subs	r3, #3
 800bd5a:	e000      	b.n	800bd5e <NVIC_EncodePriority+0x32>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6a:	43da      	mvns	r2, r3
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	401a      	ands	r2, r3
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bd74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd7e:	43d9      	mvns	r1, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bd84:	4313      	orrs	r3, r2
         );
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3724      	adds	r7, #36	; 0x24
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b082      	sub	sp, #8
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7ff ff4c 	bl	800bc38 <__NVIC_SetPriorityGrouping>
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800bdba:	f7ff ff61 	bl	800bc80 <__NVIC_GetPriorityGrouping>
 800bdbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	6978      	ldr	r0, [r7, #20]
 800bdc6:	f7ff ffb1 	bl	800bd2c <NVIC_EncodePriority>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff ff80 	bl	800bcd8 <__NVIC_SetPriority>
}
 800bdd8:	bf00      	nop
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bdea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff ff54 	bl	800bc9c <__NVIC_EnableIRQ>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b089      	sub	sp, #36	; 0x24
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800be0e:	2300      	movs	r3, #0
 800be10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	e16b      	b.n	800c0f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800be18:	2201      	movs	r2, #1
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	fa02 f303 	lsl.w	r3, r2, r3
 800be20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	4013      	ands	r3, r2
 800be2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	429a      	cmp	r2, r3
 800be32:	f040 815a 	bne.w	800c0ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	f003 0303 	and.w	r3, r3, #3
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d005      	beq.n	800be4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d130      	bne.n	800beb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	2203      	movs	r2, #3
 800be5a:	fa02 f303 	lsl.w	r3, r2, r3
 800be5e:	43db      	mvns	r3, r3
 800be60:	69ba      	ldr	r2, [r7, #24]
 800be62:	4013      	ands	r3, r2
 800be64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	68da      	ldr	r2, [r3, #12]
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	fa02 f303 	lsl.w	r3, r2, r3
 800be72:	69ba      	ldr	r2, [r7, #24]
 800be74:	4313      	orrs	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69ba      	ldr	r2, [r7, #24]
 800be7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800be84:	2201      	movs	r2, #1
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	fa02 f303 	lsl.w	r3, r2, r3
 800be8c:	43db      	mvns	r3, r3
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	4013      	ands	r3, r2
 800be92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	091b      	lsrs	r3, r3, #4
 800be9a:	f003 0201 	and.w	r2, r3, #1
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	fa02 f303 	lsl.w	r3, r2, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f003 0303 	and.w	r3, r3, #3
 800beb8:	2b03      	cmp	r3, #3
 800beba:	d017      	beq.n	800beec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	005b      	lsls	r3, r3, #1
 800bec6:	2203      	movs	r2, #3
 800bec8:	fa02 f303 	lsl.w	r3, r2, r3
 800becc:	43db      	mvns	r3, r3
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	4013      	ands	r3, r2
 800bed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	fa02 f303 	lsl.w	r3, r2, r3
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d123      	bne.n	800bf40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	08da      	lsrs	r2, r3, #3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3208      	adds	r2, #8
 800bf00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f003 0307 	and.w	r3, r3, #7
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	220f      	movs	r2, #15
 800bf10:	fa02 f303 	lsl.w	r3, r2, r3
 800bf14:	43db      	mvns	r3, r3
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	4013      	ands	r3, r2
 800bf1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	f003 0307 	and.w	r3, r3, #7
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	08da      	lsrs	r2, r3, #3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3208      	adds	r2, #8
 800bf3a:	69b9      	ldr	r1, [r7, #24]
 800bf3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf50:	43db      	mvns	r3, r3
 800bf52:	69ba      	ldr	r2, [r7, #24]
 800bf54:	4013      	ands	r3, r2
 800bf56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	f003 0203 	and.w	r2, r3, #3
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	fa02 f303 	lsl.w	r3, r2, r3
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f000 80b4 	beq.w	800c0ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf82:	2300      	movs	r3, #0
 800bf84:	60fb      	str	r3, [r7, #12]
 800bf86:	4b60      	ldr	r3, [pc, #384]	; (800c108 <HAL_GPIO_Init+0x30c>)
 800bf88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8a:	4a5f      	ldr	r2, [pc, #380]	; (800c108 <HAL_GPIO_Init+0x30c>)
 800bf8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bf90:	6453      	str	r3, [r2, #68]	; 0x44
 800bf92:	4b5d      	ldr	r3, [pc, #372]	; (800c108 <HAL_GPIO_Init+0x30c>)
 800bf94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf9a:	60fb      	str	r3, [r7, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bf9e:	4a5b      	ldr	r2, [pc, #364]	; (800c10c <HAL_GPIO_Init+0x310>)
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	089b      	lsrs	r3, r3, #2
 800bfa4:	3302      	adds	r3, #2
 800bfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	220f      	movs	r2, #15
 800bfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfba:	43db      	mvns	r3, r3
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a52      	ldr	r2, [pc, #328]	; (800c110 <HAL_GPIO_Init+0x314>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d02b      	beq.n	800c022 <HAL_GPIO_Init+0x226>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a51      	ldr	r2, [pc, #324]	; (800c114 <HAL_GPIO_Init+0x318>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d025      	beq.n	800c01e <HAL_GPIO_Init+0x222>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a50      	ldr	r2, [pc, #320]	; (800c118 <HAL_GPIO_Init+0x31c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d01f      	beq.n	800c01a <HAL_GPIO_Init+0x21e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a4f      	ldr	r2, [pc, #316]	; (800c11c <HAL_GPIO_Init+0x320>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d019      	beq.n	800c016 <HAL_GPIO_Init+0x21a>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a4e      	ldr	r2, [pc, #312]	; (800c120 <HAL_GPIO_Init+0x324>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d013      	beq.n	800c012 <HAL_GPIO_Init+0x216>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a4d      	ldr	r2, [pc, #308]	; (800c124 <HAL_GPIO_Init+0x328>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00d      	beq.n	800c00e <HAL_GPIO_Init+0x212>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a4c      	ldr	r2, [pc, #304]	; (800c128 <HAL_GPIO_Init+0x32c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <HAL_GPIO_Init+0x20e>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a4b      	ldr	r2, [pc, #300]	; (800c12c <HAL_GPIO_Init+0x330>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d101      	bne.n	800c006 <HAL_GPIO_Init+0x20a>
 800c002:	2307      	movs	r3, #7
 800c004:	e00e      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c006:	2308      	movs	r3, #8
 800c008:	e00c      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c00a:	2306      	movs	r3, #6
 800c00c:	e00a      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c00e:	2305      	movs	r3, #5
 800c010:	e008      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c012:	2304      	movs	r3, #4
 800c014:	e006      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c016:	2303      	movs	r3, #3
 800c018:	e004      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c01a:	2302      	movs	r3, #2
 800c01c:	e002      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c01e:	2301      	movs	r3, #1
 800c020:	e000      	b.n	800c024 <HAL_GPIO_Init+0x228>
 800c022:	2300      	movs	r3, #0
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	f002 0203 	and.w	r2, r2, #3
 800c02a:	0092      	lsls	r2, r2, #2
 800c02c:	4093      	lsls	r3, r2
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	4313      	orrs	r3, r2
 800c032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c034:	4935      	ldr	r1, [pc, #212]	; (800c10c <HAL_GPIO_Init+0x310>)
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	089b      	lsrs	r3, r3, #2
 800c03a:	3302      	adds	r3, #2
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c042:	4b3b      	ldr	r3, [pc, #236]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	43db      	mvns	r3, r3
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	4013      	ands	r3, r2
 800c050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4313      	orrs	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c066:	4a32      	ldr	r2, [pc, #200]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c06c:	4b30      	ldr	r3, [pc, #192]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	43db      	mvns	r3, r3
 800c076:	69ba      	ldr	r2, [r7, #24]
 800c078:	4013      	ands	r3, r2
 800c07a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d003      	beq.n	800c090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c088:	69ba      	ldr	r2, [r7, #24]
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c090:	4a27      	ldr	r2, [pc, #156]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c096:	4b26      	ldr	r3, [pc, #152]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	43db      	mvns	r3, r3
 800c0a0:	69ba      	ldr	r2, [r7, #24]
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d003      	beq.n	800c0ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c0ba:	4a1d      	ldr	r2, [pc, #116]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c0c0:	4b1b      	ldr	r3, [pc, #108]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	43db      	mvns	r3, r3
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d003      	beq.n	800c0e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c0dc:	69ba      	ldr	r2, [r7, #24]
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c0e4:	4a12      	ldr	r2, [pc, #72]	; (800c130 <HAL_GPIO_Init+0x334>)
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b0f      	cmp	r3, #15
 800c0f4:	f67f ae90 	bls.w	800be18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	3724      	adds	r7, #36	; 0x24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
 800c106:	bf00      	nop
 800c108:	40023800 	.word	0x40023800
 800c10c:	40013800 	.word	0x40013800
 800c110:	40020000 	.word	0x40020000
 800c114:	40020400 	.word	0x40020400
 800c118:	40020800 	.word	0x40020800
 800c11c:	40020c00 	.word	0x40020c00
 800c120:	40021000 	.word	0x40021000
 800c124:	40021400 	.word	0x40021400
 800c128:	40021800 	.word	0x40021800
 800c12c:	40021c00 	.word	0x40021c00
 800c130:	40013c00 	.word	0x40013c00

0800c134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	807b      	strh	r3, [r7, #2]
 800c140:	4613      	mov	r3, r2
 800c142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c144:	787b      	ldrb	r3, [r7, #1]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c14a:	887a      	ldrh	r2, [r7, #2]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c150:	e003      	b.n	800c15a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c152:	887b      	ldrh	r3, [r7, #2]
 800c154:	041a      	lsls	r2, r3, #16
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	619a      	str	r2, [r3, #24]
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c166:	b480      	push	{r7}
 800c168:	b085      	sub	sp, #20
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c178:	887a      	ldrh	r2, [r7, #2]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	4013      	ands	r3, r2
 800c17e:	041a      	lsls	r2, r3, #16
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	43d9      	mvns	r1, r3
 800c184:	887b      	ldrh	r3, [r7, #2]
 800c186:	400b      	ands	r3, r1
 800c188:	431a      	orrs	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	619a      	str	r2, [r3, #24]
}
 800c18e:	bf00      	nop
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
	...

0800c19c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c1a6:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c1a8:	695a      	ldr	r2, [r3, #20]
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d006      	beq.n	800c1c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c1b2:	4a05      	ldr	r2, [pc, #20]	; (800c1c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c1b4:	88fb      	ldrh	r3, [r7, #6]
 800c1b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c1b8:	88fb      	ldrh	r3, [r7, #6]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f003 fd66 	bl	800fc8c <HAL_GPIO_EXTI_Callback>
  }
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	40013c00 	.word	0x40013c00

0800c1cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e264      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d075      	beq.n	800c2d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1ea:	4ba3      	ldr	r3, [pc, #652]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	f003 030c 	and.w	r3, r3, #12
 800c1f2:	2b04      	cmp	r3, #4
 800c1f4:	d00c      	beq.n	800c210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1f6:	4ba0      	ldr	r3, [pc, #640]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d112      	bne.n	800c228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c202:	4b9d      	ldr	r3, [pc, #628]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c20a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c20e:	d10b      	bne.n	800c228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c210:	4b99      	ldr	r3, [pc, #612]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d05b      	beq.n	800c2d4 <HAL_RCC_OscConfig+0x108>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d157      	bne.n	800c2d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e23f      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c230:	d106      	bne.n	800c240 <HAL_RCC_OscConfig+0x74>
 800c232:	4b91      	ldr	r3, [pc, #580]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a90      	ldr	r2, [pc, #576]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	e01d      	b.n	800c27c <HAL_RCC_OscConfig+0xb0>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c248:	d10c      	bne.n	800c264 <HAL_RCC_OscConfig+0x98>
 800c24a:	4b8b      	ldr	r3, [pc, #556]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a8a      	ldr	r2, [pc, #552]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	4b88      	ldr	r3, [pc, #544]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a87      	ldr	r2, [pc, #540]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c25c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c260:	6013      	str	r3, [r2, #0]
 800c262:	e00b      	b.n	800c27c <HAL_RCC_OscConfig+0xb0>
 800c264:	4b84      	ldr	r3, [pc, #528]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a83      	ldr	r2, [pc, #524]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c26a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	4b81      	ldr	r3, [pc, #516]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a80      	ldr	r2, [pc, #512]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c27a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d013      	beq.n	800c2ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c284:	f7ff fca8 	bl	800bbd8 <HAL_GetTick>
 800c288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c28a:	e008      	b.n	800c29e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c28c:	f7ff fca4 	bl	800bbd8 <HAL_GetTick>
 800c290:	4602      	mov	r2, r0
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	2b64      	cmp	r3, #100	; 0x64
 800c298:	d901      	bls.n	800c29e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e204      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c29e:	4b76      	ldr	r3, [pc, #472]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0f0      	beq.n	800c28c <HAL_RCC_OscConfig+0xc0>
 800c2aa:	e014      	b.n	800c2d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2ac:	f7ff fc94 	bl	800bbd8 <HAL_GetTick>
 800c2b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2b4:	f7ff fc90 	bl	800bbd8 <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b64      	cmp	r3, #100	; 0x64
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e1f0      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2c6:	4b6c      	ldr	r3, [pc, #432]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f0      	bne.n	800c2b4 <HAL_RCC_OscConfig+0xe8>
 800c2d2:	e000      	b.n	800c2d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 0302 	and.w	r3, r3, #2
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d063      	beq.n	800c3aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2e2:	4b65      	ldr	r3, [pc, #404]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f003 030c 	and.w	r3, r3, #12
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d00b      	beq.n	800c306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2ee:	4b62      	ldr	r3, [pc, #392]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2f6:	2b08      	cmp	r3, #8
 800c2f8:	d11c      	bne.n	800c334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2fa:	4b5f      	ldr	r3, [pc, #380]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d116      	bne.n	800c334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c306:	4b5c      	ldr	r3, [pc, #368]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <HAL_RCC_OscConfig+0x152>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d001      	beq.n	800c31e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e1c4      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c31e:	4b56      	ldr	r3, [pc, #344]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	00db      	lsls	r3, r3, #3
 800c32c:	4952      	ldr	r1, [pc, #328]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c332:	e03a      	b.n	800c3aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d020      	beq.n	800c37e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c33c:	4b4f      	ldr	r3, [pc, #316]	; (800c47c <HAL_RCC_OscConfig+0x2b0>)
 800c33e:	2201      	movs	r2, #1
 800c340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c342:	f7ff fc49 	bl	800bbd8 <HAL_GetTick>
 800c346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c348:	e008      	b.n	800c35c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c34a:	f7ff fc45 	bl	800bbd8 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e1a5      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c35c:	4b46      	ldr	r3, [pc, #280]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b00      	cmp	r3, #0
 800c366:	d0f0      	beq.n	800c34a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c368:	4b43      	ldr	r3, [pc, #268]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	00db      	lsls	r3, r3, #3
 800c376:	4940      	ldr	r1, [pc, #256]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	600b      	str	r3, [r1, #0]
 800c37c:	e015      	b.n	800c3aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c37e:	4b3f      	ldr	r3, [pc, #252]	; (800c47c <HAL_RCC_OscConfig+0x2b0>)
 800c380:	2200      	movs	r2, #0
 800c382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c384:	f7ff fc28 	bl	800bbd8 <HAL_GetTick>
 800c388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c38a:	e008      	b.n	800c39e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c38c:	f7ff fc24 	bl	800bbd8 <HAL_GetTick>
 800c390:	4602      	mov	r2, r0
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	2b02      	cmp	r3, #2
 800c398:	d901      	bls.n	800c39e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c39a:	2303      	movs	r3, #3
 800c39c:	e184      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c39e:	4b36      	ldr	r3, [pc, #216]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0302 	and.w	r3, r3, #2
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1f0      	bne.n	800c38c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f003 0308 	and.w	r3, r3, #8
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d030      	beq.n	800c418 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d016      	beq.n	800c3ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3be:	4b30      	ldr	r3, [pc, #192]	; (800c480 <HAL_RCC_OscConfig+0x2b4>)
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3c4:	f7ff fc08 	bl	800bbd8 <HAL_GetTick>
 800c3c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3ca:	e008      	b.n	800c3de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3cc:	f7ff fc04 	bl	800bbd8 <HAL_GetTick>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d901      	bls.n	800c3de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e164      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3de:	4b26      	ldr	r3, [pc, #152]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3e2:	f003 0302 	and.w	r3, r3, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0f0      	beq.n	800c3cc <HAL_RCC_OscConfig+0x200>
 800c3ea:	e015      	b.n	800c418 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3ec:	4b24      	ldr	r3, [pc, #144]	; (800c480 <HAL_RCC_OscConfig+0x2b4>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3f2:	f7ff fbf1 	bl	800bbd8 <HAL_GetTick>
 800c3f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3f8:	e008      	b.n	800c40c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3fa:	f7ff fbed 	bl	800bbd8 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	2b02      	cmp	r3, #2
 800c406:	d901      	bls.n	800c40c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e14d      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c40c:	4b1a      	ldr	r3, [pc, #104]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1f0      	bne.n	800c3fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b00      	cmp	r3, #0
 800c422:	f000 80a0 	beq.w	800c566 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c426:	2300      	movs	r3, #0
 800c428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10f      	bne.n	800c456 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c436:	2300      	movs	r3, #0
 800c438:	60bb      	str	r3, [r7, #8]
 800c43a:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43e:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c444:	6413      	str	r3, [r2, #64]	; 0x40
 800c446:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <HAL_RCC_OscConfig+0x2ac>)
 800c448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c44e:	60bb      	str	r3, [r7, #8]
 800c450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c452:	2301      	movs	r3, #1
 800c454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c456:	4b0b      	ldr	r3, [pc, #44]	; (800c484 <HAL_RCC_OscConfig+0x2b8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d121      	bne.n	800c4a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <HAL_RCC_OscConfig+0x2b8>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a07      	ldr	r2, [pc, #28]	; (800c484 <HAL_RCC_OscConfig+0x2b8>)
 800c468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c46c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c46e:	f7ff fbb3 	bl	800bbd8 <HAL_GetTick>
 800c472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c474:	e011      	b.n	800c49a <HAL_RCC_OscConfig+0x2ce>
 800c476:	bf00      	nop
 800c478:	40023800 	.word	0x40023800
 800c47c:	42470000 	.word	0x42470000
 800c480:	42470e80 	.word	0x42470e80
 800c484:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c488:	f7ff fba6 	bl	800bbd8 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	2b02      	cmp	r3, #2
 800c494:	d901      	bls.n	800c49a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c496:	2303      	movs	r3, #3
 800c498:	e106      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c49a:	4b85      	ldr	r3, [pc, #532]	; (800c6b0 <HAL_RCC_OscConfig+0x4e4>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d0f0      	beq.n	800c488 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	2b01      	cmp	r3, #1
 800c4ac:	d106      	bne.n	800c4bc <HAL_RCC_OscConfig+0x2f0>
 800c4ae:	4b81      	ldr	r3, [pc, #516]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b2:	4a80      	ldr	r2, [pc, #512]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4b4:	f043 0301 	orr.w	r3, r3, #1
 800c4b8:	6713      	str	r3, [r2, #112]	; 0x70
 800c4ba:	e01c      	b.n	800c4f6 <HAL_RCC_OscConfig+0x32a>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	2b05      	cmp	r3, #5
 800c4c2:	d10c      	bne.n	800c4de <HAL_RCC_OscConfig+0x312>
 800c4c4:	4b7b      	ldr	r3, [pc, #492]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c8:	4a7a      	ldr	r2, [pc, #488]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4ca:	f043 0304 	orr.w	r3, r3, #4
 800c4ce:	6713      	str	r3, [r2, #112]	; 0x70
 800c4d0:	4b78      	ldr	r3, [pc, #480]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d4:	4a77      	ldr	r2, [pc, #476]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	6713      	str	r3, [r2, #112]	; 0x70
 800c4dc:	e00b      	b.n	800c4f6 <HAL_RCC_OscConfig+0x32a>
 800c4de:	4b75      	ldr	r3, [pc, #468]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e2:	4a74      	ldr	r2, [pc, #464]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4e4:	f023 0301 	bic.w	r3, r3, #1
 800c4e8:	6713      	str	r3, [r2, #112]	; 0x70
 800c4ea:	4b72      	ldr	r3, [pc, #456]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ee:	4a71      	ldr	r2, [pc, #452]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c4f0:	f023 0304 	bic.w	r3, r3, #4
 800c4f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d015      	beq.n	800c52a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4fe:	f7ff fb6b 	bl	800bbd8 <HAL_GetTick>
 800c502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c504:	e00a      	b.n	800c51c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c506:	f7ff fb67 	bl	800bbd8 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	f241 3288 	movw	r2, #5000	; 0x1388
 800c514:	4293      	cmp	r3, r2
 800c516:	d901      	bls.n	800c51c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c518:	2303      	movs	r3, #3
 800c51a:	e0c5      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c51c:	4b65      	ldr	r3, [pc, #404]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c51e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0ee      	beq.n	800c506 <HAL_RCC_OscConfig+0x33a>
 800c528:	e014      	b.n	800c554 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c52a:	f7ff fb55 	bl	800bbd8 <HAL_GetTick>
 800c52e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c530:	e00a      	b.n	800c548 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c532:	f7ff fb51 	bl	800bbd8 <HAL_GetTick>
 800c536:	4602      	mov	r2, r0
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c540:	4293      	cmp	r3, r2
 800c542:	d901      	bls.n	800c548 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c544:	2303      	movs	r3, #3
 800c546:	e0af      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c548:	4b5a      	ldr	r3, [pc, #360]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c54a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1ee      	bne.n	800c532 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d105      	bne.n	800c566 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c55a:	4b56      	ldr	r3, [pc, #344]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	4a55      	ldr	r2, [pc, #340]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	699b      	ldr	r3, [r3, #24]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f000 809b 	beq.w	800c6a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c570:	4b50      	ldr	r3, [pc, #320]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	f003 030c 	and.w	r3, r3, #12
 800c578:	2b08      	cmp	r3, #8
 800c57a:	d05c      	beq.n	800c636 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d141      	bne.n	800c608 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c584:	4b4c      	ldr	r3, [pc, #304]	; (800c6b8 <HAL_RCC_OscConfig+0x4ec>)
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c58a:	f7ff fb25 	bl	800bbd8 <HAL_GetTick>
 800c58e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c590:	e008      	b.n	800c5a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c592:	f7ff fb21 	bl	800bbd8 <HAL_GetTick>
 800c596:	4602      	mov	r2, r0
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	1ad3      	subs	r3, r2, r3
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d901      	bls.n	800c5a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c5a0:	2303      	movs	r3, #3
 800c5a2:	e081      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5a4:	4b43      	ldr	r3, [pc, #268]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1f0      	bne.n	800c592 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	69da      	ldr	r2, [r3, #28]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	431a      	orrs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5be:	019b      	lsls	r3, r3, #6
 800c5c0:	431a      	orrs	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5c6:	085b      	lsrs	r3, r3, #1
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	041b      	lsls	r3, r3, #16
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d2:	061b      	lsls	r3, r3, #24
 800c5d4:	4937      	ldr	r1, [pc, #220]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5da:	4b37      	ldr	r3, [pc, #220]	; (800c6b8 <HAL_RCC_OscConfig+0x4ec>)
 800c5dc:	2201      	movs	r2, #1
 800c5de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5e0:	f7ff fafa 	bl	800bbd8 <HAL_GetTick>
 800c5e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5e6:	e008      	b.n	800c5fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5e8:	f7ff faf6 	bl	800bbd8 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e056      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5fa:	4b2e      	ldr	r3, [pc, #184]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c602:	2b00      	cmp	r3, #0
 800c604:	d0f0      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x41c>
 800c606:	e04e      	b.n	800c6a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c608:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <HAL_RCC_OscConfig+0x4ec>)
 800c60a:	2200      	movs	r2, #0
 800c60c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c60e:	f7ff fae3 	bl	800bbd8 <HAL_GetTick>
 800c612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c614:	e008      	b.n	800c628 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c616:	f7ff fadf 	bl	800bbd8 <HAL_GetTick>
 800c61a:	4602      	mov	r2, r0
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	2b02      	cmp	r3, #2
 800c622:	d901      	bls.n	800c628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c624:	2303      	movs	r3, #3
 800c626:	e03f      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c628:	4b22      	ldr	r3, [pc, #136]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f0      	bne.n	800c616 <HAL_RCC_OscConfig+0x44a>
 800c634:	e037      	b.n	800c6a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d101      	bne.n	800c642 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e032      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <HAL_RCC_OscConfig+0x4e8>)
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	699b      	ldr	r3, [r3, #24]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d028      	beq.n	800c6a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d121      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c668:	429a      	cmp	r2, r3
 800c66a:	d11a      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c672:	4013      	ands	r3, r2
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c678:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d111      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c688:	085b      	lsrs	r3, r3, #1
 800c68a:	3b01      	subs	r3, #1
 800c68c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c68e:	429a      	cmp	r2, r3
 800c690:	d107      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d001      	beq.n	800c6a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e000      	b.n	800c6a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	40007000 	.word	0x40007000
 800c6b4:	40023800 	.word	0x40023800
 800c6b8:	42470060 	.word	0x42470060

0800c6bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d101      	bne.n	800c6d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e0cc      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6d0:	4b68      	ldr	r3, [pc, #416]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0307 	and.w	r3, r3, #7
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d90c      	bls.n	800c6f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6de:	4b65      	ldr	r3, [pc, #404]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c6e0:	683a      	ldr	r2, [r7, #0]
 800c6e2:	b2d2      	uxtb	r2, r2
 800c6e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6e6:	4b63      	ldr	r3, [pc, #396]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 0307 	and.w	r3, r3, #7
 800c6ee:	683a      	ldr	r2, [r7, #0]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d001      	beq.n	800c6f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e0b8      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0302 	and.w	r3, r3, #2
 800c700:	2b00      	cmp	r3, #0
 800c702:	d020      	beq.n	800c746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0304 	and.w	r3, r3, #4
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d005      	beq.n	800c71c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c710:	4b59      	ldr	r3, [pc, #356]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	4a58      	ldr	r2, [pc, #352]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c71a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0308 	and.w	r3, r3, #8
 800c724:	2b00      	cmp	r3, #0
 800c726:	d005      	beq.n	800c734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c728:	4b53      	ldr	r3, [pc, #332]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	4a52      	ldr	r2, [pc, #328]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c72e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c734:	4b50      	ldr	r3, [pc, #320]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	494d      	ldr	r1, [pc, #308]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c742:	4313      	orrs	r3, r2
 800c744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d044      	beq.n	800c7dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	2b01      	cmp	r3, #1
 800c758:	d107      	bne.n	800c76a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c75a:	4b47      	ldr	r3, [pc, #284]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d119      	bne.n	800c79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e07f      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d003      	beq.n	800c77a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c776:	2b03      	cmp	r3, #3
 800c778:	d107      	bne.n	800c78a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c77a:	4b3f      	ldr	r3, [pc, #252]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d109      	bne.n	800c79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e06f      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c78a:	4b3b      	ldr	r3, [pc, #236]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e067      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c79a:	4b37      	ldr	r3, [pc, #220]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	f023 0203 	bic.w	r2, r3, #3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	4934      	ldr	r1, [pc, #208]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c7ac:	f7ff fa14 	bl	800bbd8 <HAL_GetTick>
 800c7b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7b2:	e00a      	b.n	800c7ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7b4:	f7ff fa10 	bl	800bbd8 <HAL_GetTick>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d901      	bls.n	800c7ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e04f      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7ca:	4b2b      	ldr	r3, [pc, #172]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	f003 020c 	and.w	r2, r3, #12
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d1eb      	bne.n	800c7b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0307 	and.w	r3, r3, #7
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d20c      	bcs.n	800c804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7ea:	4b22      	ldr	r3, [pc, #136]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	b2d2      	uxtb	r2, r2
 800c7f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7f2:	4b20      	ldr	r3, [pc, #128]	; (800c874 <HAL_RCC_ClockConfig+0x1b8>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0307 	and.w	r3, r3, #7
 800c7fa:	683a      	ldr	r2, [r7, #0]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d001      	beq.n	800c804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c800:	2301      	movs	r3, #1
 800c802:	e032      	b.n	800c86a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0304 	and.w	r3, r3, #4
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d008      	beq.n	800c822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c810:	4b19      	ldr	r3, [pc, #100]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	4916      	ldr	r1, [pc, #88]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c81e:	4313      	orrs	r3, r2
 800c820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0308 	and.w	r3, r3, #8
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d009      	beq.n	800c842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c82e:	4b12      	ldr	r3, [pc, #72]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	490e      	ldr	r1, [pc, #56]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c83e:	4313      	orrs	r3, r2
 800c840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c842:	f000 f821 	bl	800c888 <HAL_RCC_GetSysClockFreq>
 800c846:	4602      	mov	r2, r0
 800c848:	4b0b      	ldr	r3, [pc, #44]	; (800c878 <HAL_RCC_ClockConfig+0x1bc>)
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	091b      	lsrs	r3, r3, #4
 800c84e:	f003 030f 	and.w	r3, r3, #15
 800c852:	490a      	ldr	r1, [pc, #40]	; (800c87c <HAL_RCC_ClockConfig+0x1c0>)
 800c854:	5ccb      	ldrb	r3, [r1, r3]
 800c856:	fa22 f303 	lsr.w	r3, r2, r3
 800c85a:	4a09      	ldr	r2, [pc, #36]	; (800c880 <HAL_RCC_ClockConfig+0x1c4>)
 800c85c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <HAL_RCC_ClockConfig+0x1c8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	f7f4 f99a 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	40023c00 	.word	0x40023c00
 800c878:	40023800 	.word	0x40023800
 800c87c:	08011738 	.word	0x08011738
 800c880:	20000000 	.word	0x20000000
 800c884:	20000028 	.word	0x20000028

0800c888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c88c:	b084      	sub	sp, #16
 800c88e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	2300      	movs	r3, #0
 800c89a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8a0:	4b67      	ldr	r3, [pc, #412]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f003 030c 	and.w	r3, r3, #12
 800c8a8:	2b08      	cmp	r3, #8
 800c8aa:	d00d      	beq.n	800c8c8 <HAL_RCC_GetSysClockFreq+0x40>
 800c8ac:	2b08      	cmp	r3, #8
 800c8ae:	f200 80bd 	bhi.w	800ca2c <HAL_RCC_GetSysClockFreq+0x1a4>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <HAL_RCC_GetSysClockFreq+0x34>
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d003      	beq.n	800c8c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800c8ba:	e0b7      	b.n	800ca2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c8bc:	4b61      	ldr	r3, [pc, #388]	; (800ca44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c8be:	60bb      	str	r3, [r7, #8]
       break;
 800c8c0:	e0b7      	b.n	800ca32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c8c2:	4b61      	ldr	r3, [pc, #388]	; (800ca48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800c8c4:	60bb      	str	r3, [r7, #8]
      break;
 800c8c6:	e0b4      	b.n	800ca32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c8c8:	4b5d      	ldr	r3, [pc, #372]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c8d2:	4b5b      	ldr	r3, [pc, #364]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d04d      	beq.n	800c97a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8de:	4b58      	ldr	r3, [pc, #352]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	099b      	lsrs	r3, r3, #6
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c8ee:	f04f 0100 	mov.w	r1, #0
 800c8f2:	ea02 0800 	and.w	r8, r2, r0
 800c8f6:	ea03 0901 	and.w	r9, r3, r1
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	f04f 0300 	mov.w	r3, #0
 800c906:	014b      	lsls	r3, r1, #5
 800c908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c90c:	0142      	lsls	r2, r0, #5
 800c90e:	4610      	mov	r0, r2
 800c910:	4619      	mov	r1, r3
 800c912:	ebb0 0008 	subs.w	r0, r0, r8
 800c916:	eb61 0109 	sbc.w	r1, r1, r9
 800c91a:	f04f 0200 	mov.w	r2, #0
 800c91e:	f04f 0300 	mov.w	r3, #0
 800c922:	018b      	lsls	r3, r1, #6
 800c924:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c928:	0182      	lsls	r2, r0, #6
 800c92a:	1a12      	subs	r2, r2, r0
 800c92c:	eb63 0301 	sbc.w	r3, r3, r1
 800c930:	f04f 0000 	mov.w	r0, #0
 800c934:	f04f 0100 	mov.w	r1, #0
 800c938:	00d9      	lsls	r1, r3, #3
 800c93a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c93e:	00d0      	lsls	r0, r2, #3
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	eb12 0208 	adds.w	r2, r2, r8
 800c948:	eb43 0309 	adc.w	r3, r3, r9
 800c94c:	f04f 0000 	mov.w	r0, #0
 800c950:	f04f 0100 	mov.w	r1, #0
 800c954:	0259      	lsls	r1, r3, #9
 800c956:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c95a:	0250      	lsls	r0, r2, #9
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4610      	mov	r0, r2
 800c962:	4619      	mov	r1, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	461a      	mov	r2, r3
 800c968:	f04f 0300 	mov.w	r3, #0
 800c96c:	f7f3 fc88 	bl	8000280 <__aeabi_uldivmod>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4613      	mov	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]
 800c978:	e04a      	b.n	800ca10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c97a:	4b31      	ldr	r3, [pc, #196]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	099b      	lsrs	r3, r3, #6
 800c980:	461a      	mov	r2, r3
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c98a:	f04f 0100 	mov.w	r1, #0
 800c98e:	ea02 0400 	and.w	r4, r2, r0
 800c992:	ea03 0501 	and.w	r5, r3, r1
 800c996:	4620      	mov	r0, r4
 800c998:	4629      	mov	r1, r5
 800c99a:	f04f 0200 	mov.w	r2, #0
 800c99e:	f04f 0300 	mov.w	r3, #0
 800c9a2:	014b      	lsls	r3, r1, #5
 800c9a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c9a8:	0142      	lsls	r2, r0, #5
 800c9aa:	4610      	mov	r0, r2
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	1b00      	subs	r0, r0, r4
 800c9b0:	eb61 0105 	sbc.w	r1, r1, r5
 800c9b4:	f04f 0200 	mov.w	r2, #0
 800c9b8:	f04f 0300 	mov.w	r3, #0
 800c9bc:	018b      	lsls	r3, r1, #6
 800c9be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c9c2:	0182      	lsls	r2, r0, #6
 800c9c4:	1a12      	subs	r2, r2, r0
 800c9c6:	eb63 0301 	sbc.w	r3, r3, r1
 800c9ca:	f04f 0000 	mov.w	r0, #0
 800c9ce:	f04f 0100 	mov.w	r1, #0
 800c9d2:	00d9      	lsls	r1, r3, #3
 800c9d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c9d8:	00d0      	lsls	r0, r2, #3
 800c9da:	4602      	mov	r2, r0
 800c9dc:	460b      	mov	r3, r1
 800c9de:	1912      	adds	r2, r2, r4
 800c9e0:	eb45 0303 	adc.w	r3, r5, r3
 800c9e4:	f04f 0000 	mov.w	r0, #0
 800c9e8:	f04f 0100 	mov.w	r1, #0
 800c9ec:	0299      	lsls	r1, r3, #10
 800c9ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c9f2:	0290      	lsls	r0, r2, #10
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	4610      	mov	r0, r2
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	461a      	mov	r2, r3
 800ca00:	f04f 0300 	mov.w	r3, #0
 800ca04:	f7f3 fc3c 	bl	8000280 <__aeabi_uldivmod>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ca10:	4b0b      	ldr	r3, [pc, #44]	; (800ca40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	0c1b      	lsrs	r3, r3, #16
 800ca16:	f003 0303 	and.w	r3, r3, #3
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	005b      	lsls	r3, r3, #1
 800ca1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca28:	60bb      	str	r3, [r7, #8]
      break;
 800ca2a:	e002      	b.n	800ca32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ca2c:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ca2e:	60bb      	str	r3, [r7, #8]
      break;
 800ca30:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ca32:	68bb      	ldr	r3, [r7, #8]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ca3e:	bf00      	nop
 800ca40:	40023800 	.word	0x40023800
 800ca44:	00f42400 	.word	0x00f42400
 800ca48:	007a1200 	.word	0x007a1200

0800ca4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ca50:	4b03      	ldr	r3, [pc, #12]	; (800ca60 <HAL_RCC_GetHCLKFreq+0x14>)
 800ca52:	681b      	ldr	r3, [r3, #0]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20000000 	.word	0x20000000

0800ca64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ca68:	f7ff fff0 	bl	800ca4c <HAL_RCC_GetHCLKFreq>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	4b05      	ldr	r3, [pc, #20]	; (800ca84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	0b5b      	lsrs	r3, r3, #13
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	4903      	ldr	r1, [pc, #12]	; (800ca88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca7a:	5ccb      	ldrb	r3, [r1, r3]
 800ca7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	40023800 	.word	0x40023800
 800ca88:	08011748 	.word	0x08011748

0800ca8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	220f      	movs	r2, #15
 800ca9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ca9c:	4b12      	ldr	r3, [pc, #72]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	f003 0203 	and.w	r2, r3, #3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800caa8:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cab4:	4b0c      	ldr	r3, [pc, #48]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <HAL_RCC_GetClockConfig+0x5c>)
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	08db      	lsrs	r3, r3, #3
 800cac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cace:	4b07      	ldr	r3, [pc, #28]	; (800caec <HAL_RCC_GetClockConfig+0x60>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0207 	and.w	r2, r3, #7
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	601a      	str	r2, [r3, #0]
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	40023800 	.word	0x40023800
 800caec:	40023c00 	.word	0x40023c00

0800caf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e07b      	b.n	800cbfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d108      	bne.n	800cb1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb12:	d009      	beq.n	800cb28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	61da      	str	r2, [r3, #28]
 800cb1a:	e005      	b.n	800cb28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7f3 ff82 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cb70:	431a      	orrs	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	691b      	ldr	r3, [r3, #16]
 800cb80:	f003 0302 	and.w	r3, r3, #2
 800cb84:	431a      	orrs	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	f003 0301 	and.w	r3, r3, #1
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	699b      	ldr	r3, [r3, #24]
 800cb94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cba2:	431a      	orrs	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a1b      	ldr	r3, [r3, #32]
 800cba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbac:	ea42 0103 	orr.w	r1, r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	f003 0104 	and.w	r1, r3, #4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbce:	f003 0210 	and.w	r2, r3, #16
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	69da      	ldr	r2, [r3, #28]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b08c      	sub	sp, #48	; 0x30
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	60b9      	str	r1, [r7, #8]
 800cc0c:	607a      	str	r2, [r7, #4]
 800cc0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cc10:	2301      	movs	r3, #1
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d101      	bne.n	800cc28 <HAL_SPI_TransmitReceive+0x26>
 800cc24:	2302      	movs	r3, #2
 800cc26:	e18a      	b.n	800cf3e <HAL_SPI_TransmitReceive+0x33c>
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc30:	f7fe ffd2 	bl	800bbd8 <HAL_GetTick>
 800cc34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cc46:	887b      	ldrh	r3, [r7, #2]
 800cc48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cc4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d00f      	beq.n	800cc72 <HAL_SPI_TransmitReceive+0x70>
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc58:	d107      	bne.n	800cc6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <HAL_SPI_TransmitReceive+0x68>
 800cc62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d003      	beq.n	800cc72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cc70:	e15b      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d005      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x82>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <HAL_SPI_TransmitReceive+0x82>
 800cc7e:	887b      	ldrh	r3, [r7, #2]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d103      	bne.n	800cc8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cc8a:	e14e      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	2b04      	cmp	r3, #4
 800cc96:	d003      	beq.n	800cca0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2205      	movs	r2, #5
 800cc9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	887a      	ldrh	r2, [r7, #2]
 800ccb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	887a      	ldrh	r2, [r7, #2]
 800ccb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	887a      	ldrh	r2, [r7, #2]
 800ccc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	887a      	ldrh	r2, [r7, #2]
 800ccc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce0:	2b40      	cmp	r3, #64	; 0x40
 800cce2:	d007      	beq.n	800ccf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccfc:	d178      	bne.n	800cdf0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <HAL_SPI_TransmitReceive+0x10a>
 800cd06:	8b7b      	ldrh	r3, [r7, #26]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d166      	bne.n	800cdda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd10:	881a      	ldrh	r2, [r3, #0]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1c:	1c9a      	adds	r2, r3, #2
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd30:	e053      	b.n	800cdda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 0302 	and.w	r3, r3, #2
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d11b      	bne.n	800cd78 <HAL_SPI_TransmitReceive+0x176>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d016      	beq.n	800cd78 <HAL_SPI_TransmitReceive+0x176>
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	2b01      	cmp	r3, #1
 800cd4e:	d113      	bne.n	800cd78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd54:	881a      	ldrh	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd60:	1c9a      	adds	r2, r3, #2
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d119      	bne.n	800cdba <HAL_SPI_TransmitReceive+0x1b8>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d014      	beq.n	800cdba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68da      	ldr	r2, [r3, #12]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9a:	b292      	uxth	r2, r2
 800cd9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	1c9a      	adds	r2, r3, #2
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	b29a      	uxth	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cdba:	f7fe ff0d 	bl	800bbd8 <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d807      	bhi.n	800cdda <HAL_SPI_TransmitReceive+0x1d8>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdd0:	d003      	beq.n	800cdda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cdd8:	e0a7      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1a6      	bne.n	800cd32 <HAL_SPI_TransmitReceive+0x130>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1a1      	bne.n	800cd32 <HAL_SPI_TransmitReceive+0x130>
 800cdee:	e07c      	b.n	800ceea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <HAL_SPI_TransmitReceive+0x1fc>
 800cdf8:	8b7b      	ldrh	r3, [r7, #26]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d16b      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	330c      	adds	r3, #12
 800ce08:	7812      	ldrb	r2, [r2, #0]
 800ce0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce10:	1c5a      	adds	r2, r3, #1
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce24:	e057      	b.n	800ced6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	689b      	ldr	r3, [r3, #8]
 800ce2c:	f003 0302 	and.w	r3, r3, #2
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d11c      	bne.n	800ce6e <HAL_SPI_TransmitReceive+0x26c>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d017      	beq.n	800ce6e <HAL_SPI_TransmitReceive+0x26c>
 800ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d114      	bne.n	800ce6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	330c      	adds	r3, #12
 800ce4e:	7812      	ldrb	r2, [r2, #0]
 800ce50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	3b01      	subs	r3, #1
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d119      	bne.n	800ceb0 <HAL_SPI_TransmitReceive+0x2ae>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d014      	beq.n	800ceb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	b2d2      	uxtb	r2, r2
 800ce92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ceac:	2301      	movs	r3, #1
 800ceae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ceb0:	f7fe fe92 	bl	800bbd8 <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d803      	bhi.n	800cec8 <HAL_SPI_TransmitReceive+0x2c6>
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cec6:	d102      	bne.n	800cece <HAL_SPI_TransmitReceive+0x2cc>
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ced4:	e029      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1a2      	bne.n	800ce26 <HAL_SPI_TransmitReceive+0x224>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d19d      	bne.n	800ce26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ceea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f000 f8b2 	bl	800d058 <SPI_EndRxTxTransaction>
 800cef4:	4603      	mov	r3, r0
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d006      	beq.n	800cf08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2220      	movs	r2, #32
 800cf04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cf06:	e010      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10b      	bne.n	800cf28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf10:	2300      	movs	r3, #0
 800cf12:	617b      	str	r3, [r7, #20]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	617b      	str	r3, [r7, #20]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	e000      	b.n	800cf2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800cf28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800cf3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3730      	adds	r7, #48	; 0x30
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
	...

0800cf48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	603b      	str	r3, [r7, #0]
 800cf54:	4613      	mov	r3, r2
 800cf56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cf58:	f7fe fe3e 	bl	800bbd8 <HAL_GetTick>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	1a9b      	subs	r3, r3, r2
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	4413      	add	r3, r2
 800cf66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cf68:	f7fe fe36 	bl	800bbd8 <HAL_GetTick>
 800cf6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cf6e:	4b39      	ldr	r3, [pc, #228]	; (800d054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	015b      	lsls	r3, r3, #5
 800cf74:	0d1b      	lsrs	r3, r3, #20
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	fb02 f303 	mul.w	r3, r2, r3
 800cf7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf7e:	e054      	b.n	800d02a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf86:	d050      	beq.n	800d02a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf88:	f7fe fe26 	bl	800bbd8 <HAL_GetTick>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d902      	bls.n	800cf9e <SPI_WaitFlagStateUntilTimeout+0x56>
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d13d      	bne.n	800d01a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cfac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfb6:	d111      	bne.n	800cfdc <SPI_WaitFlagStateUntilTimeout+0x94>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfc0:	d004      	beq.n	800cfcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfca:	d107      	bne.n	800cfdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cfda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cfe4:	d10f      	bne.n	800d006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cff4:	601a      	str	r2, [r3, #0]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e017      	b.n	800d04a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d020:	2300      	movs	r3, #0
 800d022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	3b01      	subs	r3, #1
 800d028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	689a      	ldr	r2, [r3, #8]
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	4013      	ands	r3, r2
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	429a      	cmp	r2, r3
 800d038:	bf0c      	ite	eq
 800d03a:	2301      	moveq	r3, #1
 800d03c:	2300      	movne	r3, #0
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	461a      	mov	r2, r3
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	429a      	cmp	r2, r3
 800d046:	d19b      	bne.n	800cf80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3720      	adds	r7, #32
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20000000 	.word	0x20000000

0800d058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af02      	add	r7, sp, #8
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d064:	4b1b      	ldr	r3, [pc, #108]	; (800d0d4 <SPI_EndRxTxTransaction+0x7c>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a1b      	ldr	r2, [pc, #108]	; (800d0d8 <SPI_EndRxTxTransaction+0x80>)
 800d06a:	fba2 2303 	umull	r2, r3, r2, r3
 800d06e:	0d5b      	lsrs	r3, r3, #21
 800d070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d074:	fb02 f303 	mul.w	r3, r2, r3
 800d078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d082:	d112      	bne.n	800d0aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	2180      	movs	r1, #128	; 0x80
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f7ff ff5a 	bl	800cf48 <SPI_WaitFlagStateUntilTimeout>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d016      	beq.n	800d0c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09e:	f043 0220 	orr.w	r2, r3, #32
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e00f      	b.n	800d0ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d00a      	beq.n	800d0c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0c0:	2b80      	cmp	r3, #128	; 0x80
 800d0c2:	d0f2      	beq.n	800d0aa <SPI_EndRxTxTransaction+0x52>
 800d0c4:	e000      	b.n	800d0c8 <SPI_EndRxTxTransaction+0x70>
        break;
 800d0c6:	bf00      	nop
  }

  return HAL_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20000000 	.word	0x20000000
 800d0d8:	165e9f81 	.word	0x165e9f81

0800d0dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e041      	b.n	800d172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 f839 	bl	800d17a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2202      	movs	r2, #2
 800d10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	3304      	adds	r3, #4
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f000 f9d8 	bl	800d4d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2201      	movs	r2, #1
 800d134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}

0800d17a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d17a:	b480      	push	{r7}
 800d17c:	b083      	sub	sp, #12
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d182:	bf00      	nop
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
	...

0800d190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d001      	beq.n	800d1a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e04e      	b.n	800d246 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f042 0201 	orr.w	r2, r2, #1
 800d1be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a23      	ldr	r2, [pc, #140]	; (800d254 <HAL_TIM_Base_Start_IT+0xc4>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d022      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1d2:	d01d      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a1f      	ldr	r2, [pc, #124]	; (800d258 <HAL_TIM_Base_Start_IT+0xc8>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d018      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a1e      	ldr	r2, [pc, #120]	; (800d25c <HAL_TIM_Base_Start_IT+0xcc>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d013      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a1c      	ldr	r2, [pc, #112]	; (800d260 <HAL_TIM_Base_Start_IT+0xd0>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d00e      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a1b      	ldr	r2, [pc, #108]	; (800d264 <HAL_TIM_Base_Start_IT+0xd4>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d009      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a19      	ldr	r2, [pc, #100]	; (800d268 <HAL_TIM_Base_Start_IT+0xd8>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d004      	beq.n	800d210 <HAL_TIM_Base_Start_IT+0x80>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a18      	ldr	r2, [pc, #96]	; (800d26c <HAL_TIM_Base_Start_IT+0xdc>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d111      	bne.n	800d234 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2b06      	cmp	r3, #6
 800d220:	d010      	beq.n	800d244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f042 0201 	orr.w	r2, r2, #1
 800d230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d232:	e007      	b.n	800d244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f042 0201 	orr.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3714      	adds	r7, #20
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	40010000 	.word	0x40010000
 800d258:	40000400 	.word	0x40000400
 800d25c:	40000800 	.word	0x40000800
 800d260:	40000c00 	.word	0x40000c00
 800d264:	40010400 	.word	0x40010400
 800d268:	40014000 	.word	0x40014000
 800d26c:	40001800 	.word	0x40001800

0800d270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f003 0302 	and.w	r3, r3, #2
 800d282:	2b02      	cmp	r3, #2
 800d284:	d122      	bne.n	800d2cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	f003 0302 	and.w	r3, r3, #2
 800d290:	2b02      	cmp	r3, #2
 800d292:	d11b      	bne.n	800d2cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f06f 0202 	mvn.w	r2, #2
 800d29c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	f003 0303 	and.w	r3, r3, #3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d003      	beq.n	800d2ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f8ee 	bl	800d494 <HAL_TIM_IC_CaptureCallback>
 800d2b8:	e005      	b.n	800d2c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f8e0 	bl	800d480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f8f1 	bl	800d4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	f003 0304 	and.w	r3, r3, #4
 800d2d6:	2b04      	cmp	r3, #4
 800d2d8:	d122      	bne.n	800d320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b04      	cmp	r3, #4
 800d2e6:	d11b      	bne.n	800d320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f06f 0204 	mvn.w	r2, #4
 800d2f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d302:	2b00      	cmp	r3, #0
 800d304:	d003      	beq.n	800d30e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f8c4 	bl	800d494 <HAL_TIM_IC_CaptureCallback>
 800d30c:	e005      	b.n	800d31a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8b6 	bl	800d480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f8c7 	bl	800d4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2200      	movs	r2, #0
 800d31e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	f003 0308 	and.w	r3, r3, #8
 800d32a:	2b08      	cmp	r3, #8
 800d32c:	d122      	bne.n	800d374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	f003 0308 	and.w	r3, r3, #8
 800d338:	2b08      	cmp	r3, #8
 800d33a:	d11b      	bne.n	800d374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f06f 0208 	mvn.w	r2, #8
 800d344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2204      	movs	r2, #4
 800d34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	69db      	ldr	r3, [r3, #28]
 800d352:	f003 0303 	and.w	r3, r3, #3
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f89a 	bl	800d494 <HAL_TIM_IC_CaptureCallback>
 800d360:	e005      	b.n	800d36e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 f88c 	bl	800d480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 f89d 	bl	800d4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	691b      	ldr	r3, [r3, #16]
 800d37a:	f003 0310 	and.w	r3, r3, #16
 800d37e:	2b10      	cmp	r3, #16
 800d380:	d122      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	f003 0310 	and.w	r3, r3, #16
 800d38c:	2b10      	cmp	r3, #16
 800d38e:	d11b      	bne.n	800d3c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f06f 0210 	mvn.w	r2, #16
 800d398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2208      	movs	r2, #8
 800d39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d003      	beq.n	800d3b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 f870 	bl	800d494 <HAL_TIM_IC_CaptureCallback>
 800d3b4:	e005      	b.n	800d3c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 f862 	bl	800d480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f873 	bl	800d4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d10e      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	f003 0301 	and.w	r3, r3, #1
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d107      	bne.n	800d3f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f06f 0201 	mvn.w	r2, #1
 800d3ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7f3 faa8 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3fe:	2b80      	cmp	r3, #128	; 0x80
 800d400:	d10e      	bne.n	800d420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	68db      	ldr	r3, [r3, #12]
 800d408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d40c:	2b80      	cmp	r3, #128	; 0x80
 800d40e:	d107      	bne.n	800d420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 f902 	bl	800d624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	691b      	ldr	r3, [r3, #16]
 800d426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d42a:	2b40      	cmp	r3, #64	; 0x40
 800d42c:	d10e      	bne.n	800d44c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d438:	2b40      	cmp	r3, #64	; 0x40
 800d43a:	d107      	bne.n	800d44c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f838 	bl	800d4bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	f003 0320 	and.w	r3, r3, #32
 800d456:	2b20      	cmp	r3, #32
 800d458:	d10e      	bne.n	800d478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68db      	ldr	r3, [r3, #12]
 800d460:	f003 0320 	and.w	r3, r3, #32
 800d464:	2b20      	cmp	r3, #32
 800d466:	d107      	bne.n	800d478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f06f 0220 	mvn.w	r2, #32
 800d470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f8cc 	bl	800d610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d478:	bf00      	nop
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d488:	bf00      	nop
 800d48a:	370c      	adds	r7, #12
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d494:	b480      	push	{r7}
 800d496:	b083      	sub	sp, #12
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d49c:	bf00      	nop
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a40      	ldr	r2, [pc, #256]	; (800d5e4 <TIM_Base_SetConfig+0x114>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d013      	beq.n	800d510 <TIM_Base_SetConfig+0x40>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ee:	d00f      	beq.n	800d510 <TIM_Base_SetConfig+0x40>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a3d      	ldr	r2, [pc, #244]	; (800d5e8 <TIM_Base_SetConfig+0x118>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d00b      	beq.n	800d510 <TIM_Base_SetConfig+0x40>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a3c      	ldr	r2, [pc, #240]	; (800d5ec <TIM_Base_SetConfig+0x11c>)
 800d4fc:	4293      	cmp	r3, r2
 800d4fe:	d007      	beq.n	800d510 <TIM_Base_SetConfig+0x40>
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a3b      	ldr	r2, [pc, #236]	; (800d5f0 <TIM_Base_SetConfig+0x120>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d003      	beq.n	800d510 <TIM_Base_SetConfig+0x40>
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	4a3a      	ldr	r2, [pc, #232]	; (800d5f4 <TIM_Base_SetConfig+0x124>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d108      	bne.n	800d522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	4313      	orrs	r3, r2
 800d520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a2f      	ldr	r2, [pc, #188]	; (800d5e4 <TIM_Base_SetConfig+0x114>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d02b      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d530:	d027      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a2c      	ldr	r2, [pc, #176]	; (800d5e8 <TIM_Base_SetConfig+0x118>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d023      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a2b      	ldr	r2, [pc, #172]	; (800d5ec <TIM_Base_SetConfig+0x11c>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d01f      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	4a2a      	ldr	r2, [pc, #168]	; (800d5f0 <TIM_Base_SetConfig+0x120>)
 800d546:	4293      	cmp	r3, r2
 800d548:	d01b      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4a29      	ldr	r2, [pc, #164]	; (800d5f4 <TIM_Base_SetConfig+0x124>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d017      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a28      	ldr	r2, [pc, #160]	; (800d5f8 <TIM_Base_SetConfig+0x128>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d013      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a27      	ldr	r2, [pc, #156]	; (800d5fc <TIM_Base_SetConfig+0x12c>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d00f      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a26      	ldr	r2, [pc, #152]	; (800d600 <TIM_Base_SetConfig+0x130>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d00b      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a25      	ldr	r2, [pc, #148]	; (800d604 <TIM_Base_SetConfig+0x134>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d007      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a24      	ldr	r2, [pc, #144]	; (800d608 <TIM_Base_SetConfig+0x138>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d003      	beq.n	800d582 <TIM_Base_SetConfig+0xb2>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a23      	ldr	r2, [pc, #140]	; (800d60c <TIM_Base_SetConfig+0x13c>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d108      	bne.n	800d594 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	4313      	orrs	r3, r2
 800d592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68fa      	ldr	r2, [r7, #12]
 800d5a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	689a      	ldr	r2, [r3, #8]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	4a0a      	ldr	r2, [pc, #40]	; (800d5e4 <TIM_Base_SetConfig+0x114>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d003      	beq.n	800d5c8 <TIM_Base_SetConfig+0xf8>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a0c      	ldr	r2, [pc, #48]	; (800d5f4 <TIM_Base_SetConfig+0x124>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d103      	bne.n	800d5d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	691a      	ldr	r2, [r3, #16]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	615a      	str	r2, [r3, #20]
}
 800d5d6:	bf00      	nop
 800d5d8:	3714      	adds	r7, #20
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	40010000 	.word	0x40010000
 800d5e8:	40000400 	.word	0x40000400
 800d5ec:	40000800 	.word	0x40000800
 800d5f0:	40000c00 	.word	0x40000c00
 800d5f4:	40010400 	.word	0x40010400
 800d5f8:	40014000 	.word	0x40014000
 800d5fc:	40014400 	.word	0x40014400
 800d600:	40014800 	.word	0x40014800
 800d604:	40001800 	.word	0x40001800
 800d608:	40001c00 	.word	0x40001c00
 800d60c:	40002000 	.word	0x40002000

0800d610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	4603      	mov	r3, r0
 800d640:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d642:	2300      	movs	r3, #0
 800d644:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d64a:	2b84      	cmp	r3, #132	; 0x84
 800d64c:	d005      	beq.n	800d65a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d64e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	4413      	add	r3, r2
 800d656:	3303      	adds	r3, #3
 800d658:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d65a:	68fb      	ldr	r3, [r7, #12]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d66c:	f001 f84e 	bl	800e70c <vTaskStartScheduler>
  
  return osOK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	bd80      	pop	{r7, pc}

0800d676 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d676:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d678:	b089      	sub	sp, #36	; 0x24
 800d67a:	af04      	add	r7, sp, #16
 800d67c:	6078      	str	r0, [r7, #4]
 800d67e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	695b      	ldr	r3, [r3, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d020      	beq.n	800d6ca <osThreadCreate+0x54>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	699b      	ldr	r3, [r3, #24]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01c      	beq.n	800d6ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685c      	ldr	r4, [r3, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681d      	ldr	r5, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	691e      	ldr	r6, [r3, #16]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff ffc8 	bl	800d638 <makeFreeRtosPriority>
 800d6a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d6b2:	9202      	str	r2, [sp, #8]
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	9100      	str	r1, [sp, #0]
 800d6b8:	683b      	ldr	r3, [r7, #0]
 800d6ba:	4632      	mov	r2, r6
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f000 fe5c 	bl	800e37c <xTaskCreateStatic>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	60fb      	str	r3, [r7, #12]
 800d6c8:	e01c      	b.n	800d704 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685c      	ldr	r4, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d6d6:	b29e      	uxth	r6, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7ff ffaa 	bl	800d638 <makeFreeRtosPriority>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	f107 030c 	add.w	r3, r7, #12
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	9200      	str	r2, [sp, #0]
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	4632      	mov	r2, r6
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 fe9e 	bl	800e436 <xTaskCreate>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d001      	beq.n	800d704 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d700:	2300      	movs	r3, #0
 800d702:	e000      	b.n	800d706 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d704:	68fb      	ldr	r3, [r7, #12]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3714      	adds	r7, #20
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d70e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b084      	sub	sp, #16
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <osDelay+0x16>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	e000      	b.n	800d726 <osDelay+0x18>
 800d724:	2301      	movs	r3, #1
 800d726:	4618      	mov	r0, r3
 800d728:	f000 ffbc 	bl	800e6a4 <vTaskDelay>
  
  return osOK;
 800d72c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}

0800d736 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f103 0208 	add.w	r2, r3, #8
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d74e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f103 0208 	add.w	r2, r3, #8
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f103 0208 	add.w	r2, r3, #8
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2200      	movs	r2, #0
 800d768:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d76a:	bf00      	nop
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d776:	b480      	push	{r7}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2200      	movs	r2, #0
 800d782:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	689a      	ldr	r2, [r3, #8]
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	601a      	str	r2, [r3, #0]
}
 800d7cc:	bf00      	nop
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7ee:	d103      	bne.n	800d7f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	691b      	ldr	r3, [r3, #16]
 800d7f4:	60fb      	str	r3, [r7, #12]
 800d7f6:	e00c      	b.n	800d812 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	60fb      	str	r3, [r7, #12]
 800d7fe:	e002      	b.n	800d806 <vListInsert+0x2e>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	60fb      	str	r3, [r7, #12]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	429a      	cmp	r2, r3
 800d810:	d2f6      	bcs.n	800d800 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	685a      	ldr	r2, [r3, #4]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	683a      	ldr	r2, [r7, #0]
 800d820:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	1c5a      	adds	r2, r3, #1
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	601a      	str	r2, [r3, #0]
}
 800d83e:	bf00      	nop
 800d840:	3714      	adds	r7, #20
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d84a:	b480      	push	{r7}
 800d84c:	b085      	sub	sp, #20
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	691b      	ldr	r3, [r3, #16]
 800d856:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	6892      	ldr	r2, [r2, #8]
 800d860:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	6852      	ldr	r2, [r2, #4]
 800d86a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	429a      	cmp	r2, r3
 800d874:	d103      	bne.n	800d87e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	689a      	ldr	r2, [r3, #8]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	1e5a      	subs	r2, r3, #1
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
}
 800d892:	4618      	mov	r0, r3
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
	...

0800d8a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b084      	sub	sp, #16
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10a      	bne.n	800d8ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b8:	f383 8811 	msr	BASEPRI, r3
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f3bf 8f4f 	dsb	sy
 800d8c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d8c6:	bf00      	nop
 800d8c8:	e7fe      	b.n	800d8c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d8ca:	f001 fe7b 	bl	800f5c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8d6:	68f9      	ldr	r1, [r7, #12]
 800d8d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d8da:	fb01 f303 	mul.w	r3, r1, r3
 800d8de:	441a      	add	r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681a      	ldr	r2, [r3, #0]
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	68f9      	ldr	r1, [r7, #12]
 800d8fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d900:	fb01 f303 	mul.w	r3, r1, r3
 800d904:	441a      	add	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	22ff      	movs	r2, #255	; 0xff
 800d90e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	22ff      	movs	r2, #255	; 0xff
 800d916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d114      	bne.n	800d94a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d01a      	beq.n	800d95e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3310      	adds	r3, #16
 800d92c:	4618      	mov	r0, r3
 800d92e:	f001 f93f 	bl	800ebb0 <xTaskRemoveFromEventList>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d012      	beq.n	800d95e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d938:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <xQueueGenericReset+0xcc>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
 800d948:	e009      	b.n	800d95e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3310      	adds	r3, #16
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff fef1 	bl	800d736 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3324      	adds	r3, #36	; 0x24
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff feec 	bl	800d736 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d95e:	f001 fe61 	bl	800f624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d962:	2301      	movs	r3, #1
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	e000ed04 	.word	0xe000ed04

0800d970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08e      	sub	sp, #56	; 0x38
 800d974:	af02      	add	r7, sp, #8
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	607a      	str	r2, [r7, #4]
 800d97c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10a      	bne.n	800d99a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d996:	bf00      	nop
 800d998:	e7fe      	b.n	800d998 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <xQueueGenericCreateStatic+0x52>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <xQueueGenericCreateStatic+0x56>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e000      	b.n	800d9c8 <xQueueGenericCreateStatic+0x58>
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d10a      	bne.n	800d9e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d0:	f383 8811 	msr	BASEPRI, r3
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	623b      	str	r3, [r7, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	e7fe      	b.n	800d9e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d102      	bne.n	800d9ee <xQueueGenericCreateStatic+0x7e>
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d101      	bne.n	800d9f2 <xQueueGenericCreateStatic+0x82>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e000      	b.n	800d9f4 <xQueueGenericCreateStatic+0x84>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d10a      	bne.n	800da0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	61fb      	str	r3, [r7, #28]
}
 800da0a:	bf00      	nop
 800da0c:	e7fe      	b.n	800da0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800da0e:	2348      	movs	r3, #72	; 0x48
 800da10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	2b48      	cmp	r3, #72	; 0x48
 800da16:	d00a      	beq.n	800da2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	61bb      	str	r3, [r7, #24]
}
 800da2a:	bf00      	nop
 800da2c:	e7fe      	b.n	800da2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800da2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00d      	beq.n	800da56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800da42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800da46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da48:	9300      	str	r3, [sp, #0]
 800da4a:	4613      	mov	r3, r2
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	68b9      	ldr	r1, [r7, #8]
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f000 f83f 	bl	800dad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800da56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800da58:	4618      	mov	r0, r3
 800da5a:	3730      	adds	r7, #48	; 0x30
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800da60:	b580      	push	{r7, lr}
 800da62:	b08a      	sub	sp, #40	; 0x28
 800da64:	af02      	add	r7, sp, #8
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	4613      	mov	r3, r2
 800da6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10a      	bne.n	800da8a <xQueueGenericCreate+0x2a>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	613b      	str	r3, [r7, #16]
}
 800da86:	bf00      	nop
 800da88:	e7fe      	b.n	800da88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	fb02 f303 	mul.w	r3, r2, r3
 800da92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	3348      	adds	r3, #72	; 0x48
 800da98:	4618      	mov	r0, r3
 800da9a:	f001 feb5 	bl	800f808 <pvPortMalloc>
 800da9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d011      	beq.n	800daca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	3348      	adds	r3, #72	; 0x48
 800daae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dab8:	79fa      	ldrb	r2, [r7, #7]
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	4613      	mov	r3, r2
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	68b9      	ldr	r1, [r7, #8]
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f000 f805 	bl	800dad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800daca:	69bb      	ldr	r3, [r7, #24]
	}
 800dacc:	4618      	mov	r0, r3
 800dace:	3720      	adds	r7, #32
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d103      	bne.n	800daf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dae8:	69bb      	ldr	r3, [r7, #24]
 800daea:	69ba      	ldr	r2, [r7, #24]
 800daec:	601a      	str	r2, [r3, #0]
 800daee:	e002      	b.n	800daf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800db02:	2101      	movs	r1, #1
 800db04:	69b8      	ldr	r0, [r7, #24]
 800db06:	f7ff fecb 	bl	800d8a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00e      	beq.n	800db3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800db32:	2300      	movs	r3, #0
 800db34:	2200      	movs	r2, #0
 800db36:	2100      	movs	r1, #0
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f837 	bl	800dbac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800db3e:	bf00      	nop
 800db40:	3708      	adds	r7, #8
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800db46:	b580      	push	{r7, lr}
 800db48:	b086      	sub	sp, #24
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	4603      	mov	r3, r0
 800db4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db50:	2301      	movs	r3, #1
 800db52:	617b      	str	r3, [r7, #20]
 800db54:	2300      	movs	r3, #0
 800db56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800db58:	79fb      	ldrb	r3, [r7, #7]
 800db5a:	461a      	mov	r2, r3
 800db5c:	6939      	ldr	r1, [r7, #16]
 800db5e:	6978      	ldr	r0, [r7, #20]
 800db60:	f7ff ff7e 	bl	800da60 <xQueueGenericCreate>
 800db64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f7ff ffd3 	bl	800db12 <prvInitialiseMutex>

		return xNewQueue;
 800db6c:	68fb      	ldr	r3, [r7, #12]
	}
 800db6e:	4618      	mov	r0, r3
 800db70:	3718      	adds	r7, #24
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}

0800db76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800db76:	b580      	push	{r7, lr}
 800db78:	b088      	sub	sp, #32
 800db7a:	af02      	add	r7, sp, #8
 800db7c:	4603      	mov	r3, r0
 800db7e:	6039      	str	r1, [r7, #0]
 800db80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800db82:	2301      	movs	r3, #1
 800db84:	617b      	str	r3, [r7, #20]
 800db86:	2300      	movs	r3, #0
 800db88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	2200      	movs	r2, #0
 800db92:	6939      	ldr	r1, [r7, #16]
 800db94:	6978      	ldr	r0, [r7, #20]
 800db96:	f7ff feeb 	bl	800d970 <xQueueGenericCreateStatic>
 800db9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800db9c:	68f8      	ldr	r0, [r7, #12]
 800db9e:	f7ff ffb8 	bl	800db12 <prvInitialiseMutex>

		return xNewQueue;
 800dba2:	68fb      	ldr	r3, [r7, #12]
	}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08e      	sub	sp, #56	; 0x38
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	607a      	str	r2, [r7, #4]
 800dbb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d10a      	bne.n	800dbde <xQueueGenericSend+0x32>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dbda:	bf00      	nop
 800dbdc:	e7fe      	b.n	800dbdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d103      	bne.n	800dbec <xQueueGenericSend+0x40>
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <xQueueGenericSend+0x44>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e000      	b.n	800dbf2 <xQueueGenericSend+0x46>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10a      	bne.n	800dc0c <xQueueGenericSend+0x60>
	__asm volatile
 800dbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbfa:	f383 8811 	msr	BASEPRI, r3
 800dbfe:	f3bf 8f6f 	isb	sy
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800dc08:	bf00      	nop
 800dc0a:	e7fe      	b.n	800dc0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d103      	bne.n	800dc1a <xQueueGenericSend+0x6e>
 800dc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d101      	bne.n	800dc1e <xQueueGenericSend+0x72>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e000      	b.n	800dc20 <xQueueGenericSend+0x74>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10a      	bne.n	800dc3a <xQueueGenericSend+0x8e>
	__asm volatile
 800dc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc28:	f383 8811 	msr	BASEPRI, r3
 800dc2c:	f3bf 8f6f 	isb	sy
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	623b      	str	r3, [r7, #32]
}
 800dc36:	bf00      	nop
 800dc38:	e7fe      	b.n	800dc38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc3a:	f001 f975 	bl	800ef28 <xTaskGetSchedulerState>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <xQueueGenericSend+0x9e>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <xQueueGenericSend+0xa2>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e000      	b.n	800dc50 <xQueueGenericSend+0xa4>
 800dc4e:	2300      	movs	r3, #0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10a      	bne.n	800dc6a <xQueueGenericSend+0xbe>
	__asm volatile
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	61fb      	str	r3, [r7, #28]
}
 800dc66:	bf00      	nop
 800dc68:	e7fe      	b.n	800dc68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc6a:	f001 fcab 	bl	800f5c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d302      	bcc.n	800dc80 <xQueueGenericSend+0xd4>
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d129      	bne.n	800dcd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dc80:	683a      	ldr	r2, [r7, #0]
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc86:	f000 fa64 	bl	800e152 <prvCopyDataToQueue>
 800dc8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d010      	beq.n	800dcb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc96:	3324      	adds	r3, #36	; 0x24
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 ff89 	bl	800ebb0 <xTaskRemoveFromEventList>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d013      	beq.n	800dccc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dca4:	4b3f      	ldr	r3, [pc, #252]	; (800dda4 <xQueueGenericSend+0x1f8>)
 800dca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	e00a      	b.n	800dccc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800dcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800dcbc:	4b39      	ldr	r3, [pc, #228]	; (800dda4 <xQueueGenericSend+0x1f8>)
 800dcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcc2:	601a      	str	r2, [r3, #0]
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800dccc:	f001 fcaa 	bl	800f624 <vPortExitCritical>
				return pdPASS;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e063      	b.n	800dd9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d103      	bne.n	800dce2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcda:	f001 fca3 	bl	800f624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800dcde:	2300      	movs	r3, #0
 800dce0:	e05c      	b.n	800dd9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dce8:	f107 0314 	add.w	r3, r7, #20
 800dcec:	4618      	mov	r0, r3
 800dcee:	f000 ffc1 	bl	800ec74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dcf6:	f001 fc95 	bl	800f624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dcfa:	f000 fd67 	bl	800e7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dcfe:	f001 fc61 	bl	800f5c4 <vPortEnterCritical>
 800dd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd08:	b25b      	sxtb	r3, r3
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd0e:	d103      	bne.n	800dd18 <xQueueGenericSend+0x16c>
 800dd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd1e:	b25b      	sxtb	r3, r3
 800dd20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd24:	d103      	bne.n	800dd2e <xQueueGenericSend+0x182>
 800dd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd2e:	f001 fc79 	bl	800f624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd32:	1d3a      	adds	r2, r7, #4
 800dd34:	f107 0314 	add.w	r3, r7, #20
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 ffb0 	bl	800eca0 <xTaskCheckForTimeOut>
 800dd40:	4603      	mov	r3, r0
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d124      	bne.n	800dd90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dd46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd48:	f000 fad5 	bl	800e2f6 <prvIsQueueFull>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d018      	beq.n	800dd84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd54:	3310      	adds	r3, #16
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	4611      	mov	r1, r2
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 ff04 	bl	800eb68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dd60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd62:	f000 fa60 	bl	800e226 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dd66:	f000 fd3f 	bl	800e7e8 <xTaskResumeAll>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f47f af7c 	bne.w	800dc6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dd72:	4b0c      	ldr	r3, [pc, #48]	; (800dda4 <xQueueGenericSend+0x1f8>)
 800dd74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	e772      	b.n	800dc6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dd84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd86:	f000 fa4e 	bl	800e226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd8a:	f000 fd2d 	bl	800e7e8 <xTaskResumeAll>
 800dd8e:	e76c      	b.n	800dc6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dd90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd92:	f000 fa48 	bl	800e226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dd96:	f000 fd27 	bl	800e7e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dd9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3738      	adds	r7, #56	; 0x38
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08e      	sub	sp, #56	; 0x38
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ddb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10a      	bne.n	800ddd2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	623b      	str	r3, [r7, #32]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ddd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	f383 8811 	msr	BASEPRI, r3
 800dde2:	f3bf 8f6f 	isb	sy
 800dde6:	f3bf 8f4f 	dsb	sy
 800ddea:	61fb      	str	r3, [r7, #28]
}
 800ddec:	bf00      	nop
 800ddee:	e7fe      	b.n	800ddee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d103      	bne.n	800de00 <xQueueGiveFromISR+0x58>
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d101      	bne.n	800de04 <xQueueGiveFromISR+0x5c>
 800de00:	2301      	movs	r3, #1
 800de02:	e000      	b.n	800de06 <xQueueGiveFromISR+0x5e>
 800de04:	2300      	movs	r3, #0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10a      	bne.n	800de20 <xQueueGiveFromISR+0x78>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	61bb      	str	r3, [r7, #24]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800de20:	f001 fcb2 	bl	800f788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800de24:	f3ef 8211 	mrs	r2, BASEPRI
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	617a      	str	r2, [r7, #20]
 800de3a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800de3c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800de3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de44:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d22b      	bcs.n	800dea8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800de50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	1c5a      	adds	r2, r3, #1
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800de62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800de66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de6a:	d112      	bne.n	800de92 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800de6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	d016      	beq.n	800dea2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	3324      	adds	r3, #36	; 0x24
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fe99 	bl	800ebb0 <xTaskRemoveFromEventList>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00e      	beq.n	800dea2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00b      	beq.n	800dea2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2201      	movs	r2, #1
 800de8e:	601a      	str	r2, [r3, #0]
 800de90:	e007      	b.n	800dea2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800de92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de96:	3301      	adds	r3, #1
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	b25a      	sxtb	r2, r3
 800de9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dea2:	2301      	movs	r3, #1
 800dea4:	637b      	str	r3, [r7, #52]	; 0x34
 800dea6:	e001      	b.n	800deac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dea8:	2300      	movs	r3, #0
 800deaa:	637b      	str	r3, [r7, #52]	; 0x34
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800deb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800deb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800deba:	4618      	mov	r0, r3
 800debc:	3738      	adds	r7, #56	; 0x38
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
	...

0800dec4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b08e      	sub	sp, #56	; 0x38
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dece:	2300      	movs	r3, #0
 800ded0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ded6:	2300      	movs	r3, #0
 800ded8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d10a      	bne.n	800def6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	623b      	str	r3, [r7, #32]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800def6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00a      	beq.n	800df14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	61fb      	str	r3, [r7, #28]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df14:	f001 f808 	bl	800ef28 <xTaskGetSchedulerState>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d102      	bne.n	800df24 <xQueueSemaphoreTake+0x60>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <xQueueSemaphoreTake+0x64>
 800df24:	2301      	movs	r3, #1
 800df26:	e000      	b.n	800df2a <xQueueSemaphoreTake+0x66>
 800df28:	2300      	movs	r3, #0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10a      	bne.n	800df44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	61bb      	str	r3, [r7, #24]
}
 800df40:	bf00      	nop
 800df42:	e7fe      	b.n	800df42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df44:	f001 fb3e 	bl	800f5c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	2b00      	cmp	r3, #0
 800df52:	d024      	beq.n	800df9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	1e5a      	subs	r2, r3, #1
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d104      	bne.n	800df6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800df64:	f001 f988 	bl	800f278 <pvTaskIncrementMutexHeldCount>
 800df68:	4602      	mov	r2, r0
 800df6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00f      	beq.n	800df96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df78:	3310      	adds	r3, #16
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 fe18 	bl	800ebb0 <xTaskRemoveFromEventList>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d007      	beq.n	800df96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800df86:	4b54      	ldr	r3, [pc, #336]	; (800e0d8 <xQueueSemaphoreTake+0x214>)
 800df88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	f3bf 8f4f 	dsb	sy
 800df92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800df96:	f001 fb45 	bl	800f624 <vPortExitCritical>
				return pdPASS;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e097      	b.n	800e0ce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d111      	bne.n	800dfc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d00a      	beq.n	800dfc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	617b      	str	r3, [r7, #20]
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dfc0:	f001 fb30 	bl	800f624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	e082      	b.n	800e0ce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d106      	bne.n	800dfdc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dfce:	f107 030c 	add.w	r3, r7, #12
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f000 fe4e 	bl	800ec74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfdc:	f001 fb22 	bl	800f624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfe0:	f000 fbf4 	bl	800e7cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfe4:	f001 faee 	bl	800f5c4 <vPortEnterCritical>
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dfee:	b25b      	sxtb	r3, r3
 800dff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dff4:	d103      	bne.n	800dffe <xQueueSemaphoreTake+0x13a>
 800dff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e000:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e004:	b25b      	sxtb	r3, r3
 800e006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e00a:	d103      	bne.n	800e014 <xQueueSemaphoreTake+0x150>
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e014:	f001 fb06 	bl	800f624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e018:	463a      	mov	r2, r7
 800e01a:	f107 030c 	add.w	r3, r7, #12
 800e01e:	4611      	mov	r1, r2
 800e020:	4618      	mov	r0, r3
 800e022:	f000 fe3d 	bl	800eca0 <xTaskCheckForTimeOut>
 800e026:	4603      	mov	r3, r0
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d132      	bne.n	800e092 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e02c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e02e:	f000 f94c 	bl	800e2ca <prvIsQueueEmpty>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d026      	beq.n	800e086 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d109      	bne.n	800e054 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e040:	f001 fac0 	bl	800f5c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 ff8b 	bl	800ef64 <xTaskPriorityInherit>
 800e04e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e050:	f001 fae8 	bl	800f624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	3324      	adds	r3, #36	; 0x24
 800e058:	683a      	ldr	r2, [r7, #0]
 800e05a:	4611      	mov	r1, r2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 fd83 	bl	800eb68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e064:	f000 f8df 	bl	800e226 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e068:	f000 fbbe 	bl	800e7e8 <xTaskResumeAll>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f47f af68 	bne.w	800df44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e074:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <xQueueSemaphoreTake+0x214>)
 800e076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e07a:	601a      	str	r2, [r3, #0]
 800e07c:	f3bf 8f4f 	dsb	sy
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	e75e      	b.n	800df44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e088:	f000 f8cd 	bl	800e226 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e08c:	f000 fbac 	bl	800e7e8 <xTaskResumeAll>
 800e090:	e758      	b.n	800df44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e094:	f000 f8c7 	bl	800e226 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e098:	f000 fba6 	bl	800e7e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e09c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e09e:	f000 f914 	bl	800e2ca <prvIsQueueEmpty>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f43f af4d 	beq.w	800df44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d00d      	beq.n	800e0cc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e0b0:	f001 fa88 	bl	800f5c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e0b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0b6:	f000 f834 	bl	800e122 <prvGetDisinheritPriorityAfterTimeout>
 800e0ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f001 f84a 	bl	800f15c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e0c8:	f001 faac 	bl	800f624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e0cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3738      	adds	r7, #56	; 0x38
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10a      	bne.n	800e104 <vQueueDelete+0x28>
	__asm volatile
 800e0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f2:	f383 8811 	msr	BASEPRI, r3
 800e0f6:	f3bf 8f6f 	isb	sy
 800e0fa:	f3bf 8f4f 	dsb	sy
 800e0fe:	60bb      	str	r3, [r7, #8]
}
 800e100:	bf00      	nop
 800e102:	e7fe      	b.n	800e102 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f000 f90f 	bl	800e328 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f001 fc43 	bl	800f9a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e11a:	bf00      	nop
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e122:	b480      	push	{r7}
 800e124:	b085      	sub	sp, #20
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d006      	beq.n	800e140 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f1c3 0307 	rsb	r3, r3, #7
 800e13c:	60fb      	str	r3, [r7, #12]
 800e13e:	e001      	b.n	800e144 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e140:	2300      	movs	r3, #0
 800e142:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e144:	68fb      	ldr	r3, [r7, #12]
	}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr

0800e152 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b086      	sub	sp, #24
 800e156:	af00      	add	r7, sp, #0
 800e158:	60f8      	str	r0, [r7, #12]
 800e15a:	60b9      	str	r1, [r7, #8]
 800e15c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e166:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10d      	bne.n	800e18c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d14d      	bne.n	800e214 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	689b      	ldr	r3, [r3, #8]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 ff67 	bl	800f050 <xTaskPriorityDisinherit>
 800e182:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2200      	movs	r2, #0
 800e188:	609a      	str	r2, [r3, #8]
 800e18a:	e043      	b.n	800e214 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d119      	bne.n	800e1c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6858      	ldr	r0, [r3, #4]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19a:	461a      	mov	r2, r3
 800e19c:	68b9      	ldr	r1, [r7, #8]
 800e19e:	f001 feb2 	bl	800ff06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	685a      	ldr	r2, [r3, #4]
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1aa:	441a      	add	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	689b      	ldr	r3, [r3, #8]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d32b      	bcc.n	800e214 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	605a      	str	r2, [r3, #4]
 800e1c4:	e026      	b.n	800e214 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	68d8      	ldr	r0, [r3, #12]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	68b9      	ldr	r1, [r7, #8]
 800e1d2:	f001 fe98 	bl	800ff06 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	68da      	ldr	r2, [r3, #12]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1de:	425b      	negs	r3, r3
 800e1e0:	441a      	add	r2, r3
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	68da      	ldr	r2, [r3, #12]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d207      	bcs.n	800e202 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	689a      	ldr	r2, [r3, #8]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1fa:	425b      	negs	r3, r3
 800e1fc:	441a      	add	r2, r3
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2b02      	cmp	r3, #2
 800e206:	d105      	bne.n	800e214 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d002      	beq.n	800e214 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	3b01      	subs	r3, #1
 800e212:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e21c:	697b      	ldr	r3, [r7, #20]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3718      	adds	r7, #24
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e226:	b580      	push	{r7, lr}
 800e228:	b084      	sub	sp, #16
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e22e:	f001 f9c9 	bl	800f5c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e238:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e23a:	e011      	b.n	800e260 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	2b00      	cmp	r3, #0
 800e242:	d012      	beq.n	800e26a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3324      	adds	r3, #36	; 0x24
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 fcb1 	bl	800ebb0 <xTaskRemoveFromEventList>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	d001      	beq.n	800e258 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e254:	f000 fd86 	bl	800ed64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e264:	2b00      	cmp	r3, #0
 800e266:	dce9      	bgt.n	800e23c <prvUnlockQueue+0x16>
 800e268:	e000      	b.n	800e26c <prvUnlockQueue+0x46>
					break;
 800e26a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	22ff      	movs	r2, #255	; 0xff
 800e270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e274:	f001 f9d6 	bl	800f624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e278:	f001 f9a4 	bl	800f5c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e282:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e284:	e011      	b.n	800e2aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d012      	beq.n	800e2b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	3310      	adds	r3, #16
 800e292:	4618      	mov	r0, r3
 800e294:	f000 fc8c 	bl	800ebb0 <xTaskRemoveFromEventList>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e29e:	f000 fd61 	bl	800ed64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
 800e2a4:	3b01      	subs	r3, #1
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	dce9      	bgt.n	800e286 <prvUnlockQueue+0x60>
 800e2b2:	e000      	b.n	800e2b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	22ff      	movs	r2, #255	; 0xff
 800e2ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e2be:	f001 f9b1 	bl	800f624 <vPortExitCritical>
}
 800e2c2:	bf00      	nop
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2d2:	f001 f977 	bl	800f5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d102      	bne.n	800e2e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	60fb      	str	r3, [r7, #12]
 800e2e2:	e001      	b.n	800e2e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e2e8:	f001 f99c 	bl	800f624 <vPortExitCritical>

	return xReturn;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e2f6:	b580      	push	{r7, lr}
 800e2f8:	b084      	sub	sp, #16
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2fe:	f001 f961 	bl	800f5c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d102      	bne.n	800e314 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e30e:	2301      	movs	r3, #1
 800e310:	60fb      	str	r3, [r7, #12]
 800e312:	e001      	b.n	800e318 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e318:	f001 f984 	bl	800f624 <vPortExitCritical>

	return xReturn;
 800e31c:	68fb      	ldr	r3, [r7, #12]
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e330:	2300      	movs	r3, #0
 800e332:	60fb      	str	r3, [r7, #12]
 800e334:	e016      	b.n	800e364 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e336:	4a10      	ldr	r2, [pc, #64]	; (800e378 <vQueueUnregisterQueue+0x50>)
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	4413      	add	r3, r2
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	687a      	ldr	r2, [r7, #4]
 800e342:	429a      	cmp	r2, r3
 800e344:	d10b      	bne.n	800e35e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e346:	4a0c      	ldr	r2, [pc, #48]	; (800e378 <vQueueUnregisterQueue+0x50>)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2100      	movs	r1, #0
 800e34c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e350:	4a09      	ldr	r2, [pc, #36]	; (800e378 <vQueueUnregisterQueue+0x50>)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	00db      	lsls	r3, r3, #3
 800e356:	4413      	add	r3, r2
 800e358:	2200      	movs	r2, #0
 800e35a:	605a      	str	r2, [r3, #4]
				break;
 800e35c:	e006      	b.n	800e36c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3301      	adds	r3, #1
 800e362:	60fb      	str	r3, [r7, #12]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b07      	cmp	r3, #7
 800e368:	d9e5      	bls.n	800e336 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e36a:	bf00      	nop
 800e36c:	bf00      	nop
 800e36e:	3714      	adds	r7, #20
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	2000b650 	.word	0x2000b650

0800e37c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08e      	sub	sp, #56	; 0x38
 800e380:	af04      	add	r7, sp, #16
 800e382:	60f8      	str	r0, [r7, #12]
 800e384:	60b9      	str	r1, [r7, #8]
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	623b      	str	r3, [r7, #32]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10a      	bne.n	800e3c2 <xTaskCreateStatic+0x46>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	61fb      	str	r3, [r7, #28]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e3c2:	2354      	movs	r3, #84	; 0x54
 800e3c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	2b54      	cmp	r3, #84	; 0x54
 800e3ca:	d00a      	beq.n	800e3e2 <xTaskCreateStatic+0x66>
	__asm volatile
 800e3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	61bb      	str	r3, [r7, #24]
}
 800e3de:	bf00      	nop
 800e3e0:	e7fe      	b.n	800e3e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e3e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d01e      	beq.n	800e428 <xTaskCreateStatic+0xac>
 800e3ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d01b      	beq.n	800e428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e402:	2300      	movs	r3, #0
 800e404:	9303      	str	r3, [sp, #12]
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	9302      	str	r3, [sp, #8]
 800e40a:	f107 0314 	add.w	r3, r7, #20
 800e40e:	9301      	str	r3, [sp, #4]
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	68b9      	ldr	r1, [r7, #8]
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f000 f850 	bl	800e4c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e422:	f000 f8d5 	bl	800e5d0 <prvAddNewTaskToReadyList>
 800e426:	e001      	b.n	800e42c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e428:	2300      	movs	r3, #0
 800e42a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e42c:	697b      	ldr	r3, [r7, #20]
	}
 800e42e:	4618      	mov	r0, r3
 800e430:	3728      	adds	r7, #40	; 0x28
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}

0800e436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e436:	b580      	push	{r7, lr}
 800e438:	b08c      	sub	sp, #48	; 0x30
 800e43a:	af04      	add	r7, sp, #16
 800e43c:	60f8      	str	r0, [r7, #12]
 800e43e:	60b9      	str	r1, [r7, #8]
 800e440:	603b      	str	r3, [r7, #0]
 800e442:	4613      	mov	r3, r2
 800e444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e446:	88fb      	ldrh	r3, [r7, #6]
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	4618      	mov	r0, r3
 800e44c:	f001 f9dc 	bl	800f808 <pvPortMalloc>
 800e450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00e      	beq.n	800e476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e458:	2054      	movs	r0, #84	; 0x54
 800e45a:	f001 f9d5 	bl	800f808 <pvPortMalloc>
 800e45e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d003      	beq.n	800e46e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	631a      	str	r2, [r3, #48]	; 0x30
 800e46c:	e005      	b.n	800e47a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e46e:	6978      	ldr	r0, [r7, #20]
 800e470:	f001 fa96 	bl	800f9a0 <vPortFree>
 800e474:	e001      	b.n	800e47a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e476:	2300      	movs	r3, #0
 800e478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d017      	beq.n	800e4b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	2200      	movs	r2, #0
 800e484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e488:	88fa      	ldrh	r2, [r7, #6]
 800e48a:	2300      	movs	r3, #0
 800e48c:	9303      	str	r3, [sp, #12]
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	9302      	str	r3, [sp, #8]
 800e492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e494:	9301      	str	r3, [sp, #4]
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68b9      	ldr	r1, [r7, #8]
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 f80e 	bl	800e4c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e4a4:	69f8      	ldr	r0, [r7, #28]
 800e4a6:	f000 f893 	bl	800e5d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	61bb      	str	r3, [r7, #24]
 800e4ae:	e002      	b.n	800e4b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e4b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e4b6:	69bb      	ldr	r3, [r7, #24]
	}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3720      	adds	r7, #32
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b088      	sub	sp, #32
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	60f8      	str	r0, [r7, #12]
 800e4c8:	60b9      	str	r1, [r7, #8]
 800e4ca:	607a      	str	r2, [r7, #4]
 800e4cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	f023 0307 	bic.w	r3, r3, #7
 800e4e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	f003 0307 	and.w	r3, r3, #7
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d00a      	beq.n	800e508 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	f383 8811 	msr	BASEPRI, r3
 800e4fa:	f3bf 8f6f 	isb	sy
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	617b      	str	r3, [r7, #20]
}
 800e504:	bf00      	nop
 800e506:	e7fe      	b.n	800e506 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d01f      	beq.n	800e54e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e50e:	2300      	movs	r3, #0
 800e510:	61fb      	str	r3, [r7, #28]
 800e512:	e012      	b.n	800e53a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	4413      	add	r3, r2
 800e51a:	7819      	ldrb	r1, [r3, #0]
 800e51c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e51e:	69fb      	ldr	r3, [r7, #28]
 800e520:	4413      	add	r3, r2
 800e522:	3334      	adds	r3, #52	; 0x34
 800e524:	460a      	mov	r2, r1
 800e526:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	4413      	add	r3, r2
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d006      	beq.n	800e542 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	3301      	adds	r3, #1
 800e538:	61fb      	str	r3, [r7, #28]
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	2b0f      	cmp	r3, #15
 800e53e:	d9e9      	bls.n	800e514 <prvInitialiseNewTask+0x54>
 800e540:	e000      	b.n	800e544 <prvInitialiseNewTask+0x84>
			{
				break;
 800e542:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	2200      	movs	r2, #0
 800e548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e54c:	e003      	b.n	800e556 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	2200      	movs	r2, #0
 800e552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e558:	2b06      	cmp	r3, #6
 800e55a:	d901      	bls.n	800e560 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e55c:	2306      	movs	r3, #6
 800e55e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e564:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e56a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	2200      	movs	r2, #0
 800e570:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e574:	3304      	adds	r3, #4
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff f8fd 	bl	800d776 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57e:	3318      	adds	r3, #24
 800e580:	4618      	mov	r0, r3
 800e582:	f7ff f8f8 	bl	800d776 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e58a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58e:	f1c3 0207 	rsb	r2, r3, #7
 800e592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e594:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e59a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	2200      	movs	r2, #0
 800e5a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	68f9      	ldr	r1, [r7, #12]
 800e5ae:	69b8      	ldr	r0, [r7, #24]
 800e5b0:	f000 fedc 	bl	800f36c <pxPortInitialiseStack>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d002      	beq.n	800e5c6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5c6:	bf00      	nop
 800e5c8:	3720      	adds	r7, #32
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e5d8:	f000 fff4 	bl	800f5c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e5dc:	4b2a      	ldr	r3, [pc, #168]	; (800e688 <prvAddNewTaskToReadyList+0xb8>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	4a29      	ldr	r2, [pc, #164]	; (800e688 <prvAddNewTaskToReadyList+0xb8>)
 800e5e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e5e6:	4b29      	ldr	r3, [pc, #164]	; (800e68c <prvAddNewTaskToReadyList+0xbc>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d109      	bne.n	800e602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e5ee:	4a27      	ldr	r2, [pc, #156]	; (800e68c <prvAddNewTaskToReadyList+0xbc>)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e5f4:	4b24      	ldr	r3, [pc, #144]	; (800e688 <prvAddNewTaskToReadyList+0xb8>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d110      	bne.n	800e61e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e5fc:	f000 fbd6 	bl	800edac <prvInitialiseTaskLists>
 800e600:	e00d      	b.n	800e61e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e602:	4b23      	ldr	r3, [pc, #140]	; (800e690 <prvAddNewTaskToReadyList+0xc0>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d109      	bne.n	800e61e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e60a:	4b20      	ldr	r3, [pc, #128]	; (800e68c <prvAddNewTaskToReadyList+0xbc>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	429a      	cmp	r2, r3
 800e616:	d802      	bhi.n	800e61e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e618:	4a1c      	ldr	r2, [pc, #112]	; (800e68c <prvAddNewTaskToReadyList+0xbc>)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e61e:	4b1d      	ldr	r3, [pc, #116]	; (800e694 <prvAddNewTaskToReadyList+0xc4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3301      	adds	r3, #1
 800e624:	4a1b      	ldr	r2, [pc, #108]	; (800e694 <prvAddNewTaskToReadyList+0xc4>)
 800e626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e62c:	2201      	movs	r2, #1
 800e62e:	409a      	lsls	r2, r3
 800e630:	4b19      	ldr	r3, [pc, #100]	; (800e698 <prvAddNewTaskToReadyList+0xc8>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4313      	orrs	r3, r2
 800e636:	4a18      	ldr	r2, [pc, #96]	; (800e698 <prvAddNewTaskToReadyList+0xc8>)
 800e638:	6013      	str	r3, [r2, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	4613      	mov	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4413      	add	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4a15      	ldr	r2, [pc, #84]	; (800e69c <prvAddNewTaskToReadyList+0xcc>)
 800e648:	441a      	add	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	3304      	adds	r3, #4
 800e64e:	4619      	mov	r1, r3
 800e650:	4610      	mov	r0, r2
 800e652:	f7ff f89d 	bl	800d790 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e656:	f000 ffe5 	bl	800f624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e65a:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <prvAddNewTaskToReadyList+0xc0>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00e      	beq.n	800e680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e662:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <prvAddNewTaskToReadyList+0xbc>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d207      	bcs.n	800e680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e670:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <prvAddNewTaskToReadyList+0xd0>)
 800e672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e676:	601a      	str	r2, [r3, #0]
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	20000a3c 	.word	0x20000a3c
 800e68c:	2000093c 	.word	0x2000093c
 800e690:	20000a48 	.word	0x20000a48
 800e694:	20000a58 	.word	0x20000a58
 800e698:	20000a44 	.word	0x20000a44
 800e69c:	20000940 	.word	0x20000940
 800e6a0:	e000ed04 	.word	0xe000ed04

0800e6a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d017      	beq.n	800e6e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e6b6:	4b13      	ldr	r3, [pc, #76]	; (800e704 <vTaskDelay+0x60>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00a      	beq.n	800e6d4 <vTaskDelay+0x30>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60bb      	str	r3, [r7, #8]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e6d4:	f000 f87a 	bl	800e7cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e6d8:	2100      	movs	r1, #0
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fde0 	bl	800f2a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e6e0:	f000 f882 	bl	800e7e8 <xTaskResumeAll>
 800e6e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d107      	bne.n	800e6fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e6ec:	4b06      	ldr	r3, [pc, #24]	; (800e708 <vTaskDelay+0x64>)
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	601a      	str	r2, [r3, #0]
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6fc:	bf00      	nop
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}
 800e704:	20000a64 	.word	0x20000a64
 800e708:	e000ed04 	.word	0xe000ed04

0800e70c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b08a      	sub	sp, #40	; 0x28
 800e710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e712:	2300      	movs	r3, #0
 800e714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e71a:	463a      	mov	r2, r7
 800e71c:	1d39      	adds	r1, r7, #4
 800e71e:	f107 0308 	add.w	r3, r7, #8
 800e722:	4618      	mov	r0, r3
 800e724:	f7f1 ff28 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e728:	6839      	ldr	r1, [r7, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	9202      	str	r2, [sp, #8]
 800e730:	9301      	str	r3, [sp, #4]
 800e732:	2300      	movs	r3, #0
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	2300      	movs	r3, #0
 800e738:	460a      	mov	r2, r1
 800e73a:	491e      	ldr	r1, [pc, #120]	; (800e7b4 <vTaskStartScheduler+0xa8>)
 800e73c:	481e      	ldr	r0, [pc, #120]	; (800e7b8 <vTaskStartScheduler+0xac>)
 800e73e:	f7ff fe1d 	bl	800e37c <xTaskCreateStatic>
 800e742:	4603      	mov	r3, r0
 800e744:	4a1d      	ldr	r2, [pc, #116]	; (800e7bc <vTaskStartScheduler+0xb0>)
 800e746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e748:	4b1c      	ldr	r3, [pc, #112]	; (800e7bc <vTaskStartScheduler+0xb0>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d002      	beq.n	800e756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e750:	2301      	movs	r3, #1
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	e001      	b.n	800e75a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	2b01      	cmp	r3, #1
 800e75e:	d116      	bne.n	800e78e <vTaskStartScheduler+0x82>
	__asm volatile
 800e760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e764:	f383 8811 	msr	BASEPRI, r3
 800e768:	f3bf 8f6f 	isb	sy
 800e76c:	f3bf 8f4f 	dsb	sy
 800e770:	613b      	str	r3, [r7, #16]
}
 800e772:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e774:	4b12      	ldr	r3, [pc, #72]	; (800e7c0 <vTaskStartScheduler+0xb4>)
 800e776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e77a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e77c:	4b11      	ldr	r3, [pc, #68]	; (800e7c4 <vTaskStartScheduler+0xb8>)
 800e77e:	2201      	movs	r2, #1
 800e780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e782:	4b11      	ldr	r3, [pc, #68]	; (800e7c8 <vTaskStartScheduler+0xbc>)
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e788:	f000 fe7a 	bl	800f480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e78c:	e00e      	b.n	800e7ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e794:	d10a      	bne.n	800e7ac <vTaskStartScheduler+0xa0>
	__asm volatile
 800e796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	60fb      	str	r3, [r7, #12]
}
 800e7a8:	bf00      	nop
 800e7aa:	e7fe      	b.n	800e7aa <vTaskStartScheduler+0x9e>
}
 800e7ac:	bf00      	nop
 800e7ae:	3718      	adds	r7, #24
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	08011730 	.word	0x08011730
 800e7b8:	0800ed7d 	.word	0x0800ed7d
 800e7bc:	20000a60 	.word	0x20000a60
 800e7c0:	20000a5c 	.word	0x20000a5c
 800e7c4:	20000a48 	.word	0x20000a48
 800e7c8:	20000a40 	.word	0x20000a40

0800e7cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e7d0:	4b04      	ldr	r3, [pc, #16]	; (800e7e4 <vTaskSuspendAll+0x18>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	4a03      	ldr	r2, [pc, #12]	; (800e7e4 <vTaskSuspendAll+0x18>)
 800e7d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e7da:	bf00      	nop
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr
 800e7e4:	20000a64 	.word	0x20000a64

0800e7e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e7f6:	4b41      	ldr	r3, [pc, #260]	; (800e8fc <xTaskResumeAll+0x114>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d10a      	bne.n	800e814 <xTaskResumeAll+0x2c>
	__asm volatile
 800e7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e802:	f383 8811 	msr	BASEPRI, r3
 800e806:	f3bf 8f6f 	isb	sy
 800e80a:	f3bf 8f4f 	dsb	sy
 800e80e:	603b      	str	r3, [r7, #0]
}
 800e810:	bf00      	nop
 800e812:	e7fe      	b.n	800e812 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e814:	f000 fed6 	bl	800f5c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e818:	4b38      	ldr	r3, [pc, #224]	; (800e8fc <xTaskResumeAll+0x114>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	4a37      	ldr	r2, [pc, #220]	; (800e8fc <xTaskResumeAll+0x114>)
 800e820:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e822:	4b36      	ldr	r3, [pc, #216]	; (800e8fc <xTaskResumeAll+0x114>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d161      	bne.n	800e8ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e82a:	4b35      	ldr	r3, [pc, #212]	; (800e900 <xTaskResumeAll+0x118>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d05d      	beq.n	800e8ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e832:	e02e      	b.n	800e892 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e834:	4b33      	ldr	r3, [pc, #204]	; (800e904 <xTaskResumeAll+0x11c>)
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	3318      	adds	r3, #24
 800e840:	4618      	mov	r0, r3
 800e842:	f7ff f802 	bl	800d84a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	3304      	adds	r3, #4
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe fffd 	bl	800d84a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e854:	2201      	movs	r2, #1
 800e856:	409a      	lsls	r2, r3
 800e858:	4b2b      	ldr	r3, [pc, #172]	; (800e908 <xTaskResumeAll+0x120>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	4a2a      	ldr	r2, [pc, #168]	; (800e908 <xTaskResumeAll+0x120>)
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e866:	4613      	mov	r3, r2
 800e868:	009b      	lsls	r3, r3, #2
 800e86a:	4413      	add	r3, r2
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	4a27      	ldr	r2, [pc, #156]	; (800e90c <xTaskResumeAll+0x124>)
 800e870:	441a      	add	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	3304      	adds	r3, #4
 800e876:	4619      	mov	r1, r3
 800e878:	4610      	mov	r0, r2
 800e87a:	f7fe ff89 	bl	800d790 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e882:	4b23      	ldr	r3, [pc, #140]	; (800e910 <xTaskResumeAll+0x128>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e888:	429a      	cmp	r2, r3
 800e88a:	d302      	bcc.n	800e892 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e88c:	4b21      	ldr	r3, [pc, #132]	; (800e914 <xTaskResumeAll+0x12c>)
 800e88e:	2201      	movs	r2, #1
 800e890:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e892:	4b1c      	ldr	r3, [pc, #112]	; (800e904 <xTaskResumeAll+0x11c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1cc      	bne.n	800e834 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e8a0:	f000 fb22 	bl	800eee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e8a4:	4b1c      	ldr	r3, [pc, #112]	; (800e918 <xTaskResumeAll+0x130>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d010      	beq.n	800e8d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e8b0:	f000 f846 	bl	800e940 <xTaskIncrementTick>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e8ba:	4b16      	ldr	r3, [pc, #88]	; (800e914 <xTaskResumeAll+0x12c>)
 800e8bc:	2201      	movs	r2, #1
 800e8be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1f1      	bne.n	800e8b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e8cc:	4b12      	ldr	r3, [pc, #72]	; (800e918 <xTaskResumeAll+0x130>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e8d2:	4b10      	ldr	r3, [pc, #64]	; (800e914 <xTaskResumeAll+0x12c>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d009      	beq.n	800e8ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e8de:	4b0f      	ldr	r3, [pc, #60]	; (800e91c <xTaskResumeAll+0x134>)
 800e8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8e4:	601a      	str	r2, [r3, #0]
 800e8e6:	f3bf 8f4f 	dsb	sy
 800e8ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8ee:	f000 fe99 	bl	800f624 <vPortExitCritical>

	return xAlreadyYielded;
 800e8f2:	68bb      	ldr	r3, [r7, #8]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20000a64 	.word	0x20000a64
 800e900:	20000a3c 	.word	0x20000a3c
 800e904:	200009fc 	.word	0x200009fc
 800e908:	20000a44 	.word	0x20000a44
 800e90c:	20000940 	.word	0x20000940
 800e910:	2000093c 	.word	0x2000093c
 800e914:	20000a50 	.word	0x20000a50
 800e918:	20000a4c 	.word	0x20000a4c
 800e91c:	e000ed04 	.word	0xe000ed04

0800e920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e926:	4b05      	ldr	r3, [pc, #20]	; (800e93c <xTaskGetTickCount+0x1c>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e92c:	687b      	ldr	r3, [r7, #4]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	20000a40 	.word	0x20000a40

0800e940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b086      	sub	sp, #24
 800e944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e946:	2300      	movs	r3, #0
 800e948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e94a:	4b4e      	ldr	r3, [pc, #312]	; (800ea84 <xTaskIncrementTick+0x144>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	f040 808e 	bne.w	800ea70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e954:	4b4c      	ldr	r3, [pc, #304]	; (800ea88 <xTaskIncrementTick+0x148>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3301      	adds	r3, #1
 800e95a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e95c:	4a4a      	ldr	r2, [pc, #296]	; (800ea88 <xTaskIncrementTick+0x148>)
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d120      	bne.n	800e9aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e968:	4b48      	ldr	r3, [pc, #288]	; (800ea8c <xTaskIncrementTick+0x14c>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <xTaskIncrementTick+0x48>
	__asm volatile
 800e972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	603b      	str	r3, [r7, #0]
}
 800e984:	bf00      	nop
 800e986:	e7fe      	b.n	800e986 <xTaskIncrementTick+0x46>
 800e988:	4b40      	ldr	r3, [pc, #256]	; (800ea8c <xTaskIncrementTick+0x14c>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	60fb      	str	r3, [r7, #12]
 800e98e:	4b40      	ldr	r3, [pc, #256]	; (800ea90 <xTaskIncrementTick+0x150>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a3e      	ldr	r2, [pc, #248]	; (800ea8c <xTaskIncrementTick+0x14c>)
 800e994:	6013      	str	r3, [r2, #0]
 800e996:	4a3e      	ldr	r2, [pc, #248]	; (800ea90 <xTaskIncrementTick+0x150>)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	4b3d      	ldr	r3, [pc, #244]	; (800ea94 <xTaskIncrementTick+0x154>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	4a3c      	ldr	r2, [pc, #240]	; (800ea94 <xTaskIncrementTick+0x154>)
 800e9a4:	6013      	str	r3, [r2, #0]
 800e9a6:	f000 fa9f 	bl	800eee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e9aa:	4b3b      	ldr	r3, [pc, #236]	; (800ea98 <xTaskIncrementTick+0x158>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d348      	bcc.n	800ea46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9b4:	4b35      	ldr	r3, [pc, #212]	; (800ea8c <xTaskIncrementTick+0x14c>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d104      	bne.n	800e9c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9be:	4b36      	ldr	r3, [pc, #216]	; (800ea98 <xTaskIncrementTick+0x158>)
 800e9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9c4:	601a      	str	r2, [r3, #0]
					break;
 800e9c6:	e03e      	b.n	800ea46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c8:	4b30      	ldr	r3, [pc, #192]	; (800ea8c <xTaskIncrementTick+0x14c>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e9d8:	693a      	ldr	r2, [r7, #16]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d203      	bcs.n	800e9e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e9e0:	4a2d      	ldr	r2, [pc, #180]	; (800ea98 <xTaskIncrementTick+0x158>)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e9e6:	e02e      	b.n	800ea46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	3304      	adds	r3, #4
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7fe ff2c 	bl	800d84a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d004      	beq.n	800ea04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	3318      	adds	r3, #24
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe ff23 	bl	800d84a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea08:	2201      	movs	r2, #1
 800ea0a:	409a      	lsls	r2, r3
 800ea0c:	4b23      	ldr	r3, [pc, #140]	; (800ea9c <xTaskIncrementTick+0x15c>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	4a22      	ldr	r2, [pc, #136]	; (800ea9c <xTaskIncrementTick+0x15c>)
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4a1f      	ldr	r2, [pc, #124]	; (800eaa0 <xTaskIncrementTick+0x160>)
 800ea24:	441a      	add	r2, r3
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4610      	mov	r0, r2
 800ea2e:	f7fe feaf 	bl	800d790 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea36:	4b1b      	ldr	r3, [pc, #108]	; (800eaa4 <xTaskIncrementTick+0x164>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d3b9      	bcc.n	800e9b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ea40:	2301      	movs	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea44:	e7b6      	b.n	800e9b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea46:	4b17      	ldr	r3, [pc, #92]	; (800eaa4 <xTaskIncrementTick+0x164>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea4c:	4914      	ldr	r1, [pc, #80]	; (800eaa0 <xTaskIncrementTick+0x160>)
 800ea4e:	4613      	mov	r3, r2
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	4413      	add	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	440b      	add	r3, r1
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d901      	bls.n	800ea62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ea62:	4b11      	ldr	r3, [pc, #68]	; (800eaa8 <xTaskIncrementTick+0x168>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d007      	beq.n	800ea7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	e004      	b.n	800ea7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ea70:	4b0e      	ldr	r3, [pc, #56]	; (800eaac <xTaskIncrementTick+0x16c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3301      	adds	r3, #1
 800ea76:	4a0d      	ldr	r2, [pc, #52]	; (800eaac <xTaskIncrementTick+0x16c>)
 800ea78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ea7a:	697b      	ldr	r3, [r7, #20]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3718      	adds	r7, #24
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	20000a64 	.word	0x20000a64
 800ea88:	20000a40 	.word	0x20000a40
 800ea8c:	200009f4 	.word	0x200009f4
 800ea90:	200009f8 	.word	0x200009f8
 800ea94:	20000a54 	.word	0x20000a54
 800ea98:	20000a5c 	.word	0x20000a5c
 800ea9c:	20000a44 	.word	0x20000a44
 800eaa0:	20000940 	.word	0x20000940
 800eaa4:	2000093c 	.word	0x2000093c
 800eaa8:	20000a50 	.word	0x20000a50
 800eaac:	20000a4c 	.word	0x20000a4c

0800eab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eab0:	b480      	push	{r7}
 800eab2:	b087      	sub	sp, #28
 800eab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eab6:	4b27      	ldr	r3, [pc, #156]	; (800eb54 <vTaskSwitchContext+0xa4>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eabe:	4b26      	ldr	r3, [pc, #152]	; (800eb58 <vTaskSwitchContext+0xa8>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eac4:	e03f      	b.n	800eb46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800eac6:	4b24      	ldr	r3, [pc, #144]	; (800eb58 <vTaskSwitchContext+0xa8>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eacc:	4b23      	ldr	r3, [pc, #140]	; (800eb5c <vTaskSwitchContext+0xac>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	fab3 f383 	clz	r3, r3
 800ead8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800eada:	7afb      	ldrb	r3, [r7, #11]
 800eadc:	f1c3 031f 	rsb	r3, r3, #31
 800eae0:	617b      	str	r3, [r7, #20]
 800eae2:	491f      	ldr	r1, [pc, #124]	; (800eb60 <vTaskSwitchContext+0xb0>)
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	4613      	mov	r3, r2
 800eae8:	009b      	lsls	r3, r3, #2
 800eaea:	4413      	add	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	440b      	add	r3, r1
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d10a      	bne.n	800eb0c <vTaskSwitchContext+0x5c>
	__asm volatile
 800eaf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eafa:	f383 8811 	msr	BASEPRI, r3
 800eafe:	f3bf 8f6f 	isb	sy
 800eb02:	f3bf 8f4f 	dsb	sy
 800eb06:	607b      	str	r3, [r7, #4]
}
 800eb08:	bf00      	nop
 800eb0a:	e7fe      	b.n	800eb0a <vTaskSwitchContext+0x5a>
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	4613      	mov	r3, r2
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4a12      	ldr	r2, [pc, #72]	; (800eb60 <vTaskSwitchContext+0xb0>)
 800eb18:	4413      	add	r3, r2
 800eb1a:	613b      	str	r3, [r7, #16]
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	605a      	str	r2, [r3, #4]
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	685a      	ldr	r2, [r3, #4]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	3308      	adds	r3, #8
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d104      	bne.n	800eb3c <vTaskSwitchContext+0x8c>
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	605a      	str	r2, [r3, #4]
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	685b      	ldr	r3, [r3, #4]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	4a08      	ldr	r2, [pc, #32]	; (800eb64 <vTaskSwitchContext+0xb4>)
 800eb44:	6013      	str	r3, [r2, #0]
}
 800eb46:	bf00      	nop
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	20000a64 	.word	0x20000a64
 800eb58:	20000a50 	.word	0x20000a50
 800eb5c:	20000a44 	.word	0x20000a44
 800eb60:	20000940 	.word	0x20000940
 800eb64:	2000093c 	.word	0x2000093c

0800eb68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d10a      	bne.n	800eb8e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	60fb      	str	r3, [r7, #12]
}
 800eb8a:	bf00      	nop
 800eb8c:	e7fe      	b.n	800eb8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800eb8e:	4b07      	ldr	r3, [pc, #28]	; (800ebac <vTaskPlaceOnEventList+0x44>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3318      	adds	r3, #24
 800eb94:	4619      	mov	r1, r3
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7fe fe1e 	bl	800d7d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800eb9c:	2101      	movs	r1, #1
 800eb9e:	6838      	ldr	r0, [r7, #0]
 800eba0:	f000 fb7e 	bl	800f2a0 <prvAddCurrentTaskToDelayedList>
}
 800eba4:	bf00      	nop
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	2000093c 	.word	0x2000093c

0800ebb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d10a      	bne.n	800ebdc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	60fb      	str	r3, [r7, #12]
}
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	3318      	adds	r3, #24
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fe fe32 	bl	800d84a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebe6:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <xTaskRemoveFromEventList+0xac>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d11c      	bne.n	800ec28 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	3304      	adds	r3, #4
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7fe fe29 	bl	800d84a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	409a      	lsls	r2, r3
 800ec00:	4b17      	ldr	r3, [pc, #92]	; (800ec60 <xTaskRemoveFromEventList+0xb0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	4a16      	ldr	r2, [pc, #88]	; (800ec60 <xTaskRemoveFromEventList+0xb0>)
 800ec08:	6013      	str	r3, [r2, #0]
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec0e:	4613      	mov	r3, r2
 800ec10:	009b      	lsls	r3, r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	4a13      	ldr	r2, [pc, #76]	; (800ec64 <xTaskRemoveFromEventList+0xb4>)
 800ec18:	441a      	add	r2, r3
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	4619      	mov	r1, r3
 800ec20:	4610      	mov	r0, r2
 800ec22:	f7fe fdb5 	bl	800d790 <vListInsertEnd>
 800ec26:	e005      	b.n	800ec34 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	3318      	adds	r3, #24
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	480e      	ldr	r0, [pc, #56]	; (800ec68 <xTaskRemoveFromEventList+0xb8>)
 800ec30:	f7fe fdae 	bl	800d790 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec38:	4b0c      	ldr	r3, [pc, #48]	; (800ec6c <xTaskRemoveFromEventList+0xbc>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d905      	bls.n	800ec4e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ec42:	2301      	movs	r3, #1
 800ec44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ec46:	4b0a      	ldr	r3, [pc, #40]	; (800ec70 <xTaskRemoveFromEventList+0xc0>)
 800ec48:	2201      	movs	r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	e001      	b.n	800ec52 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ec52:	697b      	ldr	r3, [r7, #20]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3718      	adds	r7, #24
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	20000a64 	.word	0x20000a64
 800ec60:	20000a44 	.word	0x20000a44
 800ec64:	20000940 	.word	0x20000940
 800ec68:	200009fc 	.word	0x200009fc
 800ec6c:	2000093c 	.word	0x2000093c
 800ec70:	20000a50 	.word	0x20000a50

0800ec74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ec7c:	4b06      	ldr	r3, [pc, #24]	; (800ec98 <vTaskInternalSetTimeOutState+0x24>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ec84:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <vTaskInternalSetTimeOutState+0x28>)
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	605a      	str	r2, [r3, #4]
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr
 800ec98:	20000a54 	.word	0x20000a54
 800ec9c:	20000a40 	.word	0x20000a40

0800eca0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b088      	sub	sp, #32
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
 800eca8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d10a      	bne.n	800ecc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ecb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	613b      	str	r3, [r7, #16]
}
 800ecc2:	bf00      	nop
 800ecc4:	e7fe      	b.n	800ecc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd0:	f383 8811 	msr	BASEPRI, r3
 800ecd4:	f3bf 8f6f 	isb	sy
 800ecd8:	f3bf 8f4f 	dsb	sy
 800ecdc:	60fb      	str	r3, [r7, #12]
}
 800ecde:	bf00      	nop
 800ece0:	e7fe      	b.n	800ece0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ece2:	f000 fc6f 	bl	800f5c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ece6:	4b1d      	ldr	r3, [pc, #116]	; (800ed5c <xTaskCheckForTimeOut+0xbc>)
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	69ba      	ldr	r2, [r7, #24]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecfe:	d102      	bne.n	800ed06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	61fb      	str	r3, [r7, #28]
 800ed04:	e023      	b.n	800ed4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	4b15      	ldr	r3, [pc, #84]	; (800ed60 <xTaskCheckForTimeOut+0xc0>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d007      	beq.n	800ed22 <xTaskCheckForTimeOut+0x82>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	69ba      	ldr	r2, [r7, #24]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d302      	bcc.n	800ed22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	61fb      	str	r3, [r7, #28]
 800ed20:	e015      	b.n	800ed4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	697a      	ldr	r2, [r7, #20]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d20b      	bcs.n	800ed44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	1ad2      	subs	r2, r2, r3
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7ff ff9b 	bl	800ec74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	61fb      	str	r3, [r7, #28]
 800ed42:	e004      	b.n	800ed4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ed4e:	f000 fc69 	bl	800f624 <vPortExitCritical>

	return xReturn;
 800ed52:	69fb      	ldr	r3, [r7, #28]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3720      	adds	r7, #32
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	20000a40 	.word	0x20000a40
 800ed60:	20000a54 	.word	0x20000a54

0800ed64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ed64:	b480      	push	{r7}
 800ed66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ed68:	4b03      	ldr	r3, [pc, #12]	; (800ed78 <vTaskMissedYield+0x14>)
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	601a      	str	r2, [r3, #0]
}
 800ed6e:	bf00      	nop
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr
 800ed78:	20000a50 	.word	0x20000a50

0800ed7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ed84:	f000 f852 	bl	800ee2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ed88:	4b06      	ldr	r3, [pc, #24]	; (800eda4 <prvIdleTask+0x28>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d9f9      	bls.n	800ed84 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ed90:	4b05      	ldr	r3, [pc, #20]	; (800eda8 <prvIdleTask+0x2c>)
 800ed92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed96:	601a      	str	r2, [r3, #0]
 800ed98:	f3bf 8f4f 	dsb	sy
 800ed9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eda0:	e7f0      	b.n	800ed84 <prvIdleTask+0x8>
 800eda2:	bf00      	nop
 800eda4:	20000940 	.word	0x20000940
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edb2:	2300      	movs	r3, #0
 800edb4:	607b      	str	r3, [r7, #4]
 800edb6:	e00c      	b.n	800edd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	4613      	mov	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	4a12      	ldr	r2, [pc, #72]	; (800ee0c <prvInitialiseTaskLists+0x60>)
 800edc4:	4413      	add	r3, r2
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7fe fcb5 	bl	800d736 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3301      	adds	r3, #1
 800edd0:	607b      	str	r3, [r7, #4]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b06      	cmp	r3, #6
 800edd6:	d9ef      	bls.n	800edb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800edd8:	480d      	ldr	r0, [pc, #52]	; (800ee10 <prvInitialiseTaskLists+0x64>)
 800edda:	f7fe fcac 	bl	800d736 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800edde:	480d      	ldr	r0, [pc, #52]	; (800ee14 <prvInitialiseTaskLists+0x68>)
 800ede0:	f7fe fca9 	bl	800d736 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ede4:	480c      	ldr	r0, [pc, #48]	; (800ee18 <prvInitialiseTaskLists+0x6c>)
 800ede6:	f7fe fca6 	bl	800d736 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800edea:	480c      	ldr	r0, [pc, #48]	; (800ee1c <prvInitialiseTaskLists+0x70>)
 800edec:	f7fe fca3 	bl	800d736 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800edf0:	480b      	ldr	r0, [pc, #44]	; (800ee20 <prvInitialiseTaskLists+0x74>)
 800edf2:	f7fe fca0 	bl	800d736 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800edf6:	4b0b      	ldr	r3, [pc, #44]	; (800ee24 <prvInitialiseTaskLists+0x78>)
 800edf8:	4a05      	ldr	r2, [pc, #20]	; (800ee10 <prvInitialiseTaskLists+0x64>)
 800edfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <prvInitialiseTaskLists+0x7c>)
 800edfe:	4a05      	ldr	r2, [pc, #20]	; (800ee14 <prvInitialiseTaskLists+0x68>)
 800ee00:	601a      	str	r2, [r3, #0]
}
 800ee02:	bf00      	nop
 800ee04:	3708      	adds	r7, #8
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20000940 	.word	0x20000940
 800ee10:	200009cc 	.word	0x200009cc
 800ee14:	200009e0 	.word	0x200009e0
 800ee18:	200009fc 	.word	0x200009fc
 800ee1c:	20000a10 	.word	0x20000a10
 800ee20:	20000a28 	.word	0x20000a28
 800ee24:	200009f4 	.word	0x200009f4
 800ee28:	200009f8 	.word	0x200009f8

0800ee2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee32:	e019      	b.n	800ee68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ee34:	f000 fbc6 	bl	800f5c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee38:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <prvCheckTasksWaitingTermination+0x50>)
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3304      	adds	r3, #4
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe fd00 	bl	800d84a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	; (800ee80 <prvCheckTasksWaitingTermination+0x54>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	4a0b      	ldr	r2, [pc, #44]	; (800ee80 <prvCheckTasksWaitingTermination+0x54>)
 800ee52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ee54:	4b0b      	ldr	r3, [pc, #44]	; (800ee84 <prvCheckTasksWaitingTermination+0x58>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	4a0a      	ldr	r2, [pc, #40]	; (800ee84 <prvCheckTasksWaitingTermination+0x58>)
 800ee5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ee5e:	f000 fbe1 	bl	800f624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f000 f810 	bl	800ee88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ee68:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <prvCheckTasksWaitingTermination+0x58>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1e1      	bne.n	800ee34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ee70:	bf00      	nop
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	20000a10 	.word	0x20000a10
 800ee80:	20000a3c 	.word	0x20000a3c
 800ee84:	20000a24 	.word	0x20000a24

0800ee88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b084      	sub	sp, #16
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d108      	bne.n	800eeac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 fd7e 	bl	800f9a0 <vPortFree>
				vPortFree( pxTCB );
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 fd7b 	bl	800f9a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eeaa:	e018      	b.n	800eede <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d103      	bne.n	800eebe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fd72 	bl	800f9a0 <vPortFree>
	}
 800eebc:	e00f      	b.n	800eede <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d00a      	beq.n	800eede <prvDeleteTCB+0x56>
	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	60fb      	str	r3, [r7, #12]
}
 800eeda:	bf00      	nop
 800eedc:	e7fe      	b.n	800eedc <prvDeleteTCB+0x54>
	}
 800eede:	bf00      	nop
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eee8:	b480      	push	{r7}
 800eeea:	b083      	sub	sp, #12
 800eeec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeee:	4b0c      	ldr	r3, [pc, #48]	; (800ef20 <prvResetNextTaskUnblockTime+0x38>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d104      	bne.n	800ef02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eef8:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <prvResetNextTaskUnblockTime+0x3c>)
 800eefa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eefe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ef00:	e008      	b.n	800ef14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef02:	4b07      	ldr	r3, [pc, #28]	; (800ef20 <prvResetNextTaskUnblockTime+0x38>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	68db      	ldr	r3, [r3, #12]
 800ef0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	4a04      	ldr	r2, [pc, #16]	; (800ef24 <prvResetNextTaskUnblockTime+0x3c>)
 800ef12:	6013      	str	r3, [r2, #0]
}
 800ef14:	bf00      	nop
 800ef16:	370c      	adds	r7, #12
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1e:	4770      	bx	lr
 800ef20:	200009f4 	.word	0x200009f4
 800ef24:	20000a5c 	.word	0x20000a5c

0800ef28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ef28:	b480      	push	{r7}
 800ef2a:	b083      	sub	sp, #12
 800ef2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ef2e:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <xTaskGetSchedulerState+0x34>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d102      	bne.n	800ef3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ef36:	2301      	movs	r3, #1
 800ef38:	607b      	str	r3, [r7, #4]
 800ef3a:	e008      	b.n	800ef4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef3c:	4b08      	ldr	r3, [pc, #32]	; (800ef60 <xTaskGetSchedulerState+0x38>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d102      	bne.n	800ef4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ef44:	2302      	movs	r3, #2
 800ef46:	607b      	str	r3, [r7, #4]
 800ef48:	e001      	b.n	800ef4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ef4e:	687b      	ldr	r3, [r7, #4]
	}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr
 800ef5c:	20000a48 	.word	0x20000a48
 800ef60:	20000a64 	.word	0x20000a64

0800ef64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ef70:	2300      	movs	r3, #0
 800ef72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d05e      	beq.n	800f038 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef7e:	4b31      	ldr	r3, [pc, #196]	; (800f044 <xTaskPriorityInherit+0xe0>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d24e      	bcs.n	800f026 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	699b      	ldr	r3, [r3, #24]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	db06      	blt.n	800ef9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef90:	4b2c      	ldr	r3, [pc, #176]	; (800f044 <xTaskPriorityInherit+0xe0>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef96:	f1c3 0207 	rsb	r2, r3, #7
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	6959      	ldr	r1, [r3, #20]
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa6:	4613      	mov	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	4413      	add	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4a26      	ldr	r2, [pc, #152]	; (800f048 <xTaskPriorityInherit+0xe4>)
 800efb0:	4413      	add	r3, r2
 800efb2:	4299      	cmp	r1, r3
 800efb4:	d12f      	bne.n	800f016 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	3304      	adds	r3, #4
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe fc45 	bl	800d84a <uxListRemove>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d10a      	bne.n	800efdc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efca:	2201      	movs	r2, #1
 800efcc:	fa02 f303 	lsl.w	r3, r2, r3
 800efd0:	43da      	mvns	r2, r3
 800efd2:	4b1e      	ldr	r3, [pc, #120]	; (800f04c <xTaskPriorityInherit+0xe8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4013      	ands	r3, r2
 800efd8:	4a1c      	ldr	r2, [pc, #112]	; (800f04c <xTaskPriorityInherit+0xe8>)
 800efda:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800efdc:	4b19      	ldr	r3, [pc, #100]	; (800f044 <xTaskPriorityInherit+0xe0>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efea:	2201      	movs	r2, #1
 800efec:	409a      	lsls	r2, r3
 800efee:	4b17      	ldr	r3, [pc, #92]	; (800f04c <xTaskPriorityInherit+0xe8>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4313      	orrs	r3, r2
 800eff4:	4a15      	ldr	r2, [pc, #84]	; (800f04c <xTaskPriorityInherit+0xe8>)
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4a10      	ldr	r2, [pc, #64]	; (800f048 <xTaskPriorityInherit+0xe4>)
 800f006:	441a      	add	r2, r3
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7fe fbbe 	bl	800d790 <vListInsertEnd>
 800f014:	e004      	b.n	800f020 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f016:	4b0b      	ldr	r3, [pc, #44]	; (800f044 <xTaskPriorityInherit+0xe0>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f020:	2301      	movs	r3, #1
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	e008      	b.n	800f038 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f02a:	4b06      	ldr	r3, [pc, #24]	; (800f044 <xTaskPriorityInherit+0xe0>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f030:	429a      	cmp	r2, r3
 800f032:	d201      	bcs.n	800f038 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f034:	2301      	movs	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f038:	68fb      	ldr	r3, [r7, #12]
	}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	2000093c 	.word	0x2000093c
 800f048:	20000940 	.word	0x20000940
 800f04c:	20000a44 	.word	0x20000a44

0800f050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f05c:	2300      	movs	r3, #0
 800f05e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d06e      	beq.n	800f144 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f066:	4b3a      	ldr	r3, [pc, #232]	; (800f150 <xTaskPriorityDisinherit+0x100>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	693a      	ldr	r2, [r7, #16]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d00a      	beq.n	800f086 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f074:	f383 8811 	msr	BASEPRI, r3
 800f078:	f3bf 8f6f 	isb	sy
 800f07c:	f3bf 8f4f 	dsb	sy
 800f080:	60fb      	str	r3, [r7, #12]
}
 800f082:	bf00      	nop
 800f084:	e7fe      	b.n	800f084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d10a      	bne.n	800f0a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f092:	f383 8811 	msr	BASEPRI, r3
 800f096:	f3bf 8f6f 	isb	sy
 800f09a:	f3bf 8f4f 	dsb	sy
 800f09e:	60bb      	str	r3, [r7, #8]
}
 800f0a0:	bf00      	nop
 800f0a2:	e7fe      	b.n	800f0a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0a8:	1e5a      	subs	r2, r3, #1
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d044      	beq.n	800f144 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d140      	bne.n	800f144 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe fbbf 	bl	800d84a <uxListRemove>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d115      	bne.n	800f0fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0d6:	491f      	ldr	r1, [pc, #124]	; (800f154 <xTaskPriorityDisinherit+0x104>)
 800f0d8:	4613      	mov	r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	4413      	add	r3, r2
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	440b      	add	r3, r1
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xTaskPriorityDisinherit+0xae>
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f0f2:	43da      	mvns	r2, r3
 800f0f4:	4b18      	ldr	r3, [pc, #96]	; (800f158 <xTaskPriorityDisinherit+0x108>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	4a17      	ldr	r2, [pc, #92]	; (800f158 <xTaskPriorityDisinherit+0x108>)
 800f0fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10a:	f1c3 0207 	rsb	r2, r3, #7
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f116:	2201      	movs	r2, #1
 800f118:	409a      	lsls	r2, r3
 800f11a:	4b0f      	ldr	r3, [pc, #60]	; (800f158 <xTaskPriorityDisinherit+0x108>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4313      	orrs	r3, r2
 800f120:	4a0d      	ldr	r2, [pc, #52]	; (800f158 <xTaskPriorityDisinherit+0x108>)
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f128:	4613      	mov	r3, r2
 800f12a:	009b      	lsls	r3, r3, #2
 800f12c:	4413      	add	r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4a08      	ldr	r2, [pc, #32]	; (800f154 <xTaskPriorityDisinherit+0x104>)
 800f132:	441a      	add	r2, r3
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	3304      	adds	r3, #4
 800f138:	4619      	mov	r1, r3
 800f13a:	4610      	mov	r0, r2
 800f13c:	f7fe fb28 	bl	800d790 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f140:	2301      	movs	r3, #1
 800f142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f144:	697b      	ldr	r3, [r7, #20]
	}
 800f146:	4618      	mov	r0, r3
 800f148:	3718      	adds	r7, #24
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	2000093c 	.word	0x2000093c
 800f154:	20000940 	.word	0x20000940
 800f158:	20000a44 	.word	0x20000a44

0800f15c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b088      	sub	sp, #32
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f16a:	2301      	movs	r3, #1
 800f16c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d077      	beq.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10a      	bne.n	800f192 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f180:	f383 8811 	msr	BASEPRI, r3
 800f184:	f3bf 8f6f 	isb	sy
 800f188:	f3bf 8f4f 	dsb	sy
 800f18c:	60fb      	str	r3, [r7, #12]
}
 800f18e:	bf00      	nop
 800f190:	e7fe      	b.n	800f190 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d902      	bls.n	800f1a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	e002      	b.n	800f1a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f1a2:	69bb      	ldr	r3, [r7, #24]
 800f1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1ac:	69fa      	ldr	r2, [r7, #28]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d058      	beq.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d153      	bne.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f1bc:	4b2b      	ldr	r3, [pc, #172]	; (800f26c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d10a      	bne.n	800f1dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	60bb      	str	r3, [r7, #8]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f1dc:	69bb      	ldr	r3, [r7, #24]
 800f1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	69fa      	ldr	r2, [r7, #28]
 800f1e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	db04      	blt.n	800f1fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	f1c3 0207 	rsb	r2, r3, #7
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	6959      	ldr	r1, [r3, #20]
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	4613      	mov	r3, r2
 800f202:	009b      	lsls	r3, r3, #2
 800f204:	4413      	add	r3, r2
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	4a19      	ldr	r2, [pc, #100]	; (800f270 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f20a:	4413      	add	r3, r2
 800f20c:	4299      	cmp	r1, r3
 800f20e:	d129      	bne.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	3304      	adds	r3, #4
 800f214:	4618      	mov	r0, r3
 800f216:	f7fe fb18 	bl	800d84a <uxListRemove>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10a      	bne.n	800f236 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f224:	2201      	movs	r2, #1
 800f226:	fa02 f303 	lsl.w	r3, r2, r3
 800f22a:	43da      	mvns	r2, r3
 800f22c:	4b11      	ldr	r3, [pc, #68]	; (800f274 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4013      	ands	r3, r2
 800f232:	4a10      	ldr	r2, [pc, #64]	; (800f274 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f234:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23a:	2201      	movs	r2, #1
 800f23c:	409a      	lsls	r2, r3
 800f23e:	4b0d      	ldr	r3, [pc, #52]	; (800f274 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4313      	orrs	r3, r2
 800f244:	4a0b      	ldr	r2, [pc, #44]	; (800f274 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f24c:	4613      	mov	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4a06      	ldr	r2, [pc, #24]	; (800f270 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f256:	441a      	add	r2, r3
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	3304      	adds	r3, #4
 800f25c:	4619      	mov	r1, r3
 800f25e:	4610      	mov	r0, r2
 800f260:	f7fe fa96 	bl	800d790 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f264:	bf00      	nop
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	2000093c 	.word	0x2000093c
 800f270:	20000940 	.word	0x20000940
 800f274:	20000a44 	.word	0x20000a44

0800f278 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f278:	b480      	push	{r7}
 800f27a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f27c:	4b07      	ldr	r3, [pc, #28]	; (800f29c <pvTaskIncrementMutexHeldCount+0x24>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d004      	beq.n	800f28e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f284:	4b05      	ldr	r3, [pc, #20]	; (800f29c <pvTaskIncrementMutexHeldCount+0x24>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f28a:	3201      	adds	r2, #1
 800f28c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f28e:	4b03      	ldr	r3, [pc, #12]	; (800f29c <pvTaskIncrementMutexHeldCount+0x24>)
 800f290:	681b      	ldr	r3, [r3, #0]
	}
 800f292:	4618      	mov	r0, r3
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr
 800f29c:	2000093c 	.word	0x2000093c

0800f2a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f2aa:	4b29      	ldr	r3, [pc, #164]	; (800f350 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2b0:	4b28      	ldr	r3, [pc, #160]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fe fac7 	bl	800d84a <uxListRemove>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10b      	bne.n	800f2da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f2c2:	4b24      	ldr	r3, [pc, #144]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ce:	43da      	mvns	r2, r3
 800f2d0:	4b21      	ldr	r3, [pc, #132]	; (800f358 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	4a20      	ldr	r2, [pc, #128]	; (800f358 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f2d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2e0:	d10a      	bne.n	800f2f8 <prvAddCurrentTaskToDelayedList+0x58>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d007      	beq.n	800f2f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f2e8:	4b1a      	ldr	r3, [pc, #104]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	4619      	mov	r1, r3
 800f2f0:	481a      	ldr	r0, [pc, #104]	; (800f35c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f2f2:	f7fe fa4d 	bl	800d790 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f2f6:	e026      	b.n	800f346 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f2f8:	68fa      	ldr	r2, [r7, #12]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f300:	4b14      	ldr	r3, [pc, #80]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	68ba      	ldr	r2, [r7, #8]
 800f306:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f308:	68ba      	ldr	r2, [r7, #8]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d209      	bcs.n	800f324 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f310:	4b13      	ldr	r3, [pc, #76]	; (800f360 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	4b0f      	ldr	r3, [pc, #60]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	3304      	adds	r3, #4
 800f31a:	4619      	mov	r1, r3
 800f31c:	4610      	mov	r0, r2
 800f31e:	f7fe fa5b 	bl	800d7d8 <vListInsert>
}
 800f322:	e010      	b.n	800f346 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f324:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	4b0a      	ldr	r3, [pc, #40]	; (800f354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7fe fa51 	bl	800d7d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f336:	4b0c      	ldr	r3, [pc, #48]	; (800f368 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68ba      	ldr	r2, [r7, #8]
 800f33c:	429a      	cmp	r2, r3
 800f33e:	d202      	bcs.n	800f346 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f340:	4a09      	ldr	r2, [pc, #36]	; (800f368 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	6013      	str	r3, [r2, #0]
}
 800f346:	bf00      	nop
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	20000a40 	.word	0x20000a40
 800f354:	2000093c 	.word	0x2000093c
 800f358:	20000a44 	.word	0x20000a44
 800f35c:	20000a28 	.word	0x20000a28
 800f360:	200009f8 	.word	0x200009f8
 800f364:	200009f4 	.word	0x200009f4
 800f368:	20000a5c 	.word	0x20000a5c

0800f36c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	60b9      	str	r1, [r7, #8]
 800f376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	3b04      	subs	r3, #4
 800f37c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	3b04      	subs	r3, #4
 800f38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	f023 0201 	bic.w	r2, r3, #1
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	3b04      	subs	r3, #4
 800f39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f39c:	4a0c      	ldr	r2, [pc, #48]	; (800f3d0 <pxPortInitialiseStack+0x64>)
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	3b14      	subs	r3, #20
 800f3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	3b04      	subs	r3, #4
 800f3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f06f 0202 	mvn.w	r2, #2
 800f3ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3b20      	subs	r3, #32
 800f3c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	0800f3d5 	.word	0x0800f3d5

0800f3d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f3de:	4b12      	ldr	r3, [pc, #72]	; (800f428 <prvTaskExitError+0x54>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3e6:	d00a      	beq.n	800f3fe <prvTaskExitError+0x2a>
	__asm volatile
 800f3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ec:	f383 8811 	msr	BASEPRI, r3
 800f3f0:	f3bf 8f6f 	isb	sy
 800f3f4:	f3bf 8f4f 	dsb	sy
 800f3f8:	60fb      	str	r3, [r7, #12]
}
 800f3fa:	bf00      	nop
 800f3fc:	e7fe      	b.n	800f3fc <prvTaskExitError+0x28>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	60bb      	str	r3, [r7, #8]
}
 800f410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f412:	bf00      	nop
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d0fc      	beq.n	800f414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f41a:	bf00      	nop
 800f41c:	bf00      	nop
 800f41e:	3714      	adds	r7, #20
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	20000030 	.word	0x20000030
 800f42c:	00000000 	.word	0x00000000

0800f430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f430:	4b07      	ldr	r3, [pc, #28]	; (800f450 <pxCurrentTCBConst2>)
 800f432:	6819      	ldr	r1, [r3, #0]
 800f434:	6808      	ldr	r0, [r1, #0]
 800f436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43a:	f380 8809 	msr	PSP, r0
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	f04f 0000 	mov.w	r0, #0
 800f446:	f380 8811 	msr	BASEPRI, r0
 800f44a:	4770      	bx	lr
 800f44c:	f3af 8000 	nop.w

0800f450 <pxCurrentTCBConst2>:
 800f450:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f454:	bf00      	nop
 800f456:	bf00      	nop

0800f458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f458:	4808      	ldr	r0, [pc, #32]	; (800f47c <prvPortStartFirstTask+0x24>)
 800f45a:	6800      	ldr	r0, [r0, #0]
 800f45c:	6800      	ldr	r0, [r0, #0]
 800f45e:	f380 8808 	msr	MSP, r0
 800f462:	f04f 0000 	mov.w	r0, #0
 800f466:	f380 8814 	msr	CONTROL, r0
 800f46a:	b662      	cpsie	i
 800f46c:	b661      	cpsie	f
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	df00      	svc	0
 800f478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f47a:	bf00      	nop
 800f47c:	e000ed08 	.word	0xe000ed08

0800f480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f486:	4b46      	ldr	r3, [pc, #280]	; (800f5a0 <xPortStartScheduler+0x120>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a46      	ldr	r2, [pc, #280]	; (800f5a4 <xPortStartScheduler+0x124>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d10a      	bne.n	800f4a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	613b      	str	r3, [r7, #16]
}
 800f4a2:	bf00      	nop
 800f4a4:	e7fe      	b.n	800f4a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f4a6:	4b3e      	ldr	r3, [pc, #248]	; (800f5a0 <xPortStartScheduler+0x120>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	4a3f      	ldr	r2, [pc, #252]	; (800f5a8 <xPortStartScheduler+0x128>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d10a      	bne.n	800f4c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b4:	f383 8811 	msr	BASEPRI, r3
 800f4b8:	f3bf 8f6f 	isb	sy
 800f4bc:	f3bf 8f4f 	dsb	sy
 800f4c0:	60fb      	str	r3, [r7, #12]
}
 800f4c2:	bf00      	nop
 800f4c4:	e7fe      	b.n	800f4c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f4c6:	4b39      	ldr	r3, [pc, #228]	; (800f5ac <xPortStartScheduler+0x12c>)
 800f4c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	22ff      	movs	r2, #255	; 0xff
 800f4d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f4e8:	b2da      	uxtb	r2, r3
 800f4ea:	4b31      	ldr	r3, [pc, #196]	; (800f5b0 <xPortStartScheduler+0x130>)
 800f4ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f4ee:	4b31      	ldr	r3, [pc, #196]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f4f0:	2207      	movs	r2, #7
 800f4f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4f4:	e009      	b.n	800f50a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f4f6:	4b2f      	ldr	r3, [pc, #188]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	4a2d      	ldr	r2, [pc, #180]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f4fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f500:	78fb      	ldrb	r3, [r7, #3]
 800f502:	b2db      	uxtb	r3, r3
 800f504:	005b      	lsls	r3, r3, #1
 800f506:	b2db      	uxtb	r3, r3
 800f508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f50a:	78fb      	ldrb	r3, [r7, #3]
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f512:	2b80      	cmp	r3, #128	; 0x80
 800f514:	d0ef      	beq.n	800f4f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f516:	4b27      	ldr	r3, [pc, #156]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f1c3 0307 	rsb	r3, r3, #7
 800f51e:	2b04      	cmp	r3, #4
 800f520:	d00a      	beq.n	800f538 <xPortStartScheduler+0xb8>
	__asm volatile
 800f522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f526:	f383 8811 	msr	BASEPRI, r3
 800f52a:	f3bf 8f6f 	isb	sy
 800f52e:	f3bf 8f4f 	dsb	sy
 800f532:	60bb      	str	r3, [r7, #8]
}
 800f534:	bf00      	nop
 800f536:	e7fe      	b.n	800f536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f538:	4b1e      	ldr	r3, [pc, #120]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	021b      	lsls	r3, r3, #8
 800f53e:	4a1d      	ldr	r2, [pc, #116]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f542:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f54a:	4a1a      	ldr	r2, [pc, #104]	; (800f5b4 <xPortStartScheduler+0x134>)
 800f54c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	b2da      	uxtb	r2, r3
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f556:	4b18      	ldr	r3, [pc, #96]	; (800f5b8 <xPortStartScheduler+0x138>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4a17      	ldr	r2, [pc, #92]	; (800f5b8 <xPortStartScheduler+0x138>)
 800f55c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f562:	4b15      	ldr	r3, [pc, #84]	; (800f5b8 <xPortStartScheduler+0x138>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a14      	ldr	r2, [pc, #80]	; (800f5b8 <xPortStartScheduler+0x138>)
 800f568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f56c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f56e:	f000 f8dd 	bl	800f72c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f572:	4b12      	ldr	r3, [pc, #72]	; (800f5bc <xPortStartScheduler+0x13c>)
 800f574:	2200      	movs	r2, #0
 800f576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f578:	f000 f8fc 	bl	800f774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f57c:	4b10      	ldr	r3, [pc, #64]	; (800f5c0 <xPortStartScheduler+0x140>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4a0f      	ldr	r2, [pc, #60]	; (800f5c0 <xPortStartScheduler+0x140>)
 800f582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f588:	f7ff ff66 	bl	800f458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f58c:	f7ff fa90 	bl	800eab0 <vTaskSwitchContext>
	prvTaskExitError();
 800f590:	f7ff ff20 	bl	800f3d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3718      	adds	r7, #24
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	e000ed00 	.word	0xe000ed00
 800f5a4:	410fc271 	.word	0x410fc271
 800f5a8:	410fc270 	.word	0x410fc270
 800f5ac:	e000e400 	.word	0xe000e400
 800f5b0:	20000a68 	.word	0x20000a68
 800f5b4:	20000a6c 	.word	0x20000a6c
 800f5b8:	e000ed20 	.word	0xe000ed20
 800f5bc:	20000030 	.word	0x20000030
 800f5c0:	e000ef34 	.word	0xe000ef34

0800f5c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
	__asm volatile
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	f383 8811 	msr	BASEPRI, r3
 800f5d2:	f3bf 8f6f 	isb	sy
 800f5d6:	f3bf 8f4f 	dsb	sy
 800f5da:	607b      	str	r3, [r7, #4]
}
 800f5dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f5de:	4b0f      	ldr	r3, [pc, #60]	; (800f61c <vPortEnterCritical+0x58>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	4a0d      	ldr	r2, [pc, #52]	; (800f61c <vPortEnterCritical+0x58>)
 800f5e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f5e8:	4b0c      	ldr	r3, [pc, #48]	; (800f61c <vPortEnterCritical+0x58>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d10f      	bne.n	800f610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5f0:	4b0b      	ldr	r3, [pc, #44]	; (800f620 <vPortEnterCritical+0x5c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d00a      	beq.n	800f610 <vPortEnterCritical+0x4c>
	__asm volatile
 800f5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	603b      	str	r3, [r7, #0]
}
 800f60c:	bf00      	nop
 800f60e:	e7fe      	b.n	800f60e <vPortEnterCritical+0x4a>
	}
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	20000030 	.word	0x20000030
 800f620:	e000ed04 	.word	0xe000ed04

0800f624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f62a:	4b12      	ldr	r3, [pc, #72]	; (800f674 <vPortExitCritical+0x50>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10a      	bne.n	800f648 <vPortExitCritical+0x24>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f636:	f383 8811 	msr	BASEPRI, r3
 800f63a:	f3bf 8f6f 	isb	sy
 800f63e:	f3bf 8f4f 	dsb	sy
 800f642:	607b      	str	r3, [r7, #4]
}
 800f644:	bf00      	nop
 800f646:	e7fe      	b.n	800f646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f648:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <vPortExitCritical+0x50>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	4a09      	ldr	r2, [pc, #36]	; (800f674 <vPortExitCritical+0x50>)
 800f650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f652:	4b08      	ldr	r3, [pc, #32]	; (800f674 <vPortExitCritical+0x50>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d105      	bne.n	800f666 <vPortExitCritical+0x42>
 800f65a:	2300      	movs	r3, #0
 800f65c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	f383 8811 	msr	BASEPRI, r3
}
 800f664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f666:	bf00      	nop
 800f668:	370c      	adds	r7, #12
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	20000030 	.word	0x20000030
	...

0800f680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f680:	f3ef 8009 	mrs	r0, PSP
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	4b15      	ldr	r3, [pc, #84]	; (800f6e0 <pxCurrentTCBConst>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	f01e 0f10 	tst.w	lr, #16
 800f690:	bf08      	it	eq
 800f692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f69a:	6010      	str	r0, [r2, #0]
 800f69c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f6a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f6a4:	f380 8811 	msr	BASEPRI, r0
 800f6a8:	f3bf 8f4f 	dsb	sy
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f7ff f9fe 	bl	800eab0 <vTaskSwitchContext>
 800f6b4:	f04f 0000 	mov.w	r0, #0
 800f6b8:	f380 8811 	msr	BASEPRI, r0
 800f6bc:	bc09      	pop	{r0, r3}
 800f6be:	6819      	ldr	r1, [r3, #0]
 800f6c0:	6808      	ldr	r0, [r1, #0]
 800f6c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6c6:	f01e 0f10 	tst.w	lr, #16
 800f6ca:	bf08      	it	eq
 800f6cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6d0:	f380 8809 	msr	PSP, r0
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	f3af 8000 	nop.w

0800f6e0 <pxCurrentTCBConst>:
 800f6e0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f6e4:	bf00      	nop
 800f6e6:	bf00      	nop

0800f6e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	607b      	str	r3, [r7, #4]
}
 800f700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f702:	f7ff f91d 	bl	800e940 <xTaskIncrementTick>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f70c:	4b06      	ldr	r3, [pc, #24]	; (800f728 <SysTick_Handler+0x40>)
 800f70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	2300      	movs	r3, #0
 800f716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	f383 8811 	msr	BASEPRI, r3
}
 800f71e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f720:	bf00      	nop
 800f722:	3708      	adds	r7, #8
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f72c:	b480      	push	{r7}
 800f72e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f730:	4b0b      	ldr	r3, [pc, #44]	; (800f760 <vPortSetupTimerInterrupt+0x34>)
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f736:	4b0b      	ldr	r3, [pc, #44]	; (800f764 <vPortSetupTimerInterrupt+0x38>)
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f73c:	4b0a      	ldr	r3, [pc, #40]	; (800f768 <vPortSetupTimerInterrupt+0x3c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	4a0a      	ldr	r2, [pc, #40]	; (800f76c <vPortSetupTimerInterrupt+0x40>)
 800f742:	fba2 2303 	umull	r2, r3, r2, r3
 800f746:	099b      	lsrs	r3, r3, #6
 800f748:	4a09      	ldr	r2, [pc, #36]	; (800f770 <vPortSetupTimerInterrupt+0x44>)
 800f74a:	3b01      	subs	r3, #1
 800f74c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f74e:	4b04      	ldr	r3, [pc, #16]	; (800f760 <vPortSetupTimerInterrupt+0x34>)
 800f750:	2207      	movs	r2, #7
 800f752:	601a      	str	r2, [r3, #0]
}
 800f754:	bf00      	nop
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	e000e010 	.word	0xe000e010
 800f764:	e000e018 	.word	0xe000e018
 800f768:	20000000 	.word	0x20000000
 800f76c:	10624dd3 	.word	0x10624dd3
 800f770:	e000e014 	.word	0xe000e014

0800f774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f784 <vPortEnableVFP+0x10>
 800f778:	6801      	ldr	r1, [r0, #0]
 800f77a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f77e:	6001      	str	r1, [r0, #0]
 800f780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f782:	bf00      	nop
 800f784:	e000ed88 	.word	0xe000ed88

0800f788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f78e:	f3ef 8305 	mrs	r3, IPSR
 800f792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2b0f      	cmp	r3, #15
 800f798:	d914      	bls.n	800f7c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f79a:	4a17      	ldr	r2, [pc, #92]	; (800f7f8 <vPortValidateInterruptPriority+0x70>)
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	4413      	add	r3, r2
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f7a4:	4b15      	ldr	r3, [pc, #84]	; (800f7fc <vPortValidateInterruptPriority+0x74>)
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	7afa      	ldrb	r2, [r7, #11]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d20a      	bcs.n	800f7c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b2:	f383 8811 	msr	BASEPRI, r3
 800f7b6:	f3bf 8f6f 	isb	sy
 800f7ba:	f3bf 8f4f 	dsb	sy
 800f7be:	607b      	str	r3, [r7, #4]
}
 800f7c0:	bf00      	nop
 800f7c2:	e7fe      	b.n	800f7c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7c4:	4b0e      	ldr	r3, [pc, #56]	; (800f800 <vPortValidateInterruptPriority+0x78>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f7cc:	4b0d      	ldr	r3, [pc, #52]	; (800f804 <vPortValidateInterruptPriority+0x7c>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d90a      	bls.n	800f7ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d8:	f383 8811 	msr	BASEPRI, r3
 800f7dc:	f3bf 8f6f 	isb	sy
 800f7e0:	f3bf 8f4f 	dsb	sy
 800f7e4:	603b      	str	r3, [r7, #0]
}
 800f7e6:	bf00      	nop
 800f7e8:	e7fe      	b.n	800f7e8 <vPortValidateInterruptPriority+0x60>
	}
 800f7ea:	bf00      	nop
 800f7ec:	3714      	adds	r7, #20
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr
 800f7f6:	bf00      	nop
 800f7f8:	e000e3f0 	.word	0xe000e3f0
 800f7fc:	20000a68 	.word	0x20000a68
 800f800:	e000ed0c 	.word	0xe000ed0c
 800f804:	20000a6c 	.word	0x20000a6c

0800f808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08a      	sub	sp, #40	; 0x28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f810:	2300      	movs	r3, #0
 800f812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f814:	f7fe ffda 	bl	800e7cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f818:	4b5b      	ldr	r3, [pc, #364]	; (800f988 <pvPortMalloc+0x180>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d101      	bne.n	800f824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f820:	f000 f920 	bl	800fa64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f824:	4b59      	ldr	r3, [pc, #356]	; (800f98c <pvPortMalloc+0x184>)
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4013      	ands	r3, r2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	f040 8093 	bne.w	800f958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d01d      	beq.n	800f874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f838:	2208      	movs	r2, #8
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	4413      	add	r3, r2
 800f83e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	2b00      	cmp	r3, #0
 800f848:	d014      	beq.n	800f874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f023 0307 	bic.w	r3, r3, #7
 800f850:	3308      	adds	r3, #8
 800f852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00a      	beq.n	800f874 <pvPortMalloc+0x6c>
	__asm volatile
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	617b      	str	r3, [r7, #20]
}
 800f870:	bf00      	nop
 800f872:	e7fe      	b.n	800f872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d06e      	beq.n	800f958 <pvPortMalloc+0x150>
 800f87a:	4b45      	ldr	r3, [pc, #276]	; (800f990 <pvPortMalloc+0x188>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	429a      	cmp	r2, r3
 800f882:	d869      	bhi.n	800f958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f884:	4b43      	ldr	r3, [pc, #268]	; (800f994 <pvPortMalloc+0x18c>)
 800f886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f888:	4b42      	ldr	r3, [pc, #264]	; (800f994 <pvPortMalloc+0x18c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f88e:	e004      	b.n	800f89a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	685b      	ldr	r3, [r3, #4]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d903      	bls.n	800f8ac <pvPortMalloc+0xa4>
 800f8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1f1      	bne.n	800f890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f8ac:	4b36      	ldr	r3, [pc, #216]	; (800f988 <pvPortMalloc+0x180>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d050      	beq.n	800f958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2208      	movs	r2, #8
 800f8bc:	4413      	add	r3, r2
 800f8be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	6a3b      	ldr	r3, [r7, #32]
 800f8c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	685a      	ldr	r2, [r3, #4]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	1ad2      	subs	r2, r2, r3
 800f8d0:	2308      	movs	r3, #8
 800f8d2:	005b      	lsls	r3, r3, #1
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d91f      	bls.n	800f918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4413      	add	r3, r2
 800f8de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8e0:	69bb      	ldr	r3, [r7, #24]
 800f8e2:	f003 0307 	and.w	r3, r3, #7
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00a      	beq.n	800f900 <pvPortMalloc+0xf8>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ee:	f383 8811 	msr	BASEPRI, r3
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	f3bf 8f4f 	dsb	sy
 800f8fa:	613b      	str	r3, [r7, #16]
}
 800f8fc:	bf00      	nop
 800f8fe:	e7fe      	b.n	800f8fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f902:	685a      	ldr	r2, [r3, #4]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	1ad2      	subs	r2, r2, r3
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f912:	69b8      	ldr	r0, [r7, #24]
 800f914:	f000 f908 	bl	800fb28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f918:	4b1d      	ldr	r3, [pc, #116]	; (800f990 <pvPortMalloc+0x188>)
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	4a1b      	ldr	r2, [pc, #108]	; (800f990 <pvPortMalloc+0x188>)
 800f924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f926:	4b1a      	ldr	r3, [pc, #104]	; (800f990 <pvPortMalloc+0x188>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	4b1b      	ldr	r3, [pc, #108]	; (800f998 <pvPortMalloc+0x190>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d203      	bcs.n	800f93a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f932:	4b17      	ldr	r3, [pc, #92]	; (800f990 <pvPortMalloc+0x188>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4a18      	ldr	r2, [pc, #96]	; (800f998 <pvPortMalloc+0x190>)
 800f938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f93c:	685a      	ldr	r2, [r3, #4]
 800f93e:	4b13      	ldr	r3, [pc, #76]	; (800f98c <pvPortMalloc+0x184>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	431a      	orrs	r2, r3
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94a:	2200      	movs	r2, #0
 800f94c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f94e:	4b13      	ldr	r3, [pc, #76]	; (800f99c <pvPortMalloc+0x194>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	4a11      	ldr	r2, [pc, #68]	; (800f99c <pvPortMalloc+0x194>)
 800f956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f958:	f7fe ff46 	bl	800e7e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	f003 0307 	and.w	r3, r3, #7
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00a      	beq.n	800f97c <pvPortMalloc+0x174>
	__asm volatile
 800f966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f96a:	f383 8811 	msr	BASEPRI, r3
 800f96e:	f3bf 8f6f 	isb	sy
 800f972:	f3bf 8f4f 	dsb	sy
 800f976:	60fb      	str	r3, [r7, #12]
}
 800f978:	bf00      	nop
 800f97a:	e7fe      	b.n	800f97a <pvPortMalloc+0x172>
	return pvReturn;
 800f97c:	69fb      	ldr	r3, [r7, #28]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3728      	adds	r7, #40	; 0x28
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop
 800f988:	20008778 	.word	0x20008778
 800f98c:	2000878c 	.word	0x2000878c
 800f990:	2000877c 	.word	0x2000877c
 800f994:	20008770 	.word	0x20008770
 800f998:	20008780 	.word	0x20008780
 800f99c:	20008784 	.word	0x20008784

0800f9a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b086      	sub	sp, #24
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d04d      	beq.n	800fa4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f9b2:	2308      	movs	r3, #8
 800f9b4:	425b      	negs	r3, r3
 800f9b6:	697a      	ldr	r2, [r7, #20]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	685a      	ldr	r2, [r3, #4]
 800f9c4:	4b24      	ldr	r3, [pc, #144]	; (800fa58 <vPortFree+0xb8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10a      	bne.n	800f9e4 <vPortFree+0x44>
	__asm volatile
 800f9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d2:	f383 8811 	msr	BASEPRI, r3
 800f9d6:	f3bf 8f6f 	isb	sy
 800f9da:	f3bf 8f4f 	dsb	sy
 800f9de:	60fb      	str	r3, [r7, #12]
}
 800f9e0:	bf00      	nop
 800f9e2:	e7fe      	b.n	800f9e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00a      	beq.n	800fa02 <vPortFree+0x62>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	60bb      	str	r3, [r7, #8]
}
 800f9fe:	bf00      	nop
 800fa00:	e7fe      	b.n	800fa00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	685a      	ldr	r2, [r3, #4]
 800fa06:	4b14      	ldr	r3, [pc, #80]	; (800fa58 <vPortFree+0xb8>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d01e      	beq.n	800fa4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d11a      	bne.n	800fa4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	685a      	ldr	r2, [r3, #4]
 800fa1c:	4b0e      	ldr	r3, [pc, #56]	; (800fa58 <vPortFree+0xb8>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	43db      	mvns	r3, r3
 800fa22:	401a      	ands	r2, r3
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa28:	f7fe fed0 	bl	800e7cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <vPortFree+0xbc>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4413      	add	r3, r2
 800fa36:	4a09      	ldr	r2, [pc, #36]	; (800fa5c <vPortFree+0xbc>)
 800fa38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa3a:	6938      	ldr	r0, [r7, #16]
 800fa3c:	f000 f874 	bl	800fb28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa40:	4b07      	ldr	r3, [pc, #28]	; (800fa60 <vPortFree+0xc0>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	3301      	adds	r3, #1
 800fa46:	4a06      	ldr	r2, [pc, #24]	; (800fa60 <vPortFree+0xc0>)
 800fa48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa4a:	f7fe fecd 	bl	800e7e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa4e:	bf00      	nop
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	2000878c 	.word	0x2000878c
 800fa5c:	2000877c 	.word	0x2000877c
 800fa60:	20008788 	.word	0x20008788

0800fa64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa6a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800fa6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa70:	4b27      	ldr	r3, [pc, #156]	; (800fb10 <prvHeapInit+0xac>)
 800fa72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f003 0307 	and.w	r3, r3, #7
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d00c      	beq.n	800fa98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3307      	adds	r3, #7
 800fa82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f023 0307 	bic.w	r3, r3, #7
 800fa8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa8c:	68ba      	ldr	r2, [r7, #8]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	4a1f      	ldr	r2, [pc, #124]	; (800fb10 <prvHeapInit+0xac>)
 800fa94:	4413      	add	r3, r2
 800fa96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa9c:	4a1d      	ldr	r2, [pc, #116]	; (800fb14 <prvHeapInit+0xb0>)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800faa2:	4b1c      	ldr	r3, [pc, #112]	; (800fb14 <prvHeapInit+0xb0>)
 800faa4:	2200      	movs	r2, #0
 800faa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	68ba      	ldr	r2, [r7, #8]
 800faac:	4413      	add	r3, r2
 800faae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fab0:	2208      	movs	r2, #8
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	1a9b      	subs	r3, r3, r2
 800fab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f023 0307 	bic.w	r3, r3, #7
 800fabe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	4a15      	ldr	r2, [pc, #84]	; (800fb18 <prvHeapInit+0xb4>)
 800fac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fac6:	4b14      	ldr	r3, [pc, #80]	; (800fb18 <prvHeapInit+0xb4>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	2200      	movs	r2, #0
 800facc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800face:	4b12      	ldr	r3, [pc, #72]	; (800fb18 <prvHeapInit+0xb4>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2200      	movs	r2, #0
 800fad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	1ad2      	subs	r2, r2, r3
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fae4:	4b0c      	ldr	r3, [pc, #48]	; (800fb18 <prvHeapInit+0xb4>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	685b      	ldr	r3, [r3, #4]
 800faf0:	4a0a      	ldr	r2, [pc, #40]	; (800fb1c <prvHeapInit+0xb8>)
 800faf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	4a09      	ldr	r2, [pc, #36]	; (800fb20 <prvHeapInit+0xbc>)
 800fafa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fafc:	4b09      	ldr	r3, [pc, #36]	; (800fb24 <prvHeapInit+0xc0>)
 800fafe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fb02:	601a      	str	r2, [r3, #0]
}
 800fb04:	bf00      	nop
 800fb06:	3714      	adds	r7, #20
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0e:	4770      	bx	lr
 800fb10:	20000a70 	.word	0x20000a70
 800fb14:	20008770 	.word	0x20008770
 800fb18:	20008778 	.word	0x20008778
 800fb1c:	20008780 	.word	0x20008780
 800fb20:	2000877c 	.word	0x2000877c
 800fb24:	2000878c 	.word	0x2000878c

0800fb28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb30:	4b28      	ldr	r3, [pc, #160]	; (800fbd4 <prvInsertBlockIntoFreeList+0xac>)
 800fb32:	60fb      	str	r3, [r7, #12]
 800fb34:	e002      	b.n	800fb3c <prvInsertBlockIntoFreeList+0x14>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	60fb      	str	r3, [r7, #12]
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	687a      	ldr	r2, [r7, #4]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d8f7      	bhi.n	800fb36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	4413      	add	r3, r2
 800fb52:	687a      	ldr	r2, [r7, #4]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d108      	bne.n	800fb6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	685a      	ldr	r2, [r3, #4]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	441a      	add	r2, r3
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	441a      	add	r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d118      	bne.n	800fbb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	4b15      	ldr	r3, [pc, #84]	; (800fbd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d00d      	beq.n	800fba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	685a      	ldr	r2, [r3, #4]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	441a      	add	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	e008      	b.n	800fbb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fba6:	4b0c      	ldr	r3, [pc, #48]	; (800fbd8 <prvInsertBlockIntoFreeList+0xb0>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	e003      	b.n	800fbb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d002      	beq.n	800fbc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fbc6:	bf00      	nop
 800fbc8:	3714      	adds	r7, #20
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop
 800fbd4:	20008770 	.word	0x20008770
 800fbd8:	20008778 	.word	0x20008778

0800fbdc <__NVIC_EnableIRQ>:
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fbe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	db0b      	blt.n	800fc06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fbee:	79fb      	ldrb	r3, [r7, #7]
 800fbf0:	f003 021f 	and.w	r2, r3, #31
 800fbf4:	4907      	ldr	r1, [pc, #28]	; (800fc14 <__NVIC_EnableIRQ+0x38>)
 800fbf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbfa:	095b      	lsrs	r3, r3, #5
 800fbfc:	2001      	movs	r0, #1
 800fbfe:	fa00 f202 	lsl.w	r2, r0, r2
 800fc02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fc06:	bf00      	nop
 800fc08:	370c      	adds	r7, #12
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	e000e100 	.word	0xe000e100

0800fc18 <__NVIC_DisableIRQ>:
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	db12      	blt.n	800fc50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	f003 021f 	and.w	r2, r3, #31
 800fc30:	490a      	ldr	r1, [pc, #40]	; (800fc5c <__NVIC_DisableIRQ+0x44>)
 800fc32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc36:	095b      	lsrs	r3, r3, #5
 800fc38:	2001      	movs	r0, #1
 800fc3a:	fa00 f202 	lsl.w	r2, r0, r2
 800fc3e:	3320      	adds	r3, #32
 800fc40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800fc44:	f3bf 8f4f 	dsb	sy
}
 800fc48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fc4a:	f3bf 8f6f 	isb	sy
}
 800fc4e:	bf00      	nop
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	e000e100 	.word	0xe000e100

0800fc60 <extIntInit>:
 * @brief EXTI configuration
 * @return Error code
 **/

error_t extIntInit(void)
{
 800fc60:	b480      	push	{r7}
 800fc62:	af00      	add	r7, sp, #0
  
   //Successful processing
   return NO_ERROR;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <extIntEnableIrq>:
/**
 * @brief Enable external interrupts
 **/

void extIntEnableIrq(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	af00      	add	r7, sp, #0
   //Enable EXTI15_10 interrupt
   NVIC_EnableIRQ(_ENC28J60_EXT);
 800fc74:	200a      	movs	r0, #10
 800fc76:	f7ff ffb1 	bl	800fbdc <__NVIC_EnableIRQ>
}
 800fc7a:	bf00      	nop
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <extIntDisableIrq>:
/**
 * @brief Disable external interrupts
 **/

void extIntDisableIrq(void)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	af00      	add	r7, sp, #0
   //Disable EXTI15_10 interrupt
   NVIC_DisableIRQ(_ENC28J60_EXT);
 800fc82:	200a      	movs	r0, #10
 800fc84:	f7ff ffc8 	bl	800fc18 <__NVIC_DisableIRQ>
}
 800fc88:	bf00      	nop
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief External interrupt handler
 **/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	80fb      	strh	r3, [r7, #6]
  NetInterface *interface;
	if(GPIO_Pin == _ENC28J60_EXT_PIN)
 800fc96:	88fb      	ldrh	r3, [r7, #6]
 800fc98:	2b10      	cmp	r3, #16
 800fc9a:	d104      	bne.n	800fca6 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		interface = &netInterface[0];
 800fc9c:	4b04      	ldr	r3, [pc, #16]	; (800fcb0 <HAL_GPIO_EXTI_Callback+0x24>)
 800fc9e:	60fb      	str	r3, [r7, #12]
		enc28j60IrqHandler(interface);
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f7f8 fbfb 	bl	800849c <enc28j60IrqHandler>
	}	
}
 800fca6:	bf00      	nop
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	20009248 	.word	0x20009248

0800fcb4 <spiInit>:
 * @brief SPI initialization
 * @return Error code
 **/

error_t spiInit(void)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	af00      	add	r7, sp, #0
   //Successful processing
   return NO_ERROR;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc2:	4770      	bx	lr

0800fcc4 <spiSetMode>:
 * @brief Set SPI mode
 * @param mode SPI mode (0, 1, 2 or 3)
 **/

error_t spiSetMode(uint_t mode)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
 800fccc:	2367      	movs	r3, #103	; 0x67
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	370c      	adds	r7, #12
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd8:	4770      	bx	lr

0800fcda <spiSetBitrate>:
 * @brief Set SPI bitrate
 * @param bitrate Bitrate value
 **/

error_t spiSetBitrate(uint_t bitrate)
{
 800fcda:	b480      	push	{r7}
 800fcdc:	b083      	sub	sp, #12
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
 800fce2:	2367      	movs	r3, #103	; 0x67
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <spiAssertCs>:
/**
 * @brief Assert CS
 **/

void spiAssertCs(void)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(_ENC28J60_CS_GPIO,_ENC28J60_CS_PIN,GPIO_PIN_RESET);
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	2110      	movs	r1, #16
 800fcfa:	4808      	ldr	r0, [pc, #32]	; (800fd1c <spiAssertCs+0x2c>)
 800fcfc:	f7fc fa1a 	bl	800c134 <HAL_GPIO_WritePin>
   //CS setup time
   usleep(25);
 800fd00:	2364      	movs	r3, #100	; 0x64
 800fd02:	607b      	str	r3, [r7, #4]
 800fd04:	e002      	b.n	800fd0c <spiAssertCs+0x1c>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	607b      	str	r3, [r7, #4]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d1f9      	bne.n	800fd06 <spiAssertCs+0x16>
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	40020800 	.word	0x40020800

0800fd20 <spiDeassertCs>:
/**
 * @brief Deassert CS
 **/

void spiDeassertCs(void)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
   //CS hold time
   usleep(25);
 800fd26:	2364      	movs	r3, #100	; 0x64
 800fd28:	607b      	str	r3, [r7, #4]
 800fd2a:	e002      	b.n	800fd32 <spiDeassertCs+0x12>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	607b      	str	r3, [r7, #4]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1f9      	bne.n	800fd2c <spiDeassertCs+0xc>
   HAL_GPIO_WritePin(_ENC28J60_CS_GPIO,_ENC28J60_CS_PIN,GPIO_PIN_SET);
 800fd38:	2201      	movs	r2, #1
 800fd3a:	2110      	movs	r1, #16
 800fd3c:	4808      	ldr	r0, [pc, #32]	; (800fd60 <spiDeassertCs+0x40>)
 800fd3e:	f7fc f9f9 	bl	800c134 <HAL_GPIO_WritePin>
   //CS disable time
   usleep(25);
 800fd42:	2364      	movs	r3, #100	; 0x64
 800fd44:	603b      	str	r3, [r7, #0]
 800fd46:	e002      	b.n	800fd4e <spiDeassertCs+0x2e>
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	603b      	str	r3, [r7, #0]
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1f9      	bne.n	800fd48 <spiDeassertCs+0x28>
}
 800fd54:	bf00      	nop
 800fd56:	bf00      	nop
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	40020800 	.word	0x40020800

0800fd64 <spiTransfer>:
 * @param[in] data The data to be written
 * @return The data received from the slave device
 **/

uint8_t spiTransfer(uint8_t data)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b086      	sub	sp, #24
 800fd68:	af02      	add	r7, sp, #8
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_ENC28J60_SPI,&data,&ret,1,50);
 800fd6e:	f107 020f 	add.w	r2, r7, #15
 800fd72:	1df9      	adds	r1, r7, #7
 800fd74:	2332      	movs	r3, #50	; 0x32
 800fd76:	9300      	str	r3, [sp, #0]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	4804      	ldr	r0, [pc, #16]	; (800fd8c <spiTransfer+0x28>)
 800fd7c:	f7fc ff41 	bl	800cc02 <HAL_SPI_TransmitReceive>
	return ret;   
 800fd80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd82:	4618      	mov	r0, r3
 800fd84:	3710      	adds	r7, #16
 800fd86:	46bd      	mov	sp, r7
 800fd88:	bd80      	pop	{r7, pc}
 800fd8a:	bf00      	nop
 800fd8c:	20009070 	.word	0x20009070

0800fd90 <__errno>:
 800fd90:	4b01      	ldr	r3, [pc, #4]	; (800fd98 <__errno+0x8>)
 800fd92:	6818      	ldr	r0, [r3, #0]
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	20000034 	.word	0x20000034

0800fd9c <fiprintf>:
 800fd9c:	b40e      	push	{r1, r2, r3}
 800fd9e:	b503      	push	{r0, r1, lr}
 800fda0:	4601      	mov	r1, r0
 800fda2:	ab03      	add	r3, sp, #12
 800fda4:	4805      	ldr	r0, [pc, #20]	; (800fdbc <fiprintf+0x20>)
 800fda6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdaa:	6800      	ldr	r0, [r0, #0]
 800fdac:	9301      	str	r3, [sp, #4]
 800fdae:	f000 f903 	bl	800ffb8 <_vfiprintf_r>
 800fdb2:	b002      	add	sp, #8
 800fdb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fdb8:	b003      	add	sp, #12
 800fdba:	4770      	bx	lr
 800fdbc:	20000034 	.word	0x20000034

0800fdc0 <_fwrite_r>:
 800fdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdc4:	9c08      	ldr	r4, [sp, #32]
 800fdc6:	4689      	mov	r9, r1
 800fdc8:	4617      	mov	r7, r2
 800fdca:	fb02 f803 	mul.w	r8, r2, r3
 800fdce:	4605      	mov	r5, r0
 800fdd0:	b118      	cbz	r0, 800fdda <_fwrite_r+0x1a>
 800fdd2:	6983      	ldr	r3, [r0, #24]
 800fdd4:	b90b      	cbnz	r3, 800fdda <_fwrite_r+0x1a>
 800fdd6:	f000 fde3 	bl	80109a0 <__sinit>
 800fdda:	4b26      	ldr	r3, [pc, #152]	; (800fe74 <_fwrite_r+0xb4>)
 800fddc:	429c      	cmp	r4, r3
 800fdde:	d123      	bne.n	800fe28 <_fwrite_r+0x68>
 800fde0:	686c      	ldr	r4, [r5, #4]
 800fde2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fde4:	07de      	lsls	r6, r3, #31
 800fde6:	d405      	bmi.n	800fdf4 <_fwrite_r+0x34>
 800fde8:	89a3      	ldrh	r3, [r4, #12]
 800fdea:	0598      	lsls	r0, r3, #22
 800fdec:	d402      	bmi.n	800fdf4 <_fwrite_r+0x34>
 800fdee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdf0:	f000 f879 	bl	800fee6 <__retarget_lock_acquire_recursive>
 800fdf4:	89a3      	ldrh	r3, [r4, #12]
 800fdf6:	0719      	lsls	r1, r3, #28
 800fdf8:	d520      	bpl.n	800fe3c <_fwrite_r+0x7c>
 800fdfa:	6923      	ldr	r3, [r4, #16]
 800fdfc:	b1f3      	cbz	r3, 800fe3c <_fwrite_r+0x7c>
 800fdfe:	2600      	movs	r6, #0
 800fe00:	4546      	cmp	r6, r8
 800fe02:	d029      	beq.n	800fe58 <_fwrite_r+0x98>
 800fe04:	68a0      	ldr	r0, [r4, #8]
 800fe06:	f819 1006 	ldrb.w	r1, [r9, r6]
 800fe0a:	3801      	subs	r0, #1
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	60a0      	str	r0, [r4, #8]
 800fe10:	da04      	bge.n	800fe1c <_fwrite_r+0x5c>
 800fe12:	69a3      	ldr	r3, [r4, #24]
 800fe14:	4298      	cmp	r0, r3
 800fe16:	db19      	blt.n	800fe4c <_fwrite_r+0x8c>
 800fe18:	290a      	cmp	r1, #10
 800fe1a:	d017      	beq.n	800fe4c <_fwrite_r+0x8c>
 800fe1c:	6823      	ldr	r3, [r4, #0]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	6022      	str	r2, [r4, #0]
 800fe22:	7019      	strb	r1, [r3, #0]
 800fe24:	3601      	adds	r6, #1
 800fe26:	e7eb      	b.n	800fe00 <_fwrite_r+0x40>
 800fe28:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <_fwrite_r+0xb8>)
 800fe2a:	429c      	cmp	r4, r3
 800fe2c:	d101      	bne.n	800fe32 <_fwrite_r+0x72>
 800fe2e:	68ac      	ldr	r4, [r5, #8]
 800fe30:	e7d7      	b.n	800fde2 <_fwrite_r+0x22>
 800fe32:	4b12      	ldr	r3, [pc, #72]	; (800fe7c <_fwrite_r+0xbc>)
 800fe34:	429c      	cmp	r4, r3
 800fe36:	bf08      	it	eq
 800fe38:	68ec      	ldreq	r4, [r5, #12]
 800fe3a:	e7d2      	b.n	800fde2 <_fwrite_r+0x22>
 800fe3c:	4621      	mov	r1, r4
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f000 fc26 	bl	8010690 <__swsetup_r>
 800fe44:	2800      	cmp	r0, #0
 800fe46:	d0da      	beq.n	800fdfe <_fwrite_r+0x3e>
 800fe48:	2600      	movs	r6, #0
 800fe4a:	e005      	b.n	800fe58 <_fwrite_r+0x98>
 800fe4c:	4622      	mov	r2, r4
 800fe4e:	4628      	mov	r0, r5
 800fe50:	f000 fbcc 	bl	80105ec <__swbuf_r>
 800fe54:	3001      	adds	r0, #1
 800fe56:	d1e5      	bne.n	800fe24 <_fwrite_r+0x64>
 800fe58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe5a:	07da      	lsls	r2, r3, #31
 800fe5c:	d405      	bmi.n	800fe6a <_fwrite_r+0xaa>
 800fe5e:	89a3      	ldrh	r3, [r4, #12]
 800fe60:	059b      	lsls	r3, r3, #22
 800fe62:	d402      	bmi.n	800fe6a <_fwrite_r+0xaa>
 800fe64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe66:	f000 f83f 	bl	800fee8 <__retarget_lock_release_recursive>
 800fe6a:	fbb6 f0f7 	udiv	r0, r6, r7
 800fe6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe72:	bf00      	nop
 800fe74:	08011990 	.word	0x08011990
 800fe78:	080119b0 	.word	0x080119b0
 800fe7c:	08011970 	.word	0x08011970

0800fe80 <fwrite>:
 800fe80:	b507      	push	{r0, r1, r2, lr}
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	4613      	mov	r3, r2
 800fe86:	460a      	mov	r2, r1
 800fe88:	4601      	mov	r1, r0
 800fe8a:	4803      	ldr	r0, [pc, #12]	; (800fe98 <fwrite+0x18>)
 800fe8c:	6800      	ldr	r0, [r0, #0]
 800fe8e:	f7ff ff97 	bl	800fdc0 <_fwrite_r>
 800fe92:	b003      	add	sp, #12
 800fe94:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe98:	20000034 	.word	0x20000034

0800fe9c <__libc_init_array>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	4d0d      	ldr	r5, [pc, #52]	; (800fed4 <__libc_init_array+0x38>)
 800fea0:	4c0d      	ldr	r4, [pc, #52]	; (800fed8 <__libc_init_array+0x3c>)
 800fea2:	1b64      	subs	r4, r4, r5
 800fea4:	10a4      	asrs	r4, r4, #2
 800fea6:	2600      	movs	r6, #0
 800fea8:	42a6      	cmp	r6, r4
 800feaa:	d109      	bne.n	800fec0 <__libc_init_array+0x24>
 800feac:	4d0b      	ldr	r5, [pc, #44]	; (800fedc <__libc_init_array+0x40>)
 800feae:	4c0c      	ldr	r4, [pc, #48]	; (800fee0 <__libc_init_array+0x44>)
 800feb0:	f001 f974 	bl	801119c <_init>
 800feb4:	1b64      	subs	r4, r4, r5
 800feb6:	10a4      	asrs	r4, r4, #2
 800feb8:	2600      	movs	r6, #0
 800feba:	42a6      	cmp	r6, r4
 800febc:	d105      	bne.n	800feca <__libc_init_array+0x2e>
 800febe:	bd70      	pop	{r4, r5, r6, pc}
 800fec0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fec4:	4798      	blx	r3
 800fec6:	3601      	adds	r6, #1
 800fec8:	e7ee      	b.n	800fea8 <__libc_init_array+0xc>
 800feca:	f855 3b04 	ldr.w	r3, [r5], #4
 800fece:	4798      	blx	r3
 800fed0:	3601      	adds	r6, #1
 800fed2:	e7f2      	b.n	800feba <__libc_init_array+0x1e>
 800fed4:	080119d8 	.word	0x080119d8
 800fed8:	080119d8 	.word	0x080119d8
 800fedc:	080119d8 	.word	0x080119d8
 800fee0:	080119dc 	.word	0x080119dc

0800fee4 <__retarget_lock_init_recursive>:
 800fee4:	4770      	bx	lr

0800fee6 <__retarget_lock_acquire_recursive>:
 800fee6:	4770      	bx	lr

0800fee8 <__retarget_lock_release_recursive>:
 800fee8:	4770      	bx	lr

0800feea <memcmp>:
 800feea:	b530      	push	{r4, r5, lr}
 800feec:	3901      	subs	r1, #1
 800feee:	2400      	movs	r4, #0
 800fef0:	42a2      	cmp	r2, r4
 800fef2:	d101      	bne.n	800fef8 <memcmp+0xe>
 800fef4:	2000      	movs	r0, #0
 800fef6:	e005      	b.n	800ff04 <memcmp+0x1a>
 800fef8:	5d03      	ldrb	r3, [r0, r4]
 800fefa:	3401      	adds	r4, #1
 800fefc:	5d0d      	ldrb	r5, [r1, r4]
 800fefe:	42ab      	cmp	r3, r5
 800ff00:	d0f6      	beq.n	800fef0 <memcmp+0x6>
 800ff02:	1b58      	subs	r0, r3, r5
 800ff04:	bd30      	pop	{r4, r5, pc}

0800ff06 <memcpy>:
 800ff06:	440a      	add	r2, r1
 800ff08:	4291      	cmp	r1, r2
 800ff0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ff0e:	d100      	bne.n	800ff12 <memcpy+0xc>
 800ff10:	4770      	bx	lr
 800ff12:	b510      	push	{r4, lr}
 800ff14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff1c:	4291      	cmp	r1, r2
 800ff1e:	d1f9      	bne.n	800ff14 <memcpy+0xe>
 800ff20:	bd10      	pop	{r4, pc}

0800ff22 <memmove>:
 800ff22:	4288      	cmp	r0, r1
 800ff24:	b510      	push	{r4, lr}
 800ff26:	eb01 0402 	add.w	r4, r1, r2
 800ff2a:	d902      	bls.n	800ff32 <memmove+0x10>
 800ff2c:	4284      	cmp	r4, r0
 800ff2e:	4623      	mov	r3, r4
 800ff30:	d807      	bhi.n	800ff42 <memmove+0x20>
 800ff32:	1e43      	subs	r3, r0, #1
 800ff34:	42a1      	cmp	r1, r4
 800ff36:	d008      	beq.n	800ff4a <memmove+0x28>
 800ff38:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff40:	e7f8      	b.n	800ff34 <memmove+0x12>
 800ff42:	4402      	add	r2, r0
 800ff44:	4601      	mov	r1, r0
 800ff46:	428a      	cmp	r2, r1
 800ff48:	d100      	bne.n	800ff4c <memmove+0x2a>
 800ff4a:	bd10      	pop	{r4, pc}
 800ff4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff54:	e7f7      	b.n	800ff46 <memmove+0x24>

0800ff56 <memset>:
 800ff56:	4402      	add	r2, r0
 800ff58:	4603      	mov	r3, r0
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d100      	bne.n	800ff60 <memset+0xa>
 800ff5e:	4770      	bx	lr
 800ff60:	f803 1b01 	strb.w	r1, [r3], #1
 800ff64:	e7f9      	b.n	800ff5a <memset+0x4>

0800ff66 <__sfputc_r>:
 800ff66:	6893      	ldr	r3, [r2, #8]
 800ff68:	3b01      	subs	r3, #1
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	b410      	push	{r4}
 800ff6e:	6093      	str	r3, [r2, #8]
 800ff70:	da08      	bge.n	800ff84 <__sfputc_r+0x1e>
 800ff72:	6994      	ldr	r4, [r2, #24]
 800ff74:	42a3      	cmp	r3, r4
 800ff76:	db01      	blt.n	800ff7c <__sfputc_r+0x16>
 800ff78:	290a      	cmp	r1, #10
 800ff7a:	d103      	bne.n	800ff84 <__sfputc_r+0x1e>
 800ff7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff80:	f000 bb34 	b.w	80105ec <__swbuf_r>
 800ff84:	6813      	ldr	r3, [r2, #0]
 800ff86:	1c58      	adds	r0, r3, #1
 800ff88:	6010      	str	r0, [r2, #0]
 800ff8a:	7019      	strb	r1, [r3, #0]
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <__sfputs_r>:
 800ff94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff96:	4606      	mov	r6, r0
 800ff98:	460f      	mov	r7, r1
 800ff9a:	4614      	mov	r4, r2
 800ff9c:	18d5      	adds	r5, r2, r3
 800ff9e:	42ac      	cmp	r4, r5
 800ffa0:	d101      	bne.n	800ffa6 <__sfputs_r+0x12>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	e007      	b.n	800ffb6 <__sfputs_r+0x22>
 800ffa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffaa:	463a      	mov	r2, r7
 800ffac:	4630      	mov	r0, r6
 800ffae:	f7ff ffda 	bl	800ff66 <__sfputc_r>
 800ffb2:	1c43      	adds	r3, r0, #1
 800ffb4:	d1f3      	bne.n	800ff9e <__sfputs_r+0xa>
 800ffb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ffb8 <_vfiprintf_r>:
 800ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	b09d      	sub	sp, #116	; 0x74
 800ffc0:	4614      	mov	r4, r2
 800ffc2:	4698      	mov	r8, r3
 800ffc4:	4606      	mov	r6, r0
 800ffc6:	b118      	cbz	r0, 800ffd0 <_vfiprintf_r+0x18>
 800ffc8:	6983      	ldr	r3, [r0, #24]
 800ffca:	b90b      	cbnz	r3, 800ffd0 <_vfiprintf_r+0x18>
 800ffcc:	f000 fce8 	bl	80109a0 <__sinit>
 800ffd0:	4b89      	ldr	r3, [pc, #548]	; (80101f8 <_vfiprintf_r+0x240>)
 800ffd2:	429d      	cmp	r5, r3
 800ffd4:	d11b      	bne.n	801000e <_vfiprintf_r+0x56>
 800ffd6:	6875      	ldr	r5, [r6, #4]
 800ffd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffda:	07d9      	lsls	r1, r3, #31
 800ffdc:	d405      	bmi.n	800ffea <_vfiprintf_r+0x32>
 800ffde:	89ab      	ldrh	r3, [r5, #12]
 800ffe0:	059a      	lsls	r2, r3, #22
 800ffe2:	d402      	bmi.n	800ffea <_vfiprintf_r+0x32>
 800ffe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffe6:	f7ff ff7e 	bl	800fee6 <__retarget_lock_acquire_recursive>
 800ffea:	89ab      	ldrh	r3, [r5, #12]
 800ffec:	071b      	lsls	r3, r3, #28
 800ffee:	d501      	bpl.n	800fff4 <_vfiprintf_r+0x3c>
 800fff0:	692b      	ldr	r3, [r5, #16]
 800fff2:	b9eb      	cbnz	r3, 8010030 <_vfiprintf_r+0x78>
 800fff4:	4629      	mov	r1, r5
 800fff6:	4630      	mov	r0, r6
 800fff8:	f000 fb4a 	bl	8010690 <__swsetup_r>
 800fffc:	b1c0      	cbz	r0, 8010030 <_vfiprintf_r+0x78>
 800fffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010000:	07dc      	lsls	r4, r3, #31
 8010002:	d50e      	bpl.n	8010022 <_vfiprintf_r+0x6a>
 8010004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010008:	b01d      	add	sp, #116	; 0x74
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	4b7b      	ldr	r3, [pc, #492]	; (80101fc <_vfiprintf_r+0x244>)
 8010010:	429d      	cmp	r5, r3
 8010012:	d101      	bne.n	8010018 <_vfiprintf_r+0x60>
 8010014:	68b5      	ldr	r5, [r6, #8]
 8010016:	e7df      	b.n	800ffd8 <_vfiprintf_r+0x20>
 8010018:	4b79      	ldr	r3, [pc, #484]	; (8010200 <_vfiprintf_r+0x248>)
 801001a:	429d      	cmp	r5, r3
 801001c:	bf08      	it	eq
 801001e:	68f5      	ldreq	r5, [r6, #12]
 8010020:	e7da      	b.n	800ffd8 <_vfiprintf_r+0x20>
 8010022:	89ab      	ldrh	r3, [r5, #12]
 8010024:	0598      	lsls	r0, r3, #22
 8010026:	d4ed      	bmi.n	8010004 <_vfiprintf_r+0x4c>
 8010028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801002a:	f7ff ff5d 	bl	800fee8 <__retarget_lock_release_recursive>
 801002e:	e7e9      	b.n	8010004 <_vfiprintf_r+0x4c>
 8010030:	2300      	movs	r3, #0
 8010032:	9309      	str	r3, [sp, #36]	; 0x24
 8010034:	2320      	movs	r3, #32
 8010036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801003a:	f8cd 800c 	str.w	r8, [sp, #12]
 801003e:	2330      	movs	r3, #48	; 0x30
 8010040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010204 <_vfiprintf_r+0x24c>
 8010044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010048:	f04f 0901 	mov.w	r9, #1
 801004c:	4623      	mov	r3, r4
 801004e:	469a      	mov	sl, r3
 8010050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010054:	b10a      	cbz	r2, 801005a <_vfiprintf_r+0xa2>
 8010056:	2a25      	cmp	r2, #37	; 0x25
 8010058:	d1f9      	bne.n	801004e <_vfiprintf_r+0x96>
 801005a:	ebba 0b04 	subs.w	fp, sl, r4
 801005e:	d00b      	beq.n	8010078 <_vfiprintf_r+0xc0>
 8010060:	465b      	mov	r3, fp
 8010062:	4622      	mov	r2, r4
 8010064:	4629      	mov	r1, r5
 8010066:	4630      	mov	r0, r6
 8010068:	f7ff ff94 	bl	800ff94 <__sfputs_r>
 801006c:	3001      	adds	r0, #1
 801006e:	f000 80aa 	beq.w	80101c6 <_vfiprintf_r+0x20e>
 8010072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010074:	445a      	add	r2, fp
 8010076:	9209      	str	r2, [sp, #36]	; 0x24
 8010078:	f89a 3000 	ldrb.w	r3, [sl]
 801007c:	2b00      	cmp	r3, #0
 801007e:	f000 80a2 	beq.w	80101c6 <_vfiprintf_r+0x20e>
 8010082:	2300      	movs	r3, #0
 8010084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801008c:	f10a 0a01 	add.w	sl, sl, #1
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	9307      	str	r3, [sp, #28]
 8010094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010098:	931a      	str	r3, [sp, #104]	; 0x68
 801009a:	4654      	mov	r4, sl
 801009c:	2205      	movs	r2, #5
 801009e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a2:	4858      	ldr	r0, [pc, #352]	; (8010204 <_vfiprintf_r+0x24c>)
 80100a4:	f7f0 f89c 	bl	80001e0 <memchr>
 80100a8:	9a04      	ldr	r2, [sp, #16]
 80100aa:	b9d8      	cbnz	r0, 80100e4 <_vfiprintf_r+0x12c>
 80100ac:	06d1      	lsls	r1, r2, #27
 80100ae:	bf44      	itt	mi
 80100b0:	2320      	movmi	r3, #32
 80100b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100b6:	0713      	lsls	r3, r2, #28
 80100b8:	bf44      	itt	mi
 80100ba:	232b      	movmi	r3, #43	; 0x2b
 80100bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100c0:	f89a 3000 	ldrb.w	r3, [sl]
 80100c4:	2b2a      	cmp	r3, #42	; 0x2a
 80100c6:	d015      	beq.n	80100f4 <_vfiprintf_r+0x13c>
 80100c8:	9a07      	ldr	r2, [sp, #28]
 80100ca:	4654      	mov	r4, sl
 80100cc:	2000      	movs	r0, #0
 80100ce:	f04f 0c0a 	mov.w	ip, #10
 80100d2:	4621      	mov	r1, r4
 80100d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100d8:	3b30      	subs	r3, #48	; 0x30
 80100da:	2b09      	cmp	r3, #9
 80100dc:	d94e      	bls.n	801017c <_vfiprintf_r+0x1c4>
 80100de:	b1b0      	cbz	r0, 801010e <_vfiprintf_r+0x156>
 80100e0:	9207      	str	r2, [sp, #28]
 80100e2:	e014      	b.n	801010e <_vfiprintf_r+0x156>
 80100e4:	eba0 0308 	sub.w	r3, r0, r8
 80100e8:	fa09 f303 	lsl.w	r3, r9, r3
 80100ec:	4313      	orrs	r3, r2
 80100ee:	9304      	str	r3, [sp, #16]
 80100f0:	46a2      	mov	sl, r4
 80100f2:	e7d2      	b.n	801009a <_vfiprintf_r+0xe2>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	1d19      	adds	r1, r3, #4
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9103      	str	r1, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfbb      	ittet	lt
 8010100:	425b      	neglt	r3, r3
 8010102:	f042 0202 	orrlt.w	r2, r2, #2
 8010106:	9307      	strge	r3, [sp, #28]
 8010108:	9307      	strlt	r3, [sp, #28]
 801010a:	bfb8      	it	lt
 801010c:	9204      	strlt	r2, [sp, #16]
 801010e:	7823      	ldrb	r3, [r4, #0]
 8010110:	2b2e      	cmp	r3, #46	; 0x2e
 8010112:	d10c      	bne.n	801012e <_vfiprintf_r+0x176>
 8010114:	7863      	ldrb	r3, [r4, #1]
 8010116:	2b2a      	cmp	r3, #42	; 0x2a
 8010118:	d135      	bne.n	8010186 <_vfiprintf_r+0x1ce>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	1d1a      	adds	r2, r3, #4
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	9203      	str	r2, [sp, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bfb8      	it	lt
 8010126:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801012a:	3402      	adds	r4, #2
 801012c:	9305      	str	r3, [sp, #20]
 801012e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010214 <_vfiprintf_r+0x25c>
 8010132:	7821      	ldrb	r1, [r4, #0]
 8010134:	2203      	movs	r2, #3
 8010136:	4650      	mov	r0, sl
 8010138:	f7f0 f852 	bl	80001e0 <memchr>
 801013c:	b140      	cbz	r0, 8010150 <_vfiprintf_r+0x198>
 801013e:	2340      	movs	r3, #64	; 0x40
 8010140:	eba0 000a 	sub.w	r0, r0, sl
 8010144:	fa03 f000 	lsl.w	r0, r3, r0
 8010148:	9b04      	ldr	r3, [sp, #16]
 801014a:	4303      	orrs	r3, r0
 801014c:	3401      	adds	r4, #1
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010154:	482c      	ldr	r0, [pc, #176]	; (8010208 <_vfiprintf_r+0x250>)
 8010156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801015a:	2206      	movs	r2, #6
 801015c:	f7f0 f840 	bl	80001e0 <memchr>
 8010160:	2800      	cmp	r0, #0
 8010162:	d03f      	beq.n	80101e4 <_vfiprintf_r+0x22c>
 8010164:	4b29      	ldr	r3, [pc, #164]	; (801020c <_vfiprintf_r+0x254>)
 8010166:	bb1b      	cbnz	r3, 80101b0 <_vfiprintf_r+0x1f8>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	3307      	adds	r3, #7
 801016c:	f023 0307 	bic.w	r3, r3, #7
 8010170:	3308      	adds	r3, #8
 8010172:	9303      	str	r3, [sp, #12]
 8010174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010176:	443b      	add	r3, r7
 8010178:	9309      	str	r3, [sp, #36]	; 0x24
 801017a:	e767      	b.n	801004c <_vfiprintf_r+0x94>
 801017c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010180:	460c      	mov	r4, r1
 8010182:	2001      	movs	r0, #1
 8010184:	e7a5      	b.n	80100d2 <_vfiprintf_r+0x11a>
 8010186:	2300      	movs	r3, #0
 8010188:	3401      	adds	r4, #1
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	4619      	mov	r1, r3
 801018e:	f04f 0c0a 	mov.w	ip, #10
 8010192:	4620      	mov	r0, r4
 8010194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010198:	3a30      	subs	r2, #48	; 0x30
 801019a:	2a09      	cmp	r2, #9
 801019c:	d903      	bls.n	80101a6 <_vfiprintf_r+0x1ee>
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0c5      	beq.n	801012e <_vfiprintf_r+0x176>
 80101a2:	9105      	str	r1, [sp, #20]
 80101a4:	e7c3      	b.n	801012e <_vfiprintf_r+0x176>
 80101a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80101aa:	4604      	mov	r4, r0
 80101ac:	2301      	movs	r3, #1
 80101ae:	e7f0      	b.n	8010192 <_vfiprintf_r+0x1da>
 80101b0:	ab03      	add	r3, sp, #12
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	462a      	mov	r2, r5
 80101b6:	4b16      	ldr	r3, [pc, #88]	; (8010210 <_vfiprintf_r+0x258>)
 80101b8:	a904      	add	r1, sp, #16
 80101ba:	4630      	mov	r0, r6
 80101bc:	f3af 8000 	nop.w
 80101c0:	4607      	mov	r7, r0
 80101c2:	1c78      	adds	r0, r7, #1
 80101c4:	d1d6      	bne.n	8010174 <_vfiprintf_r+0x1bc>
 80101c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101c8:	07d9      	lsls	r1, r3, #31
 80101ca:	d405      	bmi.n	80101d8 <_vfiprintf_r+0x220>
 80101cc:	89ab      	ldrh	r3, [r5, #12]
 80101ce:	059a      	lsls	r2, r3, #22
 80101d0:	d402      	bmi.n	80101d8 <_vfiprintf_r+0x220>
 80101d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101d4:	f7ff fe88 	bl	800fee8 <__retarget_lock_release_recursive>
 80101d8:	89ab      	ldrh	r3, [r5, #12]
 80101da:	065b      	lsls	r3, r3, #25
 80101dc:	f53f af12 	bmi.w	8010004 <_vfiprintf_r+0x4c>
 80101e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101e2:	e711      	b.n	8010008 <_vfiprintf_r+0x50>
 80101e4:	ab03      	add	r3, sp, #12
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	462a      	mov	r2, r5
 80101ea:	4b09      	ldr	r3, [pc, #36]	; (8010210 <_vfiprintf_r+0x258>)
 80101ec:	a904      	add	r1, sp, #16
 80101ee:	4630      	mov	r0, r6
 80101f0:	f000 f880 	bl	80102f4 <_printf_i>
 80101f4:	e7e4      	b.n	80101c0 <_vfiprintf_r+0x208>
 80101f6:	bf00      	nop
 80101f8:	08011990 	.word	0x08011990
 80101fc:	080119b0 	.word	0x080119b0
 8010200:	08011970 	.word	0x08011970
 8010204:	0801193c 	.word	0x0801193c
 8010208:	08011946 	.word	0x08011946
 801020c:	00000000 	.word	0x00000000
 8010210:	0800ff95 	.word	0x0800ff95
 8010214:	08011942 	.word	0x08011942

08010218 <_printf_common>:
 8010218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801021c:	4616      	mov	r6, r2
 801021e:	4699      	mov	r9, r3
 8010220:	688a      	ldr	r2, [r1, #8]
 8010222:	690b      	ldr	r3, [r1, #16]
 8010224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010228:	4293      	cmp	r3, r2
 801022a:	bfb8      	it	lt
 801022c:	4613      	movlt	r3, r2
 801022e:	6033      	str	r3, [r6, #0]
 8010230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010234:	4607      	mov	r7, r0
 8010236:	460c      	mov	r4, r1
 8010238:	b10a      	cbz	r2, 801023e <_printf_common+0x26>
 801023a:	3301      	adds	r3, #1
 801023c:	6033      	str	r3, [r6, #0]
 801023e:	6823      	ldr	r3, [r4, #0]
 8010240:	0699      	lsls	r1, r3, #26
 8010242:	bf42      	ittt	mi
 8010244:	6833      	ldrmi	r3, [r6, #0]
 8010246:	3302      	addmi	r3, #2
 8010248:	6033      	strmi	r3, [r6, #0]
 801024a:	6825      	ldr	r5, [r4, #0]
 801024c:	f015 0506 	ands.w	r5, r5, #6
 8010250:	d106      	bne.n	8010260 <_printf_common+0x48>
 8010252:	f104 0a19 	add.w	sl, r4, #25
 8010256:	68e3      	ldr	r3, [r4, #12]
 8010258:	6832      	ldr	r2, [r6, #0]
 801025a:	1a9b      	subs	r3, r3, r2
 801025c:	42ab      	cmp	r3, r5
 801025e:	dc26      	bgt.n	80102ae <_printf_common+0x96>
 8010260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010264:	1e13      	subs	r3, r2, #0
 8010266:	6822      	ldr	r2, [r4, #0]
 8010268:	bf18      	it	ne
 801026a:	2301      	movne	r3, #1
 801026c:	0692      	lsls	r2, r2, #26
 801026e:	d42b      	bmi.n	80102c8 <_printf_common+0xb0>
 8010270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010274:	4649      	mov	r1, r9
 8010276:	4638      	mov	r0, r7
 8010278:	47c0      	blx	r8
 801027a:	3001      	adds	r0, #1
 801027c:	d01e      	beq.n	80102bc <_printf_common+0xa4>
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	68e5      	ldr	r5, [r4, #12]
 8010282:	6832      	ldr	r2, [r6, #0]
 8010284:	f003 0306 	and.w	r3, r3, #6
 8010288:	2b04      	cmp	r3, #4
 801028a:	bf08      	it	eq
 801028c:	1aad      	subeq	r5, r5, r2
 801028e:	68a3      	ldr	r3, [r4, #8]
 8010290:	6922      	ldr	r2, [r4, #16]
 8010292:	bf0c      	ite	eq
 8010294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010298:	2500      	movne	r5, #0
 801029a:	4293      	cmp	r3, r2
 801029c:	bfc4      	itt	gt
 801029e:	1a9b      	subgt	r3, r3, r2
 80102a0:	18ed      	addgt	r5, r5, r3
 80102a2:	2600      	movs	r6, #0
 80102a4:	341a      	adds	r4, #26
 80102a6:	42b5      	cmp	r5, r6
 80102a8:	d11a      	bne.n	80102e0 <_printf_common+0xc8>
 80102aa:	2000      	movs	r0, #0
 80102ac:	e008      	b.n	80102c0 <_printf_common+0xa8>
 80102ae:	2301      	movs	r3, #1
 80102b0:	4652      	mov	r2, sl
 80102b2:	4649      	mov	r1, r9
 80102b4:	4638      	mov	r0, r7
 80102b6:	47c0      	blx	r8
 80102b8:	3001      	adds	r0, #1
 80102ba:	d103      	bne.n	80102c4 <_printf_common+0xac>
 80102bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102c4:	3501      	adds	r5, #1
 80102c6:	e7c6      	b.n	8010256 <_printf_common+0x3e>
 80102c8:	18e1      	adds	r1, r4, r3
 80102ca:	1c5a      	adds	r2, r3, #1
 80102cc:	2030      	movs	r0, #48	; 0x30
 80102ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80102d2:	4422      	add	r2, r4
 80102d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102dc:	3302      	adds	r3, #2
 80102de:	e7c7      	b.n	8010270 <_printf_common+0x58>
 80102e0:	2301      	movs	r3, #1
 80102e2:	4622      	mov	r2, r4
 80102e4:	4649      	mov	r1, r9
 80102e6:	4638      	mov	r0, r7
 80102e8:	47c0      	blx	r8
 80102ea:	3001      	adds	r0, #1
 80102ec:	d0e6      	beq.n	80102bc <_printf_common+0xa4>
 80102ee:	3601      	adds	r6, #1
 80102f0:	e7d9      	b.n	80102a6 <_printf_common+0x8e>
	...

080102f4 <_printf_i>:
 80102f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102f8:	460c      	mov	r4, r1
 80102fa:	4691      	mov	r9, r2
 80102fc:	7e27      	ldrb	r7, [r4, #24]
 80102fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010300:	2f78      	cmp	r7, #120	; 0x78
 8010302:	4680      	mov	r8, r0
 8010304:	469a      	mov	sl, r3
 8010306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801030a:	d807      	bhi.n	801031c <_printf_i+0x28>
 801030c:	2f62      	cmp	r7, #98	; 0x62
 801030e:	d80a      	bhi.n	8010326 <_printf_i+0x32>
 8010310:	2f00      	cmp	r7, #0
 8010312:	f000 80d8 	beq.w	80104c6 <_printf_i+0x1d2>
 8010316:	2f58      	cmp	r7, #88	; 0x58
 8010318:	f000 80a3 	beq.w	8010462 <_printf_i+0x16e>
 801031c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010324:	e03a      	b.n	801039c <_printf_i+0xa8>
 8010326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801032a:	2b15      	cmp	r3, #21
 801032c:	d8f6      	bhi.n	801031c <_printf_i+0x28>
 801032e:	a001      	add	r0, pc, #4	; (adr r0, 8010334 <_printf_i+0x40>)
 8010330:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010334:	0801038d 	.word	0x0801038d
 8010338:	080103a1 	.word	0x080103a1
 801033c:	0801031d 	.word	0x0801031d
 8010340:	0801031d 	.word	0x0801031d
 8010344:	0801031d 	.word	0x0801031d
 8010348:	0801031d 	.word	0x0801031d
 801034c:	080103a1 	.word	0x080103a1
 8010350:	0801031d 	.word	0x0801031d
 8010354:	0801031d 	.word	0x0801031d
 8010358:	0801031d 	.word	0x0801031d
 801035c:	0801031d 	.word	0x0801031d
 8010360:	080104ad 	.word	0x080104ad
 8010364:	080103d1 	.word	0x080103d1
 8010368:	0801048f 	.word	0x0801048f
 801036c:	0801031d 	.word	0x0801031d
 8010370:	0801031d 	.word	0x0801031d
 8010374:	080104cf 	.word	0x080104cf
 8010378:	0801031d 	.word	0x0801031d
 801037c:	080103d1 	.word	0x080103d1
 8010380:	0801031d 	.word	0x0801031d
 8010384:	0801031d 	.word	0x0801031d
 8010388:	08010497 	.word	0x08010497
 801038c:	680b      	ldr	r3, [r1, #0]
 801038e:	1d1a      	adds	r2, r3, #4
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	600a      	str	r2, [r1, #0]
 8010394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801039c:	2301      	movs	r3, #1
 801039e:	e0a3      	b.n	80104e8 <_printf_i+0x1f4>
 80103a0:	6825      	ldr	r5, [r4, #0]
 80103a2:	6808      	ldr	r0, [r1, #0]
 80103a4:	062e      	lsls	r6, r5, #24
 80103a6:	f100 0304 	add.w	r3, r0, #4
 80103aa:	d50a      	bpl.n	80103c2 <_printf_i+0xce>
 80103ac:	6805      	ldr	r5, [r0, #0]
 80103ae:	600b      	str	r3, [r1, #0]
 80103b0:	2d00      	cmp	r5, #0
 80103b2:	da03      	bge.n	80103bc <_printf_i+0xc8>
 80103b4:	232d      	movs	r3, #45	; 0x2d
 80103b6:	426d      	negs	r5, r5
 80103b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80103bc:	485e      	ldr	r0, [pc, #376]	; (8010538 <_printf_i+0x244>)
 80103be:	230a      	movs	r3, #10
 80103c0:	e019      	b.n	80103f6 <_printf_i+0x102>
 80103c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80103c6:	6805      	ldr	r5, [r0, #0]
 80103c8:	600b      	str	r3, [r1, #0]
 80103ca:	bf18      	it	ne
 80103cc:	b22d      	sxthne	r5, r5
 80103ce:	e7ef      	b.n	80103b0 <_printf_i+0xbc>
 80103d0:	680b      	ldr	r3, [r1, #0]
 80103d2:	6825      	ldr	r5, [r4, #0]
 80103d4:	1d18      	adds	r0, r3, #4
 80103d6:	6008      	str	r0, [r1, #0]
 80103d8:	0628      	lsls	r0, r5, #24
 80103da:	d501      	bpl.n	80103e0 <_printf_i+0xec>
 80103dc:	681d      	ldr	r5, [r3, #0]
 80103de:	e002      	b.n	80103e6 <_printf_i+0xf2>
 80103e0:	0669      	lsls	r1, r5, #25
 80103e2:	d5fb      	bpl.n	80103dc <_printf_i+0xe8>
 80103e4:	881d      	ldrh	r5, [r3, #0]
 80103e6:	4854      	ldr	r0, [pc, #336]	; (8010538 <_printf_i+0x244>)
 80103e8:	2f6f      	cmp	r7, #111	; 0x6f
 80103ea:	bf0c      	ite	eq
 80103ec:	2308      	moveq	r3, #8
 80103ee:	230a      	movne	r3, #10
 80103f0:	2100      	movs	r1, #0
 80103f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103f6:	6866      	ldr	r6, [r4, #4]
 80103f8:	60a6      	str	r6, [r4, #8]
 80103fa:	2e00      	cmp	r6, #0
 80103fc:	bfa2      	ittt	ge
 80103fe:	6821      	ldrge	r1, [r4, #0]
 8010400:	f021 0104 	bicge.w	r1, r1, #4
 8010404:	6021      	strge	r1, [r4, #0]
 8010406:	b90d      	cbnz	r5, 801040c <_printf_i+0x118>
 8010408:	2e00      	cmp	r6, #0
 801040a:	d04d      	beq.n	80104a8 <_printf_i+0x1b4>
 801040c:	4616      	mov	r6, r2
 801040e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010412:	fb03 5711 	mls	r7, r3, r1, r5
 8010416:	5dc7      	ldrb	r7, [r0, r7]
 8010418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801041c:	462f      	mov	r7, r5
 801041e:	42bb      	cmp	r3, r7
 8010420:	460d      	mov	r5, r1
 8010422:	d9f4      	bls.n	801040e <_printf_i+0x11a>
 8010424:	2b08      	cmp	r3, #8
 8010426:	d10b      	bne.n	8010440 <_printf_i+0x14c>
 8010428:	6823      	ldr	r3, [r4, #0]
 801042a:	07df      	lsls	r7, r3, #31
 801042c:	d508      	bpl.n	8010440 <_printf_i+0x14c>
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	6861      	ldr	r1, [r4, #4]
 8010432:	4299      	cmp	r1, r3
 8010434:	bfde      	ittt	le
 8010436:	2330      	movle	r3, #48	; 0x30
 8010438:	f806 3c01 	strble.w	r3, [r6, #-1]
 801043c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010440:	1b92      	subs	r2, r2, r6
 8010442:	6122      	str	r2, [r4, #16]
 8010444:	f8cd a000 	str.w	sl, [sp]
 8010448:	464b      	mov	r3, r9
 801044a:	aa03      	add	r2, sp, #12
 801044c:	4621      	mov	r1, r4
 801044e:	4640      	mov	r0, r8
 8010450:	f7ff fee2 	bl	8010218 <_printf_common>
 8010454:	3001      	adds	r0, #1
 8010456:	d14c      	bne.n	80104f2 <_printf_i+0x1fe>
 8010458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801045c:	b004      	add	sp, #16
 801045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010462:	4835      	ldr	r0, [pc, #212]	; (8010538 <_printf_i+0x244>)
 8010464:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	680e      	ldr	r6, [r1, #0]
 801046c:	061f      	lsls	r7, r3, #24
 801046e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010472:	600e      	str	r6, [r1, #0]
 8010474:	d514      	bpl.n	80104a0 <_printf_i+0x1ac>
 8010476:	07d9      	lsls	r1, r3, #31
 8010478:	bf44      	itt	mi
 801047a:	f043 0320 	orrmi.w	r3, r3, #32
 801047e:	6023      	strmi	r3, [r4, #0]
 8010480:	b91d      	cbnz	r5, 801048a <_printf_i+0x196>
 8010482:	6823      	ldr	r3, [r4, #0]
 8010484:	f023 0320 	bic.w	r3, r3, #32
 8010488:	6023      	str	r3, [r4, #0]
 801048a:	2310      	movs	r3, #16
 801048c:	e7b0      	b.n	80103f0 <_printf_i+0xfc>
 801048e:	6823      	ldr	r3, [r4, #0]
 8010490:	f043 0320 	orr.w	r3, r3, #32
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	2378      	movs	r3, #120	; 0x78
 8010498:	4828      	ldr	r0, [pc, #160]	; (801053c <_printf_i+0x248>)
 801049a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801049e:	e7e3      	b.n	8010468 <_printf_i+0x174>
 80104a0:	065e      	lsls	r6, r3, #25
 80104a2:	bf48      	it	mi
 80104a4:	b2ad      	uxthmi	r5, r5
 80104a6:	e7e6      	b.n	8010476 <_printf_i+0x182>
 80104a8:	4616      	mov	r6, r2
 80104aa:	e7bb      	b.n	8010424 <_printf_i+0x130>
 80104ac:	680b      	ldr	r3, [r1, #0]
 80104ae:	6826      	ldr	r6, [r4, #0]
 80104b0:	6960      	ldr	r0, [r4, #20]
 80104b2:	1d1d      	adds	r5, r3, #4
 80104b4:	600d      	str	r5, [r1, #0]
 80104b6:	0635      	lsls	r5, r6, #24
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	d501      	bpl.n	80104c0 <_printf_i+0x1cc>
 80104bc:	6018      	str	r0, [r3, #0]
 80104be:	e002      	b.n	80104c6 <_printf_i+0x1d2>
 80104c0:	0671      	lsls	r1, r6, #25
 80104c2:	d5fb      	bpl.n	80104bc <_printf_i+0x1c8>
 80104c4:	8018      	strh	r0, [r3, #0]
 80104c6:	2300      	movs	r3, #0
 80104c8:	6123      	str	r3, [r4, #16]
 80104ca:	4616      	mov	r6, r2
 80104cc:	e7ba      	b.n	8010444 <_printf_i+0x150>
 80104ce:	680b      	ldr	r3, [r1, #0]
 80104d0:	1d1a      	adds	r2, r3, #4
 80104d2:	600a      	str	r2, [r1, #0]
 80104d4:	681e      	ldr	r6, [r3, #0]
 80104d6:	6862      	ldr	r2, [r4, #4]
 80104d8:	2100      	movs	r1, #0
 80104da:	4630      	mov	r0, r6
 80104dc:	f7ef fe80 	bl	80001e0 <memchr>
 80104e0:	b108      	cbz	r0, 80104e6 <_printf_i+0x1f2>
 80104e2:	1b80      	subs	r0, r0, r6
 80104e4:	6060      	str	r0, [r4, #4]
 80104e6:	6863      	ldr	r3, [r4, #4]
 80104e8:	6123      	str	r3, [r4, #16]
 80104ea:	2300      	movs	r3, #0
 80104ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104f0:	e7a8      	b.n	8010444 <_printf_i+0x150>
 80104f2:	6923      	ldr	r3, [r4, #16]
 80104f4:	4632      	mov	r2, r6
 80104f6:	4649      	mov	r1, r9
 80104f8:	4640      	mov	r0, r8
 80104fa:	47d0      	blx	sl
 80104fc:	3001      	adds	r0, #1
 80104fe:	d0ab      	beq.n	8010458 <_printf_i+0x164>
 8010500:	6823      	ldr	r3, [r4, #0]
 8010502:	079b      	lsls	r3, r3, #30
 8010504:	d413      	bmi.n	801052e <_printf_i+0x23a>
 8010506:	68e0      	ldr	r0, [r4, #12]
 8010508:	9b03      	ldr	r3, [sp, #12]
 801050a:	4298      	cmp	r0, r3
 801050c:	bfb8      	it	lt
 801050e:	4618      	movlt	r0, r3
 8010510:	e7a4      	b.n	801045c <_printf_i+0x168>
 8010512:	2301      	movs	r3, #1
 8010514:	4632      	mov	r2, r6
 8010516:	4649      	mov	r1, r9
 8010518:	4640      	mov	r0, r8
 801051a:	47d0      	blx	sl
 801051c:	3001      	adds	r0, #1
 801051e:	d09b      	beq.n	8010458 <_printf_i+0x164>
 8010520:	3501      	adds	r5, #1
 8010522:	68e3      	ldr	r3, [r4, #12]
 8010524:	9903      	ldr	r1, [sp, #12]
 8010526:	1a5b      	subs	r3, r3, r1
 8010528:	42ab      	cmp	r3, r5
 801052a:	dcf2      	bgt.n	8010512 <_printf_i+0x21e>
 801052c:	e7eb      	b.n	8010506 <_printf_i+0x212>
 801052e:	2500      	movs	r5, #0
 8010530:	f104 0619 	add.w	r6, r4, #25
 8010534:	e7f5      	b.n	8010522 <_printf_i+0x22e>
 8010536:	bf00      	nop
 8010538:	0801194d 	.word	0x0801194d
 801053c:	0801195e 	.word	0x0801195e

08010540 <siprintf>:
 8010540:	b40e      	push	{r1, r2, r3}
 8010542:	b500      	push	{lr}
 8010544:	b09c      	sub	sp, #112	; 0x70
 8010546:	ab1d      	add	r3, sp, #116	; 0x74
 8010548:	9002      	str	r0, [sp, #8]
 801054a:	9006      	str	r0, [sp, #24]
 801054c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010550:	4809      	ldr	r0, [pc, #36]	; (8010578 <siprintf+0x38>)
 8010552:	9107      	str	r1, [sp, #28]
 8010554:	9104      	str	r1, [sp, #16]
 8010556:	4909      	ldr	r1, [pc, #36]	; (801057c <siprintf+0x3c>)
 8010558:	f853 2b04 	ldr.w	r2, [r3], #4
 801055c:	9105      	str	r1, [sp, #20]
 801055e:	6800      	ldr	r0, [r0, #0]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	a902      	add	r1, sp, #8
 8010564:	f000 fc4a 	bl	8010dfc <_svfiprintf_r>
 8010568:	9b02      	ldr	r3, [sp, #8]
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
 801056e:	b01c      	add	sp, #112	; 0x70
 8010570:	f85d eb04 	ldr.w	lr, [sp], #4
 8010574:	b003      	add	sp, #12
 8010576:	4770      	bx	lr
 8010578:	20000034 	.word	0x20000034
 801057c:	ffff0208 	.word	0xffff0208

08010580 <strncasecmp>:
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	4e0f      	ldr	r6, [pc, #60]	; (80105c0 <strncasecmp+0x40>)
 8010584:	4604      	mov	r4, r0
 8010586:	440a      	add	r2, r1
 8010588:	428a      	cmp	r2, r1
 801058a:	d101      	bne.n	8010590 <strncasecmp+0x10>
 801058c:	2000      	movs	r0, #0
 801058e:	e013      	b.n	80105b8 <strncasecmp+0x38>
 8010590:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010594:	5d98      	ldrb	r0, [r3, r6]
 8010596:	f000 0003 	and.w	r0, r0, #3
 801059a:	2801      	cmp	r0, #1
 801059c:	f811 0b01 	ldrb.w	r0, [r1], #1
 80105a0:	5c35      	ldrb	r5, [r6, r0]
 80105a2:	f005 0503 	and.w	r5, r5, #3
 80105a6:	bf08      	it	eq
 80105a8:	3320      	addeq	r3, #32
 80105aa:	2d01      	cmp	r5, #1
 80105ac:	bf08      	it	eq
 80105ae:	3020      	addeq	r0, #32
 80105b0:	1a1b      	subs	r3, r3, r0
 80105b2:	d102      	bne.n	80105ba <strncasecmp+0x3a>
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d1e7      	bne.n	8010588 <strncasecmp+0x8>
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
 80105ba:	4618      	mov	r0, r3
 80105bc:	e7fc      	b.n	80105b8 <strncasecmp+0x38>
 80105be:	bf00      	nop
 80105c0:	08011835 	.word	0x08011835

080105c4 <strncpy>:
 80105c4:	b510      	push	{r4, lr}
 80105c6:	3901      	subs	r1, #1
 80105c8:	4603      	mov	r3, r0
 80105ca:	b132      	cbz	r2, 80105da <strncpy+0x16>
 80105cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80105d0:	f803 4b01 	strb.w	r4, [r3], #1
 80105d4:	3a01      	subs	r2, #1
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	d1f7      	bne.n	80105ca <strncpy+0x6>
 80105da:	441a      	add	r2, r3
 80105dc:	2100      	movs	r1, #0
 80105de:	4293      	cmp	r3, r2
 80105e0:	d100      	bne.n	80105e4 <strncpy+0x20>
 80105e2:	bd10      	pop	{r4, pc}
 80105e4:	f803 1b01 	strb.w	r1, [r3], #1
 80105e8:	e7f9      	b.n	80105de <strncpy+0x1a>
	...

080105ec <__swbuf_r>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	460e      	mov	r6, r1
 80105f0:	4614      	mov	r4, r2
 80105f2:	4605      	mov	r5, r0
 80105f4:	b118      	cbz	r0, 80105fe <__swbuf_r+0x12>
 80105f6:	6983      	ldr	r3, [r0, #24]
 80105f8:	b90b      	cbnz	r3, 80105fe <__swbuf_r+0x12>
 80105fa:	f000 f9d1 	bl	80109a0 <__sinit>
 80105fe:	4b21      	ldr	r3, [pc, #132]	; (8010684 <__swbuf_r+0x98>)
 8010600:	429c      	cmp	r4, r3
 8010602:	d12b      	bne.n	801065c <__swbuf_r+0x70>
 8010604:	686c      	ldr	r4, [r5, #4]
 8010606:	69a3      	ldr	r3, [r4, #24]
 8010608:	60a3      	str	r3, [r4, #8]
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	071a      	lsls	r2, r3, #28
 801060e:	d52f      	bpl.n	8010670 <__swbuf_r+0x84>
 8010610:	6923      	ldr	r3, [r4, #16]
 8010612:	b36b      	cbz	r3, 8010670 <__swbuf_r+0x84>
 8010614:	6923      	ldr	r3, [r4, #16]
 8010616:	6820      	ldr	r0, [r4, #0]
 8010618:	1ac0      	subs	r0, r0, r3
 801061a:	6963      	ldr	r3, [r4, #20]
 801061c:	b2f6      	uxtb	r6, r6
 801061e:	4283      	cmp	r3, r0
 8010620:	4637      	mov	r7, r6
 8010622:	dc04      	bgt.n	801062e <__swbuf_r+0x42>
 8010624:	4621      	mov	r1, r4
 8010626:	4628      	mov	r0, r5
 8010628:	f000 f926 	bl	8010878 <_fflush_r>
 801062c:	bb30      	cbnz	r0, 801067c <__swbuf_r+0x90>
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	3b01      	subs	r3, #1
 8010632:	60a3      	str	r3, [r4, #8]
 8010634:	6823      	ldr	r3, [r4, #0]
 8010636:	1c5a      	adds	r2, r3, #1
 8010638:	6022      	str	r2, [r4, #0]
 801063a:	701e      	strb	r6, [r3, #0]
 801063c:	6963      	ldr	r3, [r4, #20]
 801063e:	3001      	adds	r0, #1
 8010640:	4283      	cmp	r3, r0
 8010642:	d004      	beq.n	801064e <__swbuf_r+0x62>
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	07db      	lsls	r3, r3, #31
 8010648:	d506      	bpl.n	8010658 <__swbuf_r+0x6c>
 801064a:	2e0a      	cmp	r6, #10
 801064c:	d104      	bne.n	8010658 <__swbuf_r+0x6c>
 801064e:	4621      	mov	r1, r4
 8010650:	4628      	mov	r0, r5
 8010652:	f000 f911 	bl	8010878 <_fflush_r>
 8010656:	b988      	cbnz	r0, 801067c <__swbuf_r+0x90>
 8010658:	4638      	mov	r0, r7
 801065a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801065c:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <__swbuf_r+0x9c>)
 801065e:	429c      	cmp	r4, r3
 8010660:	d101      	bne.n	8010666 <__swbuf_r+0x7a>
 8010662:	68ac      	ldr	r4, [r5, #8]
 8010664:	e7cf      	b.n	8010606 <__swbuf_r+0x1a>
 8010666:	4b09      	ldr	r3, [pc, #36]	; (801068c <__swbuf_r+0xa0>)
 8010668:	429c      	cmp	r4, r3
 801066a:	bf08      	it	eq
 801066c:	68ec      	ldreq	r4, [r5, #12]
 801066e:	e7ca      	b.n	8010606 <__swbuf_r+0x1a>
 8010670:	4621      	mov	r1, r4
 8010672:	4628      	mov	r0, r5
 8010674:	f000 f80c 	bl	8010690 <__swsetup_r>
 8010678:	2800      	cmp	r0, #0
 801067a:	d0cb      	beq.n	8010614 <__swbuf_r+0x28>
 801067c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010680:	e7ea      	b.n	8010658 <__swbuf_r+0x6c>
 8010682:	bf00      	nop
 8010684:	08011990 	.word	0x08011990
 8010688:	080119b0 	.word	0x080119b0
 801068c:	08011970 	.word	0x08011970

08010690 <__swsetup_r>:
 8010690:	4b32      	ldr	r3, [pc, #200]	; (801075c <__swsetup_r+0xcc>)
 8010692:	b570      	push	{r4, r5, r6, lr}
 8010694:	681d      	ldr	r5, [r3, #0]
 8010696:	4606      	mov	r6, r0
 8010698:	460c      	mov	r4, r1
 801069a:	b125      	cbz	r5, 80106a6 <__swsetup_r+0x16>
 801069c:	69ab      	ldr	r3, [r5, #24]
 801069e:	b913      	cbnz	r3, 80106a6 <__swsetup_r+0x16>
 80106a0:	4628      	mov	r0, r5
 80106a2:	f000 f97d 	bl	80109a0 <__sinit>
 80106a6:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <__swsetup_r+0xd0>)
 80106a8:	429c      	cmp	r4, r3
 80106aa:	d10f      	bne.n	80106cc <__swsetup_r+0x3c>
 80106ac:	686c      	ldr	r4, [r5, #4]
 80106ae:	89a3      	ldrh	r3, [r4, #12]
 80106b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106b4:	0719      	lsls	r1, r3, #28
 80106b6:	d42c      	bmi.n	8010712 <__swsetup_r+0x82>
 80106b8:	06dd      	lsls	r5, r3, #27
 80106ba:	d411      	bmi.n	80106e0 <__swsetup_r+0x50>
 80106bc:	2309      	movs	r3, #9
 80106be:	6033      	str	r3, [r6, #0]
 80106c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80106c4:	81a3      	strh	r3, [r4, #12]
 80106c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106ca:	e03e      	b.n	801074a <__swsetup_r+0xba>
 80106cc:	4b25      	ldr	r3, [pc, #148]	; (8010764 <__swsetup_r+0xd4>)
 80106ce:	429c      	cmp	r4, r3
 80106d0:	d101      	bne.n	80106d6 <__swsetup_r+0x46>
 80106d2:	68ac      	ldr	r4, [r5, #8]
 80106d4:	e7eb      	b.n	80106ae <__swsetup_r+0x1e>
 80106d6:	4b24      	ldr	r3, [pc, #144]	; (8010768 <__swsetup_r+0xd8>)
 80106d8:	429c      	cmp	r4, r3
 80106da:	bf08      	it	eq
 80106dc:	68ec      	ldreq	r4, [r5, #12]
 80106de:	e7e6      	b.n	80106ae <__swsetup_r+0x1e>
 80106e0:	0758      	lsls	r0, r3, #29
 80106e2:	d512      	bpl.n	801070a <__swsetup_r+0x7a>
 80106e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106e6:	b141      	cbz	r1, 80106fa <__swsetup_r+0x6a>
 80106e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80106ec:	4299      	cmp	r1, r3
 80106ee:	d002      	beq.n	80106f6 <__swsetup_r+0x66>
 80106f0:	4630      	mov	r0, r6
 80106f2:	f000 fa57 	bl	8010ba4 <_free_r>
 80106f6:	2300      	movs	r3, #0
 80106f8:	6363      	str	r3, [r4, #52]	; 0x34
 80106fa:	89a3      	ldrh	r3, [r4, #12]
 80106fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010700:	81a3      	strh	r3, [r4, #12]
 8010702:	2300      	movs	r3, #0
 8010704:	6063      	str	r3, [r4, #4]
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	89a3      	ldrh	r3, [r4, #12]
 801070c:	f043 0308 	orr.w	r3, r3, #8
 8010710:	81a3      	strh	r3, [r4, #12]
 8010712:	6923      	ldr	r3, [r4, #16]
 8010714:	b94b      	cbnz	r3, 801072a <__swsetup_r+0x9a>
 8010716:	89a3      	ldrh	r3, [r4, #12]
 8010718:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801071c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010720:	d003      	beq.n	801072a <__swsetup_r+0x9a>
 8010722:	4621      	mov	r1, r4
 8010724:	4630      	mov	r0, r6
 8010726:	f000 f9fd 	bl	8010b24 <__smakebuf_r>
 801072a:	89a0      	ldrh	r0, [r4, #12]
 801072c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010730:	f010 0301 	ands.w	r3, r0, #1
 8010734:	d00a      	beq.n	801074c <__swsetup_r+0xbc>
 8010736:	2300      	movs	r3, #0
 8010738:	60a3      	str	r3, [r4, #8]
 801073a:	6963      	ldr	r3, [r4, #20]
 801073c:	425b      	negs	r3, r3
 801073e:	61a3      	str	r3, [r4, #24]
 8010740:	6923      	ldr	r3, [r4, #16]
 8010742:	b943      	cbnz	r3, 8010756 <__swsetup_r+0xc6>
 8010744:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010748:	d1ba      	bne.n	80106c0 <__swsetup_r+0x30>
 801074a:	bd70      	pop	{r4, r5, r6, pc}
 801074c:	0781      	lsls	r1, r0, #30
 801074e:	bf58      	it	pl
 8010750:	6963      	ldrpl	r3, [r4, #20]
 8010752:	60a3      	str	r3, [r4, #8]
 8010754:	e7f4      	b.n	8010740 <__swsetup_r+0xb0>
 8010756:	2000      	movs	r0, #0
 8010758:	e7f7      	b.n	801074a <__swsetup_r+0xba>
 801075a:	bf00      	nop
 801075c:	20000034 	.word	0x20000034
 8010760:	08011990 	.word	0x08011990
 8010764:	080119b0 	.word	0x080119b0
 8010768:	08011970 	.word	0x08011970

0801076c <__sflush_r>:
 801076c:	898a      	ldrh	r2, [r1, #12]
 801076e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010772:	4605      	mov	r5, r0
 8010774:	0710      	lsls	r0, r2, #28
 8010776:	460c      	mov	r4, r1
 8010778:	d458      	bmi.n	801082c <__sflush_r+0xc0>
 801077a:	684b      	ldr	r3, [r1, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	dc05      	bgt.n	801078c <__sflush_r+0x20>
 8010780:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010782:	2b00      	cmp	r3, #0
 8010784:	dc02      	bgt.n	801078c <__sflush_r+0x20>
 8010786:	2000      	movs	r0, #0
 8010788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801078e:	2e00      	cmp	r6, #0
 8010790:	d0f9      	beq.n	8010786 <__sflush_r+0x1a>
 8010792:	2300      	movs	r3, #0
 8010794:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010798:	682f      	ldr	r7, [r5, #0]
 801079a:	602b      	str	r3, [r5, #0]
 801079c:	d032      	beq.n	8010804 <__sflush_r+0x98>
 801079e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80107a0:	89a3      	ldrh	r3, [r4, #12]
 80107a2:	075a      	lsls	r2, r3, #29
 80107a4:	d505      	bpl.n	80107b2 <__sflush_r+0x46>
 80107a6:	6863      	ldr	r3, [r4, #4]
 80107a8:	1ac0      	subs	r0, r0, r3
 80107aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80107ac:	b10b      	cbz	r3, 80107b2 <__sflush_r+0x46>
 80107ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80107b0:	1ac0      	subs	r0, r0, r3
 80107b2:	2300      	movs	r3, #0
 80107b4:	4602      	mov	r2, r0
 80107b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80107b8:	6a21      	ldr	r1, [r4, #32]
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b0      	blx	r6
 80107be:	1c43      	adds	r3, r0, #1
 80107c0:	89a3      	ldrh	r3, [r4, #12]
 80107c2:	d106      	bne.n	80107d2 <__sflush_r+0x66>
 80107c4:	6829      	ldr	r1, [r5, #0]
 80107c6:	291d      	cmp	r1, #29
 80107c8:	d82c      	bhi.n	8010824 <__sflush_r+0xb8>
 80107ca:	4a2a      	ldr	r2, [pc, #168]	; (8010874 <__sflush_r+0x108>)
 80107cc:	40ca      	lsrs	r2, r1
 80107ce:	07d6      	lsls	r6, r2, #31
 80107d0:	d528      	bpl.n	8010824 <__sflush_r+0xb8>
 80107d2:	2200      	movs	r2, #0
 80107d4:	6062      	str	r2, [r4, #4]
 80107d6:	04d9      	lsls	r1, r3, #19
 80107d8:	6922      	ldr	r2, [r4, #16]
 80107da:	6022      	str	r2, [r4, #0]
 80107dc:	d504      	bpl.n	80107e8 <__sflush_r+0x7c>
 80107de:	1c42      	adds	r2, r0, #1
 80107e0:	d101      	bne.n	80107e6 <__sflush_r+0x7a>
 80107e2:	682b      	ldr	r3, [r5, #0]
 80107e4:	b903      	cbnz	r3, 80107e8 <__sflush_r+0x7c>
 80107e6:	6560      	str	r0, [r4, #84]	; 0x54
 80107e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107ea:	602f      	str	r7, [r5, #0]
 80107ec:	2900      	cmp	r1, #0
 80107ee:	d0ca      	beq.n	8010786 <__sflush_r+0x1a>
 80107f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107f4:	4299      	cmp	r1, r3
 80107f6:	d002      	beq.n	80107fe <__sflush_r+0x92>
 80107f8:	4628      	mov	r0, r5
 80107fa:	f000 f9d3 	bl	8010ba4 <_free_r>
 80107fe:	2000      	movs	r0, #0
 8010800:	6360      	str	r0, [r4, #52]	; 0x34
 8010802:	e7c1      	b.n	8010788 <__sflush_r+0x1c>
 8010804:	6a21      	ldr	r1, [r4, #32]
 8010806:	2301      	movs	r3, #1
 8010808:	4628      	mov	r0, r5
 801080a:	47b0      	blx	r6
 801080c:	1c41      	adds	r1, r0, #1
 801080e:	d1c7      	bne.n	80107a0 <__sflush_r+0x34>
 8010810:	682b      	ldr	r3, [r5, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d0c4      	beq.n	80107a0 <__sflush_r+0x34>
 8010816:	2b1d      	cmp	r3, #29
 8010818:	d001      	beq.n	801081e <__sflush_r+0xb2>
 801081a:	2b16      	cmp	r3, #22
 801081c:	d101      	bne.n	8010822 <__sflush_r+0xb6>
 801081e:	602f      	str	r7, [r5, #0]
 8010820:	e7b1      	b.n	8010786 <__sflush_r+0x1a>
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010828:	81a3      	strh	r3, [r4, #12]
 801082a:	e7ad      	b.n	8010788 <__sflush_r+0x1c>
 801082c:	690f      	ldr	r7, [r1, #16]
 801082e:	2f00      	cmp	r7, #0
 8010830:	d0a9      	beq.n	8010786 <__sflush_r+0x1a>
 8010832:	0793      	lsls	r3, r2, #30
 8010834:	680e      	ldr	r6, [r1, #0]
 8010836:	bf08      	it	eq
 8010838:	694b      	ldreq	r3, [r1, #20]
 801083a:	600f      	str	r7, [r1, #0]
 801083c:	bf18      	it	ne
 801083e:	2300      	movne	r3, #0
 8010840:	eba6 0807 	sub.w	r8, r6, r7
 8010844:	608b      	str	r3, [r1, #8]
 8010846:	f1b8 0f00 	cmp.w	r8, #0
 801084a:	dd9c      	ble.n	8010786 <__sflush_r+0x1a>
 801084c:	6a21      	ldr	r1, [r4, #32]
 801084e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010850:	4643      	mov	r3, r8
 8010852:	463a      	mov	r2, r7
 8010854:	4628      	mov	r0, r5
 8010856:	47b0      	blx	r6
 8010858:	2800      	cmp	r0, #0
 801085a:	dc06      	bgt.n	801086a <__sflush_r+0xfe>
 801085c:	89a3      	ldrh	r3, [r4, #12]
 801085e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010862:	81a3      	strh	r3, [r4, #12]
 8010864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010868:	e78e      	b.n	8010788 <__sflush_r+0x1c>
 801086a:	4407      	add	r7, r0
 801086c:	eba8 0800 	sub.w	r8, r8, r0
 8010870:	e7e9      	b.n	8010846 <__sflush_r+0xda>
 8010872:	bf00      	nop
 8010874:	20400001 	.word	0x20400001

08010878 <_fflush_r>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	690b      	ldr	r3, [r1, #16]
 801087c:	4605      	mov	r5, r0
 801087e:	460c      	mov	r4, r1
 8010880:	b913      	cbnz	r3, 8010888 <_fflush_r+0x10>
 8010882:	2500      	movs	r5, #0
 8010884:	4628      	mov	r0, r5
 8010886:	bd38      	pop	{r3, r4, r5, pc}
 8010888:	b118      	cbz	r0, 8010892 <_fflush_r+0x1a>
 801088a:	6983      	ldr	r3, [r0, #24]
 801088c:	b90b      	cbnz	r3, 8010892 <_fflush_r+0x1a>
 801088e:	f000 f887 	bl	80109a0 <__sinit>
 8010892:	4b14      	ldr	r3, [pc, #80]	; (80108e4 <_fflush_r+0x6c>)
 8010894:	429c      	cmp	r4, r3
 8010896:	d11b      	bne.n	80108d0 <_fflush_r+0x58>
 8010898:	686c      	ldr	r4, [r5, #4]
 801089a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d0ef      	beq.n	8010882 <_fflush_r+0xa>
 80108a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80108a4:	07d0      	lsls	r0, r2, #31
 80108a6:	d404      	bmi.n	80108b2 <_fflush_r+0x3a>
 80108a8:	0599      	lsls	r1, r3, #22
 80108aa:	d402      	bmi.n	80108b2 <_fflush_r+0x3a>
 80108ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108ae:	f7ff fb1a 	bl	800fee6 <__retarget_lock_acquire_recursive>
 80108b2:	4628      	mov	r0, r5
 80108b4:	4621      	mov	r1, r4
 80108b6:	f7ff ff59 	bl	801076c <__sflush_r>
 80108ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80108bc:	07da      	lsls	r2, r3, #31
 80108be:	4605      	mov	r5, r0
 80108c0:	d4e0      	bmi.n	8010884 <_fflush_r+0xc>
 80108c2:	89a3      	ldrh	r3, [r4, #12]
 80108c4:	059b      	lsls	r3, r3, #22
 80108c6:	d4dd      	bmi.n	8010884 <_fflush_r+0xc>
 80108c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80108ca:	f7ff fb0d 	bl	800fee8 <__retarget_lock_release_recursive>
 80108ce:	e7d9      	b.n	8010884 <_fflush_r+0xc>
 80108d0:	4b05      	ldr	r3, [pc, #20]	; (80108e8 <_fflush_r+0x70>)
 80108d2:	429c      	cmp	r4, r3
 80108d4:	d101      	bne.n	80108da <_fflush_r+0x62>
 80108d6:	68ac      	ldr	r4, [r5, #8]
 80108d8:	e7df      	b.n	801089a <_fflush_r+0x22>
 80108da:	4b04      	ldr	r3, [pc, #16]	; (80108ec <_fflush_r+0x74>)
 80108dc:	429c      	cmp	r4, r3
 80108de:	bf08      	it	eq
 80108e0:	68ec      	ldreq	r4, [r5, #12]
 80108e2:	e7da      	b.n	801089a <_fflush_r+0x22>
 80108e4:	08011990 	.word	0x08011990
 80108e8:	080119b0 	.word	0x080119b0
 80108ec:	08011970 	.word	0x08011970

080108f0 <std>:
 80108f0:	2300      	movs	r3, #0
 80108f2:	b510      	push	{r4, lr}
 80108f4:	4604      	mov	r4, r0
 80108f6:	e9c0 3300 	strd	r3, r3, [r0]
 80108fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108fe:	6083      	str	r3, [r0, #8]
 8010900:	8181      	strh	r1, [r0, #12]
 8010902:	6643      	str	r3, [r0, #100]	; 0x64
 8010904:	81c2      	strh	r2, [r0, #14]
 8010906:	6183      	str	r3, [r0, #24]
 8010908:	4619      	mov	r1, r3
 801090a:	2208      	movs	r2, #8
 801090c:	305c      	adds	r0, #92	; 0x5c
 801090e:	f7ff fb22 	bl	800ff56 <memset>
 8010912:	4b05      	ldr	r3, [pc, #20]	; (8010928 <std+0x38>)
 8010914:	6263      	str	r3, [r4, #36]	; 0x24
 8010916:	4b05      	ldr	r3, [pc, #20]	; (801092c <std+0x3c>)
 8010918:	62a3      	str	r3, [r4, #40]	; 0x28
 801091a:	4b05      	ldr	r3, [pc, #20]	; (8010930 <std+0x40>)
 801091c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801091e:	4b05      	ldr	r3, [pc, #20]	; (8010934 <std+0x44>)
 8010920:	6224      	str	r4, [r4, #32]
 8010922:	6323      	str	r3, [r4, #48]	; 0x30
 8010924:	bd10      	pop	{r4, pc}
 8010926:	bf00      	nop
 8010928:	0801101d 	.word	0x0801101d
 801092c:	0801103f 	.word	0x0801103f
 8010930:	08011077 	.word	0x08011077
 8010934:	0801109b 	.word	0x0801109b

08010938 <_cleanup_r>:
 8010938:	4901      	ldr	r1, [pc, #4]	; (8010940 <_cleanup_r+0x8>)
 801093a:	f000 b8af 	b.w	8010a9c <_fwalk_reent>
 801093e:	bf00      	nop
 8010940:	08010879 	.word	0x08010879

08010944 <__sfmoreglue>:
 8010944:	b570      	push	{r4, r5, r6, lr}
 8010946:	1e4a      	subs	r2, r1, #1
 8010948:	2568      	movs	r5, #104	; 0x68
 801094a:	4355      	muls	r5, r2
 801094c:	460e      	mov	r6, r1
 801094e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010952:	f000 f977 	bl	8010c44 <_malloc_r>
 8010956:	4604      	mov	r4, r0
 8010958:	b140      	cbz	r0, 801096c <__sfmoreglue+0x28>
 801095a:	2100      	movs	r1, #0
 801095c:	e9c0 1600 	strd	r1, r6, [r0]
 8010960:	300c      	adds	r0, #12
 8010962:	60a0      	str	r0, [r4, #8]
 8010964:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010968:	f7ff faf5 	bl	800ff56 <memset>
 801096c:	4620      	mov	r0, r4
 801096e:	bd70      	pop	{r4, r5, r6, pc}

08010970 <__sfp_lock_acquire>:
 8010970:	4801      	ldr	r0, [pc, #4]	; (8010978 <__sfp_lock_acquire+0x8>)
 8010972:	f7ff bab8 	b.w	800fee6 <__retarget_lock_acquire_recursive>
 8010976:	bf00      	nop
 8010978:	2000b698 	.word	0x2000b698

0801097c <__sfp_lock_release>:
 801097c:	4801      	ldr	r0, [pc, #4]	; (8010984 <__sfp_lock_release+0x8>)
 801097e:	f7ff bab3 	b.w	800fee8 <__retarget_lock_release_recursive>
 8010982:	bf00      	nop
 8010984:	2000b698 	.word	0x2000b698

08010988 <__sinit_lock_acquire>:
 8010988:	4801      	ldr	r0, [pc, #4]	; (8010990 <__sinit_lock_acquire+0x8>)
 801098a:	f7ff baac 	b.w	800fee6 <__retarget_lock_acquire_recursive>
 801098e:	bf00      	nop
 8010990:	2000b693 	.word	0x2000b693

08010994 <__sinit_lock_release>:
 8010994:	4801      	ldr	r0, [pc, #4]	; (801099c <__sinit_lock_release+0x8>)
 8010996:	f7ff baa7 	b.w	800fee8 <__retarget_lock_release_recursive>
 801099a:	bf00      	nop
 801099c:	2000b693 	.word	0x2000b693

080109a0 <__sinit>:
 80109a0:	b510      	push	{r4, lr}
 80109a2:	4604      	mov	r4, r0
 80109a4:	f7ff fff0 	bl	8010988 <__sinit_lock_acquire>
 80109a8:	69a3      	ldr	r3, [r4, #24]
 80109aa:	b11b      	cbz	r3, 80109b4 <__sinit+0x14>
 80109ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b0:	f7ff bff0 	b.w	8010994 <__sinit_lock_release>
 80109b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80109b8:	6523      	str	r3, [r4, #80]	; 0x50
 80109ba:	4b13      	ldr	r3, [pc, #76]	; (8010a08 <__sinit+0x68>)
 80109bc:	4a13      	ldr	r2, [pc, #76]	; (8010a0c <__sinit+0x6c>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80109c2:	42a3      	cmp	r3, r4
 80109c4:	bf04      	itt	eq
 80109c6:	2301      	moveq	r3, #1
 80109c8:	61a3      	streq	r3, [r4, #24]
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 f820 	bl	8010a10 <__sfp>
 80109d0:	6060      	str	r0, [r4, #4]
 80109d2:	4620      	mov	r0, r4
 80109d4:	f000 f81c 	bl	8010a10 <__sfp>
 80109d8:	60a0      	str	r0, [r4, #8]
 80109da:	4620      	mov	r0, r4
 80109dc:	f000 f818 	bl	8010a10 <__sfp>
 80109e0:	2200      	movs	r2, #0
 80109e2:	60e0      	str	r0, [r4, #12]
 80109e4:	2104      	movs	r1, #4
 80109e6:	6860      	ldr	r0, [r4, #4]
 80109e8:	f7ff ff82 	bl	80108f0 <std>
 80109ec:	68a0      	ldr	r0, [r4, #8]
 80109ee:	2201      	movs	r2, #1
 80109f0:	2109      	movs	r1, #9
 80109f2:	f7ff ff7d 	bl	80108f0 <std>
 80109f6:	68e0      	ldr	r0, [r4, #12]
 80109f8:	2202      	movs	r2, #2
 80109fa:	2112      	movs	r1, #18
 80109fc:	f7ff ff78 	bl	80108f0 <std>
 8010a00:	2301      	movs	r3, #1
 8010a02:	61a3      	str	r3, [r4, #24]
 8010a04:	e7d2      	b.n	80109ac <__sinit+0xc>
 8010a06:	bf00      	nop
 8010a08:	08011938 	.word	0x08011938
 8010a0c:	08010939 	.word	0x08010939

08010a10 <__sfp>:
 8010a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a12:	4607      	mov	r7, r0
 8010a14:	f7ff ffac 	bl	8010970 <__sfp_lock_acquire>
 8010a18:	4b1e      	ldr	r3, [pc, #120]	; (8010a94 <__sfp+0x84>)
 8010a1a:	681e      	ldr	r6, [r3, #0]
 8010a1c:	69b3      	ldr	r3, [r6, #24]
 8010a1e:	b913      	cbnz	r3, 8010a26 <__sfp+0x16>
 8010a20:	4630      	mov	r0, r6
 8010a22:	f7ff ffbd 	bl	80109a0 <__sinit>
 8010a26:	3648      	adds	r6, #72	; 0x48
 8010a28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a2c:	3b01      	subs	r3, #1
 8010a2e:	d503      	bpl.n	8010a38 <__sfp+0x28>
 8010a30:	6833      	ldr	r3, [r6, #0]
 8010a32:	b30b      	cbz	r3, 8010a78 <__sfp+0x68>
 8010a34:	6836      	ldr	r6, [r6, #0]
 8010a36:	e7f7      	b.n	8010a28 <__sfp+0x18>
 8010a38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a3c:	b9d5      	cbnz	r5, 8010a74 <__sfp+0x64>
 8010a3e:	4b16      	ldr	r3, [pc, #88]	; (8010a98 <__sfp+0x88>)
 8010a40:	60e3      	str	r3, [r4, #12]
 8010a42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010a46:	6665      	str	r5, [r4, #100]	; 0x64
 8010a48:	f7ff fa4c 	bl	800fee4 <__retarget_lock_init_recursive>
 8010a4c:	f7ff ff96 	bl	801097c <__sfp_lock_release>
 8010a50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010a54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a58:	6025      	str	r5, [r4, #0]
 8010a5a:	61a5      	str	r5, [r4, #24]
 8010a5c:	2208      	movs	r2, #8
 8010a5e:	4629      	mov	r1, r5
 8010a60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a64:	f7ff fa77 	bl	800ff56 <memset>
 8010a68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a70:	4620      	mov	r0, r4
 8010a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a74:	3468      	adds	r4, #104	; 0x68
 8010a76:	e7d9      	b.n	8010a2c <__sfp+0x1c>
 8010a78:	2104      	movs	r1, #4
 8010a7a:	4638      	mov	r0, r7
 8010a7c:	f7ff ff62 	bl	8010944 <__sfmoreglue>
 8010a80:	4604      	mov	r4, r0
 8010a82:	6030      	str	r0, [r6, #0]
 8010a84:	2800      	cmp	r0, #0
 8010a86:	d1d5      	bne.n	8010a34 <__sfp+0x24>
 8010a88:	f7ff ff78 	bl	801097c <__sfp_lock_release>
 8010a8c:	230c      	movs	r3, #12
 8010a8e:	603b      	str	r3, [r7, #0]
 8010a90:	e7ee      	b.n	8010a70 <__sfp+0x60>
 8010a92:	bf00      	nop
 8010a94:	08011938 	.word	0x08011938
 8010a98:	ffff0001 	.word	0xffff0001

08010a9c <_fwalk_reent>:
 8010a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa0:	4606      	mov	r6, r0
 8010aa2:	4688      	mov	r8, r1
 8010aa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010aa8:	2700      	movs	r7, #0
 8010aaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010aae:	f1b9 0901 	subs.w	r9, r9, #1
 8010ab2:	d505      	bpl.n	8010ac0 <_fwalk_reent+0x24>
 8010ab4:	6824      	ldr	r4, [r4, #0]
 8010ab6:	2c00      	cmp	r4, #0
 8010ab8:	d1f7      	bne.n	8010aaa <_fwalk_reent+0xe>
 8010aba:	4638      	mov	r0, r7
 8010abc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ac0:	89ab      	ldrh	r3, [r5, #12]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d907      	bls.n	8010ad6 <_fwalk_reent+0x3a>
 8010ac6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010aca:	3301      	adds	r3, #1
 8010acc:	d003      	beq.n	8010ad6 <_fwalk_reent+0x3a>
 8010ace:	4629      	mov	r1, r5
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	47c0      	blx	r8
 8010ad4:	4307      	orrs	r7, r0
 8010ad6:	3568      	adds	r5, #104	; 0x68
 8010ad8:	e7e9      	b.n	8010aae <_fwalk_reent+0x12>

08010ada <__swhatbuf_r>:
 8010ada:	b570      	push	{r4, r5, r6, lr}
 8010adc:	460e      	mov	r6, r1
 8010ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ae2:	2900      	cmp	r1, #0
 8010ae4:	b096      	sub	sp, #88	; 0x58
 8010ae6:	4614      	mov	r4, r2
 8010ae8:	461d      	mov	r5, r3
 8010aea:	da07      	bge.n	8010afc <__swhatbuf_r+0x22>
 8010aec:	2300      	movs	r3, #0
 8010aee:	602b      	str	r3, [r5, #0]
 8010af0:	89b3      	ldrh	r3, [r6, #12]
 8010af2:	061a      	lsls	r2, r3, #24
 8010af4:	d410      	bmi.n	8010b18 <__swhatbuf_r+0x3e>
 8010af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010afa:	e00e      	b.n	8010b1a <__swhatbuf_r+0x40>
 8010afc:	466a      	mov	r2, sp
 8010afe:	f000 faf3 	bl	80110e8 <_fstat_r>
 8010b02:	2800      	cmp	r0, #0
 8010b04:	dbf2      	blt.n	8010aec <__swhatbuf_r+0x12>
 8010b06:	9a01      	ldr	r2, [sp, #4]
 8010b08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b10:	425a      	negs	r2, r3
 8010b12:	415a      	adcs	r2, r3
 8010b14:	602a      	str	r2, [r5, #0]
 8010b16:	e7ee      	b.n	8010af6 <__swhatbuf_r+0x1c>
 8010b18:	2340      	movs	r3, #64	; 0x40
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	6023      	str	r3, [r4, #0]
 8010b1e:	b016      	add	sp, #88	; 0x58
 8010b20:	bd70      	pop	{r4, r5, r6, pc}
	...

08010b24 <__smakebuf_r>:
 8010b24:	898b      	ldrh	r3, [r1, #12]
 8010b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b28:	079d      	lsls	r5, r3, #30
 8010b2a:	4606      	mov	r6, r0
 8010b2c:	460c      	mov	r4, r1
 8010b2e:	d507      	bpl.n	8010b40 <__smakebuf_r+0x1c>
 8010b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b34:	6023      	str	r3, [r4, #0]
 8010b36:	6123      	str	r3, [r4, #16]
 8010b38:	2301      	movs	r3, #1
 8010b3a:	6163      	str	r3, [r4, #20]
 8010b3c:	b002      	add	sp, #8
 8010b3e:	bd70      	pop	{r4, r5, r6, pc}
 8010b40:	ab01      	add	r3, sp, #4
 8010b42:	466a      	mov	r2, sp
 8010b44:	f7ff ffc9 	bl	8010ada <__swhatbuf_r>
 8010b48:	9900      	ldr	r1, [sp, #0]
 8010b4a:	4605      	mov	r5, r0
 8010b4c:	4630      	mov	r0, r6
 8010b4e:	f000 f879 	bl	8010c44 <_malloc_r>
 8010b52:	b948      	cbnz	r0, 8010b68 <__smakebuf_r+0x44>
 8010b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b58:	059a      	lsls	r2, r3, #22
 8010b5a:	d4ef      	bmi.n	8010b3c <__smakebuf_r+0x18>
 8010b5c:	f023 0303 	bic.w	r3, r3, #3
 8010b60:	f043 0302 	orr.w	r3, r3, #2
 8010b64:	81a3      	strh	r3, [r4, #12]
 8010b66:	e7e3      	b.n	8010b30 <__smakebuf_r+0xc>
 8010b68:	4b0d      	ldr	r3, [pc, #52]	; (8010ba0 <__smakebuf_r+0x7c>)
 8010b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b6c:	89a3      	ldrh	r3, [r4, #12]
 8010b6e:	6020      	str	r0, [r4, #0]
 8010b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b74:	81a3      	strh	r3, [r4, #12]
 8010b76:	9b00      	ldr	r3, [sp, #0]
 8010b78:	6163      	str	r3, [r4, #20]
 8010b7a:	9b01      	ldr	r3, [sp, #4]
 8010b7c:	6120      	str	r0, [r4, #16]
 8010b7e:	b15b      	cbz	r3, 8010b98 <__smakebuf_r+0x74>
 8010b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b84:	4630      	mov	r0, r6
 8010b86:	f000 fac1 	bl	801110c <_isatty_r>
 8010b8a:	b128      	cbz	r0, 8010b98 <__smakebuf_r+0x74>
 8010b8c:	89a3      	ldrh	r3, [r4, #12]
 8010b8e:	f023 0303 	bic.w	r3, r3, #3
 8010b92:	f043 0301 	orr.w	r3, r3, #1
 8010b96:	81a3      	strh	r3, [r4, #12]
 8010b98:	89a0      	ldrh	r0, [r4, #12]
 8010b9a:	4305      	orrs	r5, r0
 8010b9c:	81a5      	strh	r5, [r4, #12]
 8010b9e:	e7cd      	b.n	8010b3c <__smakebuf_r+0x18>
 8010ba0:	08010939 	.word	0x08010939

08010ba4 <_free_r>:
 8010ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d048      	beq.n	8010c3c <_free_r+0x98>
 8010baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bae:	9001      	str	r0, [sp, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8010bb6:	bfb8      	it	lt
 8010bb8:	18e4      	addlt	r4, r4, r3
 8010bba:	f000 fac9 	bl	8011150 <__malloc_lock>
 8010bbe:	4a20      	ldr	r2, [pc, #128]	; (8010c40 <_free_r+0x9c>)
 8010bc0:	9801      	ldr	r0, [sp, #4]
 8010bc2:	6813      	ldr	r3, [r2, #0]
 8010bc4:	4615      	mov	r5, r2
 8010bc6:	b933      	cbnz	r3, 8010bd6 <_free_r+0x32>
 8010bc8:	6063      	str	r3, [r4, #4]
 8010bca:	6014      	str	r4, [r2, #0]
 8010bcc:	b003      	add	sp, #12
 8010bce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bd2:	f000 bac3 	b.w	801115c <__malloc_unlock>
 8010bd6:	42a3      	cmp	r3, r4
 8010bd8:	d90b      	bls.n	8010bf2 <_free_r+0x4e>
 8010bda:	6821      	ldr	r1, [r4, #0]
 8010bdc:	1862      	adds	r2, r4, r1
 8010bde:	4293      	cmp	r3, r2
 8010be0:	bf04      	itt	eq
 8010be2:	681a      	ldreq	r2, [r3, #0]
 8010be4:	685b      	ldreq	r3, [r3, #4]
 8010be6:	6063      	str	r3, [r4, #4]
 8010be8:	bf04      	itt	eq
 8010bea:	1852      	addeq	r2, r2, r1
 8010bec:	6022      	streq	r2, [r4, #0]
 8010bee:	602c      	str	r4, [r5, #0]
 8010bf0:	e7ec      	b.n	8010bcc <_free_r+0x28>
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	b10b      	cbz	r3, 8010bfc <_free_r+0x58>
 8010bf8:	42a3      	cmp	r3, r4
 8010bfa:	d9fa      	bls.n	8010bf2 <_free_r+0x4e>
 8010bfc:	6811      	ldr	r1, [r2, #0]
 8010bfe:	1855      	adds	r5, r2, r1
 8010c00:	42a5      	cmp	r5, r4
 8010c02:	d10b      	bne.n	8010c1c <_free_r+0x78>
 8010c04:	6824      	ldr	r4, [r4, #0]
 8010c06:	4421      	add	r1, r4
 8010c08:	1854      	adds	r4, r2, r1
 8010c0a:	42a3      	cmp	r3, r4
 8010c0c:	6011      	str	r1, [r2, #0]
 8010c0e:	d1dd      	bne.n	8010bcc <_free_r+0x28>
 8010c10:	681c      	ldr	r4, [r3, #0]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	6053      	str	r3, [r2, #4]
 8010c16:	4421      	add	r1, r4
 8010c18:	6011      	str	r1, [r2, #0]
 8010c1a:	e7d7      	b.n	8010bcc <_free_r+0x28>
 8010c1c:	d902      	bls.n	8010c24 <_free_r+0x80>
 8010c1e:	230c      	movs	r3, #12
 8010c20:	6003      	str	r3, [r0, #0]
 8010c22:	e7d3      	b.n	8010bcc <_free_r+0x28>
 8010c24:	6825      	ldr	r5, [r4, #0]
 8010c26:	1961      	adds	r1, r4, r5
 8010c28:	428b      	cmp	r3, r1
 8010c2a:	bf04      	itt	eq
 8010c2c:	6819      	ldreq	r1, [r3, #0]
 8010c2e:	685b      	ldreq	r3, [r3, #4]
 8010c30:	6063      	str	r3, [r4, #4]
 8010c32:	bf04      	itt	eq
 8010c34:	1949      	addeq	r1, r1, r5
 8010c36:	6021      	streq	r1, [r4, #0]
 8010c38:	6054      	str	r4, [r2, #4]
 8010c3a:	e7c7      	b.n	8010bcc <_free_r+0x28>
 8010c3c:	b003      	add	sp, #12
 8010c3e:	bd30      	pop	{r4, r5, pc}
 8010c40:	20008790 	.word	0x20008790

08010c44 <_malloc_r>:
 8010c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c46:	1ccd      	adds	r5, r1, #3
 8010c48:	f025 0503 	bic.w	r5, r5, #3
 8010c4c:	3508      	adds	r5, #8
 8010c4e:	2d0c      	cmp	r5, #12
 8010c50:	bf38      	it	cc
 8010c52:	250c      	movcc	r5, #12
 8010c54:	2d00      	cmp	r5, #0
 8010c56:	4606      	mov	r6, r0
 8010c58:	db01      	blt.n	8010c5e <_malloc_r+0x1a>
 8010c5a:	42a9      	cmp	r1, r5
 8010c5c:	d903      	bls.n	8010c66 <_malloc_r+0x22>
 8010c5e:	230c      	movs	r3, #12
 8010c60:	6033      	str	r3, [r6, #0]
 8010c62:	2000      	movs	r0, #0
 8010c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c66:	f000 fa73 	bl	8011150 <__malloc_lock>
 8010c6a:	4921      	ldr	r1, [pc, #132]	; (8010cf0 <_malloc_r+0xac>)
 8010c6c:	680a      	ldr	r2, [r1, #0]
 8010c6e:	4614      	mov	r4, r2
 8010c70:	b99c      	cbnz	r4, 8010c9a <_malloc_r+0x56>
 8010c72:	4f20      	ldr	r7, [pc, #128]	; (8010cf4 <_malloc_r+0xb0>)
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	b923      	cbnz	r3, 8010c82 <_malloc_r+0x3e>
 8010c78:	4621      	mov	r1, r4
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f000 f9be 	bl	8010ffc <_sbrk_r>
 8010c80:	6038      	str	r0, [r7, #0]
 8010c82:	4629      	mov	r1, r5
 8010c84:	4630      	mov	r0, r6
 8010c86:	f000 f9b9 	bl	8010ffc <_sbrk_r>
 8010c8a:	1c43      	adds	r3, r0, #1
 8010c8c:	d123      	bne.n	8010cd6 <_malloc_r+0x92>
 8010c8e:	230c      	movs	r3, #12
 8010c90:	6033      	str	r3, [r6, #0]
 8010c92:	4630      	mov	r0, r6
 8010c94:	f000 fa62 	bl	801115c <__malloc_unlock>
 8010c98:	e7e3      	b.n	8010c62 <_malloc_r+0x1e>
 8010c9a:	6823      	ldr	r3, [r4, #0]
 8010c9c:	1b5b      	subs	r3, r3, r5
 8010c9e:	d417      	bmi.n	8010cd0 <_malloc_r+0x8c>
 8010ca0:	2b0b      	cmp	r3, #11
 8010ca2:	d903      	bls.n	8010cac <_malloc_r+0x68>
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	441c      	add	r4, r3
 8010ca8:	6025      	str	r5, [r4, #0]
 8010caa:	e004      	b.n	8010cb6 <_malloc_r+0x72>
 8010cac:	6863      	ldr	r3, [r4, #4]
 8010cae:	42a2      	cmp	r2, r4
 8010cb0:	bf0c      	ite	eq
 8010cb2:	600b      	streq	r3, [r1, #0]
 8010cb4:	6053      	strne	r3, [r2, #4]
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f000 fa50 	bl	801115c <__malloc_unlock>
 8010cbc:	f104 000b 	add.w	r0, r4, #11
 8010cc0:	1d23      	adds	r3, r4, #4
 8010cc2:	f020 0007 	bic.w	r0, r0, #7
 8010cc6:	1ac2      	subs	r2, r0, r3
 8010cc8:	d0cc      	beq.n	8010c64 <_malloc_r+0x20>
 8010cca:	1a1b      	subs	r3, r3, r0
 8010ccc:	50a3      	str	r3, [r4, r2]
 8010cce:	e7c9      	b.n	8010c64 <_malloc_r+0x20>
 8010cd0:	4622      	mov	r2, r4
 8010cd2:	6864      	ldr	r4, [r4, #4]
 8010cd4:	e7cc      	b.n	8010c70 <_malloc_r+0x2c>
 8010cd6:	1cc4      	adds	r4, r0, #3
 8010cd8:	f024 0403 	bic.w	r4, r4, #3
 8010cdc:	42a0      	cmp	r0, r4
 8010cde:	d0e3      	beq.n	8010ca8 <_malloc_r+0x64>
 8010ce0:	1a21      	subs	r1, r4, r0
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	f000 f98a 	bl	8010ffc <_sbrk_r>
 8010ce8:	3001      	adds	r0, #1
 8010cea:	d1dd      	bne.n	8010ca8 <_malloc_r+0x64>
 8010cec:	e7cf      	b.n	8010c8e <_malloc_r+0x4a>
 8010cee:	bf00      	nop
 8010cf0:	20008790 	.word	0x20008790
 8010cf4:	20008794 	.word	0x20008794

08010cf8 <_realloc_r>:
 8010cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfa:	4607      	mov	r7, r0
 8010cfc:	4614      	mov	r4, r2
 8010cfe:	460e      	mov	r6, r1
 8010d00:	b921      	cbnz	r1, 8010d0c <_realloc_r+0x14>
 8010d02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d06:	4611      	mov	r1, r2
 8010d08:	f7ff bf9c 	b.w	8010c44 <_malloc_r>
 8010d0c:	b922      	cbnz	r2, 8010d18 <_realloc_r+0x20>
 8010d0e:	f7ff ff49 	bl	8010ba4 <_free_r>
 8010d12:	4625      	mov	r5, r4
 8010d14:	4628      	mov	r0, r5
 8010d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d18:	f000 fa26 	bl	8011168 <_malloc_usable_size_r>
 8010d1c:	42a0      	cmp	r0, r4
 8010d1e:	d20f      	bcs.n	8010d40 <_realloc_r+0x48>
 8010d20:	4621      	mov	r1, r4
 8010d22:	4638      	mov	r0, r7
 8010d24:	f7ff ff8e 	bl	8010c44 <_malloc_r>
 8010d28:	4605      	mov	r5, r0
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d0f2      	beq.n	8010d14 <_realloc_r+0x1c>
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4622      	mov	r2, r4
 8010d32:	f7ff f8e8 	bl	800ff06 <memcpy>
 8010d36:	4631      	mov	r1, r6
 8010d38:	4638      	mov	r0, r7
 8010d3a:	f7ff ff33 	bl	8010ba4 <_free_r>
 8010d3e:	e7e9      	b.n	8010d14 <_realloc_r+0x1c>
 8010d40:	4635      	mov	r5, r6
 8010d42:	e7e7      	b.n	8010d14 <_realloc_r+0x1c>

08010d44 <__ssputs_r>:
 8010d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d48:	688e      	ldr	r6, [r1, #8]
 8010d4a:	429e      	cmp	r6, r3
 8010d4c:	4682      	mov	sl, r0
 8010d4e:	460c      	mov	r4, r1
 8010d50:	4690      	mov	r8, r2
 8010d52:	461f      	mov	r7, r3
 8010d54:	d838      	bhi.n	8010dc8 <__ssputs_r+0x84>
 8010d56:	898a      	ldrh	r2, [r1, #12]
 8010d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d5c:	d032      	beq.n	8010dc4 <__ssputs_r+0x80>
 8010d5e:	6825      	ldr	r5, [r4, #0]
 8010d60:	6909      	ldr	r1, [r1, #16]
 8010d62:	eba5 0901 	sub.w	r9, r5, r1
 8010d66:	6965      	ldr	r5, [r4, #20]
 8010d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d70:	3301      	adds	r3, #1
 8010d72:	444b      	add	r3, r9
 8010d74:	106d      	asrs	r5, r5, #1
 8010d76:	429d      	cmp	r5, r3
 8010d78:	bf38      	it	cc
 8010d7a:	461d      	movcc	r5, r3
 8010d7c:	0553      	lsls	r3, r2, #21
 8010d7e:	d531      	bpl.n	8010de4 <__ssputs_r+0xa0>
 8010d80:	4629      	mov	r1, r5
 8010d82:	f7ff ff5f 	bl	8010c44 <_malloc_r>
 8010d86:	4606      	mov	r6, r0
 8010d88:	b950      	cbnz	r0, 8010da0 <__ssputs_r+0x5c>
 8010d8a:	230c      	movs	r3, #12
 8010d8c:	f8ca 3000 	str.w	r3, [sl]
 8010d90:	89a3      	ldrh	r3, [r4, #12]
 8010d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d96:	81a3      	strh	r3, [r4, #12]
 8010d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010da0:	6921      	ldr	r1, [r4, #16]
 8010da2:	464a      	mov	r2, r9
 8010da4:	f7ff f8af 	bl	800ff06 <memcpy>
 8010da8:	89a3      	ldrh	r3, [r4, #12]
 8010daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db2:	81a3      	strh	r3, [r4, #12]
 8010db4:	6126      	str	r6, [r4, #16]
 8010db6:	6165      	str	r5, [r4, #20]
 8010db8:	444e      	add	r6, r9
 8010dba:	eba5 0509 	sub.w	r5, r5, r9
 8010dbe:	6026      	str	r6, [r4, #0]
 8010dc0:	60a5      	str	r5, [r4, #8]
 8010dc2:	463e      	mov	r6, r7
 8010dc4:	42be      	cmp	r6, r7
 8010dc6:	d900      	bls.n	8010dca <__ssputs_r+0x86>
 8010dc8:	463e      	mov	r6, r7
 8010dca:	4632      	mov	r2, r6
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	4641      	mov	r1, r8
 8010dd0:	f7ff f8a7 	bl	800ff22 <memmove>
 8010dd4:	68a3      	ldr	r3, [r4, #8]
 8010dd6:	6822      	ldr	r2, [r4, #0]
 8010dd8:	1b9b      	subs	r3, r3, r6
 8010dda:	4432      	add	r2, r6
 8010ddc:	60a3      	str	r3, [r4, #8]
 8010dde:	6022      	str	r2, [r4, #0]
 8010de0:	2000      	movs	r0, #0
 8010de2:	e7db      	b.n	8010d9c <__ssputs_r+0x58>
 8010de4:	462a      	mov	r2, r5
 8010de6:	f7ff ff87 	bl	8010cf8 <_realloc_r>
 8010dea:	4606      	mov	r6, r0
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d1e1      	bne.n	8010db4 <__ssputs_r+0x70>
 8010df0:	6921      	ldr	r1, [r4, #16]
 8010df2:	4650      	mov	r0, sl
 8010df4:	f7ff fed6 	bl	8010ba4 <_free_r>
 8010df8:	e7c7      	b.n	8010d8a <__ssputs_r+0x46>
	...

08010dfc <_svfiprintf_r>:
 8010dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e00:	4698      	mov	r8, r3
 8010e02:	898b      	ldrh	r3, [r1, #12]
 8010e04:	061b      	lsls	r3, r3, #24
 8010e06:	b09d      	sub	sp, #116	; 0x74
 8010e08:	4607      	mov	r7, r0
 8010e0a:	460d      	mov	r5, r1
 8010e0c:	4614      	mov	r4, r2
 8010e0e:	d50e      	bpl.n	8010e2e <_svfiprintf_r+0x32>
 8010e10:	690b      	ldr	r3, [r1, #16]
 8010e12:	b963      	cbnz	r3, 8010e2e <_svfiprintf_r+0x32>
 8010e14:	2140      	movs	r1, #64	; 0x40
 8010e16:	f7ff ff15 	bl	8010c44 <_malloc_r>
 8010e1a:	6028      	str	r0, [r5, #0]
 8010e1c:	6128      	str	r0, [r5, #16]
 8010e1e:	b920      	cbnz	r0, 8010e2a <_svfiprintf_r+0x2e>
 8010e20:	230c      	movs	r3, #12
 8010e22:	603b      	str	r3, [r7, #0]
 8010e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e28:	e0d1      	b.n	8010fce <_svfiprintf_r+0x1d2>
 8010e2a:	2340      	movs	r3, #64	; 0x40
 8010e2c:	616b      	str	r3, [r5, #20]
 8010e2e:	2300      	movs	r3, #0
 8010e30:	9309      	str	r3, [sp, #36]	; 0x24
 8010e32:	2320      	movs	r3, #32
 8010e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e3c:	2330      	movs	r3, #48	; 0x30
 8010e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010fe8 <_svfiprintf_r+0x1ec>
 8010e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e46:	f04f 0901 	mov.w	r9, #1
 8010e4a:	4623      	mov	r3, r4
 8010e4c:	469a      	mov	sl, r3
 8010e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e52:	b10a      	cbz	r2, 8010e58 <_svfiprintf_r+0x5c>
 8010e54:	2a25      	cmp	r2, #37	; 0x25
 8010e56:	d1f9      	bne.n	8010e4c <_svfiprintf_r+0x50>
 8010e58:	ebba 0b04 	subs.w	fp, sl, r4
 8010e5c:	d00b      	beq.n	8010e76 <_svfiprintf_r+0x7a>
 8010e5e:	465b      	mov	r3, fp
 8010e60:	4622      	mov	r2, r4
 8010e62:	4629      	mov	r1, r5
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7ff ff6d 	bl	8010d44 <__ssputs_r>
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	f000 80aa 	beq.w	8010fc4 <_svfiprintf_r+0x1c8>
 8010e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e72:	445a      	add	r2, fp
 8010e74:	9209      	str	r2, [sp, #36]	; 0x24
 8010e76:	f89a 3000 	ldrb.w	r3, [sl]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f000 80a2 	beq.w	8010fc4 <_svfiprintf_r+0x1c8>
 8010e80:	2300      	movs	r3, #0
 8010e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e8a:	f10a 0a01 	add.w	sl, sl, #1
 8010e8e:	9304      	str	r3, [sp, #16]
 8010e90:	9307      	str	r3, [sp, #28]
 8010e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e96:	931a      	str	r3, [sp, #104]	; 0x68
 8010e98:	4654      	mov	r4, sl
 8010e9a:	2205      	movs	r2, #5
 8010e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ea0:	4851      	ldr	r0, [pc, #324]	; (8010fe8 <_svfiprintf_r+0x1ec>)
 8010ea2:	f7ef f99d 	bl	80001e0 <memchr>
 8010ea6:	9a04      	ldr	r2, [sp, #16]
 8010ea8:	b9d8      	cbnz	r0, 8010ee2 <_svfiprintf_r+0xe6>
 8010eaa:	06d0      	lsls	r0, r2, #27
 8010eac:	bf44      	itt	mi
 8010eae:	2320      	movmi	r3, #32
 8010eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010eb4:	0711      	lsls	r1, r2, #28
 8010eb6:	bf44      	itt	mi
 8010eb8:	232b      	movmi	r3, #43	; 0x2b
 8010eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ec4:	d015      	beq.n	8010ef2 <_svfiprintf_r+0xf6>
 8010ec6:	9a07      	ldr	r2, [sp, #28]
 8010ec8:	4654      	mov	r4, sl
 8010eca:	2000      	movs	r0, #0
 8010ecc:	f04f 0c0a 	mov.w	ip, #10
 8010ed0:	4621      	mov	r1, r4
 8010ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ed6:	3b30      	subs	r3, #48	; 0x30
 8010ed8:	2b09      	cmp	r3, #9
 8010eda:	d94e      	bls.n	8010f7a <_svfiprintf_r+0x17e>
 8010edc:	b1b0      	cbz	r0, 8010f0c <_svfiprintf_r+0x110>
 8010ede:	9207      	str	r2, [sp, #28]
 8010ee0:	e014      	b.n	8010f0c <_svfiprintf_r+0x110>
 8010ee2:	eba0 0308 	sub.w	r3, r0, r8
 8010ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8010eea:	4313      	orrs	r3, r2
 8010eec:	9304      	str	r3, [sp, #16]
 8010eee:	46a2      	mov	sl, r4
 8010ef0:	e7d2      	b.n	8010e98 <_svfiprintf_r+0x9c>
 8010ef2:	9b03      	ldr	r3, [sp, #12]
 8010ef4:	1d19      	adds	r1, r3, #4
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	9103      	str	r1, [sp, #12]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	bfbb      	ittet	lt
 8010efe:	425b      	neglt	r3, r3
 8010f00:	f042 0202 	orrlt.w	r2, r2, #2
 8010f04:	9307      	strge	r3, [sp, #28]
 8010f06:	9307      	strlt	r3, [sp, #28]
 8010f08:	bfb8      	it	lt
 8010f0a:	9204      	strlt	r2, [sp, #16]
 8010f0c:	7823      	ldrb	r3, [r4, #0]
 8010f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8010f10:	d10c      	bne.n	8010f2c <_svfiprintf_r+0x130>
 8010f12:	7863      	ldrb	r3, [r4, #1]
 8010f14:	2b2a      	cmp	r3, #42	; 0x2a
 8010f16:	d135      	bne.n	8010f84 <_svfiprintf_r+0x188>
 8010f18:	9b03      	ldr	r3, [sp, #12]
 8010f1a:	1d1a      	adds	r2, r3, #4
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	9203      	str	r2, [sp, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	bfb8      	it	lt
 8010f24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010f28:	3402      	adds	r4, #2
 8010f2a:	9305      	str	r3, [sp, #20]
 8010f2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ff8 <_svfiprintf_r+0x1fc>
 8010f30:	7821      	ldrb	r1, [r4, #0]
 8010f32:	2203      	movs	r2, #3
 8010f34:	4650      	mov	r0, sl
 8010f36:	f7ef f953 	bl	80001e0 <memchr>
 8010f3a:	b140      	cbz	r0, 8010f4e <_svfiprintf_r+0x152>
 8010f3c:	2340      	movs	r3, #64	; 0x40
 8010f3e:	eba0 000a 	sub.w	r0, r0, sl
 8010f42:	fa03 f000 	lsl.w	r0, r3, r0
 8010f46:	9b04      	ldr	r3, [sp, #16]
 8010f48:	4303      	orrs	r3, r0
 8010f4a:	3401      	adds	r4, #1
 8010f4c:	9304      	str	r3, [sp, #16]
 8010f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f52:	4826      	ldr	r0, [pc, #152]	; (8010fec <_svfiprintf_r+0x1f0>)
 8010f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f58:	2206      	movs	r2, #6
 8010f5a:	f7ef f941 	bl	80001e0 <memchr>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d038      	beq.n	8010fd4 <_svfiprintf_r+0x1d8>
 8010f62:	4b23      	ldr	r3, [pc, #140]	; (8010ff0 <_svfiprintf_r+0x1f4>)
 8010f64:	bb1b      	cbnz	r3, 8010fae <_svfiprintf_r+0x1b2>
 8010f66:	9b03      	ldr	r3, [sp, #12]
 8010f68:	3307      	adds	r3, #7
 8010f6a:	f023 0307 	bic.w	r3, r3, #7
 8010f6e:	3308      	adds	r3, #8
 8010f70:	9303      	str	r3, [sp, #12]
 8010f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f74:	4433      	add	r3, r6
 8010f76:	9309      	str	r3, [sp, #36]	; 0x24
 8010f78:	e767      	b.n	8010e4a <_svfiprintf_r+0x4e>
 8010f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f7e:	460c      	mov	r4, r1
 8010f80:	2001      	movs	r0, #1
 8010f82:	e7a5      	b.n	8010ed0 <_svfiprintf_r+0xd4>
 8010f84:	2300      	movs	r3, #0
 8010f86:	3401      	adds	r4, #1
 8010f88:	9305      	str	r3, [sp, #20]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	f04f 0c0a 	mov.w	ip, #10
 8010f90:	4620      	mov	r0, r4
 8010f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f96:	3a30      	subs	r2, #48	; 0x30
 8010f98:	2a09      	cmp	r2, #9
 8010f9a:	d903      	bls.n	8010fa4 <_svfiprintf_r+0x1a8>
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d0c5      	beq.n	8010f2c <_svfiprintf_r+0x130>
 8010fa0:	9105      	str	r1, [sp, #20]
 8010fa2:	e7c3      	b.n	8010f2c <_svfiprintf_r+0x130>
 8010fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fa8:	4604      	mov	r4, r0
 8010faa:	2301      	movs	r3, #1
 8010fac:	e7f0      	b.n	8010f90 <_svfiprintf_r+0x194>
 8010fae:	ab03      	add	r3, sp, #12
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	4b0f      	ldr	r3, [pc, #60]	; (8010ff4 <_svfiprintf_r+0x1f8>)
 8010fb6:	a904      	add	r1, sp, #16
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f3af 8000 	nop.w
 8010fbe:	1c42      	adds	r2, r0, #1
 8010fc0:	4606      	mov	r6, r0
 8010fc2:	d1d6      	bne.n	8010f72 <_svfiprintf_r+0x176>
 8010fc4:	89ab      	ldrh	r3, [r5, #12]
 8010fc6:	065b      	lsls	r3, r3, #25
 8010fc8:	f53f af2c 	bmi.w	8010e24 <_svfiprintf_r+0x28>
 8010fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fce:	b01d      	add	sp, #116	; 0x74
 8010fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd4:	ab03      	add	r3, sp, #12
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	462a      	mov	r2, r5
 8010fda:	4b06      	ldr	r3, [pc, #24]	; (8010ff4 <_svfiprintf_r+0x1f8>)
 8010fdc:	a904      	add	r1, sp, #16
 8010fde:	4638      	mov	r0, r7
 8010fe0:	f7ff f988 	bl	80102f4 <_printf_i>
 8010fe4:	e7eb      	b.n	8010fbe <_svfiprintf_r+0x1c2>
 8010fe6:	bf00      	nop
 8010fe8:	0801193c 	.word	0x0801193c
 8010fec:	08011946 	.word	0x08011946
 8010ff0:	00000000 	.word	0x00000000
 8010ff4:	08010d45 	.word	0x08010d45
 8010ff8:	08011942 	.word	0x08011942

08010ffc <_sbrk_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4d06      	ldr	r5, [pc, #24]	; (8011018 <_sbrk_r+0x1c>)
 8011000:	2300      	movs	r3, #0
 8011002:	4604      	mov	r4, r0
 8011004:	4608      	mov	r0, r1
 8011006:	602b      	str	r3, [r5, #0]
 8011008:	f7ef feb8 	bl	8000d7c <_sbrk>
 801100c:	1c43      	adds	r3, r0, #1
 801100e:	d102      	bne.n	8011016 <_sbrk_r+0x1a>
 8011010:	682b      	ldr	r3, [r5, #0]
 8011012:	b103      	cbz	r3, 8011016 <_sbrk_r+0x1a>
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	bd38      	pop	{r3, r4, r5, pc}
 8011018:	2000b69c 	.word	0x2000b69c

0801101c <__sread>:
 801101c:	b510      	push	{r4, lr}
 801101e:	460c      	mov	r4, r1
 8011020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011024:	f000 f8a8 	bl	8011178 <_read_r>
 8011028:	2800      	cmp	r0, #0
 801102a:	bfab      	itete	ge
 801102c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801102e:	89a3      	ldrhlt	r3, [r4, #12]
 8011030:	181b      	addge	r3, r3, r0
 8011032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011036:	bfac      	ite	ge
 8011038:	6563      	strge	r3, [r4, #84]	; 0x54
 801103a:	81a3      	strhlt	r3, [r4, #12]
 801103c:	bd10      	pop	{r4, pc}

0801103e <__swrite>:
 801103e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011042:	461f      	mov	r7, r3
 8011044:	898b      	ldrh	r3, [r1, #12]
 8011046:	05db      	lsls	r3, r3, #23
 8011048:	4605      	mov	r5, r0
 801104a:	460c      	mov	r4, r1
 801104c:	4616      	mov	r6, r2
 801104e:	d505      	bpl.n	801105c <__swrite+0x1e>
 8011050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011054:	2302      	movs	r3, #2
 8011056:	2200      	movs	r2, #0
 8011058:	f000 f868 	bl	801112c <_lseek_r>
 801105c:	89a3      	ldrh	r3, [r4, #12]
 801105e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011066:	81a3      	strh	r3, [r4, #12]
 8011068:	4632      	mov	r2, r6
 801106a:	463b      	mov	r3, r7
 801106c:	4628      	mov	r0, r5
 801106e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011072:	f000 b817 	b.w	80110a4 <_write_r>

08011076 <__sseek>:
 8011076:	b510      	push	{r4, lr}
 8011078:	460c      	mov	r4, r1
 801107a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801107e:	f000 f855 	bl	801112c <_lseek_r>
 8011082:	1c43      	adds	r3, r0, #1
 8011084:	89a3      	ldrh	r3, [r4, #12]
 8011086:	bf15      	itete	ne
 8011088:	6560      	strne	r0, [r4, #84]	; 0x54
 801108a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801108e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011092:	81a3      	strheq	r3, [r4, #12]
 8011094:	bf18      	it	ne
 8011096:	81a3      	strhne	r3, [r4, #12]
 8011098:	bd10      	pop	{r4, pc}

0801109a <__sclose>:
 801109a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801109e:	f000 b813 	b.w	80110c8 <_close_r>
	...

080110a4 <_write_r>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4d07      	ldr	r5, [pc, #28]	; (80110c4 <_write_r+0x20>)
 80110a8:	4604      	mov	r4, r0
 80110aa:	4608      	mov	r0, r1
 80110ac:	4611      	mov	r1, r2
 80110ae:	2200      	movs	r2, #0
 80110b0:	602a      	str	r2, [r5, #0]
 80110b2:	461a      	mov	r2, r3
 80110b4:	f7ef fe11 	bl	8000cda <_write>
 80110b8:	1c43      	adds	r3, r0, #1
 80110ba:	d102      	bne.n	80110c2 <_write_r+0x1e>
 80110bc:	682b      	ldr	r3, [r5, #0]
 80110be:	b103      	cbz	r3, 80110c2 <_write_r+0x1e>
 80110c0:	6023      	str	r3, [r4, #0]
 80110c2:	bd38      	pop	{r3, r4, r5, pc}
 80110c4:	2000b69c 	.word	0x2000b69c

080110c8 <_close_r>:
 80110c8:	b538      	push	{r3, r4, r5, lr}
 80110ca:	4d06      	ldr	r5, [pc, #24]	; (80110e4 <_close_r+0x1c>)
 80110cc:	2300      	movs	r3, #0
 80110ce:	4604      	mov	r4, r0
 80110d0:	4608      	mov	r0, r1
 80110d2:	602b      	str	r3, [r5, #0]
 80110d4:	f7ef fe1d 	bl	8000d12 <_close>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_close_r+0x1a>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_close_r+0x1a>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	2000b69c 	.word	0x2000b69c

080110e8 <_fstat_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d07      	ldr	r5, [pc, #28]	; (8011108 <_fstat_r+0x20>)
 80110ec:	2300      	movs	r3, #0
 80110ee:	4604      	mov	r4, r0
 80110f0:	4608      	mov	r0, r1
 80110f2:	4611      	mov	r1, r2
 80110f4:	602b      	str	r3, [r5, #0]
 80110f6:	f7ef fe18 	bl	8000d2a <_fstat>
 80110fa:	1c43      	adds	r3, r0, #1
 80110fc:	d102      	bne.n	8011104 <_fstat_r+0x1c>
 80110fe:	682b      	ldr	r3, [r5, #0]
 8011100:	b103      	cbz	r3, 8011104 <_fstat_r+0x1c>
 8011102:	6023      	str	r3, [r4, #0]
 8011104:	bd38      	pop	{r3, r4, r5, pc}
 8011106:	bf00      	nop
 8011108:	2000b69c 	.word	0x2000b69c

0801110c <_isatty_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_isatty_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7ef fe17 	bl	8000d4a <_isatty>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_isatty_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_isatty_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	2000b69c 	.word	0x2000b69c

0801112c <_lseek_r>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4d07      	ldr	r5, [pc, #28]	; (801114c <_lseek_r+0x20>)
 8011130:	4604      	mov	r4, r0
 8011132:	4608      	mov	r0, r1
 8011134:	4611      	mov	r1, r2
 8011136:	2200      	movs	r2, #0
 8011138:	602a      	str	r2, [r5, #0]
 801113a:	461a      	mov	r2, r3
 801113c:	f7ef fe10 	bl	8000d60 <_lseek>
 8011140:	1c43      	adds	r3, r0, #1
 8011142:	d102      	bne.n	801114a <_lseek_r+0x1e>
 8011144:	682b      	ldr	r3, [r5, #0]
 8011146:	b103      	cbz	r3, 801114a <_lseek_r+0x1e>
 8011148:	6023      	str	r3, [r4, #0]
 801114a:	bd38      	pop	{r3, r4, r5, pc}
 801114c:	2000b69c 	.word	0x2000b69c

08011150 <__malloc_lock>:
 8011150:	4801      	ldr	r0, [pc, #4]	; (8011158 <__malloc_lock+0x8>)
 8011152:	f7fe bec8 	b.w	800fee6 <__retarget_lock_acquire_recursive>
 8011156:	bf00      	nop
 8011158:	2000b694 	.word	0x2000b694

0801115c <__malloc_unlock>:
 801115c:	4801      	ldr	r0, [pc, #4]	; (8011164 <__malloc_unlock+0x8>)
 801115e:	f7fe bec3 	b.w	800fee8 <__retarget_lock_release_recursive>
 8011162:	bf00      	nop
 8011164:	2000b694 	.word	0x2000b694

08011168 <_malloc_usable_size_r>:
 8011168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801116c:	1f18      	subs	r0, r3, #4
 801116e:	2b00      	cmp	r3, #0
 8011170:	bfbc      	itt	lt
 8011172:	580b      	ldrlt	r3, [r1, r0]
 8011174:	18c0      	addlt	r0, r0, r3
 8011176:	4770      	bx	lr

08011178 <_read_r>:
 8011178:	b538      	push	{r3, r4, r5, lr}
 801117a:	4d07      	ldr	r5, [pc, #28]	; (8011198 <_read_r+0x20>)
 801117c:	4604      	mov	r4, r0
 801117e:	4608      	mov	r0, r1
 8011180:	4611      	mov	r1, r2
 8011182:	2200      	movs	r2, #0
 8011184:	602a      	str	r2, [r5, #0]
 8011186:	461a      	mov	r2, r3
 8011188:	f7ef fd8a 	bl	8000ca0 <_read>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_read_r+0x1e>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_read_r+0x1e>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	2000b69c 	.word	0x2000b69c

0801119c <_init>:
 801119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801119e:	bf00      	nop
 80111a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111a2:	bc08      	pop	{r3}
 80111a4:	469e      	mov	lr, r3
 80111a6:	4770      	bx	lr

080111a8 <_fini>:
 80111a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111aa:	bf00      	nop
 80111ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ae:	bc08      	pop	{r3}
 80111b0:	469e      	mov	lr, r3
 80111b2:	4770      	bx	lr
